{"title":"最短路径算法","tags":["Dijkstra","Floyd","堆","队列","洛谷","Java"],"cover":"https://cdn.gallery.uuanqin.top/img/202506100113697.webp","description":"被机试难倒了，明明很熟悉的算法偏偏就是没有手写过","katex":true,"categories":["算法与数据结构"],"abbrlink":"9df73d67","date":"2025-06-10T01:33:42.000Z","top_img":null,"summary":"本节所有算法和优化算法均有对应的题目和 Java 代码，都附在文后了。 | 最短路算法 | Floyd | Bellman-Ford | Dijkstra | Johnson（本文不涉及） | | ------ | ---------- | ------------ | ------------------ | -------------- | | 最短路类型 | 每对结点之间的最短路 | 单源最短路 | 单源最短路 | 每对结点之间的最短路 | | 作用于 | 任意图 | 任意图 | 非负权图 | 任意图 | | 能否检测负环 | ✅ | ✅ | ❌ | ✅ | | 时间复杂度 | $O(N^3)$ | $O(NM)$ | $O(M\\log M)$（优先队列） | $O(NM\\log M)$ | 本文题目难度标识：🟩简单，🟨中等，🟥困难。 定义与定理 > 不同教科书对于 walk、trail、path 的中文叫法不尽相同，注意区分！ 途径 (walk)：途径是连接一连串顶点的边的序列，可以为有限或无限长度。形式化地说，一条有限途径 $w$ 是一个边的序列 $e_1, e_2, \\ldots, e_k$，使得存在一个顶点序列 $v_0, v_1, \\ldots, v_k$ 满足 $e_i = (v_{i-1}, v_i)$，其中 $i \\in [1, k]$。这样的途径可以简写为 $v_0 \\to v_1 \\to v_2 \\to \\cdots \\to v_k$。通常来说，边的数量 $k$ 被称作这条途径的 长度（如果边是带权的，长度通常指途径上的边权之和，题目中也可能另有定义）。 迹 (trail)：对于一条途径 $w$，若 $e_1, e_2, \\ldots, e_k$ 两两互不相同，则称 $w$ 是一条迹。 路径 (path)，又称 简单路径 (simple path)：对于一条迹 $w$，若其连接的点的序列中点两两不同，则称 $w$ 是一条路径。 为了方便叙述，本文约定以下记号的含义： $n$ 为图上点的数目，$m$ 为图上边的数目； $s$ 为最短路的源点； $D(u)$ 为 $s$ 点到 $u$ 点的 实际 最短路长度； $dis(u)$ 为 $s$ 点到 $u$ 点的 估计 最短路长度。任何时候都有 $dis(u) \\geq D(u)$。..."}