{"title":"RM 和 EDF 任务调度算法在 μCOSII 上的实现","tags":["μCOS","RM","EDF","实时系统","任务管理"],"cover":"https://cdn.gallery.uuanqin.top/img/20240622164030.webp","description":"实时操作系统实验 2 实现 RM 和 EDF","categories":["嵌入式"],"abbrlink":"b1c2eea4","date":"2024-06-22T16:29:41.000Z","top_img":null,"summary":"> 文章写作背景为《实时系统设计》课程实验二。写这篇东西掉了好多头发🤬。 源码在文章后。 实验介绍 实验目的： 熟悉嵌入式实时操作系统 μC/OS 代码结构。 理解、设计和实现 RM 和 EDF 等算法，调研相关技术。 在 μC/OS 上使用 VC 运行和调试设计的程序。 实验环境： 操作系统：μC/OS-II 软件：Microsoft Visual C++ 6.0 实验原理： RM 算法。RM(Rate Monotonic) 算法根据周期任务的释放频率，即周期的长短来分配任务的优先级，周期越短的任务优先级越高。当 Di=Ti 时，RM 算法是最优的固定优先级调度算法。如有两个实时任务τA（TA=25，CA=10）、τB（TB=40，CB=10）和τC（TC=100，CC=20），采用 RM 算法调度如下图所示： EDF 算法的实现。EDF(Earliest Deadline First) 算法按照实时任务的绝对截止时间来分配优先级，截止时间越近的优先级越高。EDF 算法是最优的动态优先级调度算法。如有两个实时任务τ1（C1=1，D1=3,T1=4）和τ2（C2=2,D2=4,T2=6），采用 EDF 算法调度如下图所示： 步骤 基本认识 熟读课件和相关源码片段，我们有以下基本认识： 任务在 `main.c` 中创建，新建任务后会生成对应的 TCB 程序控制块（定义在 `ucos-ii.h` 中的 OS_TCB），并链接到 TCB 链表头中，链表尾是程序创建的空闲任务。 实验程序我们需要手动模拟时间中断，以触发 `OSTimeTick()` `OSTimeTick()` 会遍历任务链表，检查它们的延时。 `OS_SchedNew()` 是用来设定最高优先级的。默认实现是找就绪组就绪表。我们可以在里面动手脚，直接写我们的调度算法。 `OSTimeTick()` 调用 `OSIntExit()`，`OSIntExit()` 中又 `OS_SchedNew()`。所以每一次 `OSTimeTick()` 到来时，都有机会判断当前最高优先级的任务是什么。 为 TCB 块添加扩展 无论是 RM 算法还是 EDF 算法，都需要使用扩展的 TCB 块存储任务优先级数据。统一的扩展数据结构为不同算法的实现方式进行简化。..."}