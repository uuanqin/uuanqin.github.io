{"data":{"title":"mujava 的安装与使用","slug":"工具箱/软件测试工具/mujava 的安装与使用","description":"mujava 的详细安装与使用方法，以及各种问题的解决。","date":"2022-03-19T11:14:20.000Z","updated":"2025-09-26T16:05:50.734Z","language":"zh-CN","comments":true,"url":"p/fd03d8f0/","cover":"https://cdn.gallery.uuanqin.top/img/mujava.png","images":[],"content":"<p>mujava 是一款用于变异测试的工具，官网上附有完整的安装和使用教程：<a href=\"https://cs.gmu.edu/~offutt/mujava/\">muJava Home Page (gmu.edu)</a>。但在实际操作中，还是会遇到许多种问题。现将我实践过的安装教程详述如下。</p>\n<h1 id=\"文件下载\"><a class=\"markdownIt-Anchor\" href=\"#文件下载\"></a> 文件下载</h1>\n<p>官网上下载这些东西：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-4as5.png\" alt=\"\" width=\"500px\" /></p>\n<p>实际上，mujava.config 里面就一句话。自己复制过来在新建一个就行。</p>\n<p>mujava.config 里的默认内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MuJava_HOME=C:\\offutt\\mujava</span><br></pre></td></tr></table></figure>\n<h1 id=\"目录准备\"><a class=\"markdownIt-Anchor\" href=\"#目录准备\"></a> 目录准备</h1>\n<p>这部分主要是动手环节（官网上就是动手…）。在你想让 mujava 安装的地方，新建一个目录。比如：D:\\mujava。</p>\n<p>在 D:\\mujava 里新建 4 个文件夹：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-asd46.png\" alt=\"\" width=\"263px\" /></p>\n<ul>\n<li><code>classes</code>：存放编译好的 Java 源程序.class 文件</li>\n<li><code>result</code>：mujava 生成的结果文件（变异体）</li>\n<li><code>src</code>：待测的 Java 程序代码</li>\n<li><code>testset</code>：JUnit 测试用例的.class 文件</li>\n</ul>\n<p>把 <code>mujava.config</code> 放到 D:\\mujava 中。里边的内容改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MuJava_HOME=D:\\mujava</span><br></pre></td></tr></table></figure>\n<p>在 D:\\mujava 中新建两个.txt 文件，编写后续用到的命令。写好后改为.cmd 文件。（注意，这里保证运行的 mujava 目录要包含 mujava.config）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GenMutants.cmd: java mujava.gui.GenMutantsMain</span><br><span class=\"line\">RunTest.cmd: java mujava.gui.RunTestMain &gt; TestResult.txt</span><br></pre></td></tr></table></figure>\n<p>把涉及到的包全部放进来（D:\\mujava 下）：JUnit、Hamcrest、mujava.java、openjava.java、tools.java。</p>\n<p>JUnit、Hamcrest 包另外在相应官网上下载；mujava.java、openjava.java 是刚刚在 mujava 官网上下的；tools.jar 在你配置的 Java 环境中自带的包（是 Java 的标准文件）。</p>\n<p>比如我的 tools.jar 在这里（我的 Java 版本为 1.8，据说 Java 版本过高可能导致失败）：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-4asd7.png\" alt=\"\" /></p>\n<p>关于这部分，官网是这样描述的：</p>\n<blockquote>\n<p><a href=\"https://cs.gmu.edu/~offutt/mujava/\">muJava Home Page (gmu.edu)</a>:</p>\n<p>The Java CLASSPATH must include two <strong><em>µJava</em></strong> jar files and one standard Java jar file. <strong>tools.jar</strong> is standard with Java (JDK) compilers and is probably located in the “JavaHome/lib/” directory. The two <strong><em>µJava</em></strong> files are <strong>mujava.jar</strong> and <strong>openjava.jar</strong>, which are downloaded from this site.</p>\n</blockquote>\n<p>上述引用中，所谓的 <em>JavaHome</em> 可以在环境变量里查询，一般你安装 Java 环境时都会配的。</p>\n<p>这样，最终你的 D:\\mujava 会是这样的：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-sa48.png\" alt=\"\" width=\"500px\" /></p>\n<h1 id=\"环境\"><a class=\"markdownIt-Anchor\" href=\"#环境\"></a> 环境</h1>\n<p>打开控制面板，搜索环境变量：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-49-1024x453.png\" alt=\"\" /></p>\n<p>编辑系统环境变量。如果没有 CLASSPATH 就新建一个：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/imageas-50.png\" alt=\"\" width=\"500px\" /></p>\n<p>比如这样：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-51as.png\" alt=\"\" width=\"475px\" /></p>\n<h1 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\"></a> 使用</h1>\n<p>在 src 放入需要测试的 Java 源文件，<strong>注意包结构</strong>！</p>\n<p>在 classes 放入待测试文件编译好的.class 文件，<strong>注意包结构</strong>！</p>\n<p>在 testset 放入 JUnit 测试文件编译好的.class 文件，<strong>注意包结构</strong>！</p>\n<p>双击运行 GenMutants.cmd，出现以下 GUI 界面：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-52as.png\" alt=\"\" /></p>\n<p>运行结果：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-56-1024x473.png\" alt=\"\" /></p>\n<p>双击运行 RunTest.cmd，弹出另外一个 GUI 界面。开始进行测试：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-5as3.png\" alt=\"\" /></p>\n<p>点击 RUN 即可运行。等待电脑风扇猛转后，结果就生成了。</p>\n<p>（不知为什么，JUnit 测试用例采用参数化的方式的话会报错。。。）</p>\n<p>注意，小黑框里面会显示程序的运行状态，如果报错（比如找不到 JUnit、Hamcrest 包时）记得检查环境变量有没有配置好。</p>\n<p>运行结果：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/imageasd-57.png\" alt=\"\" width=\"500px\" /></p>\n<p>详细的测试结果可在 TestResult.txt 中查看。</p>\n<h1 id=\"其他问题\"><a class=\"markdownIt-Anchor\" href=\"#其他问题\"></a> 其他问题</h1>\n<h2 id=\"目录结构问题\"><a class=\"markdownIt-Anchor\" href=\"#目录结构问题\"></a> 目录结构问题</h2>\n<p>关于目录结构问题，就是你在测试文件、被测试文件的包的关系，复制到 mujava 相应文件夹时要一致。否则会报错。下图是正确的例子：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-5asd4.png\" alt=\"\" /></p>\n\n<div class=\"callout\" data-callout=\"error\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-zap\"><polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"/></svg>\n</div>\n<div class=\"callout-title-inner\">图片缺失</div>\n</div>\n<div class=\"callout-content\"><p>此位置图片缺失，原图片地址为 <a href=\"http://60.205.223.216/wp-content/uploads/2022/03/image-55.png\">http://60.205.223.216/wp-content/uploads/2022/03/image-55.png</a></p>\n</div></div><p>如果在运行测试用例杀死变异体过程中，出现诸如找不到类、空指针异常，可以试试重新运行命令多试几次。。</p>\n<h2 id=\"检查-java-版本\"><a class=\"markdownIt-Anchor\" href=\"#检查-java-版本\"></a> 检查 Java 版本</h2>\n<blockquote>\n<p>官网：Potential problems**: We have identified several potential problems with installing <em>µJava</em>.**</p>\n<p>It is important that the MuJava_HOME variable <strong>NOT</strong> have a trailing slash. This will confuse <strong><em>µJava</em></strong>.<br />\nIf you have a different version of the java compiler and the JVM, <strong><em>µJava</em></strong> may get confused. This happens sometimes when a new application on your computer updates the JVM. If you have problems compiling or killing mutants, we suggest deleting all Java components and reinstalling the latest version.<br />\nIf your tools.jar file is out of date (pre Java 1.4, we think), parts of <strong><em>µJava</em></strong> may not work.</p>\n</blockquote>\n<h2 id=\"杀不死变异体\"><a class=\"markdownIt-Anchor\" href=\"#杀不死变异体\"></a> 杀不死变异体</h2>\n<p>有少数童鞋反映测试用例杀不死变异体，MS 得分为 0%。</p>\n<p>在确认你的测试类编写对的情况下，请再次做这个检查：检查你的环境变量里，是不是把 classes 文件夹写了进去。请确保 CLASSPATH 里边<strong>没有</strong>D:/mujava/classes 文件夹。</p>\n<h1 id=\"参考链接\"><a class=\"markdownIt-Anchor\" href=\"#参考链接\"></a> 参考链接</h1>\n<ul>\n<li>mujava 官网：<a href=\"https://cs.gmu.edu/~offutt/mujava/\">muJava Home Page (gmu.edu)</a></li>\n<li>安装和使用方法（中文）：<a href=\"https://blog.csdn.net/wkw1125/article/details/51967630\">使用muJava进行变异测试_wkw1125的博客-CSDN博客_mujava</a></li>\n</ul>\n","raw":"---\ntitle: mujava 的安装与使用\ntags:\n  - Eclipse\n  - Junit\n  - mujava\n  - 安装\ncategories:\n  - 工具箱\n  - 软件测试工具\ndescription: mujava 的详细安装与使用方法，以及各种问题的解决。\ncover: 'https://cdn.gallery.uuanqin.top/img/mujava.png'\nabbrlink: fd03d8f0\ndate: 2022-03-19 19:14:20\n---\n\nmujava 是一款用于变异测试的工具，官网上附有完整的安装和使用教程：[muJava Home Page (gmu.edu)](https://cs.gmu.edu/~offutt/mujava/)。但在实际操作中，还是会遇到许多种问题。现将我实践过的安装教程详述如下。\n\n# 文件下载\n\n官网上下载这些东西：\n\n![|500](https://cdn.gallery.uuanqin.top/img/image-4as5.png)\n\n实际上，mujava.config 里面就一句话。自己复制过来在新建一个就行。\n\nmujava.config 里的默认内容：\n\n```\nMuJava_HOME=C:\\offutt\\mujava\n```\n\n# 目录准备\n\n这部分主要是动手环节（官网上就是动手.......）。在你想让 mujava 安装的地方，新建一个目录。比如：D:\\\\mujava。\n\n在 D:\\\\mujava 里新建 4 个文件夹：\n\n![|263](https://cdn.gallery.uuanqin.top/img/image-asd46.png)\n\n- `classes`：存放编译好的 Java 源程序.class 文件\n- `result`：mujava 生成的结果文件（变异体）\n- `src`：待测的 Java 程序代码\n- `testset`：JUnit 测试用例的.class 文件\n\n把 `mujava.config` 放到 D:\\\\mujava 中。里边的内容改为：\n\n```\nMuJava_HOME=D:\\mujava\n```\n\n在 D:\\\\mujava 中新建两个.txt 文件，编写后续用到的命令。写好后改为.cmd 文件。（注意，这里保证运行的 mujava 目录要包含 mujava.config）\n\n```\nGenMutants.cmd: java mujava.gui.GenMutantsMain\nRunTest.cmd: java mujava.gui.RunTestMain > TestResult.txt\n```\n\n把涉及到的包全部放进来（D:\\\\mujava 下）：JUnit、Hamcrest、mujava.java、openjava.java、tools.java。\n\nJUnit、Hamcrest 包另外在相应官网上下载；mujava.java、openjava.java 是刚刚在 mujava 官网上下的；tools.jar 在你配置的 Java 环境中自带的包（是 Java 的标准文件）。\n\n比如我的 tools.jar 在这里（我的 Java 版本为 1.8，据说 Java 版本过高可能导致失败）：\n\n![](https://cdn.gallery.uuanqin.top/img/image-4asd7.png)\n\n关于这部分，官网是这样描述的：\n\n> [muJava Home Page (gmu.edu)](https://cs.gmu.edu/~offutt/mujava/):\n>\n> The Java CLASSPATH must include two **_µJava_** jar files and one standard Java jar file. **tools.jar** is standard with Java (JDK) compilers and is probably located in the \"JavaHome/lib/\" directory. The two **_µJava_** files are **mujava.jar** and **openjava.jar**, which are downloaded from this site.\n\n上述引用中，所谓的 _JavaHome_ 可以在环境变量里查询，一般你安装 Java 环境时都会配的。\n\n这样，最终你的 D:\\\\mujava 会是这样的：\n\n![|500](https://cdn.gallery.uuanqin.top/img/image-sa48.png)\n\n# 环境\n\n打开控制面板，搜索环境变量：\n\n![](https://cdn.gallery.uuanqin.top/img/image-49-1024x453.png)\n\n编辑系统环境变量。如果没有 CLASSPATH 就新建一个：\n\n![|500](https://cdn.gallery.uuanqin.top/img/imageas-50.png)\n\n比如这样：\n\n![|475](https://cdn.gallery.uuanqin.top/img/image-51as.png)\n\n# 使用\n\n在 src 放入需要测试的 Java 源文件，**注意包结构**！\n\n在 classes 放入待测试文件编译好的.class 文件，**注意包结构**！\n\n在 testset 放入 JUnit 测试文件编译好的.class 文件，**注意包结构**！\n\n双击运行 GenMutants.cmd，出现以下 GUI 界面：\n\n![](https://cdn.gallery.uuanqin.top/img/image-52as.png)\n\n运行结果：\n\n![](https://cdn.gallery.uuanqin.top/img/image-56-1024x473.png)\n\n双击运行 RunTest.cmd，弹出另外一个 GUI 界面。开始进行测试：\n\n![](https://cdn.gallery.uuanqin.top/img/image-5as3.png)\n\n点击 RUN 即可运行。等待电脑风扇猛转后，结果就生成了。\n\n（不知为什么，JUnit 测试用例采用参数化的方式的话会报错。。。）\n\n注意，小黑框里面会显示程序的运行状态，如果报错（比如找不到 JUnit、Hamcrest 包时）记得检查环境变量有没有配置好。\n\n运行结果：\n\n![|500](https://cdn.gallery.uuanqin.top/img/imageasd-57.png)\n\n详细的测试结果可在 TestResult.txt 中查看。\n\n# 其他问题\n\n## 目录结构问题\n\n关于目录结构问题，就是你在测试文件、被测试文件的包的关系，复制到 mujava 相应文件夹时要一致。否则会报错。下图是正确的例子：\n\n![](https://cdn.gallery.uuanqin.top/img/image-5asd4.png)\n\n> [!error] 图片缺失\n> 此位置图片缺失，原图片地址为 http://60.205.223.216/wp-content/uploads/2022/03/image-55.png\n\n如果在运行测试用例杀死变异体过程中，出现诸如找不到类、空指针异常，可以试试重新运行命令多试几次。。\n\n## 检查 Java 版本\n\n> 官网：Potential problems**: We have identified several potential problems with installing _µJava_.**\n>\n> It is important that the MuJava\\_HOME variable **NOT** have a trailing slash. This will confuse **_µJava_**.\n> If you have a different version of the java compiler and the JVM, **_µJava_** may get confused. This happens sometimes when a new application on your computer updates the JVM. If you have problems compiling or killing mutants, we suggest deleting all Java components and reinstalling the latest version.\n> If your tools.jar file is out of date (pre Java 1.4, we think), parts of **_µJava_** may not work.\n\n## 杀不死变异体\n\n有少数童鞋反映测试用例杀不死变异体，MS 得分为 0%。\n\n在确认你的测试类编写对的情况下，请再次做这个检查：检查你的环境变量里，是不是把 classes 文件夹写了进去。请确保 CLASSPATH 里边**没有**D:/mujava/classes 文件夹。\n\n# 参考链接\n\n- mujava 官网：[muJava Home Page (gmu.edu)](https://cs.gmu.edu/~offutt/mujava/)\n- 安装和使用方法（中文）：[使用muJava进行变异测试\\_wkw1125的博客-CSDN博客\\_mujava](https://blog.csdn.net/wkw1125/article/details/51967630)","categories":[{"name":"工具箱","api":"api/categories/工具箱.json"},{"name":"软件测试工具","api":"api/categories/工具箱/软件测试工具.json"}],"tags":[{"name":"安装","api":"api/tags/安装.json"},{"name":"Eclipse","api":"api/tags/Eclipse.json"},{"name":"Junit","api":"api/tags/Junit.json"},{"name":"mujava","api":"api/tags/mujava.json"}]},"api":"api/posts/p/fd03d8f0.json"}