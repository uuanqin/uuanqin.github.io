{"data":{"title":"Scrapy-充分利用浏览器中的开发者工具","slug":"核心协同/Scrapy-充分利用浏览器中的开发者工具","description":"浏览器开发者工具基础向教程","date":"2024-02-20T15:59:47.000Z","updated":"2024-11-01T18:30:21.750Z","language":"zh-CN","comments":true,"url":"p/dfbe1dad/","cover":"https://cdn.gallery.uuanqin.top/img/20240221024125.webp","images":[],"content":"<p>如今大多数的浏览器（Edge、Chrome、Firefox 等）都带有开发者工具。本篇文章简单介绍利用开发者工具辅助我们选择需要爬取的内容，方便 Scrapy 爬虫的开发。</p>\n<blockquote>\n<p>如果你对 Scrapy 还不熟悉，可以先看这一篇文章：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/cf3e4a7b/\"><span class=\"yukari\">站内文章</span>Scrapy-入门篇</a>。</p>\n</blockquote>\n\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">查阅实时浏览器 DOM 的注意事项</div>\n</div>\n<div class=\"callout-content\"><p>由于开发者工具工作于实时浏览器 DOM，因此你在工具中看到的页面代码并非原始 HTML 代码，它可能被浏览器清除过一些内容或者执行了某些 Javascript 脚本。就比如在 Firefox 浏览器，它会自动为表格增加 <code>&lt;tbody&gt;</code> 标签。Scrapy 不会修改原 HTML，因此如果你的爬虫 XPath 表达式含有 <code>&lt;tbody&gt;</code>，你将不会提取到任何信息。<br />\n正因此，使用 Scrapy 时你需要注意：</p>\n<ol>\n<li>当你在为 Scrapy 寻找 XPath、查阅 DOM 时，请取消激活 JavaScript。例如在 Edge 浏览器中设置方法为打开开发者工具设置（左下角三个圆点），首选项&gt;调试程序&gt;禁用 JavaScript。</li>\n<li>不要使用完整的 XPath 表达式。使用相对路径，或者基于属性（比如 <code>id</code>，<code>class</code>，<code>width</code> 等）进行筛选，或者其它可以助于定位的特性如 <code>contains(@href, 'image')</code></li>\n<li>不要在 XPath 表达式中使用 <code>&lt;tbody&gt;</code> 元素，除非你知道自己正在做什么。</li>\n</ol>\n</div></div><h1 id=\"检查元素\"><a class=\"markdownIt-Anchor\" href=\"#检查元素\"></a> 检查元素</h1>\n<p>以英文名人名言网站 <a href=\"https://quotes.toscrape.com/\">quotes.toscrape.com</a> 为例。假如我们需要提取其中的名言，我们可以直接右击名言，选择弹出菜单中的「检查」即可打开开发者工具。此时开发者工具直接打开「元素」页面，对应的名言将高亮显示。</p>\n<blockquote>\n<p>打开开发者工具的快捷键为<kbd>F12</kbd></p>\n</blockquote>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240221002646.webp\" alt=\"image.png\" /></p>\n<p>鼠标在「元素」中划过 HTML 块时，左侧对应的元素将高亮显示。按下「检查」按钮（快捷键 Ctrl+Shift+C，可以随时呼出开发者工具面板），可以实现鼠标划过网页时高亮显示 HTML 块，单击即可固定。此外，右键某一个 HTML 块，选择「滚动到视图」也可以轻松定位元素在网页中的位置。</p>\n<p>我们可以手动展开或折叠 HTML 代码，右键我们想要爬取的内容，选择复制 XPath。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240221003616.webp\" alt=\"image.png\" /></p>\n<p>这样你就可以轻松定位需要爬取元素的位置。</p>\n<p>我们可以现在打开 Scrapy shell 验证一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy shell <span class=\"string\">&quot;https://quotes.toscrape.com/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">1</span>]: response.xpath(<span class=\"string\">&quot;/html/body/div/div[2]/div[1]/div[1]/span[1]/text()&quot;</span>).getall()</span><br><span class=\"line\">Out[<span class=\"number\">1</span>]: [<span class=\"string\">&#x27;“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>但是这个完整 XPath 表达显得不太灵活。通过开发者工具我们观察到网站中一句名言的结构是这样的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;quote&quot;</span> <span class=\"attr\">itemscope</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">itemtype</span>=<span class=\"string\">&quot;http://schema.org/CreativeWork&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span>“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>by <span class=\"tag\">&lt;<span class=\"name\">small</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;author&quot;</span>&gt;</span>Albert Einstein<span class=\"tag\">&lt;/<span class=\"name\">small</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/author/Albert-Einstein&quot;</span>&gt;</span>(about)<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tags&quot;</span>&gt;</span></span><br><span class=\"line\">\t\tTags:</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;keywords&quot;</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;keywords&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;change,deep-thoughts,thinking,world&quot;</span>&gt;</span> </span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tag&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/tag/change/page/1/&quot;</span>&gt;</span>change<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tag&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/tag/deep-thoughts/page/1/&quot;</span>&gt;</span>deep-thoughts<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tag&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/tag/thinking/page/1/&quot;</span>&gt;</span>thinking<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tag&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/tag/world/page/1/&quot;</span>&gt;</span>world<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> </span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一个页面就有 10 个这样的结构（10 句名言），每个结构里面都包含：两个 <code>&lt;span&gt;</code>，一个 <code>&lt;div&gt;</code>。</p>\n<p>利用一些 XPath 知识我们可以定位名言位置。在 Scrapy shell 中输入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">2</span>]: response.xpath(<span class=\"string\">&#x27;//span[has-class(&quot;text&quot;)]/text()&#x27;</span>).getall()</span><br><span class=\"line\">Out[<span class=\"number\">2</span>]:</span><br><span class=\"line\">[<span class=\"string\">&#x27;“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;“It is our choices, Harry, that show what we truly are, far more than our abilities.”&#x27;</span>,</span><br><span class=\"line\"> <span class=\"string\">&#x27;“There are only two ways to live your life. One is as though nothing is a miracle. The other is as though everything is a miracle.”&#x27;</span>......</span><br></pre></td></tr></table></figure>\n<h1 id=\"网络工具\"><a class=\"markdownIt-Anchor\" href=\"#网络工具\"></a> 网络工具</h1>\n<p>有时候我们爬取的网页是动态网页，这些网页的许多部分是通过多次网络请求实现的。考虑这个例子： <a href=\"https://quotes.toscrape.com/scroll\">quotes.toscrape.com/scroll</a>。与之前的网站不一样的是，这个网站的页面可以无限滚动，不需要手动点击翻页按钮。如果我们尝试在 Scrapy shell 中打开这个网页，我们会发现网站除了一些基本的框架以外啥也没有。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy shell <span class=\"string\">&quot;quotes.toscrape.com/scroll&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">1</span>]: view(response)</span><br><span class=\"line\">Out[<span class=\"number\">1</span>]: <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240221015211.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<p>我们重新在浏览器输入网址 <a href=\"http://quotes.toscrape.com/scroll\">quotes.toscrape.com/scroll</a> 。按<kbd>F12</kbd>打开开发者工具，点击「网络」选项卡。刷新页面，我们将看到在这个过程中的几条网络请求。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240221020816.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<p>点击名称为 <code>scroll</code> 的请求，点击弹出的「预览」标签，我们可以看到这个请求渲染出的 HTML 画面（是不是和之前用 <code>view(response)</code> 我们看到的一样？），点击「响应」标签我们可以看到该请求得到的响应内容。</p>\n<p>观察其它的请求，发现有一些 css 和 js 类型的文件，但我们真正感兴趣的是名称为 <code>quotes?page=1</code> 的类型为 <code>xhr</code> 的文件（某些浏览器为 <code>json</code>）。点击这个请求，通过「标头」标签中可以知道请求的 URL 为： <a href=\"https://quotes.toscrape.com/api/quotes?page=1\">https://quotes.toscrape.com/api/quotes?page=1</a> 。我们使用浏览器再新建标签页访问这个链接可以直接查看这个 json 文件的内容，这样做也便于查看。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;has_next&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;page&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;quotes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;goodreads_link&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/author/show/9810.Albert_Einstein&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Albert Einstein&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;slug&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Albert-Einstein&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;tags&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                <span class=\"string\">&quot;change&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;deep-thoughts&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;thinking&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>观察得知：</p>\n<ul>\n<li>URL 参数中 <code>page=1</code> 应该表示页面标号</li>\n<li><code>has_next</code> 属性应该是暗示了当前页面还有没有下一页，有则为 <code>true</code>。（你可以看看 <a href=\"https://quotes.toscrape.com/api/quotes?page=10\">https://quotes.toscrape.com/api/quotes?page=10</a> ）</li>\n<li><code>quotes</code> 是一个包含当前页面名言的列表。</li>\n</ul>\n<p>据此，我们可以编写出这样的爬虫：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QuoteSpider</span>(scrapy.Spider):</span><br><span class=\"line\">    name = <span class=\"string\">&quot;quote_scoll&quot;</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">&quot;quotes.toscrape.com&quot;</span>]</span><br><span class=\"line\">    page = <span class=\"number\">1</span></span><br><span class=\"line\">    start_urls = [<span class=\"string\">&quot;https://quotes.toscrape.com/api/quotes?page=1&quot;</span>] <span class=\"comment\"># 从第一页开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">parse</span>(<span class=\"params\">self, response</span>):</span><br><span class=\"line\">        data = json.loads(response.text)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> quote <span class=\"keyword\">in</span> data[<span class=\"string\">&quot;quotes&quot;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> &#123;<span class=\"string\">&quot;quote&quot;</span>: quote[<span class=\"string\">&quot;text&quot;</span>]&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> data[<span class=\"string\">&quot;has_next&quot;</span>]: <span class=\"comment\"># 检查has_next字段值</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.page += <span class=\"number\">1</span></span><br><span class=\"line\">            url = <span class=\"string\">f&quot;https://quotes.toscrape.com/api/quotes?page=<span class=\"subst\">&#123;self.page&#125;</span>&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(url=url, callback=<span class=\"variable language_\">self</span>.parse)</span><br></pre></td></tr></table></figure>\n<p>执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy crawl quote_scoll -O quote_scoll.jsonlines</span><br></pre></td></tr></table></figure>\n<h1 id=\"进阶小知识使用-curl\"><a class=\"markdownIt-Anchor\" href=\"#进阶小知识使用-curl\"></a> 【进阶小知识】使用 cURL</h1>\n<p>在更复杂的情况中，我们可能需要增加 <code>header</code> 和 <code>cookies</code> 才能使爬虫继续生成新的 URL。我们可以利用开发者工具中将请求导出为 cURL 的格式：在「网络」标签页中右键请求，选择「复制为 cURL」。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240221022843.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>然后利用这个网站，将 cURL 翻译为 Scrapy 中的 <code>Request</code>：<a href=\"https://michael-shub.github.io/curl2scrapy/\">curl2scrapy - cURL command -&gt; Scrapy request translator. (michael-shub.github.io)</a></p>\n<p>经过一些细枝末节的调整，我们的爬虫可以是这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> Request</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##### 翻译后的 cURL 内容 #######</span></span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://quotes.toscrape.com/api/quotes?page=1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;authority&quot;</span>: <span class=\"string\">&quot;quotes.toscrape.com&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;accept&quot;</span>: <span class=\"string\">&quot;*/*&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;accept-language&quot;</span>: <span class=\"string\">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;cache-control&quot;</span>: <span class=\"string\">&quot;no-cache&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;pragma&quot;</span>: <span class=\"string\">&quot;no-cache&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;referer&quot;</span>: <span class=\"string\">&quot;https://quotes.toscrape.com/scroll&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sec-ch-ua&quot;</span>: <span class=\"string\">&quot;\\&quot;Not A(Brand\\&quot;;v=\\&quot;99\\&quot;, \\&quot;Microsoft Edge\\&quot;;v=\\&quot;121\\&quot;, \\&quot;Chromium\\&quot;;v=\\&quot;121\\&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sec-ch-ua-mobile&quot;</span>: <span class=\"string\">&quot;?0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sec-ch-ua-platform&quot;</span>: <span class=\"string\">&quot;\\&quot;Windows\\&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sec-fetch-dest&quot;</span>: <span class=\"string\">&quot;empty&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sec-fetch-mode&quot;</span>: <span class=\"string\">&quot;cors&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sec-fetch-site&quot;</span>: <span class=\"string\">&quot;same-origin&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;user-agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;x-requested-with&quot;</span>: <span class=\"string\">&quot;XMLHttpRequest&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">request = Request(</span><br><span class=\"line\">    url=url,</span><br><span class=\"line\">    method=<span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">    dont_filter=<span class=\"literal\">True</span>,</span><br><span class=\"line\">    headers=headers,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">######## END ########</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QuoteSpider</span>(scrapy.Spider):</span><br><span class=\"line\">    name = <span class=\"string\">&quot;quote_scoll&quot;</span></span><br><span class=\"line\">    allowed_domains = [<span class=\"string\">&quot;quotes.toscrape.com&quot;</span>]</span><br><span class=\"line\">    page = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 还记得start_requests函数吗？</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">start_requests</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [request]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">parse</span>(<span class=\"params\">self, response</span>):</span><br><span class=\"line\">        data = json.loads(response.text)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> quote <span class=\"keyword\">in</span> data[<span class=\"string\">&quot;quotes&quot;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> &#123;<span class=\"string\">&quot;quote&quot;</span>: quote[<span class=\"string\">&quot;text&quot;</span>]&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> data[<span class=\"string\">&quot;has_next&quot;</span>]:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.page += <span class=\"number\">1</span></span><br><span class=\"line\">            url = <span class=\"string\">f&quot;https://quotes.toscrape.com/api/quotes?page=<span class=\"subst\">&#123;self.page&#125;</span>&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(url=url, callback=<span class=\"variable language_\">self</span>.parse)</span><br></pre></td></tr></table></figure>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://docs.scrapy.org/en/latest/topics/developer-tools.html#topics-developer-tools\">Using your browser’s Developer Tools for scraping — Scrapy 2.11.1 documentation</a></li>\n</ul>\n","raw":"---\ntitle: Scrapy-充分利用浏览器中的开发者工具\ntags:\n  - python\n  - Scrapy\n  - Edge\ncover: 'https://cdn.gallery.uuanqin.top/img/20240221024125.webp'\ndescription: 浏览器开发者工具基础向教程\nabbrlink: dfbe1dad\ncategories:\n  - 核心协同\ndate: 2024-02-20 23:59:47\ntop_img:\n---\n\n如今大多数的浏览器（Edge、Chrome、Firefox 等）都带有开发者工具。本篇文章简单介绍利用开发者工具辅助我们选择需要爬取的内容，方便 Scrapy 爬虫的开发。\n\n> 如果你对 Scrapy 还不熟悉，可以先看这一篇文章：[[Scrapy-入门篇]]。\n\n> [!warning] 查阅实时浏览器 DOM 的注意事项\n> 由于开发者工具工作于实时浏览器 DOM，因此你在工具中看到的页面代码并非原始 HTML 代码，它可能被浏览器清除过一些内容或者执行了某些 Javascript 脚本。就比如在 Firefox 浏览器，它会自动为表格增加 `<tbody>` 标签。Scrapy 不会修改原 HTML，因此如果你的爬虫 XPath 表达式含有 `<tbody>`，你将不会提取到任何信息。\n> 正因此，使用 Scrapy 时你需要注意：\n> 1. 当你在为 Scrapy 寻找 XPath、查阅 DOM 时，请取消激活 JavaScript。例如在 Edge 浏览器中设置方法为打开开发者工具设置（左下角三个圆点），首选项>调试程序>禁用 JavaScript。\n> 2. 不要使用完整的 XPath 表达式。使用相对路径，或者基于属性（比如 `id`，`class`，`width` 等）进行筛选，或者其它可以助于定位的特性如 `contains(@href, 'image')`\n> 3. 不要在 XPath 表达式中使用 `<tbody>` 元素，除非你知道自己正在做什么。\n\n# 检查元素\n\n以英文名人名言网站 [quotes.toscrape.com](https://quotes.toscrape.com/) 为例。假如我们需要提取其中的名言，我们可以直接右击名言，选择弹出菜单中的「检查」即可打开开发者工具。此时开发者工具直接打开「元素」页面，对应的名言将高亮显示。\n\n> 打开开发者工具的快捷键为<kbd>F12</kbd>\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240221002646.webp)\n\n鼠标在「元素」中划过 HTML 块时，左侧对应的元素将高亮显示。按下「检查」按钮（快捷键 Ctrl+Shift+C，可以随时呼出开发者工具面板），可以实现鼠标划过网页时高亮显示 HTML 块，单击即可固定。此外，右键某一个 HTML 块，选择「滚动到视图」也可以轻松定位元素在网页中的位置。\n\n我们可以手动展开或折叠 HTML 代码，右键我们想要爬取的内容，选择复制 XPath。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240221003616.webp)\n\n这样你就可以轻松定位需要爬取元素的位置。\n\n我们可以现在打开 Scrapy shell 验证一下：\n\n```python\nscrapy shell \"https://quotes.toscrape.com/\"\n\nIn [1]: response.xpath(\"/html/body/div/div[2]/div[1]/div[1]/span[1]/text()\").getall()\nOut[1]: ['“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”']\n```\n\n但是这个完整 XPath 表达显得不太灵活。通过开发者工具我们观察到网站中一句名言的结构是这样的：\n\n```html\n<div class=\"quote\" itemscope=\"\" itemtype=\"http://schema.org/CreativeWork\">\n\t<span class=\"text\" itemprop=\"text\">“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”</span>\n\t<span>by <small class=\"author\" itemprop=\"author\">Albert Einstein</small>\n\t<a href=\"/author/Albert-Einstein\">(about)</a>\n\t</span>\n\t<div class=\"tags\">\n\t\tTags:\n\t\t<meta class=\"keywords\" itemprop=\"keywords\" content=\"change,deep-thoughts,thinking,world\"> \n\t\t<a class=\"tag\" href=\"/tag/change/page/1/\">change</a>\n\t\t<a class=\"tag\" href=\"/tag/deep-thoughts/page/1/\">deep-thoughts</a>\n\t\t<a class=\"tag\" href=\"/tag/thinking/page/1/\">thinking</a>\n\t\t<a class=\"tag\" href=\"/tag/world/page/1/\">world</a> \n\t</div>\n</div>\n```\n\n一个页面就有 10 个这样的结构（10 句名言），每个结构里面都包含：两个 `<span>`，一个 `<div>`。\n\n利用一些 XPath 知识我们可以定位名言位置。在 Scrapy shell 中输入：\n\n```python\nIn [2]: response.xpath('//span[has-class(\"text\")]/text()').getall()\nOut[2]:\n['“The world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.”',\n '“It is our choices, Harry, that show what we truly are, far more than our abilities.”',\n '“There are only two ways to live your life. One is as though nothing is a miracle. The other is as though everything is a miracle.”'......\n```\n\n# 网络工具\n\n有时候我们爬取的网页是动态网页，这些网页的许多部分是通过多次网络请求实现的。考虑这个例子： [quotes.toscrape.com/scroll](https://quotes.toscrape.com/scroll)。与之前的网站不一样的是，这个网站的页面可以无限滚动，不需要手动点击翻页按钮。如果我们尝试在 Scrapy shell 中打开这个网页，我们会发现网站除了一些基本的框架以外啥也没有。\n\n```python\nscrapy shell \"quotes.toscrape.com/scroll\"\n\nIn [1]: view(response)\nOut[1]: True\n```\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/20240221015211.webp)\n\n我们重新在浏览器输入网址 quotes.toscrape.com/scroll 。按<kbd>F12</kbd>打开开发者工具，点击「网络」选项卡。刷新页面，我们将看到在这个过程中的几条网络请求。\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/20240221020816.webp)\n\n点击名称为 `scroll` 的请求，点击弹出的「预览」标签，我们可以看到这个请求渲染出的 HTML 画面（是不是和之前用 `view(response)` 我们看到的一样？），点击「响应」标签我们可以看到该请求得到的响应内容。\n\n观察其它的请求，发现有一些 css 和 js 类型的文件，但我们真正感兴趣的是名称为 `quotes?page=1` 的类型为 `xhr` 的文件（某些浏览器为 `json`）。点击这个请求，通过「标头」标签中可以知道请求的 URL 为： https://quotes.toscrape.com/api/quotes?page=1 。我们使用浏览器再新建标签页访问这个链接可以直接查看这个 json 文件的内容，这样做也便于查看。\n\n```json\n{\n    \"has_next\": true,\n    \"page\": 1,\n    \"quotes\": [\n        {\n            \"author\": {\n                \"goodreads_link\": \"/author/show/9810.Albert_Einstein\",\n                \"name\": \"Albert Einstein\",\n                \"slug\": \"Albert-Einstein\"\n            },\n            \"tags\": [\n                \"change\",\n                \"deep-thoughts\",\n                \"thinking\",\n                \"world\"\n            ],\n......\n```\n\n观察得知：\n\n- URL 参数中 `page=1` 应该表示页面标号\n- `has_next` 属性应该是暗示了当前页面还有没有下一页，有则为 `true`。（你可以看看 https://quotes.toscrape.com/api/quotes?page=10 ）\n- `quotes` 是一个包含当前页面名言的列表。\n\n据此，我们可以编写出这样的爬虫：\n\n```python\nimport scrapy\nimport json\n\nclass QuoteSpider(scrapy.Spider):\n    name = \"quote_scoll\"\n    allowed_domains = [\"quotes.toscrape.com\"]\n    page = 1\n    start_urls = [\"https://quotes.toscrape.com/api/quotes?page=1\"] # 从第一页开始\n\n    def parse(self, response):\n        data = json.loads(response.text)\n        for quote in data[\"quotes\"]:\n            yield {\"quote\": quote[\"text\"]}\n        if data[\"has_next\"]: # 检查has_next字段值\n            self.page += 1\n            url = f\"https://quotes.toscrape.com/api/quotes?page={self.page}\"\n            yield scrapy.Request(url=url, callback=self.parse)\n```\n\n执行：\n\n```sh\nscrapy crawl quote_scoll -O quote_scoll.jsonlines\n```\n\n# 【进阶小知识】使用 cURL\n\n在更复杂的情况中，我们可能需要增加 `header` 和 `cookies` 才能使爬虫继续生成新的 URL。我们可以利用开发者工具中将请求导出为 cURL 的格式：在「网络」标签页中右键请求，选择「复制为 cURL」。\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240221022843.webp)\n\n然后利用这个网站，将 cURL 翻译为 Scrapy 中的 `Request`：[curl2scrapy - cURL command -> Scrapy request translator. (michael-shub.github.io)](https://michael-shub.github.io/curl2scrapy/)\n\n经过一些细枝末节的调整，我们的爬虫可以是这样的：\n\n```python\nimport scrapy\nimport json\n\nfrom scrapy import Request\n\n##### 翻译后的 cURL 内容 #######\n\nurl = 'https://quotes.toscrape.com/api/quotes?page=1'\n\nheaders = {\n    \"authority\": \"quotes.toscrape.com\",\n    \"accept\": \"*/*\",\n    \"accept-language\": \"zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\",\n    \"cache-control\": \"no-cache\",\n    \"pragma\": \"no-cache\",\n    \"referer\": \"https://quotes.toscrape.com/scroll\",\n    \"sec-ch-ua\": \"\\\"Not A(Brand\\\";v=\\\"99\\\", \\\"Microsoft Edge\\\";v=\\\"121\\\", \\\"Chromium\\\";v=\\\"121\\\"\",\n    \"sec-ch-ua-mobile\": \"?0\",\n    \"sec-ch-ua-platform\": \"\\\"Windows\\\"\",\n    \"sec-fetch-dest\": \"empty\",\n    \"sec-fetch-mode\": \"cors\",\n    \"sec-fetch-site\": \"same-origin\",\n    \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0\",\n    \"x-requested-with\": \"XMLHttpRequest\"\n}\n\nrequest = Request(\n    url=url,\n    method='GET',\n    dont_filter=True,\n    headers=headers,\n)\n\n######## END ########\n\nclass QuoteSpider(scrapy.Spider):\n    name = \"quote_scoll\"\n    allowed_domains = [\"quotes.toscrape.com\"]\n    page = 1\n\n    # 还记得start_requests函数吗？\n    def start_requests(self):\n        return [request]\n\n    def parse(self, response):\n        data = json.loads(response.text)\n        for quote in data[\"quotes\"]:\n            yield {\"quote\": quote[\"text\"]}\n        if data[\"has_next\"]:\n            self.page += 1\n            url = f\"https://quotes.toscrape.com/api/quotes?page={self.page}\"\n            yield scrapy.Request(url=url, callback=self.parse)\n```\n\n# 本文参考\n- [Using your browser’s Developer Tools for scraping — Scrapy 2.11.1 documentation](https://docs.scrapy.org/en/latest/topics/developer-tools.html#topics-developer-tools)","categories":[{"name":"核心协同","api":"api/categories/核心协同.json"}],"tags":[{"name":"python","api":"api/tags/python.json"},{"name":"Scrapy","api":"api/tags/Scrapy.json"},{"name":"Edge","api":"api/tags/Edge.json"}]},"api":"api/posts/p/dfbe1dad.json"}