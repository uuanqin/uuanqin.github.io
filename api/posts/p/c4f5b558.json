{"data":{"title":"责任链模式——推卸责任","slug":"高质量代码及设计模式/责任链模式——推卸责任","description":"链式处理责任","date":"2025-08-06T16:35:06.000Z","updated":"2025-08-06T16:39:20.776Z","language":"zh-CN","comments":true,"url":"p/c4f5b558/","cover":"https://cdn.gallery.uuanqin.top/img/202508070037052.webp","images":[],"content":"<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202410090024663.webp\" alt=\"image.png\" width=\"475px\" /></p>\n\n<div class=\"callout\" data-callout=\"tldr\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-clipboard-list\"><rect width=\"8\" height=\"4\" x=\"8\" y=\"2\" rx=\"1\" ry=\"1\"/><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"/><path d=\"M12 11h4\"/><path d=\"M12 16h4\"/><path d=\"M8 11h.01\"/><path d=\"M8 16h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">责任链模式 Chain Of Responsibility Design Pattern</div>\n</div>\n<div class=\"callout-content\"><p>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.——GoF<br />\n将请求的发送和接收解耦，让多个接收对象都有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。</p>\n</div></div><p>将多个对象组成一条职责链，然后按照它们在职责链上的顺序一个一个地找出到底应该谁来负责处理。使用责任链模式可以弱化“请求方”和“处理方”之间的关联关系。</p>\n<p>登场角色：</p>\n<ul>\n<li>Handler（处理者）：Handler 角色定义了处理请求的接口（API）。Handler 角色知道“下一个处理者”是谁，如果自己无法处理请求，它会将请求转给“下一个处理者”。当然，“下一个处理者”也是 Handler 角色。</li>\n<li>ConcreteHandler（具体的处理者）：ConcreteHandler 角色是处理请求的具体角色。</li>\n<li>Client（请求者）：Client 角色是向第一个 ConcreteHandler 角色发送请求的角色。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Client</span><br><span class=\"line\">abstract class Handler&#123;</span><br><span class=\"line\">\tnext</span><br><span class=\"line\">\t&#123;method&#125; &#123;abstract&#125; request</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteHandler1&#123;</span><br><span class=\"line\">\t&#123;method&#125; request</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteHandler2&#123;</span><br><span class=\"line\">\t&#123;method&#125; request</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Client -&gt; Handler : Request &gt;</span><br><span class=\"line\">Handler o--&gt; Handler</span><br><span class=\"line\">Handler &lt;|-- ConcreteHandler1</span><br><span class=\"line\">Handler &lt;|-- ConcreteHandler2</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>request()</code> 方法中一般写明自己的处理逻辑，以及调用字段 <code>next</code> 去处理的逻辑。具体代码详看接下来的例子。</p>\n</blockquote>\n<p>特点：</p>\n<ul>\n<li>弱化了发出请求的人和处理请求的人之间的关系。「发出请求的人」不需要知道处理请求的人各自责任分担情况。</li>\n<li>同模板模式、策略模式一样，责任链模式利于代码的复用和扩展\n<ul>\n<li>配置灵活：可以动态改变职责链</li>\n<li>应对代码复杂性：每个模块专注于自己的工作</li>\n</ul>\n</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>推卸请求可能会导致处理延迟。需要自己权衡。</li>\n</ul>\n<p>相关的设计模式：</p>\n<ul>\n<li>Composite 模式 (第 11 章)：Handler 角色经常会使用 Composite 模式。</li>\n<li>Command 模式 (第 23 章)：有时会使用 Command 模式向 Handler 角色发送请求。</li>\n</ul>\n<h1 id=\"例子构造责任链的细节\"><a class=\"markdownIt-Anchor\" href=\"#例子构造责任链的细节\"></a> 例子——构造责任链的细节</h1>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Trouble</td>\n<td>表示发生的问题的类。它带有问题编号（number）</td>\n</tr>\n<tr>\n<td>Support</td>\n<td>用来解决问题的抽象类</td>\n</tr>\n<tr>\n<td>NoSupport</td>\n<td>用来解决问题的具体类 (永远“不处理问题”)</td>\n</tr>\n<tr>\n<td>LimitSupport</td>\n<td>用来解决问题的具体类（仅解决编号小于指定编号的问题）</td>\n</tr>\n<tr>\n<td>Specialsupport</td>\n<td>用来解决问题的具体类（仅解决指定编号的问题）</td>\n</tr>\n<tr>\n<td>Main</td>\n<td>制作 <code>support</code> 的职责链，制造问题并测试程序行为</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Main</span><br><span class=\"line\">abstract class Support&#123;</span><br><span class=\"line\">\t- name</span><br><span class=\"line\">\t- next</span><br><span class=\"line\">\t+ &#123;method&#125; support</span><br><span class=\"line\">\t+ &#123;method&#125; setNext</span><br><span class=\"line\">\t# &#123;method&#125; &#123;abstract&#125; resolve</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class NoSupport&#123;</span><br><span class=\"line\">\t# &#123;method&#125; resolve</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class LimitSupport&#123;</span><br><span class=\"line\">\t- limit</span><br><span class=\"line\">\t# &#123;method&#125; resolve</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class SpecialSupport&#123;</span><br><span class=\"line\">\t- number</span><br><span class=\"line\">\t# &#123;method&#125; resolve</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Main -&gt; Support : Request &gt;</span><br><span class=\"line\">Support o--&gt; Support</span><br><span class=\"line\">Support &lt;|-- NoSupport</span><br><span class=\"line\">Support &lt;|-- LimitSupport</span><br><span class=\"line\">Support &lt;|-- SpecialSupport</span><br></pre></td></tr></table></figure>\n<p>下面给出完整代码案例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Trouble</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> number; <span class=\"comment\">// 问题编号</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Trouble</span><span class=\"params\">(<span class=\"type\">int</span> number)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.number = number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getNumber</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;[问题编号：&quot;</span>+number+<span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Support 抽象类代码如下。<code>public void support(Trouble trouble)</code> 方法采用了模板模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Support 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Support</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Support next; <span class=\"comment\">// 要推卸给的对象。通过setNext函数设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">support</span><span class=\"params\">(Trouble trouble)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resolve(trouble)) &#123;</span><br><span class=\"line\">            done(trouble);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            next.support(trouble); <span class=\"comment\">// 解决不了问题就递归调用链条</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fail(trouble);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 重要技巧</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Support <span class=\"title function_\">setNext</span><span class=\"params\">(Support next)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNextButNotReturn</span><span class=\"params\">(Support next)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Support</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;[&quot;</span> + name + <span class=\"string\">&quot;]&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"type\">boolean</span> <span class=\"title function_\">resolve</span><span class=\"params\">(Trouble trouble)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">done</span> <span class=\"params\">(Trouble trouble)</span>&#123;</span><br><span class=\"line\">        System.out.println(trouble+<span class=\"string\">&quot; 已经被 &quot;</span>+<span class=\"built_in\">this</span>+<span class=\"string\">&quot;解决&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span>  <span class=\"keyword\">void</span> <span class=\"title function_\">fail</span> <span class=\"params\">(Trouble trouble)</span>&#123;</span><br><span class=\"line\">        System.out.println(trouble+<span class=\"string\">&quot; 无法被 &quot;</span>+<span class=\"built_in\">this</span>+<span class=\"string\">&quot;解决&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Support</code> 的实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Support 的实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NoSupport</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Support</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NoSupport</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">resolve</span><span class=\"params\">(Trouble trouble)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LimitSupport</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Support</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> limit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LimitSupport</span><span class=\"params\">(String name, <span class=\"type\">int</span> limit)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.limit = limit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">resolve</span><span class=\"params\">(Trouble trouble)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> trouble.getNumber() &lt; limit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpecialSupport</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Support</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> number;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SpecialSupport</span><span class=\"params\">(String name, <span class=\"type\">int</span> number)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.number = number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">resolve</span><span class=\"params\">(Trouble trouble)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> trouble.getNumber() == number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>调用方代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Support</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoSupport</span>(<span class=\"string\">&quot;不予通过方案&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">Support</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LimitSupport</span>(<span class=\"string\">&quot;不及格方案&quot;</span>,<span class=\"number\">60</span>);</span><br><span class=\"line\">\t<span class=\"type\">Support</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpecialSupport</span>(<span class=\"string\">&quot;满分方案&quot;</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 责任链形成s1-&gt;s2-&gt;s3：</span></span><br><span class=\"line\">\ts1.setNext(s2).setNext(s3);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 用这条链处理以下 3 个问题：</span></span><br><span class=\"line\">\ts1.support(<span class=\"keyword\">new</span> <span class=\"title class_\">Trouble</span>(<span class=\"number\">13</span>)); <span class=\"comment\">// [问题编号：13] 已经被 [不及格方案]解决</span></span><br><span class=\"line\">\ts1.support(<span class=\"keyword\">new</span> <span class=\"title class_\">Trouble</span>(<span class=\"number\">64</span>)); <span class=\"comment\">// [问题编号：64] 无法被 [满分方案]解决</span></span><br><span class=\"line\">\ts1.support(<span class=\"keyword\">new</span> <span class=\"title class_\">Trouble</span>(<span class=\"number\">100</span>));<span class=\"comment\">// [问题编号：100] 已经被 [满分方案]解决</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重要技巧：<code>Support</code> 抽象类中 <code>setNext()</code> 除了设置 next 外，还 <code>return next;</code>。这样可以有</p>\n<p><code>h1.setNext(h2).setNext(h3).setNext(h4).setNext(h5)</code> 这样的责任链构造。</p>\n\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">责任链构造的错误示例</div>\n</div>\n<div class=\"callout-content\"><p>请注意，这种责任链构造方式是<strong>错误的</strong>：<code>h1.setNext(h2.setNext(h3.setNext(h4.setNext(h5))));</code> 这会导致构造这样一个责任链：<code>h1-&gt;h5</code>（想一想为什么？）</p>\n</div></div><p>如果 <code>setNext()</code> 中单纯设置 <code>next</code>，不 <code>return next;</code> 的话，责任链构造方式只能是这个样子： <code>h1.setNext(h2); h2.setNext(h3)</code> …</p>\n<h1 id=\"变体引入责任链构造类\"><a class=\"markdownIt-Anchor\" href=\"#变体引入责任链构造类\"></a> 变体：引入责任链构造类</h1>\n<p>在上面的代码中，我们直接在 main 函数中使用责任链的头结点 <code>s1</code> 不断进行构造。我们可以引用新的类 <code>SupportChain</code> 来管理这个链条。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SupportChain</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 记录链条的首尾结点</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">Support</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">Support</span> <span class=\"variable\">tail</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addSupport</span><span class=\"params\">(Support support)</span> &#123;</span><br><span class=\"line\">    support.setNext(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      head = support;</span><br><span class=\"line\">      tail = support;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tail.setNext(support);</span><br><span class=\"line\">    tail = support;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">support</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      head.handle();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">SupportChain</span> <span class=\"variable\">chain</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SupportChain</span>();</span><br><span class=\"line\">\tchain.addSupport(<span class=\"keyword\">new</span> <span class=\"title class_\">LimitSupport</span>(<span class=\"string\">&quot;不及格方案&quot;</span>,<span class=\"number\">60</span>));</span><br><span class=\"line\">\tchain.addSupport(<span class=\"keyword\">new</span> <span class=\"title class_\">SpecialSupport</span>(<span class=\"string\">&quot;满分方案&quot;</span>,<span class=\"number\">100</span>));</span><br><span class=\"line\">\tchain.support();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们还可以用数组而非链表来保存所有的处理器，然后在 <code>SupportChain</code> 中依次调用即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SupportChain</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> List&lt;Support&gt; supports = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addSupport</span><span class=\"params\">(Support support)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.supports.add(support);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">support</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Support support: supports) &#123;</span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">isSoveled</span> <span class=\"operator\">=</span> support.support();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isSoveled) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"变体中途不终止链条\"><a class=\"markdownIt-Anchor\" href=\"#变体中途不终止链条\"></a> 变体：中途不终止链条</h1>\n<p>在 GoF 给出的定义中，如果处理器链上的某个处理器能够处理这个请求，就不会继续往下传递请求。实际上职责链模式还有一种变体：请求会被所有的处理器都处理一遍，不存在中途终止的情况。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Support 抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Support</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Support next; <span class=\"comment\">// 要推卸给的对象。通过setNext函数设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">support</span><span class=\"params\">(Trouble trouble)</span> &#123;</span><br><span class=\"line\">\t    resolve(trouble);</span><br><span class=\"line\">\t    <span class=\"comment\">// 无视结果，继续处理</span></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            next.support(trouble);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 省略其他代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li>《图解设计模式》第 14 章</li>\n<li>本科生课程笔记《程序设计中级实践＆设计模式》 - TJU 🍐⚱️</li>\n<li><a href=\"https://gitee.com/buxsren/design-pattern-books/blob/master/docs/200786.md\">极客时间专栏 - 设计模式之美 - 王争</a></li>\n</ul>\n","raw":"---\ntitle: 责任链模式——推卸责任\ntags:\n  - 设计模式\n  - Java\ncover: 'https://cdn.gallery.uuanqin.top/img/202508070037052.webp'\ndescription: 链式处理责任\nkatex: false\ncategories:\n  - 高质量代码及设计模式\nabbrlink: c4f5b558\ndate: 2025-08-07 00:35:06\ntop_img:\n---\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/202410090024663.webp)\n\n> [!tldr] 责任链模式 Chain Of Responsibility Design Pattern\n> Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.——GoF\n> 将请求的发送和接收解耦，让多个接收对象都有机会处理这个请求。将这些接收对象串成一条链，并沿着这条链传递这个请求，直到链上的某个接收对象能够处理它为止。\n\n将多个对象组成一条职责链，然后按照它们在职责链上的顺序一个一个地找出到底应该谁来负责处理。使用责任链模式可以弱化“请求方”和“处理方”之间的关联关系。\n\n登场角色：\n\n- Handler（处理者）：Handler 角色定义了处理请求的接口（API）。Handler 角色知道“下一个处理者”是谁，如果自己无法处理请求，它会将请求转给“下一个处理者”。当然，“下一个处理者”也是 Handler 角色。\n- ConcreteHandler（具体的处理者）：ConcreteHandler 角色是处理请求的具体角色。\n- Client（请求者）：Client 角色是向第一个 ConcreteHandler 角色发送请求的角色。\n\n```plantuml\nclass Client\nabstract class Handler{\n\tnext\n\t{method} {abstract} request\n}\n\nclass ConcreteHandler1{\n\t{method} request\n}\n\nclass ConcreteHandler2{\n\t{method} request\n}\n\nClient -> Handler : Request >\nHandler o--> Handler\nHandler <|-- ConcreteHandler1\nHandler <|-- ConcreteHandler2\n```\n\n> `request()` 方法中一般写明自己的处理逻辑，以及调用字段 `next` 去处理的逻辑。具体代码详看接下来的例子。\n\n特点：\n\n- 弱化了发出请求的人和处理请求的人之间的关系。「发出请求的人」不需要知道处理请求的人各自责任分担情况。\n- 同模板模式、策略模式一样，责任链模式利于代码的复用和扩展\n\t- 配置灵活：可以动态改变职责链\n\t- 应对代码复杂性：每个模块专注于自己的工作\n\n缺点：\n\n- 推卸请求可能会导致处理延迟。需要自己权衡。\n\n相关的设计模式：\n\n- Composite 模式 (第 11 章)：Handler 角色经常会使用 Composite 模式。\n- Command 模式 (第 23 章)：有时会使用 Command 模式向 Handler 角色发送请求。\n\n# 例子——构造责任链的细节\n\n| 名字             | 说明                            |\n| -------------- | ----------------------------- |\n| Trouble        | 表示发生的问题的类。它带有问题编号（number）     |\n| Support        | 用来解决问题的抽象类                    |\n| NoSupport      | 用来解决问题的具体类 (永远“不处理问题”)        |\n| LimitSupport   | 用来解决问题的具体类（仅解决编号小于指定编号的问题）    |\n| Specialsupport | 用来解决问题的具体类（仅解决指定编号的问题）        |\n| Main           | 制作 `support` 的职责链，制造问题并测试程序行为 |\n\n```plantuml\nclass Main\nabstract class Support{\n\t- name\n\t- next\n\t+ {method} support\n\t+ {method} setNext\n\t# {method} {abstract} resolve\n}\n\nclass NoSupport{\n\t# {method} resolve\n}\n\nclass LimitSupport{\n\t- limit\n\t# {method} resolve\n}\n\nclass SpecialSupport{\n\t- number\n\t# {method} resolve\n}\n\nMain -> Support : Request >\nSupport o--> Support\nSupport <|-- NoSupport\nSupport <|-- LimitSupport\nSupport <|-- SpecialSupport\n```\n\n下面给出完整代码案例：\n\n```java\npublic class Trouble {\n    private final int number; // 问题编号\n    public Trouble(int number){\n        this.number = number;\n    }\n    public int getNumber(){\n        return number;\n    }\n\n    @Override\n    public String toString(){\n        return \"[问题编号：\"+number+\"]\";\n    }\n}\n```\n\nSupport 抽象类代码如下。`public void support(Trouble trouble)` 方法采用了模板模式。\n\n```java\n// Support 抽象类\npublic abstract class Support{\n    private final String name;\n    private Support next; // 要推卸给的对象。通过setNext函数设置\n\n    public void support(Trouble trouble) {\n        if (resolve(trouble)) {\n            done(trouble);\n        } else if (next != null) {\n            next.support(trouble); // 解决不了问题就递归调用链条\n        } else {\n            fail(trouble);\n        }\n    }\n\n\t// 重要技巧\n    public Support setNext(Support next){\n        this.next = next;\n        return next;\n    }\n\n    public void setNextButNotReturn(Support next){\n        this.next = next;\n    }\n\n    public Support(String name){\n        this.name = name;\n    }\n\n    @Override\n    public String toString(){\n        return \"[\" + name + \"]\";\n    }\n\n    protected abstract boolean resolve(Trouble trouble);\n\n    protected  void done (Trouble trouble){\n        System.out.println(trouble+\" 已经被 \"+this+\"解决\");\n    }\n\n    protected  void fail (Trouble trouble){\n        System.out.println(trouble+\" 无法被 \"+this+\"解决\");\n    }\n}\n```\n\n`Support` 的实现类：\n\n```java\n// Support 的实现类\npublic class NoSupport extends Support{\n\n    public NoSupport(String name) {\n        super(name);\n    }\n\n    @Override\n    protected boolean resolve(Trouble trouble) {\n        return false;\n    }\n}\n\n\npublic class LimitSupport extends Support{\n    private final int limit;\n\n    public LimitSupport(String name, int limit) {\n        super(name);\n        this.limit = limit;\n    }\n\n    @Override\n    protected boolean resolve(Trouble trouble) {\n        return trouble.getNumber() < limit;\n    }\n}\n\npublic class SpecialSupport extends Support{\n    private final int number;\n\n    public SpecialSupport(String name, int number) {\n        super(name);\n        this.number = number;\n    }\n\n    @Override\n    protected boolean resolve(Trouble trouble) {\n        return trouble.getNumber() == number;\n    }\n}\n\n```\n\n调用方代码：\n\n```java\npublic static void main(String[] args) {\n\tSupport s1 = new NoSupport(\"不予通过方案\");\n\tSupport s2 = new LimitSupport(\"不及格方案\",60);\n\tSupport s3 = new SpecialSupport(\"满分方案\",100);\n\n\t// 责任链形成s1->s2->s3：\n\ts1.setNext(s2).setNext(s3);\n\n\t// 用这条链处理以下 3 个问题：\n\ts1.support(new Trouble(13)); // [问题编号：13] 已经被 [不及格方案]解决\n\ts1.support(new Trouble(64)); // [问题编号：64] 无法被 [满分方案]解决\n\ts1.support(new Trouble(100));// [问题编号：100] 已经被 [满分方案]解决\n}\n```\n\n重要技巧：`Support` 抽象类中 `setNext()` 除了设置 next 外，还 `return next;`。这样可以有\n\n`h1.setNext(h2).setNext(h3).setNext(h4).setNext(h5)` 这样的责任链构造。\n\n> [!warning] 责任链构造的错误示例\n> 请注意，这种责任链构造方式是**错误的**：`h1.setNext(h2.setNext(h3.setNext(h4.setNext(h5))));` 这会导致构造这样一个责任链：`h1->h5`（想一想为什么？）\n\n如果 `setNext()` 中单纯设置 `next`，不 `return next;` 的话，责任链构造方式只能是这个样子： `h1.setNext(h2); h2.setNext(h3)` ......\n\n# 变体：引入责任链构造类\n\n在上面的代码中，我们直接在 main 函数中使用责任链的头结点 `s1` 不断进行构造。我们可以引用新的类 `SupportChain` 来管理这个链条。\n\n```java\npublic class SupportChain {\n  // 记录链条的首尾结点\n  private Support head = null;\n  private Support tail = null;\n\n  public void addSupport(Support support) {\n    support.setNext(null);\n\n    if (head == null) {\n      head = support;\n      tail = support;\n      return;\n    }\n\n    tail.setNext(support);\n    tail = support;\n  }\n\n  public void support() {\n    if (head != null) {\n      head.handle();\n    }\n  }\n}\n```\n\n使用示例：\n\n```java\npublic static void main(String[] args) {\n\tSupportChain chain = new SupportChain();\n\tchain.addSupport(new LimitSupport(\"不及格方案\",60));\n\tchain.addSupport(new SpecialSupport(\"满分方案\",100));\n\tchain.support();\n}\n```\n\n我们还可以用数组而非链表来保存所有的处理器，然后在 `SupportChain` 中依次调用即可。\n\n```java\npublic class SupportChain {\n  private List<Support> supports = new ArrayList<>();\n\n  public void addSupport(Support support) {\n    this.supports.add(support);\n  }\n\n  public void support() {\n    for (Support support: supports) {\n      boolean isSoveled = support.support();\n      if (isSoveled) {\n        break;\n      }\n    }\n  }\n}\n```\n\n# 变体：中途不终止链条\n\n在 GoF 给出的定义中，如果处理器链上的某个处理器能够处理这个请求，就不会继续往下传递请求。实际上职责链模式还有一种变体：请求会被所有的处理器都处理一遍，不存在中途终止的情况。\n\n```java\n// Support 抽象类\npublic abstract class Support{\n    private final String name;\n    private Support next; // 要推卸给的对象。通过setNext函数设置\n\n    public void support(Trouble trouble) {\n\t    resolve(trouble);\n\t    // 无视结果，继续处理\n\t    if (next != null) {\n            next.support(trouble);\n        }\n    }\n\n\t// 省略其他代码\n}\n```\n\n# 本文参考\n- 《图解设计模式》第 14 章\n- 本科生课程笔记《程序设计中级实践＆设计模式》 - TJU 🍐⚱️\n- [极客时间专栏 - 设计模式之美 - 王争](https://gitee.com/buxsren/design-pattern-books/blob/master/docs/200786.md)","categories":[{"name":"高质量代码及设计模式","api":"api/categories/高质量代码及设计模式.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"设计模式","api":"api/tags/设计模式.json"}]},"api":"api/posts/p/c4f5b558.json"}