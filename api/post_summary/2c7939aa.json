{"title":"【开发杂记】第一次写 Hexo 插件","tags":["Hexo","npm","开发杂记","Obsidian","正则表达式"],"cover":"https://cdn.gallery.uuanqin.top/img/RTFM_header_2cover.webp","description":"一个历时半年的任务，一个晚上解决","categories":["百味人生","有感而发"],"abbrlink":"2c7939aa","date":"2024-04-29T00:27:23.000Z","top_img":null,"summary":"顽疾 自从引入 Obsidian 管理 Hexo 博客之后，一个重要的问题需要解决：如何完美将 Obsidian 特性迁移到 Hexo 中，实现「所见即所得」。这里的「见」指的就是本地 Obsidian 渲染样式，「得」指的就是 Hexo 网页渲染样式。 Obsidian 引入了一些自己独有的 Markdown 语法与工作方式，我也为此不断探索最适合的渲染方案与使用习惯。在这个过程中，我成功总结出一套自己的经验： [[构建 Obsidian 的 Hexo 写作工作流]] [[Hexo 博客适配 Obsidian 新语法]] 双链语法是 Obsidian 最重要的特性。一开始，我也找到了相似的插件 `hexo-link-obsidian`，但是这个插件的使用过为复杂和苛刻（详看 [[Obsidian Internal links 双向链接渲染解决方案|这篇文章]]）： 首先，你必须安装 `hexo-abbrlink` 插件来为文章生成永久链接 其次，你必须在 Obsidian 安装 `link-info-server`（作者也是 `hexo-link-obsidian` 插件的作者），这个软件为 `hexo-link-obsidian` 提供服务。 最后，才在 hexo 安装 `hexo-link-obsidian`。 由于 `hexo-link-obsidian` 使用 `link-info-server` 服务，使用插件前必须保证 Obsidian 打开，否则插件失效。为此，我又为 Hexo 写了个预处理脚本，检测 `hexo-abbrlink` 的安装、监测 Obsidian 启动以及服务端口。 这几个乱七八糟的插件强耦合，缝缝补补也能算凑合着用。但各种小问题也接踵而来。 一开始发现对原本笔记就有的网络图片渲染得不是很好，我就自己改了一下源代码，把插件 `index.js` 匹配图片的正则表达式改成一个永远不会有的值。 结果当我把我这个解决方案写进文章时，把改的地方直接复制到 Markdown 文章里来，结果 pattern 就匹配上了......（其实是自己🦈🐝了） 另一个小插曲就是 `hexo-link-obsidian` 插件对 webp 图片格式没有支持，我就直接向它的仓库提交一个拉取请求，结果就通过了。我也算投机取巧成为一个小小贡献者...... ..."}