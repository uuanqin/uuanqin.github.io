{"title":"工厂模式（简单工厂、静态工厂、抽象工厂）","tags":["设计模式","工厂模式","单例模式","Java"],"cover":"https://cdn.gallery.uuanqin.top/img/202506122213473.webp","description":"辨析各种工厂别混淆","katex":false,"categories":["高质量代码及设计模式"],"abbrlink":"3a9f48af","date":"2025-06-12T21:37:37.000Z","top_img":null,"summary":"工厂模式提供了一种创建对象的方式，而无需指定要创建的具体类。 通过使用工厂模式，可以将对象的创建逻辑封装在一个工厂类中，而不是在客户端代码中直接实例化对象，这样可以提高代码的可维护性和可扩展性。 工厂模式的类型与简介： 简单工厂模式（Simple Factory）：它使用一个单独的工厂类来创建不同的对象，根据传入的参数决定创建哪种类型的对象。 - 简单工厂模式不是一个正式的设计模式，但它是工厂模式的基础。 - 它属于创建型模式，但不属于 GoF 23 设计模式。 - 不符合“开放—封闭原则”，简单工厂中每一次扩展都需要对工厂类进行修改 静态工厂模式：将工厂类中的创建对象的功能定义为静态的，就是静态工厂模式。 - 它同样不是一种设计模式。 - 有时候，此模式归类为简单工厂模式的另一种实现方式。 工厂方法模式（Factory Method Pattern），又称多态性工厂模式：工厂方法模式定义了一个创建对象的接口，但由子类决定实例化哪个类。工厂方法将对象的创建延迟到子类。 - 针对接口编程，不针对实现编程，代码更具弹性，扩展性更好 - 符合开放 - 封闭原则：客户端决定实例化哪一个工厂来创建类，在扩展时不需要修改工厂类 - 解耦合：把创建对象的具体实现移到具体的工厂子类，在工厂接口类并不需要知道实际创建的对象是哪一个类，解耦了客户端中关于超类的代码和子类对象创建代码。 抽象工厂模式（Abstract Factory Pattern）：抽象工厂模式提供一个创建一系列相关或互相依赖对象的接口，而无需指定它们具体的类。 关于以上分类方法的一些提醒： 在 GoF 的《设计模式》一书中，作者将简单工厂模式看作是工厂方法模式的一种特例。 《图解设计模式》一书中沿用 GoF《设计模式》中的分类方法。书中关于工厂模式介绍的是 Factory Method 模式和 Abstract Factory 模式。 有些观点认为上面的简单工厂模式（Simple Factory）和静态工厂模式是「简单工厂模式」的两种实现。 为了内容编排清晰，已将案例和理论分节处理。 一个简易计算器的案例 我们先从案例讲起。 > [!e..."}