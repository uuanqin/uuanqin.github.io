{"title":"最大子数组问题","tags":["LeetCode","Java","动态规划","分治","线段树","前缀和"],"cover":"https://cdn.gallery.uuanqin.top/img/202409050042734.webp","description":"一道例题引出的多种解法探讨","categories":["算法与数据结构"],"abbrlink":"19c8c246","katex":true,"date":"2024-09-01T22:30:58.000Z","top_img":null,"summary":"在学习算法时，很多书籍资料都是按照类别进行分类学习的，比如先学分治、动态规划，再学贪心等。本博客的部分文章将根据作者本人的刷题经历，以典型题、模板题、系列题进行总结与发散，站在另一个角度审视这些题目，从而看清问题的本质与事物的全貌。 经典黑书《算法导论》在介绍分治算法时选择了以最大子数组问题为教学案例进行讲解，本文将继续通过这个问题的解决方案进行发散探讨，以串联各种各样的知识。 最大子数组问题：给定数组 A，寻找其中一个 「和最大的子数组」。只有数组中包含负数时，最大子数组问题才有意义。 本文题目难度标识：🟩简单，🟨中等，🟥困难。 > [!example] 题目：🟨53. 最大子数组和 - 力扣（LeetCode） > 给你一个整数数组 `nums` ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 > > 子数组：数组中的一个连续非空序列。 更多子数组的相关题目详见：[[【刷题日记】动态规划题单]] 解决方法 传统分治解法 > [!warning] 本小节引自《算法导论》第四章内容。本分治策略并不一定是解决这道题的最佳方案。 假定我们要寻找子数组 $A[low..high]$ 的最大子数组，利用分治技术划分为两个规模尽量相等的子数组 $A[low..mid],~A[mid+1..high]$。$A[low..high]$ 的一个最大子数组 $A[i..j]$ 必然是以下三种情况之一： 完全位于子数组 $A[low..mid]$ （左子数组）中，因此 $low\\leq i\\leq j\\leq mid$ 完全位于子数组 $A[mid+1..high]$ （右子树组）中，因此 $mid< i\\leq j\\leq high$ 跨越了中点，因此 $low\\leq i\\leq mid<j\\leq high$ 前两种情况实际上仍是最大数组问题，只是规模更小。我们的工作就是寻找跨越中点的最大子数组，然后在三种情况中选取和最大者。 我们可以在线性时间内求出跨越中点的最大子数组： `FIND-MAX-CROSSING-SUBARRAY` 花费时间 $\\Theta(n)$。..."}