{"data":{"title":"「多媒体与信号处理」课程笔记","slug":"嵌入式/「多媒体与信号处理」课程笔记","description":"科软嵌入式必选课程笔记","date":"2023-11-22T14:10:23.000Z","updated":"2025-05-22T13:15:02.077Z","language":"zh-CN","comments":true,"url":"p/6c1cb5ed/","cover":"https://cdn.gallery.uuanqin.top/img/jshkcover.webp","images":[],"content":"\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">如果本页面出现格式错乱问题可在评论区留言，我将尽快处理。</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h1 id=\"笔记说明\"><a class=\"markdownIt-Anchor\" href=\"#笔记说明\"></a> 笔记说明</h1>\n<p>这是 USTC 软件学院 - 苏州 2023 秋季学期课程笔记（互联网版本）。本着藏着掖着发霉不如对外分享发光的精神，现将其公布。<a href=\"https://github.com/uuanqin/multimedia-signal-processing-notes\">原本的笔记</a> 是卡片式的，为了便于互联网传播与收藏，现整合到同一篇文章当中。</p>\n<p>这篇笔记的特点在于：</p>\n<ul>\n<li>有机涵盖 PPT 内容，精心编排，存在本人的理解消化过程</li>\n<li>有重点标识、考点标识、实际考察标识</li>\n<li>存在一些习题以供复习</li>\n<li>部分图片为作者手工制作，便于知识的理解和掌握</li>\n</ul>\n<p>本笔记存在以下的符号定义：</p>\n<ul>\n<li>🔺表示老师经常在课上提，为考试重点。</li>\n<li><span style=\"color:#ff0000\">红色字体</span>为 <em>部分</em> 实际考察内容（指的是 2023 秋季学期考试）。</li>\n</ul>\n<p>本笔记的内容来源：</p>\n<ul>\n<li>主要来源：课程 PPT。注意，笔记的章节顺序是经过梳理调整的，顺序不一定与 PPT 讲授过程相符。</li>\n<li>参考补充：<a href=\"https://blog.csdn.net/qq_39266065/article/details/106225637\">秃头学长的笔记</a>，补充了一些练习题。</li>\n</ul>\n<p>笔记共分为 12 个章节。由于作者水平、精力与时间有限，「时频映射」的两个 Slices 以及「H.264」的 PPT 仅记录部分关键内容，内容也较粗糙（打上了「落叶🍂」标记）。由于当时考试不考「MP4」，所以笔记里也不包含这个章节。</p>\n<p>临考前老师列出了多媒体信号处理课程知识点（详看 本课知识点 小节）。在后续的章节中这些知识点将以「考点」标注，如下示例：</p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 X：[考点内容]</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>如果你有以下需求：</p>\n<ul>\n<li>查看笔记源码</li>\n<li>想导入到自己的双向笔记库中</li>\n<li>习惯在 Github 上阅读</li>\n<li>为笔记做贡献</li>\n</ul>\n<p>可以访问 <a href=\"https://github.com/uuanqin/USTC-SSE-multimedia-signal-processing-notes\">本项目</a>：</p>\n<p><a href=\"https://github.com/uuanqin/USTC-SSE-multimedia-signal-processing-notes\"><img src= \"/image/loading.gif\" data-lazy-src=\"https://github-readme-stats.uuanqin.top/api/pin/?username=uuanqin&amp;repo=USTC-SSE-multimedia-signal-processing-notes\" alt=\"Readme Card\" /></a></p>\n<p>任何贡献都 Welcome！🎉🎉如果你有更新本笔记的想法（或者仅仅是纠错）可以通过邮件或评论区联系我！同时也期待你的 star~</p>\n<hr />\n<h1 id=\"导论格式概览\"><a class=\"markdownIt-Anchor\" href=\"#导论格式概览\"></a> 导论（格式概览）</h1>\n<p>什么是多媒体？包括文字、视频、静态图像、动画、交互内容。应用于广告、艺术、教育</p>\n<p>什么是信号处理？</p>\n<ul>\n<li>系统工程、电子工程和应用数学领域</li>\n<li>操作、分析模拟信号和数字信号</li>\n<li>代表时空变化的物理量</li>\n<li>典型的操作和应用：信号获取与重构、信号压缩、特征提取、质量提升（降噪，图像增强等）</li>\n</ul>\n<h2 id=\"数据压缩\"><a class=\"markdownIt-Anchor\" href=\"#数据压缩\"></a> 🔺 数据压缩</h2>\n<p>无损压缩：识别并消除统计冗余，无信息丢失</p>\n<ul>\n<li>LZW、Huffman coding（哈夫曼编码）、Arithmetic coding（算数编码）</li>\n</ul>\n<p>有损压缩：识别并移除不重要的信息</p>\n<ul>\n<li>Quantization（量化）、JPEG</li>\n</ul>\n<h2 id=\"数字容器格式-digital-container-format\"><a class=\"markdownIt-Anchor\" href=\"#数字容器格式-digital-container-format\"></a> 数字容器格式 Digital Container Format</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 1：音频、图像和视频的格式与容器</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p><strong>容器文件用做识别并交织不同数据形式。</strong></p>\n<p>容器格式部件的不同名称：</p>\n<ul>\n<li>RIFF、PNG：chunks 块</li>\n<li>QuickTime/MP4：atoms 原子</li>\n<li>MPEG-TS：packets 包 （来自通信术语）</li>\n<li>JPEG：段</li>\n</ul>\n<p>🎵 音频独有的容器：</p>\n<ul>\n<li>AIFF（IFF 文件格式，在 Mac OS 平台上广泛使用）</li>\n<li>WAV（RIFF 文件格式，在 Windows 平台上广泛使用）</li>\n<li>XMF（可扩展音乐格式）</li>\n</ul>\n<p>🖼 静态图像独有的容器：</p>\n<ul>\n<li><strong>TIFF</strong> (Tagged Image File Format，标记图像文件格式) 静止图像和关联的元数据。</li>\n</ul>\n<p>其他可以接纳多种音视频类型或其他媒体的容器：</p>\n<ul>\n<li><strong>3GP</strong> (在许多手机中使用；基于 ISO 基本媒体文件格式，是 MP4 的变种）</li>\n<li><strong>ASF</strong>（Microsoft WMA 和 WMV 的容器）</li>\n<li><strong>AVI</strong>（标准的 Microsoft Windows 容器）</li>\n<li>Flash Video (<span style=\"color:#ff0000\">FLV</span>, F4V) （来自 Adobe Systems 的视频和音频容器）</li>\n<li>Matroska (MKV) （不限于任何编解码器或系统）</li>\n<li>MJ2-Motion JPEG 2000 文件格式.</li>\n<li><strong>QuickTime</strong> File Format（Apple 的标准 QuickTime 视频容器）</li>\n<li>MPEG program stream (standard container for MPEG-1 and MPEG-2 elementary streams)</li>\n<li>MPEG-2 transport stream (a.k.a. MPEG-TS) (standard container for digital broadcasting and for transportation over unreliable media; used also on Blu-ray Disc video)</li>\n<li><strong>MP4</strong> (standard audio and video container for the MPEG-4 multimedia portfolio)</li>\n<li>Ogg (standard container for <a href=\"http://Xiph.org\">Xiph.org</a> audio format Vorbis and video format Theora)</li>\n<li>RM (RealMedia; standard container for RealVideo and RealAudio)</li>\n</ul>\n<p>其他：SWF、RMVB</p>\n<h2 id=\"音频格式\"><a class=\"markdownIt-Anchor\" href=\"#音频格式\"></a> 音频格式 🎵</h2>\n<p>非压缩的音频格式：WAVE、AIFF、Raw PCM</p>\n<p>无损压缩格式：FLAC、<span style=\"color:#ff0000\">Monkey’s audio (APE extension)</span>, Shorten, WMA Lossless</p>\n<p>有损压缩格式：MP3, AAC, <strong>WMA</strong>, AC3</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101184441.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<h2 id=\"图像格式\"><a class=\"markdownIt-Anchor\" href=\"#图像格式\"></a> 图像格式 🖼</h2>\n<p>RAW、BMP、JPEG、JPEG2000、GIF、PNG</p>\n<h2 id=\"视频格式\"><a class=\"markdownIt-Anchor\" href=\"#视频格式\"></a> 视频格式 🎞</h2>\n<p>MPEG-1、MPEG-2、MPEG-4 visual/AVC、H.261、H.263、H.264</p>\n<ul>\n<li>Advanced Video Coding（ISO）=H.264（ITO）</li>\n</ul>\n<blockquote>\n<p>tea：H 开头一般和电信相关</p>\n</blockquote>\n<p>视频压缩标准的历史详看 视频编码 小节。</p>\n<h1 id=\"bmp-wav-avi-格式\"><a class=\"markdownIt-Anchor\" href=\"#bmp-wav-avi-格式\"></a> BMP、WAV、AVI 格式</h1>\n<h2 id=\"windows-bitmap\"><a class=\"markdownIt-Anchor\" href=\"#windows-bitmap\"></a> Windows Bitmap🖼</h2>\n<h3 id=\"文件结构\"><a class=\"markdownIt-Anchor\" href=\"#文件结构\"></a> 文件结构</h3>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 4：Windows Bitmap 文件结构</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231104183213.webp\" alt=\"image.png\" /></p>\n<p>bfOffBits：是从位图文件头到位图数据的偏移量。即位图信息头 (BITMAPINFOHEADER)+ 全部颜色对照表 (RGBQUAD) 的字节数。</p>\n<p>数据由代表位图的连续行或扫描线的字节值数组组成。每条扫描线由连续的字节组成，这些字节按从左到右的顺序代表扫描线中的像素。</p>\n<p>代表扫描线的字节数取决于位图的宽度。</p>\n<p><span style=\"color:#ff0000\">扫描线以 32bit 为边界</span>，必须用 0 填充至末尾。</p>\n<ul>\n<li>这意味着宽度为 8 位，20 位或 30 位的单色位图将具有相同的扫描线大小：32 位</li>\n<li>40 位宽的单色位图将具有 64 位的扫描线大小。</li>\n</ul>\n<p>Bitmap 中的扫描线是<strong>自底向上</strong>存的</p>\n<ul>\n<li>数组中的第一个字节代表 bitmap 左下角</li>\n<li>数组中的最后一个字节代表 bitmap 右上角</li>\n</ul>\n<h3 id=\"位图种类\"><a class=\"markdownIt-Anchor\" href=\"#位图种类\"></a> 位图种类</h3>\n<h4 id=\"灰度位图\"><a class=\"markdownIt-Anchor\" href=\"#灰度位图\"></a> 灰度位图</h4>\n<ul>\n<li>每个像素使用 <strong>8 个比特（1 字节）</strong>。Info Header 中的 biBitCount 将为 8。</li>\n<li>每个字节代表 256 种灰度阴影。白色为 FF，黑色为 00</li>\n<li>实质上是 8-bit 彩色位图的特例。存在一个颜色表，其中条目 0 指向黑色，条目 255 指向白色，而介于两者之间的条目指向灰色阴影。对于一个给定大小的图像来说，8-bit 灰度位图和 8-bit 彩色位图是一样的</li>\n</ul>\n<h4 id=\"24-bit-彩色位图\"><a class=\"markdownIt-Anchor\" href=\"#24-bit-彩色位图\"></a> 24-Bit 彩色位图</h4>\n<ul>\n<li>每个像素使用 <strong>24 个比特（3 个字节）</strong>。Info Header 中的 biBitCount 将为 24。</li>\n<li>每个像素 3 个字节代表红绿蓝。白色 FFFFFF，黑色 000000，红色 FF0000，绿色 00FF00，蓝色 0000FF</li>\n</ul>\n<h4 id=\"8-bit-彩色位图\"><a class=\"markdownIt-Anchor\" href=\"#8-bit-彩色位图\"></a> 8-Bit 彩色位图</h4>\n<ul>\n<li>每个像素使用 8 个比特，只有 256 种颜色，通过调色板实现</li>\n<li>颜色表在 info header 和 Data 之间，每一对含有 4 个字节（R, G, B, 0x0）</li>\n</ul>\n<p>颜色表：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101184757.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<h2 id=\"wav-格式\"><a class=\"markdownIt-Anchor\" href=\"#wav-格式\"></a> WAV 格式 🎵</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 5：WAVE 格式</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div>\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 8：列出一个块的组件</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>WAV 是存储数字音频（waveform）的简单文件格式，使用了 RIFF 结构将文件内容分为不同的块（chunk）。</p>\n<ul>\n<li>每个块均由标头和数据字节组成。</li>\n</ul>\n<ul>\n<li>Header 指定块数据字节的类型和大小。</li>\n</ul>\n<p>它支持各种 bit 分辨率、采样率和音频通道</p>\n<p>流行于 Windows 平台，广泛应用于处理数字音频波形程序中</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101184818.webp\" alt=\"image.png\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101184830.webp\" alt=\"image.png\" /></p>\n<p>所有使用 WAV 的应用必须能够读取两个必要块（fmt、data），并且可以有选择的忽略可选块。</p>\n<p>程序复制一个 WAV，应该复制 WAV 中所有的块，即使有一些块最后不会被解释</p>\n<p>次序要求：在 WAV 文件中，<strong>除了 Format 块必须在 Data 块前外</strong>，块的顺序没有限制</p>\n<p>注意，format 块也许不是第一个块。一个 WAV 文件通常有三个 chunk 以及一个可选 chunk，其在文件中的排列方式依次是：</p>\n<ol>\n<li>RIFF chunk</li>\n<li>Format chunk</li>\n<li>Fact chunk（附加块，可选）</li>\n<li>Data chunk</li>\n</ol>\n<p>所有的数据都以 8 位字节存储，以<strong>小端</strong>形式存于字节中</p>\n<p>「块（的）数据」和「数据块」不是一个概念：<strong>数据块</strong>有「块大小」和一些「块数据」，其他所有块也是如此。</p>\n<h3 id=\"组成\"><a class=\"markdownIt-Anchor\" href=\"#组成\"></a> 组成</h3>\n<p>WAV 组成：不同类型的 chunk 的集合。每个块包含头及数据，头指定了<strong>块数据</strong>的类型和大小，一些类型的块可能含有子块。<strong>RIFF 文件块必须以 2 个字节（1 word）对齐。</strong></p>\n<h4 id=\"必含fmt-块\"><a class=\"markdownIt-Anchor\" href=\"#必含fmt-块\"></a> 【必含】fmt 块</h4>\n<p>fmt 块，采样格式，包含描述波形的参数，比如采样率、位分辨率和通道数</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101185009.webp\" alt=\"image.png\" /></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    ID chunkID;                 <span class=\"comment\">// 块的标识。总是「fmt 」注意末尾有空格。</span></span><br><span class=\"line\">    <span class=\"type\">long</span> chunkSize;             <span class=\"comment\">// 块的大小（除去chunkID、chunkSize）</span></span><br><span class=\"line\">    <span class=\"type\">short</span> wFormatTag;           <span class=\"comment\">// 存储数据时使用的压缩方法</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> wChannels;   <span class=\"comment\">// 音频的通道数。 1:单声道; 4:四通道</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> dwSamplesPerSec;  <span class=\"comment\">// 采样率。标准：44.1KHZ 48KHZ 32KHZ 22.05KHZ 96KHZ</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> dwAvgBytesPerSec; <span class=\"comment\">// 每秒播放多少字节，用于估计RAM需要的大小。</span></span><br><span class=\"line\">                                    <span class=\"comment\">// 其值应等于 dwSamplesPerSec * wBlockAlign的上取</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> wBlockAlign; <span class=\"comment\">// 采样帧的大小（字节）</span></span><br><span class=\"line\">\t\t\t\t\t\t\t    <span class=\"comment\">// 其值等于 wChannels * (wBitsPerSample / 8) 的上取</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 例如：</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// 3个未压缩的通道组成一个块，每个通道2个字节，则Block align=6</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> wBitsPerSample;   <span class=\"comment\">// 采样点的位分辨率</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> cbSize;      <span class=\"comment\">// Size of the extension，扩展字段的长度</span></span><br><span class=\"line\">    <span class=\"comment\">// 也许有额外的域, 取决于 wFormatTag</span></span><br><span class=\"line\">&#125; FormatChunk;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>🔺wFormatTag 值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x0001</td>\n<td>WAVE_FORMAT_PCM 未压缩的数据</td>\n</tr>\n<tr>\n<td>0x0002</td>\n<td>WAVE_FORMAT_ADPCM</td>\n</tr>\n<tr>\n<td>0x0006</td>\n<td>WAVE_FORMAT_ALAW （电话格式）</td>\n</tr>\n<tr>\n<td>0x0007</td>\n<td>WAVE_FORMAT_MULAW （电话格式）</td>\n</tr>\n<tr>\n<td>0x55=85</td>\n<td>WAVE_FORMAT_MP3</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"waveformatextensible-扩展的-wave-格式块\"><a class=\"markdownIt-Anchor\" href=\"#waveformatextensible-扩展的-wave-格式块\"></a> WAVEFORMATEXTENSIBLE 扩展的 WAVE 格式块</h5>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    WAVEFORMATEX Format;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span> &#123;</span></span><br><span class=\"line\">        WORD wValidBitsPerSample; <span class=\"comment\">// 信号精度的比特数</span></span><br><span class=\"line\">\t\t\t\t\t\t\t      <span class=\"comment\">// 假设使用24bit，但只前20位有效，则wValidBitsPerSample=20</span></span><br><span class=\"line\">        WORD wSamplesPerBlock; <span class=\"comment\">// 一个音频压缩块数据的样本数</span></span><br><span class=\"line\">        WORD wReserved;</span><br><span class=\"line\">    &#125; Samples;</span><br><span class=\"line\">    DWORD dwChannelMask; <span class=\"comment\">// 指定流中通道到扬声器位置的分配的位掩码</span></span><br><span class=\"line\">    GUID SubFormat; <span class=\"comment\">// 对每一个波形数据类型定义的 ID。例如WMA中不同压缩方式。</span></span><br><span class=\"line\">&#125; WAVEFORMATEXTENSIBLE</span><br></pre></td></tr></table></figure>\n<p>位掩码 dwChannelMask：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101185109.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p><span style=\"color:#ff0000\">用于超过 2 通道或 16 分辨率的音频数据</span>：</p>\n<ul>\n<li><code>wFormatTag</code> = FFFE（-2）</li>\n<li><code>cbSize</code> = 24</li>\n</ul>\n<p>以 6 通道 5.1 格式为例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WAVEFORMATPCMEX waveFormatPCMEx;</span><br><span class=\"line\"><span class=\"comment\">// FormatChunk</span></span><br><span class=\"line\">wFormatTag = WAVE_FORMAT_EXTENSIBLE; <span class=\"comment\">//FFFE</span></span><br><span class=\"line\">wChannels = <span class=\"number\">6</span>;</span><br><span class=\"line\">dwSamplesPerSec = <span class=\"number\">48000L</span>;</span><br><span class=\"line\">dwAvgBytesPerSec = <span class=\"number\">864000L</span>;          <span class=\"comment\">// nBlkAlign * nSamp/Sec = 18 * 48000 </span></span><br><span class=\"line\">wBlockAlign = <span class=\"number\">18</span>;</span><br><span class=\"line\">wBitsPerSample = <span class=\"number\">24</span>;                 <span class=\"comment\">// Container has 3 bytes</span></span><br><span class=\"line\">cbSize = <span class=\"number\">22</span>;</span><br><span class=\"line\"><span class=\"comment\">// 以下是拓展的域</span></span><br><span class=\"line\">wValidBitsPerSample = <span class=\"number\">20</span>;            <span class=\"comment\">// Top 20 bits have data</span></span><br><span class=\"line\">dwChannelMask = KSAUDIO_SPEAKER_5POINT1;</span><br><span class=\"line\"><span class=\"comment\">// SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT |</span></span><br><span class=\"line\"><span class=\"comment\">// SPEAKER_FRONT_CENTER |SPEAKER_LOW_FREQUENCY |</span></span><br><span class=\"line\"><span class=\"comment\">// SPEAKER_BACK_LEFT | SPEAKER_BACK_RIGHT</span></span><br><span class=\"line\">SubFormat = KSDATAFORMAT_SUBTYPE_PCM; <span class=\"comment\">// Specify PCM</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"必含data-块\"><a class=\"markdownIt-Anchor\" href=\"#必含data-块\"></a> 【必含】data 块</h4>\n<p>音频数据，包含实际波形数据，比如所有通道的数据波形</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    ID chunkID;</span><br><span class=\"line\">    <span class=\"type\">long</span> chunkSize;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">char</span> waveformData[];</span><br><span class=\"line\">&#125; DataChunk;</span><br></pre></td></tr></table></figure>\n<p>交错立体声波样本：多通道采样存储于交错的波形数据中；8bit 样本采用无符号数据表示，其他样本使用有符号数据表示。</p>\n<p>对于多声道声音，每个声道的单个采样点是交错的。一组交错的采样点称为一个采样帧。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101185123.webp\" alt=\"image.png\" /></p>\n<p>假设存在两个通路，先存放 time1 的左通道和右通道数据，再存放 time2，以此类推。</p>\n<h4 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\"></a> 其他</h4>\n<p>fact 块（详见 音频编码基础 小节 的 ADPCM 章节）、cue 块</p>\n<h2 id=\"avi-格式\"><a class=\"markdownIt-Anchor\" href=\"#avi-格式\"></a> AVI 格式 🎵🎞</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 3：AVI 容器</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>AVI 是另一种 RIFF，由微软开发</p>\n<p>音视频交织，即视频段数据紧接音频数据。这允许媒体播放器<strong>以块来读数据而不是文件整体</strong>。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101185135.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101185202.webp\" alt=\"image.png\" /></p>\n<p>注意 AVI 是 Wave 格式，必须以两个字节（1 word）对齐，填充。解码时不需要考虑填充的数据。</p>\n<p>索引目的：为了支持随机访问</p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 6：解释 FOURCC 中 “00dc”，“vids” 等标签的意思</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>🔺流列表中的四字节码：</p>\n<ul>\n<li><span style=\"color:#ff0000\">vids：video stream</span></li>\n<li>auds：audio stream</li>\n<li>mp4v：MEPG4 visual</li>\n</ul>\n<p>数据块可以直接驻留在 movi 列表中，或者被 res 列表包围。</p>\n<p>🔺FOURCC，定义块中信息的类型：</p>\n<ul>\n<li>db：未压缩的视频帧</li>\n<li>d<strong>c</strong>：压缩的视频帧</li>\n<li><span style=\"color:#ff0000\">wb：音频流</span></li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101185239.webp\" alt=\"image.png\" /></p>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">习题助记</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ol>\n<li>What does fourcc code “vids” stands for?</li>\n<li>What does fourcc code “auds” stands for?</li>\n<li>What does fourcc code “00db” stands for?</li>\n<li>What does fourcc code “01wb” stands for?</li>\n<li>ln which scemarops is wFormatTag equal to -2 in a WAVE file?<br />\n音频通道大于 2，每一个抽样信号大于 16bit</li>\n</ol>\n</div></div><h1 id=\"音频编码基础\"><a class=\"markdownIt-Anchor\" href=\"#音频编码基础\"></a> 音频编码基础</h1>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102130537.webp\" alt=\"image.png\" /></p>\n<p>数字音频编码器：</p>\n<ol>\n<li>输入：模拟音频信号</li>\n<li>编码器：转换为方便地数字形式</li>\n<li>存储、处理、传输</li>\n<li>解码器：将数字数据转换为模拟信号</li>\n</ol>\n<p>🔺音频编码目标：</p>\n<ul>\n<li>保真度：解码器尽量<strong>提高</strong>感知的音频质量，减少失真</li>\n<li>数据率：减少代表原始音频信号的数据量</li>\n<li>复杂性：减少计算复杂性</li>\n<li>延迟：减少编码延迟</li>\n</ul>\n<h2 id=\"pcm最简单的编码器\"><a class=\"markdownIt-Anchor\" href=\"#pcm最简单的编码器\"></a> PCM——最简单的编码器</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102130552.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<p>量化是一种有损的过程。</p>\n<p>在量化过程中使用的离散值数目越高，输出的信号越接近原始音频</p>\n<h2 id=\"cdcompact-disc-激光唱片\"><a class=\"markdownIt-Anchor\" href=\"#cdcompact-disc-激光唱片\"></a> CD：Compact Disc 激光唱片</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 7：CD 的数据率</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>CD 的数据率：44.1k/s × 16 bit × 2 =<span style=\"color:#ff0000\"> 1.4112 Mb/s</span></p>\n<ul>\n<li>采样：时间间隔 0.023ms（1/0.000023≈43.5k）或采样频率 <strong>44.1k。</strong></li>\n<li>每一个采样的比特数为 16bit，这种精度允许 65536 个离散电平来表示音频采样幅度。</li>\n<li>2 个通路</li>\n</ul>\n<h2 id=\"潜在的编码错误\"><a class=\"markdownIt-Anchor\" href=\"#潜在的编码错误\"></a> 潜在的编码错误</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 9：潜在的编码错误</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><ul>\n<li>采样错误——混叠效应（抽样速率小于二倍带宽）</li>\n<li>🔺<span style=\"color:#ff0000\">量化错误：过载错误、截断错误（round-off）</span></li>\n<li>比特错误：存储和传输错误</li>\n</ul>\n<h2 id=\"更复杂的编码器\"><a class=\"markdownIt-Anchor\" href=\"#更复杂的编码器\"></a> 更复杂的编码器</h2>\n<p>心理声学表明，每个样本理想采样比特为 18-20bits 来描述中等频率（2~5kHz）的音频样本。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102130608.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>冗余：感知冗余、统计冗余</p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 10：有损压缩和无损压缩</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h2 id=\"有损压缩\"><a class=\"markdownIt-Anchor\" href=\"#有损压缩\"></a> 有损压缩</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102130629.webp\" alt=\"image.png\" /></p>\n<p><strong>有损压缩通过量化来实现。</strong></p>\n<h3 id=\"量化\"><a class=\"markdownIt-Anchor\" href=\"#量化\"></a> 量化</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102130648.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>如果有 R 比特可以表示的最大数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>R</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span></span></span></span>，两种量化方法表示的不同样本/编码数为：</p>\n<ul>\n<li>midtread 中平：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>R</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^R-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.924661em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，一般来说效果较好，噪声抑制（小电频通常为噪声，Midtread 会过滤掉）</li>\n<li>midrise 中升：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>R</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span></span></span></span>，噪声放大</li>\n</ul>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 11：均匀量化和非均匀量化</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h4 id=\"均匀量化-uniform-quantization\"><a class=\"markdownIt-Anchor\" href=\"#均匀量化-uniform-quantization\"></a> 均匀量化 Uniform Quantization</h4>\n<p>定义输入范围所需要的信息：</p>\n<ul>\n<li>量化器是 midtread 还是 midrise</li>\n<li>最大不过载的输入 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">x_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>描述编码的比特数 R</li>\n</ul>\n<p>R 比特允许我们设置的输入范围：</p>\n<ul>\n<li>midrise：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mo>=</mo><mn>2</mn><mo>∗</mo><msub><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mi mathvariant=\"normal\">/</mi><msup><mn>2</mn><mi>R</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\Delta=2*x_{max}/2^R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span></span></span></span></li>\n<li>midtread：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mo>=</mo><mn>2</mn><mo>∗</mo><msub><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>R</mi></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Delta=2*x_{max}/(2^R-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h4 id=\"非均匀量化-nonuniform-quantization\"><a class=\"markdownIt-Anchor\" href=\"#非均匀量化-nonuniform-quantization\"></a> 非均匀量化 Nonuniform Quantization</h4>\n<p>均匀量化会存在截断误差（最大值为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\Delta/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Δ</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span>)，但是，相对于非常低的幅度信号，此误差可能会很大。<strong>由于截取失真的感知与相对误差更相关，因此这意味着均匀量化器在低功率输入信号上的表现要比在高功率信号上的差得多。</strong> 要解决此问题，可以使用非均匀量化。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102130912.webp\" alt=\"image.png\" width=\"350px\" /></p>\n<p>压缩方法：</p>\n<ul>\n<li>幂律压缩：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>c</mi><mrow><mi>p</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>x</mi><msup><mi mathvariant=\"normal\">∣</mi><mi>p</mi></msup><mtext>，</mtext><mn>0</mn><mo>&lt;</mo><mi>p</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">c_{power}(|x|)=|x|^p，0&lt;p&lt;1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, (ACC 或 MP3 中 p=0.75）</li>\n<li>对数压缩</li>\n</ul>\n<p>量化错误 Quantization Errors：</p>\n<ul>\n<li>量化误差：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>x</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo><mo>−</mo><msub><mi>x</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(t)=x_{out}(t)-x_{in}(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">t</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>信噪比 SNR（Signal-to-noise ratio） <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi><mo>=</mo><mn>10</mn><mi>log</mi><mo>⁡</mo><mfrac><msubsup><mi>x</mi><mrow><mi>i</mi><mi>n</mi></mrow><mn>2</mn></msubsup><msup><mi>q</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding=\"application/x-tex\">SNR=10 \\log{\\frac{x_{in}^2}{q^2}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.6152279999999997em;vertical-align:-0.481108em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1341199999999998em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.5102em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.214em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.481108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></li>\n<li><strong>低 量化误差 对应于 高 信噪比</strong></li>\n</ul>\n<p>截断错误 Round-off Error：产生于将一定范围的信号振幅输入对应到单一编码中</p>\n<p>过载错误 Overload Error：</p>\n<ul>\n<li>出现原因：量化器接收的信号振幅（绝对值）过大</li>\n<li>导致爆鸣（突突突的声音），为了避免它，通常把 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">x_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 设置得足够大，但由于 R 比特数固定，这会导致截断错误。量化器设计要求在减少两种类型的误差之间取得平衡。</li>\n</ul>\n<p>过载错误、截断错误属于量化错误。</p>\n<h2 id=\"无损压缩熵编码\"><a class=\"markdownIt-Anchor\" href=\"#无损压缩熵编码\"></a> 无损压缩：熵编码</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 12：熵和哈夫曼编码</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>翻译量化编码为一些代表符号，每个符号使用了一定数量的比特。</p>\n<p>使一般的编码更短，从而降低平均的比特率。这需要估计每一个可能编码出现的概率。</p>\n<p>比特率计算：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mtext> </mtext><mo>=</mo><mtext> </mtext><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>⋅</mo><msub><mi>L</mi><mi>i</mi></msub></mrow></mrow><annotation encoding=\"application/x-tex\">R = \\sum_{i=1}^n{p_i \\cdot L_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.104002em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 表示编码出现的概率，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>L</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">L_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 表示编码后的长度。</p>\n<p><span style=\"color:#ff0000\">熵代表了编码的极限：</span></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231126174729.webp\" alt=\"image.png\" /></p>\n<p><strong>当我们能确保下一个输出编码是什么时，熵会变低；反之变高。</strong></p>\n<p>例：在 2 编码符号系统中，有</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102131253.webp\" alt=\"image.png\" /></p>\n<p>数学图像 <a href=\"https://www.desmos.com/calculator/fkd2gp4jc5?lang=zh-CN\">链接</a></p>\n<ul>\n<li>当 p=0 或 1 时，熵为 0。我们知道下一个编码是什么，所以我们不需要发送任何 Bits。</li>\n<li>当 p=0.5，熵为 1。当所有编码符号出现的概率相同时，达到最大熵。在这种情况下使用熵编码进行压缩没有效果。</li>\n<li>对于其他概率，存在一种编码方式使得平均符号编码使用小于 1 个比特</li>\n</ul>\n<h3 id=\"哈夫曼编码\"><a class=\"markdownIt-Anchor\" href=\"#哈夫曼编码\"></a> 哈夫曼编码</h3>\n<p>被用于传真、ASCII 文本数据编码压缩。</p>\n<p>是一种统计学编码，平均编码长度最小。</p>\n<p>编码长度可变，且越经常使用的字符编码长度越短。</p>\n<p>特点：</p>\n<ol>\n<li>编码过程不唯一（取决于分支的标记或合并符号的选择），但 WPL 相同（在这里指的是比特率 R）且最优</li>\n<li>在符号分布概率不均匀的情况下，哈夫曼编码的比特数比固定比特编码方法少</li>\n<li>霍夫曼码中每个样本的平均位数在熵的一位以内，即平均采样比特数范围：</li>\n</ol>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>E</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>y</mi><mo>≤</mo><mo>&lt;</mo><mi>R</mi><msub><mo>&gt;</mo><mrow><mi>H</mi><mi>u</mi><mi>f</mi><mi>f</mi><mi>m</mi><mi>a</mi><mi>n</mi></mrow></msub><mo>≤</mo><mi>E</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>y</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">Entropy\\le &lt;R&gt;_{Huffman} \\le Entropy + 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">&gt;</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<h2 id=\"wave-ms-adpcm\"><a class=\"markdownIt-Anchor\" href=\"#wave-ms-adpcm\"></a> WAVE MS-ADPCM</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 13：MS-ADPCM</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>DPCM 差分脉冲编码调制：</p>\n<ul>\n<li>以 PCM 为基线，增加了预测采样信号的功能。</li>\n<li>与 PCM 直接传输原始 PCM 采样不同的是，DPCM 传输的是原始采样信号与预测值（基于先前采样）之间的差异：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mo>=</mo><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><mi>x</mi><msub><mi>p</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">diff=x_{n+1}-xp_{n+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.791661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span></li>\n<li>预测值计算举例：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><msub><mi>p</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>a</mi><mo>∗</mo><msub><mi>x</mi><mi>n</mi></msub><mo>+</mo><mi>b</mi><mo>∗</mo><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">xp_{n+1}=a*x_n+b*x_{n-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>，a、b 为预测系数</li>\n</ul>\n<p>diff 通常非常小，我们必须限制它的表示范围，如从 16bits 限制到 4bits。但我们也不能保证 diff 总是小的（如剧烈信号变化），为了解决这个问题，引入了 iDelta。如果 diff 非常大，则 iDelta 也会很大，反之亦然。</p>\n<p>于是我们定义：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>E</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi><mo>=</mo><mi>d</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi mathvariant=\"normal\">/</mi><mi>i</mi><mi>D</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">iErrordata = diff / iDelta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span></span></span></span>，这样新的差异值将会稳定。</p>\n<p>iErrordata 以 4bit 保存，称为「nibble」，范围为 -8~7。每次新的 iErrordata 生成后，iDelta 相应做出改变。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iDelta = iDelta * AdaptableTable[(<span class=\"type\">unsigned</span>)nibble]/<span class=\"number\">256</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> AdaptationTable[ ] = &#123;</span><br><span class=\"line\"><span class=\"number\">230</span>, <span class=\"number\">230</span>, <span class=\"number\">230</span>, <span class=\"number\">230</span>, <span class=\"number\">307</span>, <span class=\"number\">409</span>, <span class=\"number\">512</span>, <span class=\"number\">614</span>,    <span class=\"comment\">// 对应nibble：</span></span><br><span class=\"line\"><span class=\"number\">768</span>, <span class=\"number\">614</span>, <span class=\"number\">512</span>, <span class=\"number\">409</span>, <span class=\"number\">307</span>, <span class=\"number\">230</span>, <span class=\"number\">230</span>, <span class=\"number\">230</span> &#125;;  <span class=\"comment\">// 对应nibble：</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"waveformat\"><a class=\"markdownIt-Anchor\" href=\"#waveformat\"></a> WAVEFORMAT</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231105205607.webp\" alt=\"image.png\" /></p>\n<p>MS-ADPCM 的 wave 文件中，存在与 fmt 块和 data 块的另一种块：fact 块</p>\n<ul>\n<li>fact 块存储采样长度</li>\n<li>data 块中，数据以块的方式存储，一个接着一个</li>\n<li>块有三个部分：头、数据和填充</li>\n</ul>\n<h3 id=\"编码过程\"><a class=\"markdownIt-Anchor\" href=\"#编码过程\"></a> 编码过程</h3>\n<p>对于每个通道的每个块的编码过程：</p>\n<ol>\n<li>决定块要使用的预测器</li>\n<li>决定块的初始 idelta</li>\n<li>输出块的头</li>\n<li>编码并输出数据</li>\n</ol>\n<p>块头写入：</p>\n<ol>\n<li>对每一个通道，输出预测器的选择</li>\n<li>对每一个通道，输出初始 idelta (量化比例)</li>\n<li>对每一个通道，输出第一个采样的 16bit PCM 值</li>\n<li>对每一个通道，输出第二个采样的 16bit PCM 值</li>\n</ol>\n<p>然后剩下的块就可以进行编码。<strong>注意第一个编码的值是块的第三个采样，因为前两个已经包含在头中了。</strong></p>\n<p>当块中有许多采样需要进行编码，将采取下列步骤：</p>\n<ol>\n<li>从前两个采样中预测下一个样本：<br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231123215918.webp\" alt=\"image.png\" /></li>\n</ol>\n<blockquote>\n<p>用预测系数计算会导致运算量增长，而除以 256 只需要移位，无浮点数除法</p>\n</blockquote>\n<ol start=\"2\">\n<li>产生 4bit 有符号 error delta 以及避免上/下溢：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi><mo>=</mo><mfrac><mrow><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>I</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi></mrow><mrow><mi>i</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">ierrordelta=\\frac{sample(n)-Ipredsamp}{idelta}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 并将 ierrordelta 的范围修剪至[-8,7]</li>\n<li>于是输出 nibble ierrordelta=<code>putnibble(ierrordelta)</code></li>\n<li>把「预测错误」加到预测的下一个样本，并避免上/下溢：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mi>n</mi><mi>e</mi><mi>w</mi><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi><mo>=</mo><mi>I</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi><mo>∗</mo><mi>i</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Inewsamp=Ipredsample+(idelta*ierrordelta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span> 将其缩紧至 16bit（short）</li>\n<li>调整用于计算「预测错误」的量化步长：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi><mo>=</mo><mfrac><mrow><mi>i</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi><mo>∗</mo><mi>a</mi><mi>d</mi><mi>a</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mi>e</mi><mi>r</mi><mi>r</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi><mo stretchy=\"false\">]</mo></mrow><mrow><mi>f</mi><mi>i</mi><mi>x</mi><mi>e</mi><mi>d</mi><mi mathvariant=\"normal\">_</mi><mi>p</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>t</mi><mi mathvariant=\"normal\">_</mi><mi>a</mi><mi>d</mi><mi>a</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi mathvariant=\"normal\">_</mi><mi>b</mi><mi>a</mi><mi>s</mi><mi>e</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">idelta=\\frac{idelta*adaptiontable[ierrordelta]}{fixed\\_point\\_adaption\\_base}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.572em;vertical-align:-0.5619999999999999em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mtight\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mtight\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mtight\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal mtight\">b</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">e</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">∗</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">p</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">b</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5619999999999999em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> 如果 idelta 过小，将其设为最小的合法值</li>\n<li>更新先前样本的记录：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi><mn>2</mn><mo>=</mo><mi>i</mi><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi><mn>1</mn><mo separator=\"true\">;</mo><mi>i</mi><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi><mn>1</mn><mo>=</mo><mi>I</mi><mi>n</mi><mi>e</mi><mi>w</mi><mi>s</mi><mi>a</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">isamp2 = isamp1; isamp1 = Inewsample</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">1</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span></span></span></span><br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102131901.webp\" alt=\"image.png\" /><br />\n步骤 5 的目的是自适应量化步长。<br />\n步骤 4.6 是为了保持和解码端一致，真正预测时是通过编码解码后的信号。此时和解码端保持一致，使误差不会太大。</li>\n</ol>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">习题助记</div>\n</div>\n<div class=\"callout-content\"><p>1.What is audio CD rate?<br />\n44.1KHZ × 2 × 16bit/s = 1.411 Mbit<br />\n2.What are audio coding goals?<br />\ndelity，rate，complexity，delay<br />\n3.List the components of a chunk.<br />\nheader，data<br />\n4.What kind of quantization errors are there in audio coding?<br />\noverlode，round-off<br />\n5.What is the average number of bits per sample in a Huffman code?</p>\n</div></div><h1 id=\"图片和视频编码基础\"><a class=\"markdownIt-Anchor\" href=\"#图片和视频编码基础\"></a> 图片和视频编码基础</h1>\n<p>🔺人类视觉系统对低频图像更敏感。</p>\n<blockquote>\n<p>图形学中的高低频：图像的低频代表着轮廓信息，高频代表着细节信息，相位代表位置信息。</p>\n</blockquote>\n<p>特定自然视频片段中与视频处理和压缩相关的特征：</p>\n<ul>\n<li>空间特征：纹理变化、物体对象的数目和形状、颜色</li>\n<li>时间特征：物体运动、光线变化、摄像机/视角变化</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102195839.webp\" alt=\"image.png\" /></p>\n<p>帧率：</p>\n<ul>\n<li>每秒小于 10 帧：用于超低比特流视频通信</li>\n<li>10~20 帧：典型低比特率视频通信</li>\n<li><strong>25~30 帧：电视图像标准</strong></li>\n<li>50~60 帧：平滑（高数据率）</li>\n</ul>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 23：色彩空间</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>色彩空间：</p>\n<ul>\n<li>单色图：仅需一个数字表示某一个空间采样的亮度</li>\n<li>彩色图：至少需要三个数字才能准确表示某一个像素的颜色</li>\n</ul>\n<p>代表亮度和色彩的方法称为色彩空间：</p>\n<ul>\n<li>RGB 色彩空间：捕获和显示图像的恰当方法。RGB 色彩空间中三种颜色同样重要，通常分辨率也相同。彩色阴极射线管（CRT）和液晶显示器（LCD）应用 RGB。</li>\n<li>YCbCy 色彩空间（YUV 色彩模型）</li>\n</ul>\n<p><strong>图像的视觉质量受采样点数量的影响。</strong></p>\n<h2 id=\"ycbcr\"><a class=\"markdownIt-Anchor\" href=\"#ycbcr\"></a> YCbCr</h2>\n<p>🔺<span style=\"color:#ff0000\">人类视觉系统对<b>亮度</b>更敏感（和颜色相比）</span></p>\n<blockquote>\n<p>人眼的视杆细胞（感知亮度）比视锥细胞（感知色彩）数量多。</p>\n</blockquote>\n<h3 id=\"色彩空间\"><a class=\"markdownIt-Anchor\" href=\"#色彩空间\"></a> 色彩空间</h3>\n<p>在 RGB 颜色空间中，这三种颜色同等重要，因此通常都以相同的分辨率存储。</p>\n<p>YCbCr 区分亮度和色度，亮度具有更高的分辨率。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231106221610.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>Y：亮度（luma），RGB 的加权平均，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>=</mo><msub><mi>k</mi><mi>r</mi></msub><mi>R</mi><mo>+</mo><msub><mi>k</mi><mi>g</mi></msub><mi>G</mi><mo>+</mo><msub><mi>k</mi><mi>b</mi></msub><mi>B</mi><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>k</mi><mi>g</mi></msub><mtext> </mtext><mo>=</mo><mtext> </mtext><mn>1</mn><mo>−</mo><msub><mi>k</mi><mi>b</mi></msub><mo>−</mo><msub><mi>k</mi><mi>r</mi></msub></mrow><annotation encoding=\"application/x-tex\">Y=k_rR+k_gG+k_bB, k_g = 1-k_b-k_r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\"> </span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></p>\n<p>Cb：彩度蓝</p>\n<p>Cr：彩度红</p>\n<p>每一个色度是 R、G、B、Y 之间的差异</p>\n<p>为了降低存储和传输需求，可以将 RGB 图像转换为 YCbCr 图像</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102195927.webp\" alt=\"image.png\" /></p>\n<p>ITU-R 建议的系数定义：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mi>b</mi></msub><mo>=</mo><mn>0.114</mn><mo separator=\"true\">,</mo><msub><mi>k</mi><mi>r</mi></msub><mo>=</mo><mn>0.299</mn></mrow><annotation encoding=\"application/x-tex\">k_b=0.114, k_r=0.299</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mord\">9</span></span></span></span></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200018.webp\" alt=\"image.png\" /></p>\n<h3 id=\"采样格式\"><a class=\"markdownIt-Anchor\" href=\"#采样格式\"></a> 采样格式</h3>\n<p>为了利用人眼对亮度和色度的不同敏感性，将视频信号转换为亮度/色彩空间时，可以对色度进行空间上的次采样或低通滤波</p>\n<h4 id=\"444-采样\"><a class=\"markdownIt-Anchor\" href=\"#444-采样\"></a> 4:4:4 采样</h4>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200027.webp\" alt=\"image.png\" width=\"205px\" /></p>\n<p>Y，Cb 和 Cr 有着相同的分辨率。因此每一个分量存在于任何位置的像素上</p>\n<h4 id=\"422-采样\"><a class=\"markdownIt-Anchor\" href=\"#422-采样\"></a> 4:2:2 采样</h4>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200042.webp\" alt=\"image.png\" width=\"187px\" /></p>\n<p>色度组件的垂直分辨率与亮度相同，但水平分辨率只有亮度的一半。</p>\n<p>用于高质量彩色录制。</p>\n<h4 id=\"420-采样\"><a class=\"markdownIt-Anchor\" href=\"#420-采样\"></a> 4:2:0 采样</h4>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200051.webp\" alt=\"image.png\" /></p>\n<p>Cb 和 Cr 的水平和垂直分辨率都是 Y 的一半。</p>\n<p>广泛用于消费类应用，如视频会议、DVD。</p>\n<p><strong>需要的采样数（比特）是 4:4:4 视频（或 RGB 视频）的一半</strong>。</p>\n<blockquote>\n<p>为什么不叫做 4:1:1 采样？<br />\n因为在历史上 4:1:1 采样已被用于指代这种采样：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200109.webp\" alt=\"image.png\" width=\"275px\" /></p>\n</blockquote>\n<p>例子：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200139.webp\" alt=\"image.png\" width=\"375px\" /></p>\n<h2 id=\"视频帧格式\"><a class=\"markdownIt-Anchor\" href=\"#视频帧格式\"></a> 视频帧格式</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 24：视频帧格式</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>在进行压缩和传输之前，捕获的视频会被捕获或转换为一组“中间格式”之一。</p>\n<p>常见的中间格式（CIF）是一组流行格式的基础。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200202.webp\" alt=\"image.png\" width=\"375px\" /></p>\n<h2 id=\"质量评估\"><a class=\"markdownIt-Anchor\" href=\"#质量评估\"></a> 质量评估</h2>\n<h3 id=\"主观测量itu-r-500\"><a class=\"markdownIt-Anchor\" href=\"#主观测量itu-r-500\"></a> 主观测量——ITU-R 500</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200215.webp\" alt=\"image.png\" /></p>\n<p>通常采用的手段：双刺激连续质量量表（Double Stimulus Continuous Quality Scale）</p>\n<p>花费昂贵，耗时长</p>\n<h3 id=\"客观质量测量\"><a class=\"markdownIt-Anchor\" href=\"#客观质量测量\"></a> 客观质量测量</h3>\n<blockquote>\n<p>峰值信噪比 ( PSNR ) 用于表示信号的最大可能功率与影响其表示的保真度的破坏噪声的功率之间的比率。虽然较高的 PSNR 通常表明重建质量较高，但在某些情况下可能并非如此，必须非常小心该指标的有效性范围。只有当它用于比较来自相同编解码器和相同内容的结果时，它才是最终有效的。一般来说，在估计图像质量，尤其是人类感知的视频质量时，与其他质量指标相比，PSNR 表现不佳。</p>\n</blockquote>\n<p>运用最广泛的是<strong>峰值信噪比（Peak Signal to Noise Ratio, PSNR）</strong></p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><msub><mrow><mi>P</mi><mi>S</mi><mi>N</mi><mi>R</mi></mrow><mrow><mi>d</mi><mi>B</mi></mrow></msub><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mn>10</mn><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><mfrac><mrow><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup></mrow><mrow><mi>M</mi><mi>S</mi><mi>E</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>S</mi><mi>N</mi><mi>R</mi><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mn>10</mn><mi>log</mi><mo>⁡</mo><mfrac><msubsup><mi>x</mi><mrow><mi>i</mi><mi>n</mi></mrow><mn>2</mn></msubsup><msup><mi>q</mi><mn>2</mn></msup></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n{PSNR}_{dB} =&amp; 10 \\log_{10}{\\frac{(2^n-1)^2}{MSE}} \\\\\nSNR=&amp;10 \\log{\\frac{x_{in}^2}{q^2}}\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:5.148656000000001em;vertical-align:-2.3243280000000004em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.8243280000000004em;\"><span style=\"top:-4.824328em;\"><span class=\"pstrut\" style=\"height:3.491108em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span><span style=\"top:-2.34722em;\"><span class=\"pstrut\" style=\"height:3.491108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3243280000000004em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.8243280000000004em;\"><span style=\"top:-4.824328em;\"><span class=\"pstrut\" style=\"height:3.491108em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span style=\"top:-2.34722em;\"><span class=\"pstrut\" style=\"height:3.491108em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-2.441336em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3243280000000004em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>MSE：原始图像和受损图像或视频帧之间的均方误差</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200250.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<h2 id=\"图像视频处理准则\"><a class=\"markdownIt-Anchor\" href=\"#图像视频处理准则\"></a> 图像视频处理准则</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 25：图像视频处理准则：四种类型冗余度</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>目标是减少信号中存在的冗余（🔺视频编码的四种冗余度）：</p>\n<ul>\n<li>时间冗余度（Temporal redundancy）：两帧相像</li>\n<li>空间冗余度（Spatial redundancy）：两点相像</li>\n<li>统计冗余度（Perceptual redundancy）</li>\n<li>感知冗余度（Statistical redundancy）</li>\n</ul>\n<h2 id=\"jpeg-图像压缩\"><a class=\"markdownIt-Anchor\" href=\"#jpeg-图像压缩\"></a> JPEG 图像压缩</h2>\n<p>基本流程：</p>\n<ul>\n<li>在 JPEG 压缩中，图像被划分为 8×8 像素的块，然后对每个块进行 2-D 离散余弦转换（DCT）。</li>\n<li>DCT 将像素块中的大多数信号压缩为小的 DCT 系数部分。</li>\n<li>量化这些 DCT 系数将使得它们大部分转化为 0。</li>\n<li>这些被量化的系数以之字形进行扫描，再进行游程编码和哈夫曼编码。</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200322.webp\" alt=\"image.png\" /></p>\n<h2 id=\"帧内帧间预测\"><a class=\"markdownIt-Anchor\" href=\"#帧内帧间预测\"></a> 帧内帧间预测</h2>\n<p>每一帧可以都被编码为分开的图像，例如对每一帧独立应用类似 JPEG 的编码。</p>\n<p>视频压缩通过利用时间冗余或帧间相似性达到比图片更好的压缩效果。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200334.webp\" alt=\"image.png\" /></p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 26：视频编码中，编码帧的三种基本类型</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>🔺编码帧的三种基本类型：</p>\n<ul>\n<li>帧内编码帧（I - 帧）：独立于于所有其他帧进行编码</li>\n<li>预测编码帧（P - 帧）：基于先前编码的帧进行编码</li>\n<li>双向预测帧（B - 帧）：基于先前帧和未来帧进行编码</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200349.webp\" alt=\"image.png\" /></p>\n<h2 id=\"运动估计与补偿\"><a class=\"markdownIt-Anchor\" href=\"#运动估计与补偿\"></a> 运动估计与补偿</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 27：运动估计和补偿</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>为了最大限度利用相邻帧的可预测性，在运动补偿过程中估算两帧之间的移动并形成正确预测是非常重要的。</p>\n<p>估计帧与帧之间运动的过程称为运动估计；基于先前编码的参考帧预测给定帧，同时补偿两帧之间的相对运动的过程称为运动补偿预测 (MC-prediction)。</p>\n<h3 id=\"基于块的的运动估计补偿\"><a class=\"markdownIt-Anchor\" href=\"#基于块的的运动估计补偿\"></a> 基于块的的运动估计补偿</h3>\n<p>对于当前帧 M×N 样本的每个块：</p>\n<ol>\n<li>在参考帧中搜索一个区域，以找到一个“匹配”的 M×N 样本区域</li>\n<li>被选中的候选区域称为当前块的预测块，并将其与当前块相减，得到残差</li>\n<li>将残差块编译传输，当前块和候选位置区域之间的偏移（运动向量）也将被传输</li>\n</ol>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200446.webp\" alt=\"image.png\" /></p>\n<h3 id=\"运动补偿块的大小\"><a class=\"markdownIt-Anchor\" href=\"#运动补偿块的大小\"></a> 运动补偿块的大小</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200456.webp\" alt=\"image.png\" /></p>\n<h3 id=\"子像素运动补偿\"><a class=\"markdownIt-Anchor\" href=\"#子像素运动补偿\"></a> 子像素运动补偿</h3>\n<p>一个更好的运动补偿预测可以由参考帧中的差值样本位置构建。</p>\n<p>分像素运动估计补偿引入查找分样本差值位置和整样本位置，选择最匹配的位置，并使用该位置的整数或子样本值进行运动补偿预测。</p>\n<p>过程：</p>\n<ol>\n<li>在整样本网格（圆圈标记）中找到最佳匹配</li>\n<li>搜索紧挨着最佳匹配（方块标记）的半样本位置。</li>\n<li>如果需要，则搜索最佳半样本位置（三角形标记）旁边的四分之一样本位置</li>\n</ol>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200508.webp\" alt=\"image.png\" /></p>\n<p>预测越精确，残差越小，motion vector 数据量增加。</p>\n<p>随着插补步骤的增加，性能增益趋于减小：</p>\n<ul>\n<li>与整样本运动补偿相比，半样本插值具有显著的增益。</li>\n<li>四分之一样本插值有一定适度改进。</li>\n<li>8 个样本插值改进更小，以此类推。</li>\n</ul>\n<p>与更复杂的运动补偿方案相关的压缩效率权衡：<strong>更精确的运动补偿需要更多的比特来编码向量域，但编码残差比特数更少；反之亦然。</strong></p>\n<h2 id=\"图像模型\"><a class=\"markdownIt-Anchor\" href=\"#图像模型\"></a> 图像模型</h2>\n<ol>\n<li>转换：压缩数据并去相关</li>\n<li>量化：降低传输数据的精确度</li>\n<li>重新排序：组织数据以合并重要值</li>\n<li>预测图像编码</li>\n</ol>\n<h3 id=\"预测图像编码\"><a class=\"markdownIt-Anchor\" href=\"#预测图像编码\"></a> 预测图像编码</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200520.webp\" alt=\"image.png\" /></p>\n<p>空间预测，以 DPCM 为例：</p>\n<ol>\n<li>编码预测：prediction P(X) = (2A+B+C)/4</li>\n<li>残差计算：R(X) = X-P(X) ，然后编码并传输 R(X)</li>\n<li>解码器解码残差并形成预测：P(X) = (2A+B+C)/4</li>\n<li>重建像素：X = R(X) + P(X)</li>\n</ol>\n<h3 id=\"转换编码\"><a class=\"markdownIt-Anchor\" href=\"#转换编码\"></a> 转换编码</h3>\n<p>转换后的数据应当去相关且被压缩：在转换后的数据中，大多数的信息应当被集中于少量的值中。</p>\n<p>转换应当可逆。</p>\n<p>转换应当容易计算：低内存需求、可使用有限精度算法实现、算数操作数低</p>\n<p>目前有许多转换：KLT，SVD，DCT</p>\n<p>在 N×N 样本块中，DCT 始终受欢迎，且图像一直在块单元中被处理。</p>\n<p>运动补偿残差往往会受到块边缘的伪影（blockiness）的影响。</p>\n<p>对整个图像或帧做的基于图像的转换操作有：</p>\n<ul>\n<li>图像传输（离散小波变换 DWT）胜过静态图像压缩的块传输（JPEG2000）</li>\n<li>DWT 需要更高的内存需求（尤其是大图像），因为是以整个图像作为一个单元处理图像的</li>\n<li><strong>DWT 并不“适合”基于块的运动补偿</strong></li>\n</ul>\n<h4 id=\"2d-dct\"><a class=\"markdownIt-Anchor\" href=\"#2d-dct\"></a> 2D-DCT</h4>\n<p>正向离散余弦转换：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo>=</mo><mi>A</mi><mi>X</mi><msup><mi>A</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">Y=AXA^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>逆 DCT（IDCT）：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><msup><mi>A</mi><mi>T</mi></msup><mi>Y</mi><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">X=A^TYA</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord mathnormal\">A</span></span></span></span></p>\n<p>X 为 N×N 样本块，Y 为系数矩阵，A 为 N×N 传输矩阵</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200620.webp\" alt=\"image.png\" /></p>\n<p>例子：N=4，有 A：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200637.webp\" alt=\"image.png\" /></p>\n<h4 id=\"dct-系数的特征\"><a class=\"markdownIt-Anchor\" href=\"#dct-系数的特征\"></a> DCT 系数的特征</h4>\n<p>FDCT 输出是一组 N×N 的系数，表示 DCT 域中的图像块数据。</p>\n<p>DCT 自身保存所有 N×N 图像块中的信息。</p>\n<p>人眼对低频 DCT 参数更加敏感。</p>\n<p>DCT 有助于将感知上重要的信息与感知上不重要的信息分离开来。</p>\n<p><strong>用更高的精度编码低频的 DCT 信息，但使用更少或不使用比特来编码高频系数，从而丢弃在感知上不太重要的信息。</strong></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102200648.webp\" alt=\"image.png\" /></p>\n<p>在计算 IDCT 之前添加更多的系数，会逐渐提高原始区块的重建精度，到包含五个系数时，重建的区块与原始区块的匹配程度相当接近。</p>\n<p>可以从 16 个 DCT 系数的子集中重建块的近似副本。</p>\n<h4 id=\"dct-计算复杂性\"><a class=\"markdownIt-Anchor\" href=\"#dct-计算复杂性\"></a> DCT 计算复杂性</h4>\n<p>在典型的 DSP 上，单个 8×8 DCT 或 IDCT 需要几百个指令周期。</p>\n<p>以 CIF (352×288) 分辨率和 30 fps 帧率运行的解码器可能需要高达 71,280 IDCT /秒。</p>\n<p>IDCT 计算可占用高达 30% 的视频解码器编译周期。</p>\n<p>由于 DCT 和 IDCT 在小图像块上操作，因此内存需求相当小，与图像和视频压缩应用程序中的帧缓冲区和其他数据的大小相比，通常可以忽略不计。</p>\n<p>DCT 和 IDCT 函数的<strong>高计算需求和小内存需求</strong>使它们成为使用专用硬件加速器实现的理想候选者。</p>\n<h3 id=\"量化-2\"><a class=\"markdownIt-Anchor\" href=\"#量化-2\"></a> 量化</h3>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>F</mi><mi>Q</mi><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mrow><mo fence=\"true\">(</mo><mfrac><mi>X</mi><mrow><mi>Q</mi><mi>P</mi></mrow></mfrac><mo fence=\"true\">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>Y</mi><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mi>F</mi><mi>Q</mi><mo>⋅</mo><mi>Q</mi><mi>P</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nFQ = &amp;round\\left( \\frac{X}{QP} \\right) \\\\\nY=&amp;FQ\\cdot QP\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.20003em;vertical-align:-1.850015em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.350015em;\"><span style=\"top:-4.350015000000001em;\"><span class=\"pstrut\" style=\"height:3.45em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span><span style=\"top:-2.2599850000000004em;\"><span class=\"pstrut\" style=\"height:3.45em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.850015em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.350015em;\"><span style=\"top:-4.350015000000001em;\"><span class=\"pstrut\" style=\"height:3.45em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span></span><span style=\"top:-2.2599850000000004em;\"><span class=\"pstrut\" style=\"height:3.45em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.850015em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>QP 表示量化步长。</p>\n<p>量化用于<strong>丢弃感知上不重要的信息</strong>。</p>\n<p>量化后，使用统计方法对剩余信息进行编码，从而使用尽可能少的比特。</p>\n<p>量化和去量化对内存的要求通常可以忽略不计。</p>\n<h3 id=\"游程编码rlc\"><a class=\"markdownIt-Anchor\" href=\"#游程编码rlc\"></a> 游程编码（RLC）</h3>\n<p>量化后，绝大多数高频 DCT 系数为零。</p>\n<p>游程编码：</p>\n<ul>\n<li>将连续的 0 值系数成组（一个游程）</li>\n<li>编码 0 的个数（长度），不编码单独 0 系数</li>\n</ul>\n<p><strong>为了使连续零值系数的平均值尽可能高</strong>，我们以对角之字形的方式扫描 DCT 系数矩阵。</p>\n<p>游程编码（RLC，Run-length coding）之后通常是可变长度编码（VLC）。</p>\n<h3 id=\"重新排序\"><a class=\"markdownIt-Anchor\" href=\"#重新排序\"></a> 重新排序</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102201034.webp\" alt=\"image.png\" width=\"278px\" /></p>\n<p><strong>重排序是将非零系数组合在一起，实现有效地表示零系数</strong></p>\n<h3 id=\"可变长度编码vlc\"><a class=\"markdownIt-Anchor\" href=\"#可变长度编码vlc\"></a> 可变长度编码（VLC）</h3>\n<p>一对（游程，量化 DCT 系数）的每个可能值称为一个符号。</p>\n<p>常见的符号被分配较短的码字，而不常见的符号被分配较长的码字。</p>\n<p>VLC 的一个缺点是编码图像中间的比特误差会阻止解码器正确重建剩余的比特流。</p>\n<p>通过在整个编码比特流中散布“重新同步标记”，解码器能够在发生错误时搜索下一个重新同步标记以进行同步。</p>\n<h2 id=\"视频编码结构\"><a class=\"markdownIt-Anchor\" href=\"#视频编码结构\"></a> 视频编码结构</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102201058.webp\" alt=\"image.png\" /></p>\n<h2 id=\"通用视频编码模型\"><a class=\"markdownIt-Anchor\" href=\"#通用视频编码模型\"></a> 通用视频编码模型</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102201109.webp\" alt=\"image.png\" /></p>\n<h2 id=\"编码数据流\"><a class=\"markdownIt-Anchor\" href=\"#编码数据流\"></a> 编码数据流</h2>\n<p>编码器的两个主要的数据流路径：从左到右（编码）、从右到左（重建）。</p>\n<p>编码流：</p>\n<ol>\n<li>输入视频帧 Fn 用于编码，并以宏块为单位进行处理</li>\n<li>Fn 和参考帧（如前编码帧 F’n-1）对比。运动估计函数在 F’n-1 中 16×16 的区域，查找出一个 Fn 中当前宏块的一个匹配。当前宏块位置和被选中的参考区域的偏移为一个移动向量（MV，motion vector）</li>\n<li>基于被选中的 MV，生成运动补偿预测 P（被运动估计器选择的 16×16 区域）</li>\n<li>当前宏块中减去 P 产生残差或 difference 宏块 D。</li>\n</ol>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102201156.webp\" alt=\"image.png\" /></p>\n<p>数据重建流：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102201207.webp\" alt=\"image.png\" /></p>\n<h2 id=\"解码数据流\"><a class=\"markdownIt-Anchor\" href=\"#解码数据流\"></a> 解码数据流</h2>\n<p>解码数据流：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102201222.webp\" alt=\"image.png\" /></p>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">习题助记</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ol>\n<li>Write down the full name of ADPCM in English<br />\nAdaptive Differential Pulse Code Modulation</li>\n<li>List the four types of redundancy used in video coding<br />\n时间、空间、感知、统计</li>\n<li>What is the sample resolution of CIF<br />\n352×288</li>\n<li>Write down the formula of PSNR</li>\n<li>ln video coding , there are three basic types of coded frames, what are they?<br />\nI P B</li>\n<li>What is the purpose of DCT?<br />\n去相关，使数据更紧凑</li>\n<li>What is the purpose of Zigzag Scan or reordering?<br />\n是将非零系数组合在一起并有效地表示零系数</li>\n<li>What is the purpose of quantization?<br />\n量化用于丢弃感知上无关紧要的信息</li>\n<li>In motion estimation and compensation, what kind of redundancy is used in video coding?<br />\ntemporal 时间冗余</li>\n<li>In 010 editor template, the following variable is defined at the beginning: char type[4];<br />\nThe variable type is mapped to 0 bytes 3 to in the file.</li>\n</ol>\n</div></div><h2 id=\"本小节参考链接\"><a class=\"markdownIt-Anchor\" href=\"#本小节参考链接\"></a> 本小节参考链接</h2>\n<ul>\n<li><a href=\"https://blog.csdn.net/Doctor__Chen/article/details/124781119\">质量评估指标：PSNR（Peak signal-to-noise ratio 峰值信噪比）_psnr指标_花生树什么树的博客-CSDN博客</a></li>\n<li><a href=\"https://www.zhihu.com/question/22085329/answer/774074211\">傅里叶变换、拉普拉斯变换、Z 变换的联系是什么？为什么要进行这些变换？ - 知乎 (zhihu.com)</a></li>\n</ul>\n<h1 id=\"jpeg-图像编码\"><a class=\"markdownIt-Anchor\" href=\"#jpeg-图像编码\"></a> JPEG 图像编码</h1>\n<p><strong>Baseline 方法是迄今为止实现最广泛的 JPEG 方法。</strong></p>\n<h2 id=\"基于-dct-的编码解码过程\"><a class=\"markdownIt-Anchor\" href=\"#基于-dct-的编码解码过程\"></a> 基于 DCT 的编码/解码过程</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102201904.webp\" alt=\"image.png\" /></p>\n<p>编码过程：</p>\n<ol>\n<li>输入的组件样本为 8×8 块</li>\n<li>每个块被前向 DCT（FDCT）转换为一组 64 个值，作为 DCT 系数。<br />\na. 第一个值称为 DC 系数<br />\nb. 其他 63 个值为 AC 系数</li>\n<li>然后使用量化表中 64 个对应值中的一个对 64 个系数中的每个系数进行量化</li>\n<li>然后将量化系数传递给熵编码过程，以进一步压缩</li>\n</ol>\n<p>解码过程：</p>\n<ol>\n<li>熵解码器解码之字形的量化 DCT 系数</li>\n<li>解量化后，通过反向 DCT（IDCT）将 DCT 系数转化为 8*8 样本块</li>\n</ol>\n<h2 id=\"前向-dctfdct\"><a class=\"markdownIt-Anchor\" href=\"#前向-dctfdct\"></a> 前向 DCT（FDCT）</h2>\n<p>在编码器的输入中，原图像采样以 8×8 块成组，从无符号整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><msup><mn>2</mn><mi>P</mi></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,2^P-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 的范围转换为有符号整数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><msup><mn>2</mn><mrow><mi>P</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator=\"true\">,</mo><msup><mn>2</mn><mrow><mi>P</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-2^{P-1},2^{P-1}-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>，然后输入到 FDCT 中：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231123215755.webp\" alt=\"image.png\" /></p>\n<p>其中，</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left right\" columnspacing=\"0em 1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><msqrt><mn>2</mn></msqrt><mo separator=\"true\">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>w</mi><mi>h</mi><mi>e</mi><mi>n</mi><mtext> </mtext><mi>u</mi><mo separator=\"true\">,</mo><mi>v</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mn>1</mn><mo separator=\"true\">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mi>c</mi><mi>o</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>s</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nC(u),C(v)=&amp;1/\\sqrt{ 2 }, &amp;when~u,v=0\\\\\nC(u),C(v)=&amp;1,&amp;other~conditions\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.1160950000000005em;vertical-align:-1.3080475000000003em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8080475000000003em;\"><span style=\"top:-3.8519525000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span><span style=\"top:-2.3519525em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3080475000000003em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8080475000000003em;\"><span style=\"top:-3.8519525000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.956095em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.916095em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.08390500000000001em;\"><span></span></span></span></span></span><span class=\"mpunct\">,</span></span></span><span style=\"top:-2.3519525em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3080475000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8080475000000003em;\"><span style=\"top:-3.8519525000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mspace nobreak\"> </span><span class=\"mord mathnormal\">u</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.3519525em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace nobreak\"> </span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3080475000000003em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h2 id=\"反向-dctidct\"><a class=\"markdownIt-Anchor\" href=\"#反向-dctidct\"></a> 反向 DCT（IDCT）</h2>\n<p>解码器的输出中，IDCT 输出 8×8 采样块以形成重构图片：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231123215702.webp\" alt=\"image.png\" /></p>\n<p>其中，</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left right\" columnspacing=\"0em 1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><msqrt><mn>2</mn></msqrt><mo separator=\"true\">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>w</mi><mi>h</mi><mi>e</mi><mi>n</mi><mtext> </mtext><mi>u</mi><mo separator=\"true\">,</mo><mi>v</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>C</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mn>1</mn><mo separator=\"true\">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mtext> </mtext><mi>c</mi><mi>o</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>s</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nC(u),C(v)=&amp;1/\\sqrt{ 2 }, &amp;when~ u,v=0\\\\\nC(u),C(v)=&amp;1,&amp;other ~conditions\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.1160950000000005em;vertical-align:-1.3080475000000003em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8080475000000003em;\"><span style=\"top:-3.8519525000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span><span style=\"top:-2.3519525em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3080475000000003em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8080475000000003em;\"><span style=\"top:-3.8519525000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.956095em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.916095em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.08390500000000001em;\"><span></span></span></span></span></span><span class=\"mpunct\">,</span></span></span><span style=\"top:-2.3519525em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3080475000000003em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8080475000000003em;\"><span style=\"top:-3.8519525000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mspace nobreak\"> </span><span class=\"mord mathnormal\">u</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.3519525em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace nobreak\"> </span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3080475000000003em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h2 id=\"块样本和-dct-系数的关系\"><a class=\"markdownIt-Anchor\" href=\"#块样本和-dct-系数的关系\"></a> 块样本和 DCT 系数的关系</h2>\n<ul>\n<li>对一个块进行前向 DCT 计算后，64 个 DCT 系数结果被均匀量化器量化</li>\n<li>每一个系数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mrow><mi>v</mi><mi>u</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">S_{vu}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal mtight\">u</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的量化器步长为对应量化表中的元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Q</mi><mrow><mi>v</mi><mi>u</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">Q_{vu}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal mtight\">u</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202014.webp\" alt=\"image.png\" /></li>\n</ul>\n<h2 id=\"dc-编码\"><a class=\"markdownIt-Anchor\" href=\"#dc-编码\"></a> DC 编码</h2>\n<p>相邻的 8×8 块之间的 DC 系数通常有着强烈的关联性。量化的 DC 系数被编码为与前块的 DC 项的差值。这种特殊处理是值得的，因为 DC 系数包含了总图像能量的很大一部分。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202041.webp\" alt=\"image.png\" /></p>\n<h2 id=\"之字形扫描\"><a class=\"markdownIt-Anchor\" href=\"#之字形扫描\"></a> 之字形扫描</h2>\n<p>所有的量化系数将以之字形顺序进行组织，将低频系数（一般为非 0）放置在高频系数前，以便于进行熵编码。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202052.webp\" alt=\"image.png\" /></p>\n<h2 id=\"压缩与图像质量\"><a class=\"markdownIt-Anchor\" href=\"#压缩与图像质量\"></a> 压缩与图像质量</h2>\n<p>对于较复杂场景的彩色图像，所有基于 DCT 的操作模式通常会产生以下级别的图像质量：</p>\n<ul>\n<li>0.25-0.5 比特/像素：中等至良好质量</li>\n<li>0.5-0.75 比特/像素：良好至优秀质量</li>\n<li>0.75-1.5 比特/像素：杰出质量，满足大多数的应用</li>\n<li>1.5-2.0 比特/像素：和原图相差无几，满足有高质量需求的应用</li>\n</ul>\n<p>根据源特性和场景内容的不同，质量和压缩会有很大的不同。</p>\n<h2 id=\"具有多个组件的源图像\"><a class=\"markdownIt-Anchor\" href=\"#具有多个组件的源图像\"></a> 具有多个组件的源图像</h2>\n<p>源图像可能包含 1~255 个图像组件。每一个组件包含样本的矩形数组。</p>\n<p>样本被定义为一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><msup><mn>2</mn><mrow><mi>P</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0, 2^{P-1}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0913309999999998em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">P</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> 范围的无符号整数。</p>\n<p>图像中的所有样本必须有着相同的精度 P，对于基于 DCT 的编解码器，P 可以是 8 或 12。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202132.webp\" alt=\"image.png\" /></p>\n<h2 id=\"多组件交织\"><a class=\"markdownIt-Anchor\" href=\"#多组件交织\"></a> 多组件交织</h2>\n<p>许多应用程序需要将显示/打印多组件图像的过程与解压过程并行。</p>\n<p>这只有在组件在压缩数据流中交织在一起时才可行。</p>\n<p>编码交错：如果编码器从 a 压缩一个数据单元，从 B 压缩一个数据单元，从 C 压缩一个数据单元，然后返回到 a…</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202143.webp\" alt=\"image.png\" /></p>\n<h2 id=\"不同维度的组件交织顺序\"><a class=\"markdownIt-Anchor\" href=\"#不同维度的组件交织顺序\"></a> 不同维度的组件交织顺序</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202151.webp\" alt=\"image.png\" /></p>\n<p>上例中，B、C 在水平方向上与 A 相比少了一半样本。在这个例子中，A 的两个数据单元和 B、C 的各一个单元进行交织。</p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 28：JPEG 编码与解码过程：最小编码单元、操作模式、DC 熵编码、AC 熵编码、游程、SIZE、EOB</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h2 id=\"最小编码单元-mcu\"><a class=\"markdownIt-Anchor\" href=\"#最小编码单元-mcu\"></a> 最小编码单元 MCU</h2>\n<p>在基于 DCT 的编解码器中，<strong>数据单元</strong>是一个 8x8 的样本块。</p>\n<p><span style=\"color:#ff0000\">最小编码单元 MCU</span>：最小的交错<strong>数据单元</strong>组。对于非交错数据，MCU 是一个数据单元。对于交错数据，MCU 是由扫描中组件的采样因子定义的数据单元序列。交错数据是 MCU 的有序序列，MCU 中包含的数据单元数由交错的元件数及其相对采样因子决定。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202208.webp\" alt=\"image.png\" /></p>\n<p>当两个或更多的组件进行交织时，每一个组件 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">C_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 被 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">V_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 个数据单元划分为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>H</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的矩形区域。<strong>最大的组件交织数为 4，且每个 MCU 的数据单元最大值为 10</strong>：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munder><mo>∑</mo><mi>i</mi></munder><mrow><msub><mi>H</mi><mi>i</mi></msub><mo>×</mo><msub><mi>V</mi><mi>i</mi></msub></mrow><mo>≤</mo><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_{i}{H_i\\times V_i}\\le 10\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.327674em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0500050000000003em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span></span></p>\n<p>这里的 i 是所有参与交织的 i。（注：置于 10 这个数字是规定的，没有理由）</p>\n<h2 id=\"操作模式\"><a class=\"markdownIt-Anchor\" href=\"#操作模式\"></a> 操作模式</h2>\n<p>🔺有四种不同的操作模式，在这些模式下定义了各种编码过程：</p>\n<ul>\n<li>基于 DCT 的顺序模式（从上到下，一块一块编码）</li>\n<li>基于 DCT 的渐进模式（从轮廓到细节）</li>\n<li>无损模式</li>\n<li>层次模式</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202314.webp\" alt=\"image.png\" /></p>\n<h3 id=\"顺序模式与渐进模式\"><a class=\"markdownIt-Anchor\" href=\"#顺序模式与渐进模式\"></a> 顺序模式与渐进模式</h3>\n<p>在顺序模式中，每一个图片组件在单个扫描中编码。</p>\n<p>在渐进模式中，每一个图片组件在多次扫描中编码。第一次扫描中编码粗糙，但可识别的图像版本可以快速传输，且通过后续的扫描进行改进，直到达到由量化表确定的图像质量水平。</p>\n<p><span style=\"color:#ff0000\">有两种互补的方法可以对量化 DCT 系数块进行部分编码</span>：</p>\n<ol>\n<li>在给定的扫描中，只有之字形序列特定的系数带需要进行编码</li>\n<li>在给定的扫描中，无需将当前频带内的系数编码为完全（量化）精度。\n<ol>\n<li>最重要的 N 个比特可以在第一次扫描中编码</li>\n<li>在随后的扫描中，次重要的比特再进行编码</li>\n<li>这个过程叫做「连续逼近」</li>\n</ol>\n</li>\n</ol>\n<p>这两种程序可以单独使用，也可以灵活地混合使用。</p>\n<p>量化 DCT 系数的传递：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202328.webp\" alt=\"image.png\" /></p>\n<p>光谱选择与逐次逼近：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202337.webp\" alt=\"image.png\" /></p>\n<h3 id=\"层次模式\"><a class=\"markdownIt-Anchor\" href=\"#层次模式\"></a> 层次模式</h3>\n<p>层次模式以多种分辨率的方式为图片提供金字塔型的编码。每一种的分辨率与其相邻的编码在水平或垂直维度或两者上相差两倍：</p>\n<ol>\n<li>对原始图像在每个维度上按所需的 2 的倍数进行滤波和下采样。</li>\n<li>使用顺序 DCT、渐进式 DCT 或无损编码器之一对这个减小尺寸的图像进行编码。</li>\n<li>解码此缩小尺寸的图像，然后使用接收器必须使用的相同插值滤波器对它进行水平和/或垂直 2 插值和上采样。</li>\n<li>使用此上采样图像作为该分辨率下的原始图像的预测，并使用前面介绍的顺序 DCT，逐行 DCT 或无损编码器之一对差异图像进行编码。</li>\n<li>重复第 3 步和第 4 步，直到图像的全分辨率被编码</li>\n</ol>\n<h2 id=\"基线顺序熵编码\"><a class=\"markdownIt-Anchor\" href=\"#基线顺序熵编码\"></a> 基线顺序熵编码</h2>\n<p>在基线顺序编码器中，FDCT、量化、DC 差分以及之字形排序步骤之后，是熵编码。</p>\n<p>在熵编码之前，通常只有很少的非零系数和很多零值系数。熵编码的任务是更有效地编码这些系数。</p>\n<p>基线顺序熵编码有两个步骤：</p>\n<ol>\n<li>将量化 DCT 系数转换为中间符号序列（游程编码）</li>\n<li>为符号分配可变长度代码（哈夫曼编码）</li>\n</ol>\n<h3 id=\"ac-系数\"><a class=\"markdownIt-Anchor\" href=\"#ac-系数\"></a> AC 系数</h3>\n<p>每一个非零的 AC 系数这样编码：</p>\n<ul>\n<li><code>RUN-LENGTH</code>：之字形扫描序列中，被表示的非零 AC 系数前，连续数字 0 的长度。\n<ul>\n<li><code>RUN-LENGTH</code> 代表 <span style=\"color:#ff0000\">0~15</span>，Symbol-1 中 <code>(15, 0)</code> 代表 <code>RUN-LENGTH</code>=16。</li>\n<li><code>(0,0)</code> 代表 <code>EOB</code>（块结束），可以将其视为“转义”符号。</li>\n</ul>\n</li>\n<li><code>SIZE</code>：编码 <code>AMPLITUDE</code> 所用的比特数</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202410.webp\" alt=\"image.png\" /></p>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">更多例子</div>\n</div>\n<div class=\"callout-content\"><p>0005 → (3,3)(5)<br />\n000003 → (5,2)(3)<br />\n00,-12 →  (2,4)(-12)<br />\n0…(16 个 0)…0 1 → (15,0)(0,1)(1)<br />\n0…(17 个 0)…0 1 → (15,0)(1,1)(1)<br />\n0…(18 个 0)…0 -3 → (15,0)(2,2)(-3)<br />\n00000 3 0…0 → (5,2)(3)(0,0)<br />\n0013 →  (2,1)(1) (0,2)(3)</p>\n</div></div><h3 id=\"amplitude-和-size-的范围\"><a class=\"markdownIt-Anchor\" href=\"#amplitude-和-size-的范围\"></a> AMPLITUDE 和 SIZE 的范围</h3>\n<p>量化 AC 系数的取值范围决定了 AMPLITUDE 和 SIZE 信息必须表示的值的范围。对 8×8 FDCT 方程的数值分析表明，如果 64 点 (8×8 块) 输入信号包含 N 位整数，则输出数字的非小数部分 (DCT 系数) 最多可以增长 3 位。这也是量化 DCT 系数的最大可能大小。</p>\n<p>基线顺序在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup><mo separator=\"true\">,</mo><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-2^7,2^7-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 范围内有 8 位整数源样本，因此量化的 AC 系数幅度由 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><msup><mn>2</mn><mn>10</mn></msup><mo separator=\"true\">,</mo><msup><mn>2</mn><mn>10</mn></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-2^{10},2^{10}-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 范围内的整数覆盖。</p>\n<p>带符号整数编码使用长度为 1 到 10 位的 symbol-2 AMPLITUDE 码，因此 SIZE 也代表 1 到 10 的值。RUNLENGTH 表示从 0 到 15 的值。</p>\n<h3 id=\"dc-系数\"><a class=\"markdownIt-Anchor\" href=\"#dc-系数\"></a> DC 系数</h3>\n<p>8×8 样本块的差分 DC 系数的中间表示结构类似：</p>\n<ul>\n<li>Symbol-1 只表示 SIZE 信息</li>\n<li>Symbol-2 表示振幅信息</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202435.webp\" alt=\"image.png\" /></p>\n<p>因为 DC 系数是差分编码的，所以它覆盖的整数值 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><msup><mn>2</mn><mn>11</mn></msup><mo separator=\"true\">,</mo><msup><mn>2</mn><mn>11</mn></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-2^{11},2^{11}-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 是 AC 系数的两倍，因此必须为 DC 系数增加一个附加的电平。</p>\n<p>因此，DC 系数大小的 symbol–1 表示从 0 到 11 的值。</p>\n<blockquote>\n<p><strong>差分编码</strong>（differential encoding）指的是对数字数据流，除第一个元素外，将其中各元素都表示为各该元素与其前一元素的差的编码。差分编码的简单例子是储存序列式资料之间的差异（而不是储存资料本身）：不存“2, 4, 6, 9, 7”，而是存“2, 2, 2, 3, -2”。</p>\n</blockquote>\n<h3 id=\"可变长度熵编码\"><a class=\"markdownIt-Anchor\" href=\"#可变长度熵编码\"></a> 可变长度熵编码</h3>\n<p>对于 DC 和 AC 系数，每个 symbol-1 均使用来自 Huffman 表集中的可变长度代码（VLC）进行编码。 每个 symbol-2 均使用“可变长度整数”（VLI）码进行编码。</p>\n<p>VLCs 和 VLIs 是具有可变长度的代码，但 VLI 不是霍夫曼代码。一个重要的区别是，VLC（ Huffman code）的长度直到解码才知道，而 VLI 的长度存储在其前一个 VLC 中。</p>\n<p>Huffman 码必须在外部指定为 JPEG 编码器的输入。</p>\n<p>请注意，Huffman 表在数据流中的表示形式是一种间接规范，解码器在解压缩之前必须以此间接规范来构造表（解码时需要重新构建 Huffman 树进行解码）。 JPEG 标准包括一组 Huffman 表的示例，但这不是强制性的。</p>\n<h3 id=\"基线编码例子\"><a class=\"markdownIt-Anchor\" href=\"#基线编码例子\"></a> 基线编码例子</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202510.webp\" alt=\"image.png\" /></p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 29：JPEG 交换格式（JIF）：图像、帧、扫描和标记</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h2 id=\"图像-帧和扫描的关系\"><a class=\"markdownIt-Anchor\" href=\"#图像-帧和扫描的关系\"></a> 图像、帧和扫描的关系</h2>\n<ul>\n<li>压缩的图像数据只包含一张图片。</li>\n<li><strong>在渐进模式和顺序模式编码过程中，一张图片只包含一帧。</strong></li>\n<li><strong>在层次模式中，一张图片可以包含多帧。</strong></li>\n<li>一帧可以包含一个或多个扫描。</li>\n<li>顺序模式下，一个扫描包含一个完整的、单个/多个图像组件的编码。</li>\n<li><span style=\"color:#ff0000\">在层次模式中：当一张图像的三个组件非交织时，一帧包含三个扫描；如果三个组件交织一起，那么一帧包含一趟扫描。</span></li>\n<li>一帧也可以包含两趟扫描：一趟是非交织的组件、另一趟为两组件交织。</li>\n</ul>\n<h2 id=\"标记\"><a class=\"markdownIt-Anchor\" href=\"#标记\"></a> 标记</h2>\n<p><strong>标记用于标识压缩数据格式的各种结构部分。</strong></p>\n<p>所有的标记赋予两个字节编码：0xFF+ 不等于 0 或 0xFF 的字节。</p>\n<p>标记段包含一个标记以及相关参数的序列。标记段的第一个参数是两字节长的参数，它指定了标记段的字节数（除去两字节标记后的参数长度）</p>\n<p>被 SOF 和 SOS 标记码标识出的标记段被视为头（headers）：分别为帧报头和扫描报头。</p>\n<p>SOI（0xFFD8）：压缩图片开始标记</p>\n<p>EOI（0xFFD9）：压缩图片的结束标记</p>\n<h3 id=\"高级语法\"><a class=\"markdownIt-Anchor\" href=\"#高级语法\"></a> 高级语法</h3>\n<p>基于顺序 DCT、渐进式 DCT 和无损操作模式的语法：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202539.webp\" alt=\"image.png\" /></p>\n<h4 id=\"帧头语义\"><a class=\"markdownIt-Anchor\" href=\"#帧头语义\"></a> 帧头语义</h4>\n<p>帧报头应该出现在帧的开始。该报头指定源图像特征、帧中的组件和每个组件的采样因子，并指定从中检索要与每个组件一起使用的量化表的目标。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202601.webp\" alt=\"image.png\" /></p>\n<table>\n<thead>\n<tr>\n<th>标记结构</th>\n<th>长度（字节）</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xFFC0</td>\n<td rowspan=\"2\">2</td>\n<td>SOF marker</td>\n</tr>\n<tr>\n<td>Lf</td>\n<td>Frame header length, not including the first two bytes 0xFF, 0xC0</td>\n</tr>\n<tr>\n<td>P</td>\n<td>1</td>\n<td>Sampling precision, equals 0x08 in a baseline system</td>\n</tr>\n<tr>\n<td>Y</td>\n<td rowspan=\"2\">2</td>\n<td>Image height</td>\n</tr>\n<tr>\n<td>X</td>\n<td>Image width</td>\n</tr>\n<tr>\n<td>Nf</td>\n<td rowspan=\"7\">1</td>\n<td>Number of components in a frame. 1 (grey scale) or 3 (color)</td>\n</tr>\n<tr>\n<td>C1</td>\n<td>Component 1</td>\n</tr>\n<tr>\n<td>(H1,V1)</td>\n<td>Horizontal and vertical sampling factor</td>\n</tr>\n<tr>\n<td>Tq1</td>\n<td>Quantization table</td>\n</tr>\n<tr>\n<td>C2</td>\n<td>Component 2</td>\n</tr>\n<tr>\n<td>(H2,V2)</td>\n<td>Horizontal and vertical sampling factor</td>\n</tr>\n<tr>\n<td>Tq2</td>\n<td>Quantization table</td>\n</tr>\n<tr>\n<td colspan=\"3\">⋯</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"扫描头语义\"><a class=\"markdownIt-Anchor\" href=\"#扫描头语义\"></a> 扫描头语义</h4>\n<p>扫描头应在扫描开始时出现。这个报头指定扫描中包含哪些组件，指定从中检索要与每个组件一起使用的熵表的地址。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202705.webp\" alt=\"image.png\" /></p>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>长度（字节）</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xFFDA</td>\n<td rowspan=\"2\">2</td>\n<td>SOS marker</td>\n</tr>\n<tr>\n<td>Ls</td>\n<td>Scan header length, not including the first two bytes 0xFF, 0xDA</td>\n</tr>\n<tr>\n<td>Ns</td>\n<td rowspan=\"3\">1</td>\n<td>Number of components in a scan, in a baseline system, Ns=Nf (Number of components in a frame)</td>\n</tr>\n<tr>\n<td>Cs1</td>\n<td>Component number in a scan</td>\n</tr>\n<tr>\n<td>(Td1,Ta1)</td>\n<td>Tdn: the four most significant bits, used to select DC entropy coding table <br>Tan: the four least significant bits, used to select AC entropy coding table</td>\n</tr>\n<tr>\n<td>⋯</td>\n<td colspan=\"2\"></td>\n</tr>\n<tr>\n<td>Ss</td>\n<td rowspan=\"3\">1</td>\n<td rowspan=\"3\">Default values are [00] [3F] [00] in a baseline system</td>\n</tr>\n<tr>\n<td>Se</td>\n</tr>\n<tr>\n<td>(Ah,Al)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"dqt-标记段语义\"><a class=\"markdownIt-Anchor\" href=\"#dqt-标记段语义\"></a> DQT 标记段语义</h4>\n<p>定义量化表 (DQT) 标记段，用于定义一个或多个量化表。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202826.webp\" alt=\"image.png\" /></p>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>长度（字节）</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0XFFDB</td>\n<td rowspan=\"2\">2</td>\n<td>DQT marker</td>\n</tr>\n<tr>\n<td>Lq</td>\n<td>Quantization table length， not including 0XFF， 0XDB</td>\n</tr>\n<tr>\n<td>(Pq,Tq)</td>\n<td>1</td>\n<td>Quantization table element precision <br>Pq=0, 8 bits for Q0~Qn, Pq=1, 16 bits for Qt; <br>Tq: Quantization table destination identifier</td>\n</tr>\n<tr>\n<td>Q0</td>\n<td rowspan=\"3\">1 or 2</td>\n<td rowspan=\"3\">Quantization table element‐Specifies the kth element out of 64 elements</td>\n</tr>\n<tr>\n<td>Q1</td>\n</tr>\n<tr>\n<td>Qn</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"哈夫曼表规范语法\"><a class=\"markdownIt-Anchor\" href=\"#哈夫曼表规范语法\"></a> 哈夫曼表规范语法</h4>\n<p>哈夫曼表标记 (DHT) 段定义了一个或多个霍夫曼表规范。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102202912.webp\" alt=\"image.png\" /></p>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>长度（字节）</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xFFC4</td>\n<td>1</td>\n<td>DHT marker</td>\n</tr>\n<tr>\n<td>Ls</td>\n<td>2</td>\n<td>Huffman table definition length, not including 0xFF, 0xC4</td>\n</tr>\n<tr>\n<td>(Tc,Th)</td>\n<td rowspan=\"2\">1</td>\n<td>TC: Table class – 0 = DC table or lossless table, 1 = AC table. <br>Th:Huffman table destination identifier <br>Th Specifies one of four possible destinations at the decoder into which the Huffman table shall be installed.</td>\n</tr>\n<tr>\n<td>L 1</td>\n<td>Number of Huffman codes of length i</td>\n</tr>\n<tr>\n<td colspan=\"2\">⋯</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>L 16</td>\n<td rowspan=\"2\">1</td>\n</tr>\n<tr>\n<td>V 1</td>\n<td>Value associated with each Huffman code, t=L1+L2+…L16</td>\n</tr>\n<tr>\n<td colspan=\"2\">…</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>V t</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"jpeg-文件\"><a class=\"markdownIt-Anchor\" href=\"#jpeg-文件\"></a> JPEG 文件</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 30：JPEG 文件交换格式（JFIF）</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>到目前为止，我们描述的文件格式被称为「JPEG 交换格式 (JIF)」。然而，这种“纯粹”的文件格式很少使用，主要是因为，这个标准的某些缺点:</p>\n<ul>\n<li>色彩空间定义</li>\n<li>组件子采样注册</li>\n<li>像素宽高比定义</li>\n</ul>\n<p>JPEG 文件交换格式（JFIF）解决了 JIF 的局限性。JFIF 文件中的图像数据使用 JPEG 标准中的技术进行压缩，因此 JFIF 有时被称为“JPEG/JFIF”。</p>\n<p>JPEG 文件交换格式是一种最小的文件格式，它使 JPEG 比特流能够在各种平台和应用程序之间进行交换。</p>\n<p>此简化格式的唯一目的是允许交换 JPEG 压缩图像。</p>\n<p>尽管 JPEG 文件交换格式 (JFIF) 的语法支持任何 JPEG 过程，但强烈建议将 JPEG 基线过程用于文件交换，这确保了与所有支持 JPEG 的应用程序的最大兼容性。</p>\n<p><strong>JPEG 文件交换格式与标准的 JPEG 交换格式完全兼容。唯一的额外要求是必须在 SOI 标记之后出现 APP0 标记。</strong></p>\n<p>JFIF 文件使用 APP0 标记段，并在帧头中限制某些参数，定义如下：</p>\n<ul>\n<li>长度、标识符、版本、单位、X 密度、Y 密度、X 缩略图、Y 缩略图、(RGB)n</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203032.webp\" alt=\"image.png\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203038.webp\" alt=\"image.png\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203043.webp\" alt=\"image.png\" /></p>\n<h2 id=\"编码过程-2\"><a class=\"markdownIt-Anchor\" href=\"#编码过程-2\"></a> 编码过程</h2>\n<p>编码图像的流程</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203054.webp\" alt=\"image.png\" /></p>\n<p>编码帧的流程</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203101.webp\" alt=\"image.png\" /></p>\n<p>编码扫描的流程</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203117.webp\" alt=\"image.png\" /></p>\n<p>编码重启间隔的流程</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203125.webp\" alt=\"image.png\" /></p>\n<p>对最小编码单元进行编码的过程</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203134.webp\" alt=\"image.png\" /></p>\n<p>使用哈夫曼编码 AC 系数的过程</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203141.webp\" alt=\"image.png\" /></p>\n<p>非零 AC 系数的顺序编码过程</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203149.webp\" alt=\"image.png\" /></p>\n<h2 id=\"解码过程\"><a class=\"markdownIt-Anchor\" href=\"#解码过程\"></a> 解码过程</h2>\n<p>解码压缩图像数据的过程</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203157.webp\" alt=\"image.png\" /></p>\n<p>解码一帧的过程</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203206.webp\" alt=\"image.png\" /></p>\n<p>解码扫描的过程：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203212.webp\" alt=\"image.png\" /></p>\n<p>解码重启间隙的过程：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203223.webp\" alt=\"image.png\" /></p>\n<p>解码 MCU 的过程：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231102203230.webp\" alt=\"image.png\" /></p>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">习题助记</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ol>\n<li>What are markers used for in JIF?<br />\n标识压缩数据格式中不同的结构部分</li>\n<li>Describe the full name of SOI,EOI,SOF,SOS<br />\nStart of image marker,End of image marker,Start of Frame marker,Start of Scan marker</li>\n<li>What is JPEG file interchange format used for?<br />\n定义分辨率颜色等相关参数，为了能在不同应用和平台转换</li>\n<li>An image contains ___ frame in the cases of sequential and progressive coding processes.<br />\none frame</li>\n</ol>\n</div></div><h1 id=\"视频编码\"><a class=\"markdownIt-Anchor\" href=\"#视频编码\"></a> 视频编码</h1>\n<h2 id=\"视频编码标准的制定\"><a class=\"markdownIt-Anchor\" href=\"#视频编码标准的制定\"></a> 视频编码标准的制定</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 2：视频压缩标准及应用</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h3 id=\"itu-t-国际电信联盟-电信\"><a class=\"markdownIt-Anchor\" href=\"#itu-t-国际电信联盟-电信\"></a> ITU-T 国际电信联盟 - 电信</h3>\n<h4 id=\"h261\"><a class=\"markdownIt-Anchor\" href=\"#h261\"></a> H.261</h4>\n<ul>\n<li>第一个视频压缩标准（1990 年）</li>\n<li>专为综合业务数字网络（ISDN）视频会议设计的。</li>\n<li>支持 352X288（CIF）和 176X144（QCIF）的分辨率色度分辨率子采样为 4：2：0</li>\n<li>由于视频电话需要，在仅需较低的复杂性同时进行实时编码和解码。</li>\n<li>由于它专注于对延迟敏感的双向视频，<span style=\"color:#ff0000\">H.261 仅允许 I 和 P 帧，不允许 B 帧</span>。（B 帧需要等待后帧解码，存在时延）</li>\n<li><strong>基于整数像素精度</strong>进行运动估计运算和搜索范围为 +/- 15 像素。</li>\n<li>将基于 8x8 块的 DCT 应用于残差。然后在所有 AC 系数上进行<strong>固定</strong>的线性量化用<strong>固定</strong>的量化步长线性量化。</li>\n<li>首先对量化系数进行游程编码，然后可变长度（霍夫曼）编码。</li>\n<li>将简单的 2D FIR 滤波器应用于块边缘减少块效应。</li>\n</ul>\n<h4 id=\"h263\"><a class=\"markdownIt-Anchor\" href=\"#h263\"></a> H.263</h4>\n<ul>\n<li>用于公共交换电话网络（PSTN）可视电话</li>\n<li>H.263（1996）是在 H.261 之后开发的，专注于更好<strong>更低比特率</strong>的视频质量。</li>\n<li>通过普通电话调制解调器以 33.6 Kbps 的速度传输视频，是其重要的目标之一。</li>\n<li>目标分辨率为 SQCIF（128x96）至 CIF（352X288）</li>\n<li>与 H.261 类似，但运动矢量略有不同。其<strong>允许为½（“半像素”）的倍数</strong>。使用 16x16 宏块中的<strong>四个 8x8 像素块的四个运动矢量</strong>，而不是宏块的单个运动矢量。</li>\n<li>PB 帧：P 帧和 B 帧（这是从当前编码的 P 帧和后一个先前编码的 P 帧预测而来的）编码为一个单元。</li>\n<li>使用基于内容的算术编码模式代替霍夫曼编码，对于相同的图像质量，比特率略有降低。</li>\n<li>H.263 通常在相同的比特率下实现大约 3 dB 的改善，或者在相同的 SNR（质量）下将比特率减少 50％。</li>\n</ul>\n<h4 id=\"h264advanced-video-coding\"><a class=\"markdownIt-Anchor\" href=\"#h264advanced-video-coding\"></a> H.264：Advanced video coding</h4>\n<p>详看 🍂H.264-MPEG4-AVC（高级视频编码） 小节。</p>\n<h3 id=\"iso-国际标准化组织\"><a class=\"markdownIt-Anchor\" href=\"#iso-国际标准化组织\"></a> ISO 国际标准化组织</h3>\n<p>MPEG 成立于 1988 年，旨在开发在数字存储媒体上移动图片（视频）和关联的音频（光盘）的压缩标准。</p>\n<h4 id=\"mpeg-1\"><a class=\"markdownIt-Anchor\" href=\"#mpeg-1\"></a> MPEG-1</h4>\n<ul>\n<li>ISO 制定的第一个视频压缩算法 (1991)</li>\n<li>可在获得与 VHS 品质相似的视频和音频</li>\n<li>比特率 1.5Mb/s</li>\n<li>与典型的视频电话相比，支持电影内容中较重的运动（heavier motion）需要更多的计算资源</li>\n<li>允许更长的延迟，允许 B 帧</li>\n<li>使用自适应感知量化。单独的量化比例因子专门应用于每个频点以优化人类的视觉感知。</li>\n</ul>\n<h4 id=\"mpeg-2\"><a class=\"markdownIt-Anchor\" href=\"#mpeg-2\"></a> MPEG-2</h4>\n<ul>\n<li>是 MPEG-1 的扩展，支持更高的比特率，更高分辨率和<strong>隔行</strong>扫描图片（用于电视）。（先打奇数行再偶数行）</li>\n<li>是为数字电视开发的比特率较高的应用：DTV，HDTV 和 DVD</li>\n<li>由许多部分组成，包括视频，音频，系统，兼容性测试。</li>\n<li>在 30：1 左右的压缩率下表现良好。 MPEG-2 以 4~8 Mbps 达到的质量对于消费者视频应用程序是可接受的。</li>\n</ul>\n<h5 id=\"mpeg-2-profiles-and-levels\"><a class=\"markdownIt-Anchor\" href=\"#mpeg-2-profiles-and-levels\"></a> MPEG-2 Profiles and Levels</h5>\n<p>这些标准旨在解决大量不同的应用程序需要许多不同的工具或功能的问题。典型的应用程序可能仅使用 MPEG 功能的一小部分。 为了实现更有效的实现，MPEG 将功能的子集适当的组合在一起，并定义了一组配置文件和级别。</p>\n<ul>\n<li>档次（profile）定义了视频语法和功能的子集。</li>\n<li>在档次（profile）中，级别定义了某些参数的最大范围，例如分辨率，帧速率，比特率和缓冲区大小（下限）。</li>\n</ul>\n<p>两个广泛使用的配置文件/级别是：</p>\n<ul>\n<li>Main Level at Main Profile (MP@ML)：用于压缩 DVD 上使用的常规电视（例如 NTSC 或 PAL）和标清数字电视（SD DTV）</li>\n<li>Main Profile at High Level (MP@HL)：用于压缩高清电视（HDTV）（1080p）</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109211917.webp\" alt=\"image.png\" /></p>\n<h4 id=\"mpeg-4\"><a class=\"markdownIt-Anchor\" href=\"#mpeg-4\"></a> MPEG-4</h4>\n<p>MPEG-4 与 MPEG-1 和 MPEG-2 完全不同，它的主要目标是提供新功能，而不仅仅是提供更好的压缩。将提供增强的功能：</p>\n<ul>\n<li>支持基于对象或基于内容的表示。这使得可以对视频场景中的不同视频对象进行单独编码，并且允许对视频中的不同对象进行单独访问和操作。请注意，MPEG-4 没有指定如何识别或分割视频中的对象。但是，如果单个对象已知，MPEG-4 提供了一种压缩这些对象的方法。</li>\n<li>支持对合成或计算机生成的视频对象进行压缩，以及在单个视频中集成自然对象和合成对象。此外，MPEG-4 支持通过差错恢复（例如 Internet 和 3G 无线系统）进行防错通信。因此，MPEG-4 同时支持基于对象和基于帧的视频编码。</li>\n<li>与场景的交互</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109213856.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<p>Demuxer 用于解析和解码视频和音频对象。场景描述信息描述了解码对象如何组成和渲染以形成最终场景。</p>\n<p>与 MPEG-2 和 MPEG-4 简单档次相比，H.264 / AVC 在压缩效率方面取得了重大突破，通常可实现约 2 倍的压缩。</p>\n<p>为了满足从低质量，低分辨率监视摄像机到高清电视广播和 DVD 的各种应用，MPEG-4 第 2 部分定义了大约 21 个档次（profiles）：Simple, Advanced Simple, Main, Core, Advanced Coding Efficiency, Advanced Real Time Simple 等。最常用的档次是 Advanced Simple 和 Simple（都是 Advanced Simple 的子集）。</p>\n<h3 id=\"当前视频压缩标准\"><a class=\"markdownIt-Anchor\" href=\"#当前视频压缩标准\"></a> 当前视频压缩标准</h3>\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>标准</th>\n<th>发布机构</th>\n<th>🔺常用于</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1990</td>\n<td>H.261</td>\n<td>ITU-T</td>\n<td>ISDN 上的视频会议, 可视电话</td>\n</tr>\n<tr>\n<td>1993</td>\n<td>MPEG-1 part 2</td>\n<td>ISO, IEC</td>\n<td>Video-CD 数字存储媒介（CD-ROM）上的视频</td>\n</tr>\n<tr>\n<td>1995</td>\n<td>H.262/MPEG-2 Part 2</td>\n<td>ISO, IEC, ITU-T</td>\n<td>DVD Video, Blu-ray, Digital Video Broadcasting, 数字电视</td>\n</tr>\n<tr>\n<td>1996</td>\n<td>H.263</td>\n<td>ITU-T</td>\n<td>视频会议, PSTN 上的可视电话, Video on Mobile Phones (3GP)</td>\n</tr>\n<tr>\n<td>1999</td>\n<td>MPEG-4 Part 2</td>\n<td>ISO, IEC</td>\n<td>Video on Internet (DivX, Xvid …), 基于对象的编码, 合成内容, 集成</td>\n</tr>\n<tr>\n<td>2003</td>\n<td>H.264/MPEG-4 AVC</td>\n<td>Sony, Panosonic, Samsung, ISO, IEC, ITU-T</td>\n<td>Blu-ray,HD DVD Digital Video Broadcasting, 无线, 因特网, 电影, 视频电话, 视频会议</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"标准化的范围\"><a class=\"markdownIt-Anchor\" href=\"#标准化的范围\"></a> 标准化的范围</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 31：视频编码和解码架构：normative, informative</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>视频压缩系统由一个编码器，压缩比特流和解码器组成。</p>\n<p>标准限定的范围有限，是为了在确保互操作性同时尽可能实现差异化：</p>\n<ul>\n<li><span style=\"color:#ff0000\">标准指定比特流语法和解码过程</span></li>\n<li>标准不限定编码过程或具体解码器的实现。</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109202142.webp\" alt=\"image.png\" /></p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 32：MPEG 编码结构、MPEG 语法</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h2 id=\"mpeg-编码结构\"><a class=\"markdownIt-Anchor\" href=\"#mpeg-编码结构\"></a> MPEG 编码结构</h2>\n<p>MPEG 以单元层次结构编码视频，这些单元称为<strong>序列、图像组 (GOPs)、图像、切片、宏块和 DCT 块</strong>：</p>\n<ul>\n<li>对 16x16 像素的宏块执行 MC 预测（运动补偿预测）</li>\n<li>这些宏块组成一个切片</li>\n<li>一帧中的所有切片均包含一张图片，连续的图片形成一个 GOP。</li>\n<li>所有 GOP 形成一个序列。</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109203121.webp\" alt=\"image.png\" /></p>\n<h3 id=\"gop\"><a class=\"markdownIt-Anchor\" href=\"#gop\"></a> GOP</h3>\n<p>视频帧被分组为编码单元，称为图像组 (GOPs)。</p>\n<p>GOPs 具有重新初始化编码中使用的时间预测的属性。</p>\n<p><strong>GOP 的第一帧总是以帧内模式编码，称为 I 帧</strong></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109203351.webp\" alt=\"image.png\" width=\"525px\" /></p>\n<p>用 I 帧通过正向预测或双向预测得到 P 帧或 B 帧。</p>\n<p>GOP 长度通常在 9 到 15 帧之间。</p>\n<p><strong>每个 B 帧都取决于过去帧和一个将来帧，这意味着将来帧必须是在当前 B 帧可以被解/编码之前被解/编码。</strong></p>\n<p><strong>编码后的视频数据以编码顺序放置在数据流中，而不是显示顺序</strong>。</p>\n<h3 id=\"i-p-b-帧编码属性\"><a class=\"markdownIt-Anchor\" href=\"#i-p-b-帧编码属性\"></a> I P B 帧编码属性</h3>\n<p>I，P 和 B 帧的编码通常需要不同数据量。</p>\n<ul>\n<li>I 帧需要大量数据，因为它们的编码与其他框架无关。</li>\n<li><span style=\"color:#ff0000\">P 和 B 帧通常需要的数据少于 I 帧（时间预测）</span>。</li>\n<li>B 帧的编码数据通常少于 P 帧，因为：\n<ul>\n<li>同时使用前后参考帧，可以形成更好的预测。</li>\n<li>以较低的质量编码 B 帧通常不会带来负面影响，B 帧的编码质量较低不会影响序列中的其他帧。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"宏块\"><a class=\"markdownIt-Anchor\" href=\"#宏块\"></a> 宏块</h3>\n<p>MPEG 使用 16x16 像素 MC 预测来减少时间视频中固有的冗余。</p>\n<p>在 I 帧中，必须以帧内模式对每个宏块进行编码。</p>\n<p>在 P 帧中，每个宏块都可以使用前向编码预测或帧内模式。</p>\n<p>在 B 帧中，每个宏块都可以前向编码，后向或双向预测或帧内模式。</p>\n<p>为每个前向和后向预测指定一个 MV（motion vector）宏块，同时为每个双向指定两个 MV 预测宏块。</p>\n<h3 id=\"dct-块\"><a class=\"markdownIt-Anchor\" href=\"#dct-块\"></a> DCT 块</h3>\n<p>每个宏块（intra or inter）被划分为 8x8 像素块。</p>\n<p>为每个块计算 2D-DCT。 DCT 系数被单独量化。</p>\n<p>量化系数经过 zigzag 扫描，游程长度进行编码，结果对（游程长度，幅度组成的一对）经过霍夫曼编码并输出至比特流。</p>\n<p>还有一些块间和宏块间处理。</p>\n<h3 id=\"slices\"><a class=\"markdownIt-Anchor\" href=\"#slices\"></a> Slices</h3>\n<p>MPEG 编码要求每个宏块都属于一个切片，所有切片都构成整个图片。</p>\n<p><span style=\"color:#ff0000\">切片是一系列任意数量的连续宏块：</span></p>\n<ul>\n<li><span style=\"color:#ff0000\">每个切片至少应包含一个宏块。</span></li>\n<li><span style=\"color:#ff0000\">切片不得重叠。</span></li>\n<li><span style=\"color:#ff0000\">切片的位置可能因图片而异。</span></li>\n</ul>\n<p>这提供了一种用于预测宏块中某些参数的结构，同时保持一定程度的错误弹性。</p>\n<p>在 I 帧中，DCT 系数的 DC 值在一个<strong>片（Slice）内</strong>从块到块被差分编码。（JPEG 是整幅图做差分编码）</p>\n<p>在 P 和 B 帧中，运动矢量在片内从宏块到宏块进行差分编码。</p>\n<p>如果位流中发生错误，则切片中的剩余数据将丢失。 但是，解码器可以通过搜索下一个切片起始码，重新同步位流并继续解码过程来恢复。</p>\n<h3 id=\"mpeg-syntax\"><a class=\"markdownIt-Anchor\" href=\"#mpeg-syntax\"></a> MPEG Syntax</h3>\n<p><strong>序列头</strong>指定图片的高度/宽度，以及样本宽高比，帧速率，比特率和缓冲区大小序列。 如果未使用默认的量化器，则还包括量化矩阵。</p>\n<p><strong>GOP 头</strong>指定时间代码并指示 GOP 是否打开或关闭。</p>\n<p><strong>图像头</strong>指定<strong>时间参考参数</strong>，图片类型（I，P 或 B）以及缓冲区充满度。 如果是使用时域预测，它还描述了运动矢量精度（完整或半像素）和运动矢量范围。</p>\n<p><strong>切片头</strong>指定了切片开始的宏块行，以及 DCT 系数的初始量化器比例因子。</p>\n<p><strong>宏块头</strong>包含一个标志，<strong>指示是内部还是帧间编码</strong>。</p>\n<p>对于帧间编码，它包含编码的运动矢量，这个运动矢量会基于相对于先前的运动矢量进行差分编码。</p>\n<p>可以在宏块级别上调整量化器比例因子。1bit 用于指定是否调整因子。</p>\n<p>序列、GOP、图片、切片的标头以这些代码开头：</p>\n<ul>\n<li>例如，通过简单地检查编码数据流而无需解析或解码数据，就能找到第二个 GOP 中第二张图片的第二切片编码的数据</li>\n<li>允许对压缩比特流的随机访问</li>\n<li>提高容错能力</li>\n</ul>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">习题助记</div>\n</div>\n<div class=\"callout-content\"><p>MPEG-1 is used in <strong>VCD</strong> ，MPEG-2 is used in <strong>DVD</strong>.<br />\nMP3 is a lossy compression method.<br />\nH.261、H.263 主要用于可视电话<br />\nThe bit stream synatax is specified in MPEG video coding standard.<br />\nThe encoding process is <strong>NOT</strong> specified in MPEG coding standard.<br />\nMPEG-1 allows B frames.<br />\nP frames require <strong>LESS</strong> data than I frames because of temporal prediction.<br />\nIn video coding the position of slices may change from picture to picture.<br />\nIn video coding <strong>the Picture header</strong> specifiles the temporal reference parameter</p>\n</div></div><h1 id=\"h264-mpeg4-avc高级视频编码\"><a class=\"markdownIt-Anchor\" href=\"#h264-mpeg4-avc高级视频编码\"></a> 🍂H.264-MPEG4-AVC（高级视频编码）</h1>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 33：H.264 编码结构、基线档次、主档次、向量块大小、新特性、视频编码层级和网络抽象层</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>在过去十年中，视频编码领域最重要的发展之一是由 ITU 和 ISO/IEC 的联合视频团队（Joint Video Team，JVT）定义的 H.264/MPEG-4 AVC 标准。ITU 从 1997 年开始使用新的编码工具开展了 H.26L（for long term）的工作。结果令人印象深刻，因此 ISO/IEC 决定与 ITU 合作，采用一个共同的标准，成立了联合视频团队。ITU 于 2003 年 5 月批准了新的 H.264 标准。ISO 于 2003 年 10 月批准了该标准，命名为 MPEG-4 第 10 部分，即高级视频编码（AVC）。</p>\n<p>块框图和特性：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110224654.webp\" alt=\"image.png\" /></p>\n<p>H.264/AVC 在压缩效率方面取得了重大突破，通常相对于 MPEG-2 和 MPEG-4 简单档次实现了大约 2 倍的压缩比。</p>\n<p>在 H.264 标准化时，它支持三种档次（profiles）：基线档次、主要档次和扩展档次。</p>\n<ul>\n<li>后来，一项名为保真度范围扩展（FRExt）的修正引入了四个额外的配置，称为高级档次。</li>\n<li>最初，基本档次和主档次引起了最大的关注。</li>\n</ul>\n<p>基本档次需要较少的计算和系统内存，并且针对低延迟进行了优化：</p>\n<ul>\n<li><span style=\"color:#ff0000\">基本档次不包括 B 帧（由于固有时延）</span>或 <strong>CABAC（由于计算复杂性</strong>）。</li>\n<li>基本档次非常适合视频电话应用以及其他需要成本效益的实时编码应用。</li>\n</ul>\n<p>主档次旨在为广播和内容存储应用提供尽可能高的视频质量和最低的比特率。</p>\n<p>标准编解码器中的关键压缩特性：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110231714.webp\" alt=\"image.png\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110231651.webp\" alt=\"image.png\" /></p>\n<p>应用趋势：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110232210.webp\" alt=\"image.png\" /></p>\n<h2 id=\"h264avc-的目标和应用\"><a class=\"markdownIt-Anchor\" href=\"#h264avc-的目标和应用\"></a> H.264/AVC 的目标和应用</h2>\n<p>视频编码专家组（VCEG），ITU-T SG16</p>\n<ul>\n<li>H.26L 项目（1998 年初），最初的重点是视频会议和电话通信。</li>\n<li>目标是将编码效率提高一倍，超过任何其他现有的视频编码标准。<br />\n应用领域：</li>\n<li>有线、卫星、地面数字视频广播</li>\n<li>媒体存储、DVD、蓝光 DVD 等</li>\n<li>互联网流媒体、视频电话在 3G/4G 网络上</li>\n<li>视频会议</li>\n<li>数字视频监控、数字电影等</li>\n</ul>\n<h2 id=\"与其他标准的关系\"><a class=\"markdownIt-Anchor\" href=\"#与其他标准的关系\"></a> 与其他标准的关系</h2>\n<p>在 ITU-T 和 MPEG 中都将批准相同的设计。</p>\n<p>在 ITU-T 中，这将是一个新的独立标准：</p>\n<ul>\n<li>ITU-T 推荐标准 H.264。</li>\n<li>ITU-T 系统（H.32x）将进行修改以支持它。<br />\n在 MPEG 中，这将是 MPEG-4 套件中的一个新的“部分”：</li>\n<li>与之前的 MPEG-4 视觉编解码器设计分开。</li>\n<li>新的第 10 部分称为“高级视频编码”（类似于 MPEG-2 中的“AAC”位置，作为独立的编解码器）。<br />\n与之前的标准不兼容（包括之前的 MPEG-4 视觉规范 - 核心技术不同）。<br />\nMPEG-4 系统/文件格式正在进行修改以支持它。<br />\nIETF 正在研究 RTP 有效载荷的封装。</li>\n</ul>\n<h2 id=\"新功能和共同元素\"><a class=\"markdownIt-Anchor\" href=\"#新功能和共同元素\"></a> 新功能和共同元素</h2>\n<p>视频编码层基于混合视频编码（hybrid video coding），与其他标准在理念上类似，但存在重要的区别。</p>\n<p>新的关键功能包括：</p>\n<ul>\n<li>增强的运动补偿</li>\n<li>用于变换编码的小块</li>\n<li>改进的去块滤波器</li>\n<li>增强的熵编码</li>\n</ul>\n<p>与之前的标准相比，H.264/AVC 具有以下共同元素：</p>\n<ul>\n<li>16x16 宏块</li>\n<li>块运动位移</li>\n<li>块变换</li>\n<li>标量量化</li>\n<li>I、P 和 B 帧类型<br />\n相对于之前的标准，在相同感知质量下，H.264/AVC 可以实现约 50% 的比特率节省。</li>\n</ul>\n<h2 id=\"档次\"><a class=\"markdownIt-Anchor\" href=\"#档次\"></a> 档次</h2>\n<p>受限基准档次（Constrained Baseline Profile，CBP）：</p>\n<ul>\n<li>主要用于视频会议和移动应用等低成本应用，于 2009 年开发。</li>\n<li>对应于基准档次、主档次和高级档次之间共同支持的功能子集。</li>\n</ul>\n<p>基准档次（Baseline Profile，BP）：</p>\n<ul>\n<li>主要用于需要额外数据丢失鲁棒性的低成本应用，如视频会议和移动应用。</li>\n<li>包括所有受限基准档次支持的功能，以及用于提高鲁棒性的额外功能。</li>\n<li>所有受限基准档次的比特流也被视为基准档次的比特流，因为这两个档次共享相同的档次标识码值。</li>\n</ul>\n<p>主档次（Main Profile，MP）：</p>\n<ul>\n<li>用于使用 MPEG-4 格式的标准定义数字电视广播，符合 DVB 标准定义。</li>\n</ul>\n<p>扩展档次（Extended Profile，XP）：</p>\n<ul>\n<li>用于流媒体视频档次。</li>\n<li>具有相对较高的压缩能力和一些额外的技巧，以提高对数据丢失和服务器流切换的鲁棒性。</li>\n</ul>\n<p>高级档次（High Profile，HiP）：</p>\n<ul>\n<li>于 2004 年开发，用于广播和光盘存储应用，特别适用于高清电视应用（例如，已被蓝光光盘存储格式和 DVB 高清电视广播服务采用）。</li>\n</ul>\n<p>高 10 档次（High 10 Profile，Hi10P）：</p>\n<ul>\n<li>在高级档次的基础上增加了对每个样本解码图像精度高达 10 位的支持。</li>\n</ul>\n<p>高 4:2:2 档次（High 4:2:2 Profile，Hi422P）：</p>\n<ul>\n<li>针对使用隔行视频的专业应用。</li>\n<li>在高 10 档次的基础上增加了对 4:2:2 色度子采样格式的支持，同时使用高达 10 位的解码图像精度。</li>\n</ul>\n<p>高 4:4:4 预测档次（High 4:4:4 Predictive Profile，Hi444PP）：</p>\n<ul>\n<li>在高 4:2:2 档次的基础上增加了对 4:4:4 色度采样的支持，每个样本的解码图像精度高达 14 位。</li>\n<li>此外，还支持高效的无损区域编码和将每个图像编码为三个独立的色彩平面。</li>\n</ul>\n<h3 id=\"基准档次\"><a class=\"markdownIt-Anchor\" href=\"#基准档次\"></a> 基准档次</h3>\n<p>特点包括：</p>\n<ul>\n<li><span style=\"color:#ff0000\"> I 和 P 帧类型（不包括 B 帧，因为时延较大）</span></li>\n<li>循环内去块滤波器</li>\n<li>1/4 像素级的运动补偿</li>\n<li>基于树状结构的运动分割，最小块大小为 4x4</li>\n<li>基于 VLC 的熵编码</li>\n</ul>\n<p>一些增强的错误容忍特性包括：</p>\n<ul>\n<li>灵活的宏块排序/任意切片排序</li>\n<li>冗余切片</li>\n<li>主要用于视频会议和无线应用</li>\n</ul>\n<h3 id=\"主档次\"><a class=\"markdownIt-Anchor\" href=\"#主档次\"></a> 主档次</h3>\n<p>主档次的特点包括：</p>\n<ul>\n<li>所有基准档次的特点，除了增强的错误容忍特性</li>\n<li><span style=\"color:#ff0000\">B 帧类型</span></li>\n<li><span style=\"color:#ff0000\">CABAC（上下文自适应二进制算术编码）</span></li>\n<li>宏块级别的帧/场切换</li>\n<li>对 B 帧和 P 帧预测进行自适应加权</li>\n<li>支持隔行图像扫描</li>\n</ul>\n<p>主档次主要用于广播应用。</p>\n<h2 id=\"基本宏块编码结构\"><a class=\"markdownIt-Anchor\" href=\"#基本宏块编码结构\"></a> 基本宏块编码结构</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110233820.webp\" alt=\"image.png\" /></p>\n<h2 id=\"运动补偿\"><a class=\"markdownIt-Anchor\" href=\"#运动补偿\"></a> 运动补偿</h2>\n<p>运动补偿的特点包括：</p>\n<ul>\n<li>不同的块大小和形状用于运动补偿</li>\n<li>1/4 像素精度\n<ul>\n<li>6 点滤波器用于 1/2 像素精度</li>\n<li>简化滤波器用于 1/4 像素精度</li>\n</ul>\n</li>\n<li>多个参考帧</li>\n<li>时间反转运动和广义 B 帧</li>\n<li>B 帧预测加权</li>\n</ul>\n<h2 id=\"h264avc-编码数据格式\"><a class=\"markdownIt-Anchor\" href=\"#h264avc-编码数据格式\"></a> H.264/AVC 编码数据格式</h2>\n<p>H.264 区分视频编码层（VCL）和网络抽象层（NAL）。</p>\n<p>编码过程的输出是 VCL 数据（表示编码视频数据的一系列比特），在传输或存储之前将其映射到 NAL 单元。</p>\n<p>分别指定 VCL 和 NAL 的目的是区分编码特定的功能（在 VCL 中）和传输特定的功能。</p>\n<p>每个 NAL 单元包含原始字节序列负载（RBSP），即对应于编码视频数据的一组数据和头部信息。</p>\n<p>编码的视频序列由一系列 NAL 单元表示，可以通过基于数据包的网络、比特流传输链路或存储在文件中进行传输。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110233942.webp\" alt=\"image.png\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110234417.webp\" alt=\"image.png\" width=\"375px\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110234420.webp\" alt=\"image.png\" width=\"300px\" /></p>\n<p>NAL 单元的第一个字节是一个头部，包含有关该包类型的信息。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubyte forbidden_bit: <span class=\"number\">1</span>; <span class=\"comment\">// set to 0</span></span><br><span class=\"line\">ubyte nal_ref_idc:<span class=\"number\">2</span>; <span class=\"comment\">// the level of priority</span></span><br><span class=\"line\">ubyte nal_unit_type:<span class=\"number\">5</span>; <span class=\"comment\">// NAL type</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Defintion</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>Undefined</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Slice layer without partitioning non <span style=\"color:#ff0000\">IDR（instaneous decoding refresh 立即编码刷新）</span></td>\n</tr>\n<tr>\n<td>2</td>\n<td>Slice data partition A layer <span style=\"color:#ff0000\">（Partition A：片头信息，片里面宏块头信息，最重要）</span></td>\n</tr>\n<tr>\n<td>3</td>\n<td>Slice data partition B layer <span style=\"color:#ff0000\">（Partition B：帧内编码的数据）</span></td>\n</tr>\n<tr>\n<td>4</td>\n<td>Slice data partition C layer <span style=\"color:#ff0000\">（Partition C：帧间编码的数据）</span></td>\n</tr>\n<tr>\n<td>5</td>\n<td>Slice layer without partitioning IDR</td>\n</tr>\n<tr>\n<td>6</td>\n<td>Additional information (SEI) 时间信息</td>\n</tr>\n<tr>\n<td>7</td>\n<td>Sequence parameter set 序列参数集（序列编号、帧数、参考帧数目、图像大小、场模式）</td>\n</tr>\n<tr>\n<td>8</td>\n<td>Picture parameter set 图像参数集（图像编号、熵编码方式、条带数目、初始量化步长）</td>\n</tr>\n<tr>\n<td>9</td>\n<td>Access unit delimiter</td>\n</tr>\n<tr>\n<td>10</td>\n<td>End of sequence</td>\n</tr>\n<tr>\n<td>11</td>\n<td>End of stream</td>\n</tr>\n<tr>\n<td>12</td>\n<td>Filler data</td>\n</tr>\n<tr>\n<td>13…23</td>\n<td>Reserved</td>\n</tr>\n<tr>\n<td>24…31</td>\n<td>Undefined</td>\n</tr>\n</tbody>\n</table>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110235130.webp\" alt=\"image.png\" /></p>\n<h2 id=\"参考图片\"><a class=\"markdownIt-Anchor\" href=\"#参考图片\"></a> 参考图片</h2>\n<p>H.264 编码器可以使用一到两个先前编码的图片作为参考，用于对每个帧间编码的宏块或宏块分区进行运动补偿预测。</p>\n<p>这使得编码器可以从比先前编码的图片更广泛的图片集中搜索当前宏块分区的最佳匹配。</p>\n<p>编码器和解码器各自维护一个或两个参考图片列表，其中包含先前已编码和解码的图片（出现在当前图片之前和/或之后的显示顺序中）。</p>\n<ul>\n<li>P 帧中的帧间编码的宏块和宏块分区是从单个列表（列表 0）中的图片进行预测的。</li>\n<li>B 帧中的帧间编码的宏块和宏块分区可以从两个列表（列表 0 和列表 1）中的图片进行预测。</li>\n</ul>\n<h2 id=\"slices-2\"><a class=\"markdownIt-Anchor\" href=\"#slices-2\"></a> Slices</h2>\n<p>一个视频图像被编码为一个或多个切片，每个切片包含从 1 个宏块到图像中的总宏块数的整数个宏块（每个图像一个切片）。</p>\n<p>切片中的宏块数不需要在图像内是恒定的。编码切片之间的相互依赖性很小，这有助于限制错误的传播。</p>\n<p>符合基准配置的比特流包含编码的 I 和/或 P 切片：</p>\n<ul>\n<li>I 切片只包含帧内编码的宏块（从同一切片中先前编码的样本进行预测）；</li>\n<li>P 切片可以包含帧间编码的宏块（从先前编码的图片中的样本进行预测）、帧内编码的宏块或跳过的宏块。<br />\n编码图像可以由不同类型的切片组成：</li>\n<li>基准档次的编码图像可以包含 I 和 P 切片的混合；</li>\n<li>主档次或扩展档次的图像可以包含 I、P 和 B 切片的混合。<br />\n切片数据包括切片头、一系列编码的宏块和/或跳过的宏块的指示。<br />\n切片头定义了切片类型和切片所属的编码图像，并可能包含与参考图片管理相关的指令。</li>\n</ul>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 34：帧内预测、运动向量预测、帧间预测</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div>\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 35：H.264 的 DCT 变换</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div>\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 36：熵编码：指数格罗姆编码和 CAVLC</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h2 id=\"cavlc\"><a class=\"markdownIt-Anchor\" href=\"#cavlc\"></a> CAVLC</h2>\n<p>这是用于编码变换系数的残差和之字形有序块的方法。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231111134717.webp\" alt=\"image.png\" /></p>\n<p>CAVLC（Context-Adaptive Variable Length Coding）旨在利用量化的 4×4 块的几个特点：</p>\n<ul>\n<li>在预测、变换和量化之后，块通常是稀疏的（主要包含零）。</li>\n<li>在之字形扫描后，最高的非零系数通常是 +/-1 的序列。</li>\n<li>相邻块中的非零系数的数量是相关的。</li>\n<li>非零系数的级别（幅度）在之字形扫描开始时往往较高，并且随着频率增高而降低。</li>\n</ul>\n<p>对一块变换系数进行 CAVLC 编码的过程如下：</p>\n<ol>\n<li>编码系数的数量和尾部的 1。</li>\n<li>编码每个尾部 1 的符号。</li>\n<li>编码剩余非零系数的级别。</li>\n<li>编码最后一个系数之前的零的总数。</li>\n<li>编码每个零的连续出现次数。</li>\n<li>编码系数的数量和尾部的 1<br />\n第一步是编码非零系数的总数（NumCoef）和尾部的 1（T1s）。<br />\nNumCoef 的取值范围可以是从 0（4x4 块中没有系数）到 16（16 个非零系数）。<br />\nT1s 的取值范围可以是从 0 到 3。<br />\n如果尾部的 +/- 1 的个数超过 3 个，只有最后 3 个被视为“特殊情况”，其他的被编码为普通系数。</li>\n</ol>\n<p>例如：4x4 块</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231111135021.webp\" alt=\"image.png\" /></p>\n<p>The Num-Coef = 7, and T1s = 3</p>\n<p>用于编码 Num_Coeff 和 T1 的四个表格分别是 Num-VLC0、Num-VLC1、Num-VLC2 和 FLC。</p>\n<p>Num-VLC0：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231111135118.webp\" alt=\"image.png\" /></p>\n<p>表格的选择取决于先前编码块中，上方和左方的非零系数的数量 NU 和 NL。</p>\n<p>参数 N 的计算如下：</p>\n<ul>\n<li>如果块 U 和 L 都可用（即在同一个编码片中），N = (NU + NL) / 2。</li>\n<li>如果只有块 U 可用，N = NU。</li>\n<li>如果只有块 L 可用，N = NL。</li>\n<li>如果两者都不可用，N = 0。</li>\n</ul>\n<p>表格的选择基于以下方式中的 N 值：</p>\n<table>\n<thead>\n<tr>\n<th>N</th>\n<th>Selected Table</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0,1</td>\n<td>Num-VLC0</td>\n</tr>\n<tr>\n<td>2,3</td>\n<td>Num-VLC1</td>\n</tr>\n<tr>\n<td>4,5,6,7</td>\n<td>Num-VLC2</td>\n</tr>\n<tr>\n<td>8 or above</td>\n<td>FLC</td>\n</tr>\n</tbody>\n</table>\n<p>FLC 的形式如下：xxxxyy（即 6 位）</p>\n<p>其中 xxxx 和 yy 分别表示 Num_Coeff 和 T1。</p>\n<ol start=\"2\">\n<li>\n<p>对每个 T1 编码其尾随 1 的符号<br />\n对于每个 T1，一个比特位编码其符号（0 表示正，1 表示负）。<br />\n这些符号按照逆序编码，从最高频率的 T1 开始。</p>\n</li>\n<li>\n<p>对剩余的非零系数编码其级别（符号和大小）<br />\n 块中每个剩余的非零系数的级别（符号和大小）按照逆序进行编码。<br />\n 选择用于编码每个级别的 VLC 表根据每个连续编码级别的大小进行自适应调整（上下文自适应）。<br />\n 有 7 个可供选择的 VLC 表，从 Level_VLC0 到 Level_VLC6。<br />\n Level_VLC0 偏向较低的大小，Level_VLC1 偏向稍高的大小，依此类推。<br />\n 初始化表格为 Level_VLC0（除非非零系数超过 10 个且尾随 1 少于 3 个，在这种情况下从 Level_VLC1 开始）。<br />\n 编码最高频率的非零系数。<br />\n 如果该系数的大小大于预定义的阈值，则切换到下一个 VLC 表。</p>\n</li>\n</ol>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231111135814.webp\" alt=\"image.png\" /></p>\n<p> 级别的选择与最近编码的系数的大小相匹配。阈值列在表中；</p>\n<p> 第一个阈值为零，这意味着在编码第一个系数级别之后，表总是递增。</p>\n<ol start=\"4\">\n<li>编码最后一个系数之前的零的总数。</li>\n</ol>\n<p>以下是用于编码最后一个系数之前的零的总数（TotZeros）的表格。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231111135924.webp\" alt=\"image.png\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231111135948.webp\" alt=\"image.png\" /></p>\n<ol start=\"5\">\n<li>编码每个零的连续出现次数<br />\n在每个非零系数之前的零的数量（run_before）按照逆序进行编码。对于每个非零系数，除了以下两种情况外，都会编码一个 run_before 参数：<br />\n(a) 如果没有更多的零需要编码；<br />\n(b) 对于最后（最低频率）的非零系数，不需要编码 run_before。</li>\n</ol>\n<p>每个零的连续出现次数的 VLC 表的选择取决于：</p>\n<p>(a) 尚未编码的零的数量（ZerosLeft）；</p>\n<p>(b) run_before。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231111140035.webp\" alt=\"image.png\" /></p>\n<p>例子：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231111140120.webp\" alt=\"image.png\" /></p>\n<p>考虑以下 4×4 帧间残差块</p>\n<p>块的 Zigzag 重新排序如下所示：</p>\n<p>0,3,0,1,-1,-1,0,1,0,0,0,0,0,0,0,0</p>\n<p>因此，NumCoeff=5，TotZero=3，T1s=3</p>\n<p>假设 N=1</p>\n<p>编码：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231111140327.webp\" alt=\"image.png\" /></p>\n<p>解码：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231111140403.webp\" alt=\"image.png\" /></p>\n<h1 id=\"心理声学模型\"><a class=\"markdownIt-Anchor\" href=\"#心理声学模型\"></a> 心理声学模型</h1>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 19：心理声学模型：频域掩蔽、时域掩蔽、听觉阈值、SMR、关键带宽、巴克刻度、感知熵</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h2 id=\"声压等级-sound-pressure-levels\"><a class=\"markdownIt-Anchor\" href=\"#声压等级-sound-pressure-levels\"></a> 声压等级 Sound Pressure Levels</h2>\n<p>声音以压力波的形式到达人耳。声压 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> 在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><msup><mn>0</mn><mo>−</mo></msup><mn>5</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[10^-5,10^2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">−</span></span></span></span></span></span></span></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> Pa 范围之间变化。</p>\n<p>声压等级 SPL，单位 dB：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mi>P</mi><mi>L</mi><mo>=</mo><mn>10</mn><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><msup><mrow><mo fence=\"true\">(</mo><mfrac><mi>p</mi><msub><mi>p</mi><mn>0</mn></msub></mfrac><mo fence=\"true\">)</mo></mrow><mn>2</mn></msup><mo separator=\"true\">,</mo><msub><mi>p</mi><mn>0</mn></msub><mo>=</mo><mn>20</mn><mi>μ</mi><mi>P</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">\nSPL= 10 \\log_{10}{\\left( \\frac{p}{p_{0}} \\right)^2}, p_{0}=20\\mu Pa\n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.604038em;vertical-align:-0.95003em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"minner\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6540080000000001em;\"><span style=\"top:-3.9029000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord mathnormal\">μ</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">a</span></span></span></span></span></p>\n<p>p0 为音频在 2kHz 左右的听觉阈值处的声压。</p>\n<p>声音也可以被声音强度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span> 来描述，表示声波单位面积的功率，与 p 的平方成正比。</p>\n<p>声压等级 SPL 也可以被定义为：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mi>P</mi><mi>L</mi><mo>=</mo><mn>10</mn><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><mrow><mo fence=\"true\">(</mo><mfrac><mi>I</mi><msub><mi>I</mi><mn>0</mn></msub></mfrac><mo fence=\"true\">)</mo></mrow><mo separator=\"true\">,</mo><msub><mi>I</mi><mn>0</mn></msub><mo>=</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>12</mn></mrow></msup><mi>W</mi><mi mathvariant=\"normal\">/</mi><msup><mi>m</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\nSPL= 10 \\log_{10}{\\left( \\frac{I}{I_{0}} \\right)}, I_{0}=10^{-12}W/m^2\n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20696799999999996em;\"><span style=\"top:-2.4558600000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24414em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>I</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">I_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">p_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 对应。</p>\n<h2 id=\"响度-loudness\"><a class=\"markdownIt-Anchor\" href=\"#响度-loudness\"></a> 响度 Loudness</h2>\n<p>响度等级定义为，在正面入射平面场下，被感知到的与所检测的声音一样响亮的 1 kHz 声音的级别。</p>\n<p><span style=\"color:#ff0000\">响度取决于强度、持续时间、时间和频谱结构。</span></p>\n<p>单位为 phon，描述了自变量为频率的函数中一条等响曲线。下图每条曲线指的是同样的响度。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231105213848.webp\" alt=\"image.png\" /></p>\n<p>在高音量水平下，以 phon 为单位测量的响度与以 dB 为单位测量的声强之间的差异减小。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231105214437.webp\" alt=\"image.png\" /></p>\n<h2 id=\"掩蔽现象\"><a class=\"markdownIt-Anchor\" href=\"#掩蔽现象\"></a> 掩蔽现象</h2>\n<h3 id=\"同时掩蔽频域掩蔽\"><a class=\"markdownIt-Anchor\" href=\"#同时掩蔽频域掩蔽\"></a> 同时掩蔽（频域掩蔽）</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231105214640.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<blockquote>\n<p>频域掩蔽是指在掩蔽声与被掩蔽声同时存在时产生的掩蔽效应，又称为同时掩蔽。在这种情况下，掩蔽声在掩蔽效应发生期间持续影响着被掩蔽声，形成一种强烈的掩蔽效应。通常情况下，频域中的一个强音会掩盖附近较弱的声音，而距离强音较近的弱音往往更容易被掩蔽；相反地，距离较远的弱音不太容易受到掩蔽效应的影响。图 3 解释了频域掩蔽现象，可以看到一个强信号掩蔽了两个接近其频率的弱信号，低于掩蔽域值的弱信号将无法听见，这导致听觉的安静阈值在掩蔽作用下提高。一般来说，低频声音更容易掩蔽高频声音。</p>\n</blockquote>\n<h3 id=\"非同时掩蔽时域掩蔽\"><a class=\"markdownIt-Anchor\" href=\"#非同时掩蔽时域掩蔽\"></a> 非同时掩蔽（时域掩蔽）</h3>\n<blockquote>\n<p>时域掩蔽效应是在时域中相邻的声音之间互相的掩蔽效应，或被称为非同时掩蔽。时域掩蔽又分为超前掩蔽（pre-masking 或 backward masking）和滞后掩蔽（post-masking 或 forward masking）</p>\n</blockquote>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231105214835.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>虚线之间是掩蔽声音实际的存在时间。</p>\n<blockquote>\n<p>声音信号大多数时候是非稳态的瞬时信号，声压级随着时间变化很快，即强音后面跟着弱音，弱音后面又可能跟着强音。比较强的声音往往会掩蔽随后到来的较弱音。时域掩蔽又分为前掩蔽和后掩蔽。若掩蔽声音出现之前的一段时间内发生掩蔽效应，则称为前掩蔽；否则称为后掩蔽。前掩蔽效应要大于后掩蔽效应，前掩蔽发生作用的时间大于后掩蔽的时间。产生时域掩蔽的主要原因是人的大脑处理信息需要花费一定的时间，时域掩蔽也随着时间的推移很快衰减，是一种弱掩蔽效应。</p>\n</blockquote>\n<h3 id=\"窄带噪声掩蔽\"><a class=\"markdownIt-Anchor\" href=\"#窄带噪声掩蔽\"></a> 窄带噪声掩蔽</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231105214923.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<p>信号掩蔽比（signal to mask ratio, SMR）。</p>\n<blockquote>\n<p>注意：信噪比是 SNR（Signal-to-noise ratio）</p>\n</blockquote>\n<blockquote>\n<p>窄带噪声通常是指带宽等于或者小于听觉临界频带的噪声。在图 1 中，以不同中心频率的窄带噪声作为掩蔽声时的听阈曲线，窄带噪声的中心频率分别为 0.25KHz，1KHz，4KHz，带宽分别为 0.1KHz、0.16KHz 和 0.7KHz，图上部水平虚线为掩蔽噪声声强级 60dB，中部实线表示刚好可听到的纯音声级，下部的虚线是听觉安静域值。从图中可以看出，被掩蔽纯音的频率偏离掩蔽噪声中心频率越大，掩蔽效应下降越快；因为是平滑以后的数据，故而不呈锯齿状。信号分量和掩蔽域值之间的声级差，称信号掩蔽比 (signal to mask ratio, SMR)，SMR 越大，掩蔽效果越小。上图中，0.25KHz，1KHz，4KHz 的最小 SMR 分别为 2、3 和 5dB，最小 SMR 是设计音频编码器很重要的参数。</p>\n</blockquote>\n<p>下图表示不同级别的掩蔽音调下，1kHz 窄带噪声掩蔽器的掩蔽阈值。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231105215907.webp\" alt=\"image.png\" /></p>\n<h3 id=\"纯音掩蔽\"><a class=\"markdownIt-Anchor\" href=\"#纯音掩蔽\"></a> 纯音掩蔽</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231105220158.webp\" alt=\"image.png\" /></p>\n<blockquote>\n<p>从图中可以看出，当被掩蔽音声级较低时，掩蔽域值向低频扩展（斜率较小）；而在声级较高时则相反。当掩蔽音声级为 90dB 时，掩蔽曲线峰值为 75dB，信号掩蔽比为 15dB。与噪声相比，纯音在掩蔽方面具有较大的信号掩蔽比（SMR），这意味着噪声比纯音具有更好的掩蔽效果。纯音的掩蔽效应基本符合以下几个规律：低频纯音容易掩蔽高频纯音，而高频纯音相对较难掩蔽低频纯音；频率相近的纯音容易互相掩蔽；当增加掩蔽声的声压级时，掩蔽阈值会提高，同时被掩蔽的频率范围也会扩展。</p>\n</blockquote>\n<h3 id=\"临界带宽\"><a class=\"markdownIt-Anchor\" href=\"#临界带宽\"></a> 临界带宽</h3>\n<blockquote>\n<p>临界带宽指临界频带的带宽，即恰能产生变化的频率通带（频段）的宽度值。如响度测试中指恰能使声音响度产生变化的带宽值：当声音由一定频带组成时，它的响度变化呈现出下图所示的规律：带宽从很窄到越来越宽的过程中，声音整体响度开始时保持不变；当到达一个特定的带宽后，声音整体响度会随着带宽的变宽而变得更响。<br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231106201541.webp\" alt=\"image.png\" width=\"275px\" /></p>\n</blockquote>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231106200607.webp\" alt=\"image.png\" /></p>\n<p>Threshold of a narrow band noise centered between two sinusoidal maskers at a level of 50dB as a function of the frequency separation between the two sinusoidals.</p>\n<h3 id=\"掩蔽-masking\"><a class=\"markdownIt-Anchor\" href=\"#掩蔽-masking\"></a> 掩蔽 Masking</h3>\n<p><strong>掩蔽曲线的水平在接近遮蔽音调频率的地方最高</strong>。</p>\n<p>当测试信号频率超过临界带宽远离遮蔽音调频率时，掩蔽曲线迅速下降。</p>\n<p><strong>掩蔽频率曲线的形状取决于掩蔽音调的频率和水平</strong>。</p>\n<p>掩蔽曲线在很大程度上取决于掩蔽音调是音调还是噪声样式。</p>\n<h2 id=\"音频编码的心理声学模型\"><a class=\"markdownIt-Anchor\" href=\"#音频编码的心理声学模型\"></a> 音频编码的心理声学模型</h2>\n<h3 id=\"巴克刻度-bark-scale\"><a class=\"markdownIt-Anchor\" href=\"#巴克刻度-bark-scale\"></a> 巴克刻度 Bark Scale</h3>\n<blockquote>\n<p>巴克刻度是一种心理声学的尺度。</p>\n<p>临界频带指的是由于耳蜗构造产生的听觉滤波器的频率带宽。听觉系统中，耳蜗起着频谱分析的作用，基底膜上特定位置点是对某一特征频率（Characteristic Frequency, CF）的响应最大，当声波偏离 CF 时，该点的响应减少，因此基底膜上每一点可等效成具有特定中心频率（CF）的带通滤波器，整个听觉系统可等效成一系列具有连续 CF 的、相互交叠的带通滤波器，称为“听觉滤波器”。临界频带就是听觉系统带通滤波功能的反映，听觉滤波器的带宽即为临界带宽。</p>\n<p>概括地说，临界频带是声音频率带，在临界频带中第一个单音感知度会被第二单音的听觉掩蔽所干扰。根据相关的心理声学的研究，由于人耳的特殊结构，在同一个临界频带内信号容易发生掩蔽效应，即：主要信号容易被能量大并且频率接近的掩蔽信号所掩蔽。因此我们可以认为 Bark 域越近的信号越容易产生掩蔽效应。</p>\n<p>声学研究中，人们使用听觉滤波器来模拟不同的临界频带。后来研究者发现人耳结构大致会对 24 个频率点产生共振，根据这个结论 Eberhard Zwicker 在 1961 年针对人耳特殊结构提出：信号在频带上也呈现出 24 个临界频带，分别从 1 到 24。这就是 Bark 域。</p>\n<p>通常将人耳可听范围内的 20Hz～16kHz 分成 24 个临界频带，用临界频带级来表示临界频带的宽度，单位为巴克（Bark）：Bark=一个临界频带的宽度。当频率 f＜500Hz 时，1 Bark=f/100，临界带宽几乎恒定为 100Hz；当频率 f＞500Hz 时，1 Bark=4log(f/100)， 临界带宽随中心频率的升高而增加，约为中心频率的 20%。<br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231106202935.webp\" alt=\"image.png\" width=\"500px\" /></p>\n</blockquote>\n<p>每个临界带宽（频率）对应于耳朵中基底膜上的固定距离。我们可以定义基底距离测量中的长度单位为一个临界带宽。</p>\n<h3 id=\"掩蔽传播模型\"><a class=\"markdownIt-Anchor\" href=\"#掩蔽传播模型\"></a> 掩蔽传播模型</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231106202329.webp\" alt=\"image.png\" /></p>\n<p>Excitation patterns for narrow-band noise signals centered at different frequencies and at a level of 60 dB.</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231106203058.webp\" alt=\"image.png\" /></p>\n<p>Excitation patterns for narrow-band noise signals centered at 1kHz and at different levels.</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231106203147.webp\" alt=\"image.png\" /></p>\n<p>The curve in the diagram be expressed as a function of the Bark scale difference between the maskee and masker frequency.</p>\n<h3 id=\"掩蔽曲线\"><a class=\"markdownIt-Anchor\" href=\"#掩蔽曲线\"></a> 掩蔽曲线</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231106203258.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<h3 id=\"mp3-的心理声学模型\"><a class=\"markdownIt-Anchor\" href=\"#mp3-的心理声学模型\"></a> MP3 的心理声学模型</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231106203341.webp\" alt=\"image.png\" width=\"379px\" /></p>\n<h3 id=\"感知熵\"><a class=\"markdownIt-Anchor\" href=\"#感知熵\"></a> 感知熵</h3>\n<p>感知熵（Perceptual entropy）PE：在不引入任何感知差异的情况下，对信号进行编码所需的每个频率样本的平均比特数。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231126174641.webp\" alt=\"image.png\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>n</mi><mi>b</mi></msub></mrow><annotation encoding=\"application/x-tex\">n_b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是分区带 b 中的频率线数量，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>n</mi><mi>e</mi><mi>r</mi><mi>g</mi><msub><mi>y</mi><mi>b</mi></msub></mrow><annotation encoding=\"application/x-tex\">energy_b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是分区 b 中的信号能量，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>h</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>h</mi><mi>o</mi><mi>l</mi><msub><mi>d</mi><mi>b</mi></msub></mrow><annotation encoding=\"application/x-tex\">threshold_b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是掩蔽阈值。</p>\n<p>PE 可以用于确定 MDCT 或 attack 的块类型（PE&gt;1800 比特表示短窗口）</p>\n<h3 id=\"block-switching-state-diagram\"><a class=\"markdownIt-Anchor\" href=\"#block-switching-state-diagram\"></a> Block Switching State Diagram</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231106203917.webp\" alt=\"image.png\" width=\"479px\" /></p>\n<h2 id=\"本章参考的外部资源\"><a class=\"markdownIt-Anchor\" href=\"#本章参考的外部资源\"></a> 本章参考的外部资源</h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/647121839\">心理声学声掩蔽效应及应用 - 知乎 (zhihu.com)</a></li>\n<li><a href=\"http://www.heacad.cn/NewsDetail/3240260.html\">听力学小课堂 | 名词释义（15）：临界带宽、临界频带-苏州海卡缔听力技术有限公司 (heacad.cn)</a></li>\n<li><a href=\"https://blog.csdn.net/qq_34218078/article/details/125145458\">声学感知刻度(mel scale、Bark scale、ERB)与声学特征提取(MFCC、BFCC、GFCC)_hz2erb_凌逆战的博客-CSDN博客</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1D5411S71K/?spm_id_from=333.999.0.0&amp;vd_source=e03d48176855fc5349b27aef691f9cdb\">mp3是如何骗过你耳朵的？【差评君】_哔哩哔哩_bilibili</a></li>\n</ul>\n<h1 id=\"时频映射\"><a class=\"markdownIt-Anchor\" href=\"#时频映射\"></a> 🍂时频映射</h1>\n<p>音频编码框图：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110202133.webp\" alt=\"image.png\" /></p>\n<p>T/F mapping: FFT, PQMF, MDCT</p>\n<p>傅里叶变换</p>\n<ul>\n<li>\n<p>1822 年，傅里叶指出实时信号可以表示为具有不同频率的信号的总和。</p>\n</li>\n<li>\n<p>傅里叶变换定义如下：<br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110202311.webp\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p>傅里叶逆变换等于：<br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110202315.webp\" alt=\"image.png\" /></p>\n</li>\n</ul>\n<p>傅里叶级数</p>\n<ul>\n<li>\n<p>对信号在有限时间间隔上的傅里叶变换可以用来在时域中重构原始信号。</p>\n</li>\n<li>\n<p>实际上，我们不需要完整的傅里叶变换数据来完全在时域中重构信号。</p>\n</li>\n<li>\n<p>我们只需要在离散频率点 f=k/T（其中 k 是整数）处的 X(f) 值。</p>\n</li>\n<li>\n<p>我们通过将窗口信号替换为在时间间隔从 -T/2 到 T/2 内相等的信号，但在该间隔之外周期性地重复，来进行数据压缩。<br />\n对于生成的周期信号，我们可以定义傅里叶级数：<br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110202643.webp\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">X[k]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span></span></span></span> 只是时间限定信号在离散频率集合 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>k</mi><mi mathvariant=\"normal\">/</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">f=k/T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> 处的傅里叶变换。</p>\n</li>\n<li>\n<p>我们可以使用以下公式重构 x(t)：<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110202703.webp\" alt=\"image.png\" /><br />\n采样定理</p>\n</li>\n<li>\n<p>假设一个信号在频率范围从 -Fmax 到 Fmax 内具有频率内容。</p>\n</li>\n<li>\n<p>如果我们选择某个频率间隔 Fs≥2Fmax，并周期性地延续信号的频谱范围超出从 -Fs/2 到 Fs/2 的范围。</p>\n</li>\n<li>\n<p>从傅里叶级数的定义可以想象，这个频率周期函数只有离散时间分量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">x[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span>（如果我们定义 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><msub><mi>F</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\">T=1/F_s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，则有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>x</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>T</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x[n]=x(nT)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mclose\">)</span></span></span></span>）。</p>\n</li>\n</ul>\n<p>在时域中对信号进行窗函数处理</p>\n<ul>\n<li>假设我们开始处理一个带限信号，并以采样频率 Fs≥2Fmax 对信号进行采样。</li>\n<li>假设我们想要使用有限的样本块进行计算，以便在等待信号完成之前开始进行计算。</li>\n<li>实现这个目标的一种方法是将原始的非有限信号 x(t) 与矩形窗函数相乘。</li>\n</ul>\n<p>矩形窗函数</p>\n<ul>\n<li>矩形窗函数 WR(t) 在 t=0 到 t=T 之间等于 1，在其他地方等于零。</li>\n<li>我们可能想知道这个时限信号是否仍然足够带限。</li>\n<li>时限信号的傅里叶变换等于原始信号的傅里叶变换与 WR(t) 的傅里叶变换 WR(f) 的卷积。</li>\n<li>WR(f) 的傅里叶变换随着频率的增加下降得非常缓慢，这意味着时限信号的傅里叶变换很可能不再足够带限。</li>\n<li>如果我们使用这个窗函数，会发生混叠现象。</li>\n</ul>\n<p>正弦窗函数</p>\n<ul>\n<li>矩形窗函数的问题在于窗口边缘处的截断非常尖锐。</li>\n<li>尖锐的变化会导致高频成分。</li>\n<li>在时域中，更好的窗函数选择是在边缘处缓慢衰减，以避免尖锐的不连续性。</li>\n<li>正弦窗函数为 ws(t) = sin(πt/T)，0≤t≤T。当应用于离散时间信号的 N 个样本时，窗函数变为 ws[n] = sin(π(n+1/2)/N)，其中 n=0，…，N-1。</li>\n<li>从频谱中可以看出，主瓣比矩形窗函数更宽，但频率幅度下降得更快。</li>\n</ul>\n<p>汉宁窗函数</p>\n<ul>\n<li>汉宁窗函数在边缘处没有正弦窗函数那样的突变。</li>\n<li>汉宁窗函数为 wH(t) = 1/2(1-cos(2πt/T))，0≤t≤T。</li>\n<li>当应用于离散时间信号的 N 个样本时，窗函数变为 wH[n] = 1/2(1-cos[2π(n+1/2)/N])，其中 n=0，…，N-1。</li>\n<li>从频谱中可以看出，汉宁窗函数的衰减速度更快（有助于避免混叠），但其主瓣的宽度更大（对于准确的频率识别不利）。</li>\n<li>在窗函数设计中，我们面临权衡：低旁瓣能量（与杂散频率成分相关）和主瓣的宽度（窗函数的频率分辨率）。</li>\n</ul>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 17：FFT 和复杂度</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>快速傅里叶变换（FFT）</p>\n<ul>\n<li>直接计算 DFT 需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">N^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 次复数乘法和加法运算。</li>\n<li>令人惊讶的是，FFT 允许我们在大约 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>×</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N×log_2N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 次复数乘法/加法运算中完成完全相同的计算。</li>\n<li>以 N=1024 为例，FFT 只需要 DFT 所需计算时间的 1%。</li>\n<li>这个算法最早由高斯在 1880 年提出，后来由库利和图基在 1965 年重新发现。</li>\n</ul>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 15：傅里叶变换、傅里叶级数、离散时间傅里叶变换、离散傅里叶变换</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><table>\n<thead>\n<tr>\n<th></th>\n<th>时域</th>\n<th>频域</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>傅里叶变换</td>\n<td colspan=\"2\">连续、无限</td>\n</tr>\n<tr>\n<td>傅里叶级数</td>\n<td>有限信号周期延拓，连续</td>\n<td>离散</td>\n</tr>\n<tr>\n<td>离散时间傅里叶变换</td>\n<td>离散</td>\n<td>有限频谱的周期延拓</td>\n</tr>\n<tr>\n<td><span style=\"color:#ff0000\">离散傅里叶变换</span></td>\n<td colspan=\"2\">离散，有限</td>\n</tr>\n</tbody>\n</table>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 16：Windowing</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><table>\n<thead>\n<tr>\n<th></th>\n<th>去混叠</th>\n<th>频率选择性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>矩形窗</td>\n<td>最差</td>\n<td><span style=\"color:#ff0000\">最好</span></td>\n</tr>\n<tr>\n<td>正弦窗</td>\n<td colspan=\"2\">中等</td>\n</tr>\n<tr>\n<td>汉宁窗</td>\n<td>最好</td>\n<td>最差</td>\n</tr>\n</tbody>\n</table>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 18：MDCT：重叠相加技术、长窗、短窗</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>MDCT</p>\n<p>重叠相加技术</p>\n<ul>\n<li>PQMF 通常被视为时频银行（Time Frequency banks）。相应的编码称为子带编码。</li>\n<li>如果在音频编码过程中，将时域的数据样本映射到频域的数据样本，例如使用 FFT，这种音频编码方法称为变换编码。</li>\n<li>我们已经知道，在进行 DFT 之前，音频信号会进行窗函数处理以避免混叠效应，在解码器中，我们需要知道如何恢复原始信号。</li>\n<li>除了应用逆离散傅里叶变换之外，我们还需要将窗函数的影响从数据中去除。</li>\n<li>第一种方法是将逆 DFT 的输出除以窗函数系数。</li>\n<li>问题在于量化/反量化会在信号中引入小的误差。</li>\n<li>这些误差可能是听不到的，但是将逆 DFT 的输出除以窗函数可能会放大数据块边缘附近的误差，因为窗函数在该区域被设计为平滑地趋近于零。</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110204338.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<p>在编码器中，块输入信号是重叠的。在解码器中，我们重叠并相加输出信号。</p>\n<p>窗函数的设计使得在没有量化的情况下可以恢复原始信号。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110204716.webp\" alt=\"image.png\" /></p>\n<p>重叠量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>−</mo><mi>M</mi><mo>≤</mo><mi>N</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">N-M ≤ N/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span></p>\n<p>在编码器中，每个连续的数据块从前一个数据块的起始位置后的 M 个样本开始，并包括 M 个新的数据样本。</p>\n<p>在解码器中：</p>\n<ul>\n<li>我们将逆变换和窗函数处理后的数据的前 M 个样本传输到输出缓冲区。</li>\n<li>将剩余的 N-M 个样本存储到存储缓冲区中。</li>\n<li>我们将前一个数据块存储缓冲区中的 N-M 个样本与当前数据块输出缓冲区的前 N-M 个样本相加。</li>\n<li>然后，我们将输出缓冲区的 M 个样本发送到解码器的输出流中。</li>\n</ul>\n<p>我们选择在解码器中进行窗函数处理的原因是：</p>\n<ul>\n<li>使逆变换块边缘附近的量化噪声较小；</li>\n<li>分析和合成阶段可以对称地进行。</li>\n</ul>\n<p>对于分析和合成窗函数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mi>a</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">wa[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">ws[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span>，有以下要求：</p>\n<ul>\n<li>在没有重叠的任何块区域中，<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110204931.webp\" alt=\"image.png\" /></li>\n<li>在重叠区域中，<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110204934.webp\" alt=\"image.png\" /><br />\n该条件将一个块的窗函数的右侧与下一个块的窗函数的左侧相关联。i 是块的索引。</li>\n</ul>\n<p>窗的选择：</p>\n<p>如果分析和合成窗函数是相同的，我们有：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110205027.webp\" alt=\"image.png\" /></p>\n<p>一个满足这个条件的简单窗函数是：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110205032.webp\" alt=\"image.png\" /></p>\n<p>正弦窗口可能无法为特定应用提供频率分辨率与泄漏之间的权衡。实际上，我们可以通过一种归一化过程来修改任何窗口函数，以满足重叠相加条件。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110205646.webp\" alt=\"image.png\" /></p>\n<p>如果 w’(p) 具有控制其形状的参数，我们可以调整这些参数以调节归一化窗口以适应特定应用。归一化过程可以使用 Kaiser-Bessel 窗口作为核窗口，并在相邻块之间具有 50% 的重叠来进行，从而创建所谓的“Kaiser-Bessel 衍生”窗口。</p>\n<p>音频编码中的窗口考虑因素：</p>\n<ul>\n<li>在音频编码中，我们希望：\n<ul>\n<li>最大化频率分离。</li>\n<li>最小化音频阻塞效应的影响。</li>\n</ul>\n</li>\n<li>所选的窗口长度和形状与这两个属性有关。</li>\n<li>给定输入数据到滤波器组的块大小，窗口形状的选择决定了滤波器组的频谱分离程度：\n<ul>\n<li>正弦窗口比α=4 的 KBD 窗口具有更好的近端选择性（主瓣更窄）。</li>\n<li>正弦窗口的侧瓣能量的抑制程度较差。<br />\n根据输入音频信号的特性，正弦窗口或α=4 的 KBD 窗口可能为信号表示提供更好的频率分辨率：</li>\n</ul>\n</li>\n<li>对于高度音调的信号，近端选择性比频率表示中的最终抑制更重要。</li>\n<li>如果信号的频率分量之间存在较大的分离，更高的最终抑制可以更好地利用信号分量的掩蔽效应。</li>\n</ul>\n<p>改进离散余弦变换（MDCT）：</p>\n<ul>\n<li>为了减少窗口化引起的阻塞效应，我们希望窗口边缘的过渡到零尽可能平缓。</li>\n<li>这意味着当我们设置大的重叠区域时，阻塞效应最小。</li>\n<li>然而，我们需要对每 M 个新的时间样本输入编码器的样本进行 N 个样本的变换数据的编码、传输/存储。</li>\n<li>在从冗余和无关信息去除中获得任何编码增益之前，我们将数据速率增加了 N/M 倍。</li>\n<li>为了解决这个问题，开发了 MDCT。</li>\n<li>MDCT 是一种替代 DFT 的变换，允许块之间有 50% 的重叠，而不增加数据速率。<br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110205908.webp\" alt=\"image.png\" /></li>\n</ul>\n<h1 id=\"mp3-的编码与解码\"><a class=\"markdownIt-Anchor\" href=\"#mp3-的编码与解码\"></a> MP3 的编码与解码</h1>\n<p>Normative：必须的，必要的</p>\n<p>Informative：不必的</p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 22：MP3 的编解码器过程</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h2 id=\"mp3-编码器informative-elements\"><a class=\"markdownIt-Anchor\" href=\"#mp3-编码器informative-elements\"></a> MP3 编码器（Informative Elements）</h2>\n<p>编码器概览：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109220436.webp\" alt=\"image.png\" /></p>\n<h3 id=\"时频映射-2\"><a class=\"markdownIt-Anchor\" href=\"#时频映射-2\"></a> 时频映射</h3>\n<p>PQMF：在一个帧中，对 1152 个 PCM 音频样本进行滤波，使得每个子带包含 36 个子带样本。</p>\n<p>窗函数：在进行 MDCT 之前，对子带样本应用了四种不同的窗函数。</p>\n<p>MDCT：使用两种不同的 MDCT 块长度，一种是长块，包含 36 个样本，另一种是短块，包含 12 个样本。<strong>短块适合变化较快的信号，长块适合平稳信号。</strong></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109220745.webp\" alt=\"image.png\" /></p>\n<h3 id=\"块模式\"><a class=\"markdownIt-Anchor\" href=\"#块模式\"></a> 块模式</h3>\n<ul>\n<li>注意，短块长度是长块长度的 1/3。在短块模式下，三个短块替代一个长块，这样无论块类型如何，音频样本帧的 MDCT 样本数量保持不变。</li>\n<li>对于给定的音频样本帧，MDCT 可以全部具有相同的块长度（长块或短块），或者采用混合块模式。</li>\n<li>在混合块模式下，MDCT 对于两个较低频率子带使用长窗口，对于 30 个较高频率子带使用短窗口。这种模式在不牺牲较高频率的时间分辨率的情况下，为较低频率提供更好的频率分辨率。</li>\n</ul>\n<p>应用于 1152 个 PCM 样本的信号处理：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109221035.webp\" alt=\"image.png\" /></p>\n<h3 id=\"去混叠\"><a class=\"markdownIt-Anchor\" href=\"#去混叠\"></a> 去混叠</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109221050.webp\" alt=\"image.png\" /></p>\n<p>在量化之前，应用了一种抗混叠处理来消除在分析 PQMF 中引入的混叠，以减少传输的信息量。</p>\n<p>这种减少是通过一系列蝶形计算来实现的。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109221249.webp\" alt=\"image.png\" /></p>\n<h3 id=\"非均匀量化\"><a class=\"markdownIt-Anchor\" href=\"#非均匀量化\"></a> 非均匀量化</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109221321.webp\" alt=\"image.png\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109221324.webp\" alt=\"image.png\" /></p>\n<p><span style=\"color:#ff0000\">global_gain：全局量化步长。控制比特率。</span></p>\n<p>scale_factor：子带因子控制噪声。</p>\n<p>在量化之前，将 MDCT 系数提升到 3/4 的幂，以在量化器值的范围内提供更一致的信噪比。</p>\n<p>scale_factor 用于调整量化噪声，以适应掩蔽阈值的不同频率轮廓。</p>\n<h3 id=\"哈夫曼编码-2\"><a class=\"markdownIt-Anchor\" href=\"#哈夫曼编码-2\"></a> 哈夫曼编码</h3>\n<p>有序的频率线被分为三个不同的区域，分别称为“rzero”、“count1”和“big_value”区域。</p>\n<ul>\n<li>连零区域：从较高的频率开始，编码器将连续的全零值识别为一个区域，即“rzero”区域。“rzero”区域必须包含偶数个零值。</li>\n<li>数 1 区域：4 个一起编码。由一系列仅包含 -1、0 或 1 的值组成。这个区域的两个霍夫曼表每次编码 4 个值，因此值的数量必须是 4 的倍数。</li>\n<li>big_value 区：2 个一起编码。涵盖了所有剩余的值，称为“big_values”区域。这些值与 30 个霍夫曼表一起进行编码。这个区域进一步分为三个子区域，每个子区域都有自己特定的霍夫曼表。</li>\n</ul>\n<h3 id=\"比特分配两层嵌套循环\"><a class=\"markdownIt-Anchor\" href=\"#比特分配两层嵌套循环\"></a> 比特分配（两层嵌套循环）</h3>\n<p>外层循环：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109221944.webp\" alt=\"image.png\" /></p>\n<p>内层循环：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109221959.webp\" alt=\"image.png\" /></p>\n<p>Quantizer_change is the change of global_gain.</p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 20：MP3：比特流格式、MP3 采样频率、stereo/joint channel/dual channel/single channel、哈夫曼编码域，比特池</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h3 id=\"比特流格式\"><a class=\"markdownIt-Anchor\" href=\"#比特流格式\"></a> 比特流格式</h3>\n<p>为了生成符合 MP3 标准的比特流，霍夫曼编码的频率线、辅助信息和帧头被组合成比特流。</p>\n<p>比特流被分割成帧，每帧表示 1152 个音频样本。</p>\n<p>帧头描述了编码音频所使用的比特率和采样频率。</p>\n<p>辅助信息告知使用的块类型、霍夫曼表、subband gain 和子带比例因子。</p>\n<h3 id=\"比特池\"><a class=\"markdownIt-Anchor\" href=\"#比特池\"></a> 比特池</h3>\n<p>使用“比特储备池”方法来满足编码器对编码比特的时变需求。</p>\n<p>编码器只能从过去的帧中借用比特，而不能从未来的帧中借用比特。</p>\n<p>MPEG/Audio Layer 3 比特流使用一个 9 位指针，称为 main_data_begin，来表示当前处理帧的主数据的起始点。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109222321.webp\" alt=\"image.png\" /></p>\n<h3 id=\"stereo-encoding\"><a class=\"markdownIt-Anchor\" href=\"#stereo-encoding\"></a> Stereo Encoding</h3>\n<p>联合立体声</p>\n<p>中侧立体声</p>\n<p>强度立体声</p>\n<h2 id=\"mp3-解码器normative-elements\"><a class=\"markdownIt-Anchor\" href=\"#mp3-解码器normative-elements\"></a> MP3 解码器（Normative Elements）</h2>\n<p>MPEG 音频第三层解码概述：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109222737.webp\" alt=\"image.png\" /></p>\n<p>解码器主要由三个部分组成：“比特流解码”，“逆量化”和“频率到时间映射”。</p>\n<ul>\n<li>输入的编码比特流通过第一部分进行同步，并提取每帧的量化频率线和其他信息。</li>\n<li>接下来，量化的频率线进行反量化。</li>\n<li>最后，应用逆 MDCT 和合成 PQMF 来获得以 PCM 格式输出的信号。</li>\n</ul>\n<p>MP3 解码器的框图：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109222925.webp\" alt=\"image.png\" /></p>\n<p>比特流解码框图：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109222954.webp\" alt=\"image.png\" /></p>\n<h3 id=\"辅助信息解码的过程\"><a class=\"markdownIt-Anchor\" href=\"#辅助信息解码的过程\"></a> 辅助信息解码的过程</h3>\n<ul>\n<li>帧中的辅助信息包含解码主数据所需的必要信息。</li>\n<li>它包含有关在 Huffman 解码过程中使用哪些霍夫曼表以及比例因子的信息。</li>\n<li>它还包含主数据开始的位置信息。</li>\n</ul>\n<h3 id=\"哈夫曼信息解码\"><a class=\"markdownIt-Anchor\" href=\"#哈夫曼信息解码\"></a> 哈夫曼信息解码</h3>\n<ul>\n<li>Huffman 信息解码块的任务是设置 Huffman 解码块所需的所有参数。</li>\n<li>第一个任务是从辅助信息中收集有关 Huffman 编码比特的数据。这包括在比特流中找到 Huffman 编码的比特，并确定每个频谱区域分区所使用的 Huffman 表。</li>\n<li>此外，该块必须确保生成所有频率线，而不管 Huffman 编码比特中描述了多少频率线。当出现少于 576 个频率线时，Huffman 信息解码块必须执行零填充以填补数据的不足。</li>\n</ul>\n<p>哈夫曼解码：</p>\n<ul>\n<li>由于 Huffman 编码是一种可变长度编码方法，没有尝试将 Huffman 编码比特中的各个码字分开，因此，如果不从已知为码字起始点的 Huffman 编码比特开始解码，无法识别 Huffman 编码比特中间的单个码字。</li>\n<li>如果在一串 Huffman 编码比特中发生错误，剩余的编码比特无法正确解码。<strong>我们可以直接找下一帧的同步字，那么这一帧就去掉。</strong></li>\n</ul>\n<p>子带因子解码：<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109223350.webp\" alt=\"image.png\" /></p>\n<h3 id=\"反量化dequantization或去缩放descaling\"><a class=\"markdownIt-Anchor\" href=\"#反量化dequantization或去缩放descaling\"></a> 反量化（Dequantization）或去缩放（Descaling）</h3>\n<p>目的是重构编码器中由 MDCT 块生成的频率线的感知相同的数据。</p>\n<p>长窗口的计算公式为：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109223456.webp\" alt=\"image.png\" /></p>\n<p>短窗口的计算公式为：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109223500.webp\" alt=\"image.png\" /></p>\n<p>反量化：</p>\n<ul>\n<li><span style=\"color:#ff0000\">全局步长（global_gain）定义了在一个 granule 内用于一个声道的量化步长</span>。</li>\n<li>编码器中的比例因子（scalefactors）使用步长为 2 或 sqrt(2) 进行量化，可以通过 scalefac_scale 标志的值来识别，如果 scalefac_scale=0，则 scalefac_multiplier=0.5，否则 scalefac_multiplier=1。</li>\n<li>pretab 和 preflag 变量仅在长窗口的情况下使用。一个表格为 pretab 变量的每个比例因子带指定了一个单独的值。</li>\n<li>对于短窗口，通过 subblock_gain 指定了一个 gain factor。</li>\n</ul>\n<h3 id=\"重新排序reordering\"><a class=\"markdownIt-Anchor\" href=\"#重新排序reordering\"></a> 重新排序（Reordering）</h3>\n<p>通过解量化生成的频率线并不总是以相同的方式排序。</p>\n<p>在长窗口的 MDCT 块中，它会首先按子带，然后按频率生成排序的频率线。</p>\n<p>为了增加频率线的 Huffman 编码效率，在短窗口中，频率线首先按子带排序，然后按频率排序，最后按窗口排序。</p>\n<h3 id=\"立体声处理\"><a class=\"markdownIt-Anchor\" href=\"#立体声处理\"></a> 立体声处理</h3>\n<p>在解量化之后，重构的值在进入合成滤波器组之前进行中侧处理（MS）。</p>\n<p>在中侧立体声（MS）模式下，传输的是归一化的中侧（middle/side）通道值 Mi/Si，而不是左右（left/right）通道值 Li/Ri。因此，可以使用这些 Mi/Si 值来重构 Li/Ri。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109224345.webp\" alt=\"image.png\" /></p>\n<h3 id=\"去混叠-2\"><a class=\"markdownIt-Anchor\" href=\"#去混叠-2\"></a> 去混叠</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109224359.webp\" alt=\"image.png\" /></p>\n<h3 id=\"反向-mdct\"><a class=\"markdownIt-Anchor\" href=\"#反向-mdct\"></a> 反向 MDCT</h3>\n<p>从去混叠块中处理的频率线通过 IMDCT 块进行处理。IMDCT 的表达式如下所示：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109224424.webp\" alt=\"image.png\" /></p>\n<p>Xk 表示频率线，对于短块 n=12，对于长块 n=36。</p>\n<p>根据 block_type 值，xi 与之前定义的窗口之一相乘：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109224428.webp\" alt=\"image.png\" /></p>\n<h3 id=\"imdct-的重叠相加\"><a class=\"markdownIt-Anchor\" href=\"#imdct-的重叠相加\"></a> IMDCT 的重叠相加</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109224656.webp\" alt=\"image.png\" /></p>\n<h3 id=\"合成多相滤波器组\"><a class=\"markdownIt-Anchor\" href=\"#合成多相滤波器组\"></a> 合成多相滤波器组</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231109224713.webp\" alt=\"image.png\" /></p>\n<h2 id=\"编码语法normative-elements\"><a class=\"markdownIt-Anchor\" href=\"#编码语法normative-elements\"></a> 编码语法（Normative Elements）</h2>\n<h3 id=\"位流格式\"><a class=\"markdownIt-Anchor\" href=\"#位流格式\"></a> 位流格式</h3>\n<p>一个 MP3 位流被组织成音频帧，其中包括五个部分：头部、CRC、辅助信息、主数据和附加数据。</p>\n<p>单声道的辅助信息块长度为 136 位，双声道的辅助信息块长度为 256 位。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110132621.webp\" alt=\"image.png\" /></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 音频帧</span></span><br><span class=\"line\">frame()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\theader()</span><br><span class=\"line\">\terror_check()</span><br><span class=\"line\">\taudio_data() <span class=\"comment\">// 音频数据</span></span><br><span class=\"line\">\tancillary_data()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"header\"><a class=\"markdownIt-Anchor\" href=\"#header\"></a> Header</h3>\n<p>一开始的 32 位（4 字节）是头部信息。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110132753.webp\" alt=\"image.png\" /></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">header()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tsyncword           <span class=\"number\">12</span> bits bslbf <span class=\"comment\">// 12个1</span></span><br><span class=\"line\">\tID                 <span class=\"number\">1</span>  bit  bslbf <span class=\"comment\">// 表明算法的ID。1表示MPEG音频，0做保留</span></span><br><span class=\"line\">\tlayer              <span class=\"number\">2</span>  bits bslbf <span class=\"comment\">// 表明使用的层级。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t <span class=\"comment\">// 11：Layer I；   10 Layer II</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t <span class=\"comment\">// 01：Layer III； 00 保留</span></span><br><span class=\"line\">\tprotection_bit     <span class=\"number\">1</span>  bit  bslbf <span class=\"comment\">// 指示是否在音频比特流中增加了冗余，以方便错误检测。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t <span class=\"comment\">// 1：没有冗余，0：增加了冗余</span></span><br><span class=\"line\">\tbitrate_index      <span class=\"number\">4</span>  bits bslbf <span class=\"comment\">// 指示比特率。全0表示&#x27;free format&#x27;，</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t <span class=\"comment\">// 可以使用不出现在列表中的固定比特率</span></span><br><span class=\"line\">\tsampling_frequency <span class=\"number\">2</span>  bits bslbf <span class=\"comment\">// 抽样频率</span></span><br><span class=\"line\">\tpadding_bit        <span class=\"number\">1</span>  bit  bslbf <span class=\"comment\">// 1：帧包含额外的槽以调整平均比特率到采样频率，否则为0。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t <span class=\"comment\">// padding只在44.1kHz采样频率下才有必要使用。</span></span><br><span class=\"line\">\tprivate_bit        <span class=\"number\">1</span>  bit  bslbf <span class=\"comment\">// 私用比特。未来ISO将不再使用。</span></span><br><span class=\"line\">\tmode               <span class=\"number\">2</span>  bits bslbf </span><br><span class=\"line\">\tmode_extension     <span class=\"number\">2</span>  bits bslbf <span class=\"comment\">// 用于联合立体声模式中（mode=&#x27;01&#x27;）</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 指名应用哪种联合立体声编码方法类型。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"comment\">//该算法中隐含了应用强度立体声模式和ms_stereo模式的频率范围</span></span><br><span class=\"line\">\tcopyright          <span class=\"number\">1</span>  bit  bslbf <span class=\"comment\">// 0:编码的比特流没有版权，1：存在版权保护</span></span><br><span class=\"line\">\toriginal/home      <span class=\"number\">1</span>  bit  bslbf <span class=\"comment\">// 0：比特流为副本，1：比特流为原始版本</span></span><br><span class=\"line\">\temphasis           <span class=\"number\">2</span>  bits bslbf <span class=\"comment\">// 加重的信息。表明解加重需要使用的类型。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>bit_rate_index</th>\n<th>bit rate</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘0000’</td>\n<td>free</td>\n</tr>\n<tr>\n<td>‘0001’</td>\n<td>32 kbit/s</td>\n</tr>\n<tr>\n<td>‘0010’</td>\n<td>40 kbit/s</td>\n</tr>\n<tr>\n<td>‘0011’</td>\n<td>48 kbit/s</td>\n</tr>\n<tr>\n<td>‘0100’</td>\n<td>56 kbit/s</td>\n</tr>\n<tr>\n<td>‘0101’</td>\n<td>64 kbit/s</td>\n</tr>\n<tr>\n<td>‘0110’</td>\n<td>80 kbit/s</td>\n</tr>\n<tr>\n<td>‘0111’</td>\n<td>96 kbit/s</td>\n</tr>\n<tr>\n<td>‘1000’</td>\n<td>112 kbit/s</td>\n</tr>\n<tr>\n<td>‘1001’</td>\n<td>128 kbit/s</td>\n</tr>\n<tr>\n<td>‘1010’</td>\n<td>160 kbit/s</td>\n</tr>\n<tr>\n<td>‘1011’</td>\n<td>192 kbit/s</td>\n</tr>\n<tr>\n<td>‘1100’</td>\n<td>224 kbit/s</td>\n</tr>\n<tr>\n<td>‘1101’</td>\n<td>256 kbit/s</td>\n</tr>\n<tr>\n<td>‘1110’</td>\n<td>320 kbit/s</td>\n</tr>\n<tr>\n<td>‘1111’</td>\n<td>forbidden</td>\n</tr>\n</tbody>\n</table>\n<p>sampling_frequency 抽样频率：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>MPEG-1</th>\n<th>MPEG-2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘00’</td>\n<td>44.1kHz</td>\n<td>22.05kHz</td>\n</tr>\n<tr>\n<td>‘01’</td>\n<td>48 kHz</td>\n<td>24kHz</td>\n</tr>\n<tr>\n<td>‘10’</td>\n<td>32 kHz</td>\n<td>16kHz</td>\n</tr>\n<tr>\n<td>‘11’</td>\n<td colspan=\"2\">reserved</td>\n</tr>\n</tbody>\n</table>\n<p>mode：</p>\n<table>\n<thead>\n<tr>\n<th colspan=\"2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘00’</td>\n<td>stereo 立体声</td>\n</tr>\n<tr>\n<td>‘01’</td>\n<td>joint_stereo 联合立体声 (intensity_stereo 增强立体声 and/or ms_stereo)  ms-&gt;mid-size</td>\n</tr>\n<tr>\n<td>‘10’</td>\n<td>dual_channel</td>\n</tr>\n<tr>\n<td>‘11’</td>\n<td>single_channel 单通道</td>\n</tr>\n</tbody>\n</table>\n<p>mode_extension：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>intensity_stereo</th>\n<th>ms_stereo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘00’</td>\n<td>off</td>\n<td rowspan=\"2\">off</td>\n</tr>\n<tr>\n<td>‘01’</td>\n<td>on</td>\n</tr>\n<tr>\n<td>‘10’</td>\n<td>off</td>\n<td rowspan=\"2\">on</td>\n</tr>\n<tr>\n<td>‘11’</td>\n<td>on</td>\n</tr>\n</tbody>\n</table>\n<p>emphasis：</p>\n<table>\n<thead>\n<tr>\n<th colspan=\"2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>‘00’</td>\n<td>no emphasis</td>\n</tr>\n<tr>\n<td>‘01’</td>\n<td>50/15 microsec. emphasis</td>\n</tr>\n<tr>\n<td>‘10’</td>\n<td>reserved</td>\n</tr>\n<tr>\n<td>‘11’</td>\n<td>CCITT J.17</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"errorcheck\"><a class=\"markdownIt-Anchor\" href=\"#errorcheck\"></a> ErrorCheck</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_check()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (protection_bit==<span class=\"number\">0</span>) <span class=\"comment\">// 在Header中</span></span><br><span class=\"line\">\t\tcrc_check <span class=\"number\">16</span> bits rpchof</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"audio-data\"><a class=\"markdownIt-Anchor\" href=\"#audio-data\"></a> Audio Data</h3>\n<p>每一个音频帧包含来自 1 到 2 个音频 granules 的压缩数据。</p>\n<p>每一个 granule 由 18*32 子带样本组成</p>\n<p>帧中的音频数据以下面的方式进行分配：</p>\n<ul>\n<li>main_data_begin pointer</li>\n<li>side info for both granules (scfsi)</li>\n<li>side info granule 1</li>\n<li>side info granule 2</li>\n<li>scalefactors and Huffman code data granule 1</li>\n<li>scalefactors and Huffman code data granule 2</li>\n</ul>\n<h4 id=\"边信息\"><a class=\"markdownIt-Anchor\" href=\"#边信息\"></a> 边信息</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">audio_data()&#123;</span><br><span class=\"line\">\tmain_data_begin  <span class=\"number\">9</span> bits uimsbf <span class=\"comment\">// main-data-begin 的值用于确定帧的主数据的第一个比特的位置。它将该位置指定为相对于音频同步字节的负偏移量（以字节为单位）</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mode == single_channel)\t&#123;</span><br><span class=\"line\">\t\tprivate_bits <span class=\"number\">5</span> bits bslbf <span class=\"comment\">// 用于私有用途的位。这些位在ISO的未来不会被使用。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// scfsi_band 控制着尺度因子组（scfsi_bands）的尺度因子选择信息的使用。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (scfsi_band=<span class=\"number\">0</span>; scfsi_band&lt;<span class=\"number\">4</span>; scfsi_band++)</span><br><span class=\"line\">\t\t\tscfsi[scfsi_band] <span class=\"number\">1</span> bits bslbf <span class=\"comment\">// 尺度因子选择信息。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t   <span class=\"comment\">// scfsi 控制着对于每个粒度是否传输尺度因子： </span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t   <span class=\"comment\">// &#x27;0&#x27; 对于每个粒度都传输尺度因子。 </span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t   <span class=\"comment\">// &#x27;1&#x27; 对于粒度0传输的尺度因子也适用于粒度1。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (gr=<span class=\"number\">0</span>; gr&lt;<span class=\"number\">2</span>; gr++) \t&#123;</span><br><span class=\"line\">\t\t\tpart2_3_length[gr] <span class=\"number\">12</span> bits uimsbf</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 该值包含用于尺度因子和Huffman编码数据的主数据比特数。</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 由于边信息的长度始终相同，可以使用该值来计算每个粒度的主要信息的起始位置</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 以及辅助信息的位置（如果使用）。</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// part2_length - 该值包含用于尺度因子的主数据比特数。</span></span><br><span class=\"line\">\t\t\tbig_values[gr] <span class=\"number\">9</span> bits uimsbf <span class=\"comment\">// 每个粒度的频谱值使用不同的Huffman编码表进行编码。</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// 完整的频率范围被分成几个区域，然后使用不同的Huffman表进行编码。</span></span><br><span class=\"line\">\t\t\tglobal_gain[gr] <span class=\"number\">8</span> bits uimsbf <span class=\"comment\">// 全局量化步长</span></span><br><span class=\"line\">\t\t\tscalefac_compress[gr] <span class=\"number\">4</span> bits bslbf <span class=\"comment\">// 选择用于比例因子传输的位数。</span></span><br><span class=\"line\">\t\t\tblocksplit_flag[gr] <span class=\"number\">1</span> bit bslbf <span class=\"comment\">// 表示该块使用非正常（类型0）的窗口。</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blocksplit_flag[gr])&#123;</span><br><span class=\"line\">\t\tblock_type[gr] <span class=\"number\">2</span> bits bslbf <span class=\"comment\">// 指示实际粒度的窗口类型。</span></span><br><span class=\"line\">\t\tswitch_point[gr] <span class=\"number\">1</span> bits uimsbf <span class=\"comment\">// 表示短/长变换的分割点。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (region=<span class=\"number\">0</span>; region&lt;<span class=\"number\">2</span>; region++)</span><br><span class=\"line\">\t\t\ttable_select[region][gr] <span class=\"number\">5</span> bits bslbf <span class=\"comment\">// 指定用于压缩特定量化MDCT区域的Huffman编码表。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (window=<span class=\"number\">0</span>; window&lt;<span class=\"number\">3</span>; window++)</span><br><span class=\"line\">\t\t\tsubblock_gain[window][gr] <span class=\"number\">3</span> bits uimsbf <span class=\"comment\">// 表示一个子块相对于全局增益的增益偏移量。仅在块类型2（短窗口）中使用。</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (region=<span class=\"number\">0</span>; region&lt;<span class=\"number\">3</span>; region++)</span><br><span class=\"line\">\t\t\ttable_select[region][gr] <span class=\"number\">5</span> bits bslbf</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// region_address1[gr]，region_address2[gr]</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 对频谱进行进一步分区，以增强Huffman编码器的性能。</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 这是对big_values区域的细分。这个细分的目的是获得更好的错误鲁棒性（tea：这一点表示怀疑）和更好的编码效率。使用三个区域。</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 每个区域根据最大量化值和局部信号统计使用不同的Huffman编码表进行编码。</span></span><br><span class=\"line\">\t\t\tregion_address1[gr] <span class=\"number\">4</span> bits bslbf</span><br><span class=\"line\">\t\t\tregion_address2[gr] <span class=\"number\">3</span> bits bslbf</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpreflag[gr] <span class=\"number\">1</span> bit bslbf <span class=\"comment\">// 这是对量化值进行额外高频放大的快捷方式。</span></span><br><span class=\"line\">\t\tscalefac_scale[gr] <span class=\"number\">1</span> bit bslbf <span class=\"comment\">// 比例因子按对数方式进行量化，步长为2，取决于scalefac_scale的值。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// scalefac_scale = 0，步长为sqrt(2) </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// scalefac_scale = 1，步长为2</span></span><br><span class=\"line\">\t\tcount1table_select[gr] <span class=\"number\">1</span> bit bslbf <span class=\"comment\">// 此标志选择两个可能的Huffman编码表之一，用于幅度不超过1的量化值四元组的区域。</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>scfsi_band</th>\n<th>scalefactor bands</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0,1,2,3,4,5,</td>\n</tr>\n<tr>\n<td>1</td>\n<td>6,7,8,9,10,</td>\n</tr>\n<tr>\n<td>2</td>\n<td>11 … 15</td>\n</tr>\n<tr>\n<td>3</td>\n<td>16 … 20</td>\n</tr>\n</tbody>\n</table>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110194611.webp\" alt=\"image.png\" /></p>\n<p>在长窗口的情况下，slen1 是用于比例因子带 0-10 的比例因子的长度。slen2 是用于比例因子带 11-21 的比例因子的长度。</p>\n<table>\n<thead>\n<tr>\n<th>scalefac_compress</th>\n<th>slen1</th>\n<th>slen2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td rowspan=\"4\">0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>5</td>\n<td rowspan=\"3\">1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>6</td>\n<td>2</td>\n</tr>\n<tr>\n<td>7</td>\n<td>3</td>\n</tr>\n<tr>\n<td>8</td>\n<td rowspan=\"3\">2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>9</td>\n<td>2</td>\n</tr>\n<tr>\n<td>10</td>\n<td>3</td>\n</tr>\n<tr>\n<td>11</td>\n<td rowspan=\"3\">3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>12</td>\n<td>2</td>\n</tr>\n<tr>\n<td>13</td>\n<td>3</td>\n</tr>\n<tr>\n<td>14</td>\n<td rowspan=\"2\">4</td>\n<td>2</td>\n</tr>\n<tr>\n<td>15</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"main-data\"><a class=\"markdownIt-Anchor\" href=\"#main-data\"></a> Main Data</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (gr=<span class=\"number\">0</span>; gr&lt;<span class=\"number\">2</span>; gr++)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blocksplit_flag[gr] == <span class=\"number\">1</span> &amp;&amp; block_type[gr] == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (cb=<span class=\"number\">0</span>; cb&lt;switch_point_l[gr]; cb++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (scfsi[cb]==<span class=\"number\">0</span>) || (gr==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tscalefac[cb][gr] <span class=\"number\">0.</span><span class=\"number\">.4</span> bits uimsbf</span><br><span class=\"line\">\t\t<span class=\"title function_\">for</span> <span class=\"params\">(cb=switch_point_s[gr]; cb&lt;cblimit_short; cb++)</span></span><br><span class=\"line\">\t\t\t<span class=\"title function_\">for</span> <span class=\"params\">(window=<span class=\"number\">0</span>; window&lt;<span class=\"number\">3</span>; window++)</span></span><br><span class=\"line\">\t\t\t<span class=\"title function_\">if</span> <span class=\"params\">(scfsi[cb]==<span class=\"number\">0</span>)</span> || <span class=\"params\">(gr==<span class=\"number\">0</span>)</span></span><br><span class=\"line\">\t\t\t\tscalefac[cb][window][gr] 0..4 bits uimsbf</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"title function_\">for</span> <span class=\"params\">(cb=<span class=\"number\">0</span>; cb&lt;cblimit; cb++)</span></span><br><span class=\"line\">\t\t\t<span class=\"title function_\">if</span> <span class=\"params\">(scfsi[cb]==<span class=\"number\">0</span>)</span> || <span class=\"params\">(gr==<span class=\"number\">0</span>)</span></span><br><span class=\"line\">\t\t\t\tscalefac[cb][gr] 0..4 bits uimsbf</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">Huffmancodebits</span> <span class=\"params\">(part2_3_length-part2_length)</span> bits bslbf</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">while</span> <span class=\"params\">(position != main_data_end)</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tancillary_bit <span class=\"number\">1</span> bit bslbf</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p><code>scalefac[cb][gr]</code> - 比例因子用于给量化噪声上色。如果量化噪声被正确形状的颜色掩盖，它将完全被掩盖。</p>\n<p>编码器和解码器使用比例因子来获取数值块的除法因子。这些块延伸到多个频率线上。这些块被称为比例因子带，被选择得尽可能接近临界带。</p>\n<p>比例因子压缩表显示，比例因子 0…10 的范围为 0 到 15（最大长度为 4 位），比例因子 11…21 的范围为 0 到 7（最大长度为 3 位）。</p>\n<p>将频谱细分为比例因子带对于每个块长度和采样频率是固定的，并存储在编码器和解码器的表中。</p>\n<p><code>Huffman_code_bits</code> - 伪函数</p>\n<ul>\n<li>所有绝对值小于等于 15 的量化值直接使用 Huffman 编码进行编码。总是对值 (x,y) 进行编码。</li>\n<li>如果发现幅度大于 15 的量化值，则使用 ESC 码来标记这些值。</li>\n<li>如果一对值中的一个或两个值不为零，则在 Huffman 编码字后附加一个或两个符号位。</li>\n</ul>\n<p><code>hcod[|x|][|y|]</code> 是值 x、y 的 Huffman 编码表条目。</p>\n<p><code>hlen[|x|][|y|]</code> 是值 x、y 的 Huffman 长度表条目。</p>\n<p><code>max_table_entry</code> 是最大的表条目索引。这是一个系统常量（15，单个表中的最大条目数为 256）。</p>\n<p><code>signx</code> 是第一个值的符号（如果为正，则为 0；如果为负，则为 1）。</p>\n<p><code>signy</code> 是第二个值的符号（如果为正，则为 0；如果为负，则为 1）。</p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 21：MP3 huffman code: <span style=\"color:#ff0000\">linebits</span></div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">coded_word</span> &#123;</span></span><br><span class=\"line\">\tcodeword      <span class=\"comment\">// hcod[|x|][|y|], length is hlen[|x|][|y|]</span></span><br><span class=\"line\">\tlinbitsx      <span class=\"comment\">// 如果(x=15)，则构成一个ESC码。在这种情况下，该字段的长度为linbits，否则为零。该字段中包含的无符号整数加上15，以确定编码数据的绝对值。</span></span><br><span class=\"line\">\tsignx         <span class=\"comment\">// sign of x (transmitted only if x not equal 0)</span></span><br><span class=\"line\">\tlinbitsy      <span class=\"comment\">// See linbitsx.</span></span><br><span class=\"line\">\tsigny         <span class=\"comment\">// sign of y (transmitted only if y not equal 0)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只有在实际标记了大于或等于 15 的值时，才会使用 ESCaped 代码 linbitsx 或 linbitsy。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110200755.webp\" alt=\"image.png\" /></p>\n<p>Huffman 编码</p>\n<p>对于频谱的高端部分，使用两个特殊的 Huffman 表对值的四元组进行编码。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">quad_word</span> &#123;</span></span><br><span class=\"line\">\tcodeword <span class=\"comment\">// hcod[|v|][|w|][|x|][|y|]，hlen[|v|][|w|][|x|][|y|]</span></span><br><span class=\"line\">\tsignv    <span class=\"comment\">//（仅当v不等于0时）</span></span><br><span class=\"line\">\tsignw    <span class=\"comment\">//（仅当w不等于0时）</span></span><br><span class=\"line\">\tsignx    <span class=\"comment\">//（仅当x不等于0时）</span></span><br><span class=\"line\">\tsigny    <span class=\"comment\">//（仅当y不等于0时）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在频谱的高端部分，只需计算零对的数量。由于当其他值已解码时，这个值是隐含已知的，因此不需要传输。</p>\n<p>Huffman 编码数据的排序方式：</p>\n<ul>\n<li>如果 block_type 为 0、1 或 3，则根据频率递增的顺序对 Huffman 编码数据进行排序。</li>\n<li>如果 block_type 为 2（短块），则 Huffman 编码数据的排序如下：\n<ul>\n<li>首先给出连续的比例因子带的 Huffman 编码数据，从比例因子带 0 开始，以比例因子带 11 结束。</li>\n<li>在每个比例因子带内，按照时间窗口的顺序给出数据，从窗口 0 开始，以窗口 2 结束。每个窗口内的数据值按照频率递增的顺序排列。</li>\n</ul>\n</li>\n</ul>\n<p>Characteristic of 32 Huffman tables:</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110201127.webp\" alt=\"image.png\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231110201152.webp\" alt=\"image.png\" /></p>\n<p>TIP: 考试的时候以长块为准。</p>\n<p><code>cb_limit</code> - 长块（block_type != 2）的比例因子带数量。对于所有模式和所有采样频率的 Layer III，这是一个常数，为 21。</p>\n<p><code>cb_limit_short</code> - 短块（block_type=2）的比例因子带数量。对于所有模式和所有采样频率的 Layer III，这是一个常数，为 12。</p>\n<p><code>window</code> - 在 block_type=2 的情况下，实际时间槽的数量。window 的取值为 0、1、2。</p>\n<h1 id=\"88-010-编辑器之模板的使用\"><a class=\"markdownIt-Anchor\" href=\"#88-010-编辑器之模板的使用\"></a> 88、010 编辑器之模板的使用</h1>\n<h2 id=\"什么是-010-编辑器\"><a class=\"markdownIt-Anchor\" href=\"#什么是-010-编辑器\"></a> 什么是 010 编辑器</h2>\n<p>010 编辑器是一个专业的文本/HEX 编辑器，它可以快速并易于编辑电脑上的任何文件内容。</p>\n<ul>\n<li>查看并编辑任何硬盘上的二进制文件，以及文本文件（Unicode 文件、C/C++ 源文件等）</li>\n<li>独家的二进制模板技术能让你理解任何二进制文件</li>\n<li>通过强大的工具（查找、替换等功能）分析并编辑文本以及二进制数据</li>\n<li>使用硬盘、软盘等查找并修复问题</li>\n</ul>\n<h2 id=\"二进制模板\"><a class=\"markdownIt-Anchor\" href=\"#二进制模板\"></a> 二进制模板</h2>\n<p>010 编辑器可以将二进制文件已易于使用的方式将其结构呈现在你的面前。二进制模板可以将二进制文件解析为指定的结构。</p>\n<p>模板有着和 C/C++ 相似的结构，但它们是以一个程序运行的。当模板中的变量声明后，变量将映射到当前文件的对应字节集合。</p>\n<p><span style=\"color:#ff0000\">例子：</span></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">FILE</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">HEADER</span> &#123;</span></span><br><span class=\"line\">        <span class=\"type\">char</span> type[<span class=\"number\">4</span>];   <span class=\"comment\">// 映射文件的0~3字节（注意，从0开始数）</span></span><br><span class=\"line\">        <span class=\"type\">int</span> version;    <span class=\"comment\">// 映射文件的4~7字节</span></span><br><span class=\"line\">        <span class=\"type\">int</span> numRecords; <span class=\"comment\">// 映射文件的8~11字节</span></span><br><span class=\"line\">    &#125; header;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RECORD</span> &#123;</span></span><br><span class=\"line\">        <span class=\"type\">int</span> employeeId;</span><br><span class=\"line\">        <span class=\"type\">char</span> name[<span class=\"number\">40</span>];</span><br><span class=\"line\">        <span class=\"type\">float</span> salary;</span><br><span class=\"line\">    &#125; record[header.numRecords];</span><br><span class=\"line\">&#125; file;</span><br></pre></td></tr></table></figure>\n<p>当访问一个变量时，其值从文件中读出；当对一个变量进行赋值时，其值将写回文件。</p>\n<p>这些模板的 <code>structures</code> 和常规的 C 不同，因为它包含了控制语句，如 if，for，while。</p>\n<p>模板的执行顺序为从文件顶端到底部。</p>\n<h2 id=\"写一个二进制模板\"><a class=\"markdownIt-Anchor\" href=\"#写一个二进制模板\"></a> 写一个二进制模板</h2>\n<h3 id=\"模板基础\"><a class=\"markdownIt-Anchor\" href=\"#模板基础\"></a> 模板基础</h3>\n<p>模板可以使二进制文件更容易理解和编辑。每一个模板是以 <code>.bt</code> 为后缀的文本文件，可以被 010 编辑器编辑。</p>\n<h3 id=\"数字\"><a class=\"markdownIt-Anchor\" href=\"#数字\"></a> 数字</h3>\n<p>Decimal - 456</p>\n<p>Hexadecimal - 0xff, 25h, 0EFh</p>\n<p>Octal - 013 (任何数字前加 0)</p>\n<p>Binary - 0b011</p>\n<p>无符号值：数字后加 <code>u</code>，例如 12u</p>\n<p>8 字节的 int64：数字后加 <code>L</code>，例如 1L</p>\n<p>浮点数中对于一个指数会包含 e，例如 1e10</p>\n<p>浮点数默认为 8 字节 double 型，除非数字后加了 f（4 字节 float，例子：2.0f）</p>\n<h3 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\"></a> 数据类型</h3>\n<p>8-Bit Signed Integer - char, byte, CHAR, BYTE</p>\n<p>8-Bit Unsigned Integer - uchar, ubyte, UCHAR, UBYTE</p>\n<p>16-Bit Signed Integer - short, int16, SHORT, INT16</p>\n<p>16-Bit Unsigned Integer - ushort, uint16, USHORT, UINT16, WORD</p>\n<p>32-Bit Signed Integer - int, int32, long, INT, INT32, LONG</p>\n<p>32-Bit Unsigned Integer - uint, uint32, ulong, UINT, UINT32, ULONG, DWORD</p>\n<p>64-Bit Signed Integer - int64, quad, QUAD, INT64, __int64</p>\n<p>64-Bit Unsigned Integer - uint64, uquad, UQUAD, UINT64, QWORD, __uint64</p>\n<p>32-Bit Floating Point Number - float, FLOAT</p>\n<p>64-Bit Floating Point Number - double, DOUBLE</p>\n<p>模板中可以使用数字类型，但数字在被运算前，必须转换为 int 或 float</p>\n<h3 id=\"类型定义-typedef\"><a class=\"markdownIt-Anchor\" href=\"#类型定义-typedef\"></a> 类型定义 typedef</h3>\n<p>其他类型可以通过 <code>typedef</code> 关键字创建。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建类型语法：</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> &lt;data_type&gt; &lt;new_type_name&gt;</span><br><span class=\"line\"><span class=\"comment\">// 例子：创建新类型myInt，表示无符号整数</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> myInt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运用于数组：</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> &lt;data_type&gt; &lt;new_type_name&gt; [ &lt;array_size&gt; ]</span><br><span class=\"line\"><span class=\"comment\">// array_size必须为常量，typedef不能用于创建多维数组，但可以在structs中使用。</span></span><br><span class=\"line\"><span class=\"comment\">// 例子：生成新的字符串类型数组</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">char</span> myString[<span class=\"number\">15</span>];</span><br><span class=\"line\">myString s = <span class=\"string\">&quot;Test&quot;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明模板变量\"><a class=\"markdownIt-Anchor\" href=\"#声明模板变量\"></a> 声明模板变量</h3>\n<p>声明变量的方法类似于 C 语言但有一个重要的区别：模板中已声明的变量映射到文件中的一组字节。</p>\n<p>可以通过定义 structs 或 unions 的方法将模板变量组织起来。</p>\n<h3 id=\"特殊属性\"><a class=\"markdownIt-Anchor\" href=\"#特殊属性\"></a> 特殊属性</h3>\n<p>变量后后面可以使用 <code>&lt;&gt;</code> 将一个或多个的特殊属性括住。</p>\n<p>支持以下属性：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;</span><br><span class=\"line\">    format  = hex|decimal|octal|binary,</span><br><span class=\"line\">    fgcolor = &lt;color&gt;,</span><br><span class=\"line\">    bgcolor = &lt;color&gt;,</span><br><span class=\"line\">    comment = <span class=\"string\">&quot;&lt;string&gt;&quot;</span>,</span><br><span class=\"line\">    open    = <span class=\"literal\">true</span>|<span class=\"literal\">false</span>|suppress,</span><br><span class=\"line\">    hidden  = <span class=\"literal\">true</span>|<span class=\"literal\">false</span>,</span><br><span class=\"line\">    read    = &lt;function_name&gt;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"局部变量\"><a class=\"markdownIt-Anchor\" href=\"#局部变量\"></a> 局部变量</h3>\n<p>在有些情况中，一些变量不需要映射到文件中的值或者显示在「模板结果」中（可以右击「模板结果」开启局部变量的查看）。我们可以使用关键字 <code>local</code> 声明变量。例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local <span class=\"type\">int</span> i, total = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> recordCounts[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ )</span><br><span class=\"line\">    total += recordCounts[i];</span><br><span class=\"line\"><span class=\"type\">double</span> records[ total ];</span><br></pre></td></tr></table></figure>\n<h3 id=\"字符串\"><a class=\"markdownIt-Anchor\" href=\"#字符串\"></a> 字符串</h3>\n<p>通常二进制文件中定义了 Null 结尾的字符串。010 编辑器可以通过特殊的语法进行阅读：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下两种方法将读取字符串，直到遇到「0」字节</span></span><br><span class=\"line\"><span class=\"type\">char</span> str[];</span><br><span class=\"line\"><span class=\"built_in\">string</span> str;</span><br><span class=\"line\"><span class=\"comment\">// Unicode 字符串可以使用以下两种方法阅读：</span></span><br><span class=\"line\"><span class=\"type\">wchar_t</span> str[];</span><br><span class=\"line\"><span class=\"built_in\">wstring</span> str;</span><br></pre></td></tr></table></figure>\n<p>字符串中可以使用=、+、+=以及比较运算符，例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local <span class=\"type\">char</span> str[<span class=\"number\">15</span>] = <span class=\"string\">&quot;First&quot;</span>;</span><br><span class=\"line\">local <span class=\"built_in\">string</span> s = <span class=\"string\">&quot;Second&quot;</span>;</span><br><span class=\"line\">local <span class=\"built_in\">string</span> r1 = str + s;</span><br><span class=\"line\">local <span class=\"built_in\">string</span> r2 = str;</span><br><span class=\"line\">r2 += s;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (r1 == r2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"颜色\"><a class=\"markdownIt-Anchor\" href=\"#颜色\"></a> 颜色</h3>\n<p>解析文件时，使用模板可以将不同颜色应用到不同的变量上，有两种方式：</p>\n<ul>\n<li>方式一：对单个变量设置颜色<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法：在变量后添加以下标签</span></span><br><span class=\"line\">&lt;fgcolor=???&gt; <span class=\"comment\">// 设置前景色</span></span><br><span class=\"line\">&lt;bgcolor=???&gt; <span class=\"comment\">// 设置背景色</span></span><br><span class=\"line\"><span class=\"comment\">// 例子：</span></span><br><span class=\"line\"><span class=\"type\">int</span> id &lt;fgcolor=cBlack, bgcolor=<span class=\"number\">0x0000FF</span>&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n<li>方式二：使用 <code>SetForeColor</code>，<code>SetBackColor</code>，<code>SetColor</code> 函数设置默认颜色。<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在这些函数后定义变量</span></span><br><span class=\"line\">SetForeColor( cRed );</span><br><span class=\"line\"><span class=\"type\">int</span> first; <span class=\"comment\">// will be colored red</span></span><br><span class=\"line\"><span class=\"type\">int</span> second; <span class=\"comment\">// will be colored red</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 关闭涂色的方法</span></span><br><span class=\"line\">SetForeColor( cNone );</span><br><span class=\"line\"><span class=\"type\">int</span> third; <span class=\"comment\">// will not be colored</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"顺序\"><a class=\"markdownIt-Anchor\" href=\"#顺序\"></a> 顺序</h3>\n<p>当每一个模板变量都声明后，「当前文件的位置」将向前移动。可以通过使用函数 FTell 获取「当前文件位置」。</p>\n<p>通过使用 FSeek 或 FSkip 函数，「当前位置」可以在整个文件中移动。这项技术允许我们不按顺序解析文件。</p>\n<p>可以使用 ReadByte, ReadShort, ReadInt 等函数实现不定义变量而读取文件。</p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">考点 14：010 编辑器：Array、Struct</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h3 id=\"结构-struct\"><a class=\"markdownIt-Anchor\" href=\"#结构-struct\"></a> 结构 struct</h3>\n<p>关键字 <code>struct</code> 可以定义一个数据结构。可以使用 C/C++ 语法进行定义。例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成新类型myStruct，但不声明任何变量</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">myStruct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">    <span class=\"type\">int</span> c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 声明一个结构</span></span><br><span class=\"line\">myStruct s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义结构并声明两个实例</span></span><br><span class=\"line\"><span class=\"comment\">// 其中，s1覆盖文件的前12个字节，s2覆盖接下来的12个字节</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">myStruct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a; <span class=\"comment\">// 4字节</span></span><br><span class=\"line\">    <span class=\"type\">int</span> b;</span><br><span class=\"line\">    <span class=\"type\">int</span> c;</span><br><span class=\"line\">&#125; s1, s2;</span><br></pre></td></tr></table></figure>\n<p>使用控制语句（<code>if</code>，<code>for</code>，<code>while</code>）的结构。例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实例s只生成两个变量：a、b或a、c</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">myIfStruct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( a &gt; <span class=\"number\">5</span> )</span><br><span class=\"line\">        <span class=\"type\">int</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"type\">int</span> c;</span><br><span class=\"line\">&#125; s;</span><br></pre></td></tr></table></figure>\n<p>结构可以嵌套，也可以声明数组。例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> width;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">COLOR</span> &#123;</span></span><br><span class=\"line\">        uchar r, g, b;</span><br><span class=\"line\">    &#125; colors[width];</span><br><span class=\"line\">&#125; line1;</span><br></pre></td></tr></table></figure>\n<p>使用 typedef 定义 struct 的别名：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    ushort id;</span><br><span class=\"line\">    <span class=\"type\">int</span> size;</span><br><span class=\"line\">&#125; myData;</span><br></pre></td></tr></table></figure>\n<h3 id=\"联合-union\"><a class=\"markdownIt-Anchor\" href=\"#联合-union\"></a> 联合 union</h3>\n<p>union 中，所有变量从相同的位置开始。union 的大小为其中最大变量的大小。</p>\n<p>可以使用和 struct 相同的语法进行声明。例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以下Union大小为8字节</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">myUnion</span> &#123;</span></span><br><span class=\"line\">    ushort s;</span><br><span class=\"line\">    <span class=\"type\">double</span> d; <span class=\"comment\">// 8字节</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">&#125; u;</span><br></pre></td></tr></table></figure>\n<h3 id=\"带参数的-struct-和-union\"><a class=\"markdownIt-Anchor\" href=\"#带参数的-struct-和-union\"></a> 带参数的 struct 和 union</h3>\n<p>struct 或 union 关键字后可以接参数列表。参数列表的定义和函数相似。例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title function_\">VarSizeStruct</span> <span class=\"params\">(<span class=\"type\">int</span> arraySize)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[arraySize];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 声明实例。传递参数到结构体中</span></span><br><span class=\"line\">VarSizeStruct <span class=\"title function_\">s1</span><span class=\"params\">(<span class=\"number\">5</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以使用typedef声明</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"title function_\">struct</span> <span class=\"params\">(<span class=\"type\">int</span> arraySize)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[arraySize];</span><br><span class=\"line\">&#125; VarSizeStruct;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组-array\"><a class=\"markdownIt-Anchor\" href=\"#数组-array\"></a> 数组 Array</h3>\n<p>数组变量定义的语法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;data type&gt; &lt;variable name&gt; [ &lt;expression&gt; ] <span class=\"comment\">// 例子：int myArray[15];</span></span><br></pre></td></tr></table></figure>\n<p>一些例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 与ANSI C不同的是，数组的大小可以为任意表达式（包括变量、函数或操作符）</span></span><br><span class=\"line\"><span class=\"type\">int</span> myArray[ FileSize() - myInt * <span class=\"number\">0x10</span> + (<span class=\"number\">17</span> &lt;&lt; <span class=\"number\">5</span>) ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用中括号获取单个元素</span></span><br><span class=\"line\">myArray[i] = value;</span><br></pre></td></tr></table></figure>\n<p>当数组的大小定义为 0 时将有警告提示（不是异常）并且不声明任何变量。</p>\n<p>010 编辑器允许数组以特殊的方式构建。当定义模板变量时，可以定义多个名称相同的变量。010 编辑器将这些相同变量看作数组，称之为 Duplicate Array。例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x; <span class=\"type\">int</span> x; <span class=\"type\">int</span> x;</span><br><span class=\"line\"><span class=\"comment\">// 可以这样读取：</span></span><br><span class=\"line\">x[<span class=\"number\">0</span>]; <span class=\"comment\">// 读取第一个x的值</span></span><br></pre></td></tr></table></figure>\n<p>可以使用 for 或 while 定义 Duplicate arrays：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local <span class=\"type\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>( i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ )</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br></pre></td></tr></table></figure>\n<h3 id=\"表达式\"><a class=\"markdownIt-Anchor\" href=\"#表达式\"></a> 表达式</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101183949.webp\" alt=\"image.png\" /></p>\n<p>可以使用任何的赋值运算符：+=, -=, *=, /=, &amp;=, ^=, %=, |=, &lt;&lt;=, &gt;&gt;=</p>\n<p>可以使用小括号组合表达式。</p>\n<h3 id=\"布尔运算符\"><a class=\"markdownIt-Anchor\" href=\"#布尔运算符\"></a> 布尔运算符</h3>\n<p>&amp;&amp;（AND)</p>\n<p>||(OR)</p>\n<p>!(NOT- 单操作符)</p>\n<p>可以使用小括号指定操作顺序。</p>\n<h3 id=\"控制语句\"><a class=\"markdownIt-Anchor\" href=\"#控制语句\"></a> 控制语句</h3>\n<p>可以使用 break、continue、return</p>\n<h4 id=\"if-语句\"><a class=\"markdownIt-Anchor\" href=\"#if-语句\"></a> if 语句</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>( x &lt; <span class=\"number\">5</span> )</span><br><span class=\"line\">    x = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( y &gt; x )</span><br><span class=\"line\">    max = y;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    max = x;</span><br><span class=\"line\">    y = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"for-语句\"><a class=\"markdownIt-Anchor\" href=\"#for-语句\"></a> for 语句</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>( i = <span class=\"number\">0</span>, x = <span class=\"number\">0</span>; i &lt; <span class=\"number\">15</span>; i++ )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    x += i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"while-语句\"><a class=\"markdownIt-Anchor\" href=\"#while-语句\"></a> while 语句</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>( myVar &lt; <span class=\"number\">15</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    x *= myVar;</span><br><span class=\"line\">    myVar += <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    x *= myVar;</span><br><span class=\"line\">    myVar += <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>( myVar &lt; <span class=\"number\">23</span> );</span><br></pre></td></tr></table></figure>\n<h4 id=\"switch-语句\"><a class=\"markdownIt-Anchor\" href=\"#switch-语句\"></a> switch 语句</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>( &lt;variable&gt; )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;expression&gt;: &lt;statement&gt;; [<span class=\"keyword\">break</span>;]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">default</span> : &lt;statement&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"比特域\"><a class=\"markdownIt-Anchor\" href=\"#比特域\"></a> 比特域</h3>\n<p>比特域允许细分结构为多组比特。这一过程允许将多个变量打包成一个块的内存。</p>\n<p>定义比特域的语法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type_name &lt;variable_name&gt; : number_of_bits;</span><br><span class=\"line\"><span class=\"comment\">// type_name 可以是char, short, int, int64 (unsigned or signed) 或其他的等效类型</span></span><br></pre></td></tr></table></figure>\n<p>如果变量名省略，那么对应这个变量的比特数也将省略。例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打包alpha和beta为一个32比特的值中，但忽略中间的12bit</span></span><br><span class=\"line\"><span class=\"type\">int</span> alpha : <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span>      : <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> beta : <span class=\"number\">15</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"比特域模式\"><a class=\"markdownIt-Anchor\" href=\"#比特域模式\"></a> 比特域模式</h4>\n<p>010 编辑器有两个特殊的比特域模式，定义了比特如何打包到变量中：</p>\n<ul>\n<li>padded bitfields（默认）。比特打包为变量的方式取决于当前的字节顺序（大小端）。默认为，小端文件从右到左打包，大端文件从左往右打包。</li>\n<li>unpadded bitfields</li>\n</ul>\n<h5 id=\"padded-bitfields\"><a class=\"markdownIt-Anchor\" href=\"#padded-bitfields\"></a> Padded bitfields</h5>\n<p>例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ushort a : <span class=\"number\">4</span>;</span><br><span class=\"line\">ushort b : <span class=\"number\">7</span>;</span><br><span class=\"line\">ushort c : <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 小端模式下，结构存储为：cccccbbb bbbbaaaa</span></span><br><span class=\"line\"><span class=\"comment\">// 大端模式下，结构存储为：aaaabbbb bbbccccc</span></span><br></pre></td></tr></table></figure>\n<p>当需要的时候，程序会增加填充。例如某些特定的比特域将跨越变量的边界，这将会添加填充使得比特域从下一个变量开始。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个变量</span></span><br><span class=\"line\"><span class=\"type\">int</span> apple : <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> orange : <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"comment\">// 第二个变量</span></span><br><span class=\"line\"><span class=\"type\">int</span> banana : <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> peach : <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"comment\">// 此处填充10个比特</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个变量</span></span><br><span class=\"line\"><span class=\"type\">short</span> grape : <span class=\"number\">4</span>; <span class=\"comment\">// 字节类型改变为short</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"unpadded-bitfields\"><a class=\"markdownIt-Anchor\" href=\"#unpadded-bitfields\"></a> Unpadded Bitfields</h5>\n<p>将文件视为一个长长的比特流，不管是变量类型改变时还是比特不能被打包为单个变量时，都不存在任何的填充比特。</p>\n<p>进入此模式的方法：调用 <code>BitfieldDisablePadding</code> 函数（调用 <code>BitfieldEnablePadding</code> 以返回 padding 模式）</p>\n<p>在 unpadded Bitfield 模式中，每一个定义的变量从比特流中读取比特。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BitfieldDisablePadding();</span><br><span class=\"line\"><span class=\"type\">short</span> a : <span class=\"number\">10</span>; <span class=\"comment\">// 从文件中读取10个比特</span></span><br><span class=\"line\"><span class=\"type\">int</span>   b : <span class=\"number\">20</span>; <span class=\"comment\">// 读取接下来的20个比特</span></span><br><span class=\"line\"><span class=\"type\">short</span> c : <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// 如果比特域被定义为从右到左读取（小端数据的默认方式，或使用了BitfieldRightToLeft函数）</span></span><br><span class=\"line\"><span class=\"comment\">// 变量将以此方式存储比特：aaaaaaaa bbbbbbaa bbbbbbbb ccbbbbbb cccccccc</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\"></a> 函数</h3>\n<p>010 编辑器中内置有大量的函数。支持许多标准 C 函数，并以首字母大写以区分它们。</p>\n<h4 id=\"调用\"><a class=\"markdownIt-Anchor\" href=\"#调用\"></a> 调用</h4>\n<p>使用典型 C 语言语法进行函数调用：<code>&lt;function name&gt; ( &lt;argument_list&gt; )</code>，例子：<code>Strlen(str);</code></p>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h4>\n<p>常规 C 语法：<code>&lt;return type&gt; &lt;function name&gt; ( &lt;argument_list&gt; ) &#123;&lt;statements&gt; &#125;</code></p>\n<p>return type 可以为 void 或其他支持的数据类型。</p>\n<h4 id=\"函数的参数\"><a class=\"markdownIt-Anchor\" href=\"#函数的参数\"></a> 函数的参数</h4>\n<p>函数通常使用值传递，在变量名称前加上 <code>&amp;</code> 可以使用引用传递。</p>\n<p>在参数名称后加上 <code>[]</code> 表明其为数组类型，数组类型会尽量为引用传递，否则为值传递。</p>\n<h4 id=\"接口函数\"><a class=\"markdownIt-Anchor\" href=\"#接口函数\"></a> 接口函数</h4>\n<h4 id=\"int-printfconst-char-formatargument\"><a class=\"markdownIt-Anchor\" href=\"#int-printfconst-char-formatargument\"></a> <code>int Printf(const char format[][,argument,...])</code></h4>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231101184106.webp\" alt=\"image.png\" /></p>\n<p>支持宽度、精度、对齐的调整。如 <code>%5.2lf</code> 或 <code>%-15s</code>。<code>\\n</code> 表示换行。</p>\n<h4 id=\"void-warningconst-char-format-argument\"><a class=\"markdownIt-Anchor\" href=\"#void-warningconst-char-format-argument\"></a> <code>void Warning(const char format[] [,argument,...])</code></h4>\n<p>和 <code>Printf</code> 函数相似，但结果字符串显示在状态栏中，并以橘色高亮显示。通常用于显示模板中的错误。</p>\n<h4 id=\"io-函数\"><a class=\"markdownIt-Anchor\" href=\"#io-函数\"></a> I/O 函数</h4>\n<h4 id=\"void-bigendian\"><a class=\"markdownIt-Anchor\" href=\"#void-bigendian\"></a> <code>void BigEndian()</code></h4>\n<p>表明所有从文件中读写的子序列使用大端顺序。用于指定变量的字节顺序。</p>\n<h4 id=\"void-littleendian\"><a class=\"markdownIt-Anchor\" href=\"#void-littleendian\"></a> <code>void LittleEndian()</code></h4>\n<p>小端。</p>\n<h5 id=\"读取函数\"><a class=\"markdownIt-Anchor\" href=\"#读取函数\"></a> 读取函数</h5>\n<p>char ReadByte( int64 pos )</p>\n<p>double ReadDouble( int64 pos )</p>\n<p>float ReadFloat( int64 pos )</p>\n<p>int ReadInt( int64 pos )</p>\n<p>int64 ReadInt64( int64 pos )</p>\n<p>int64 ReadQuad( int64 pos )</p>\n<p>short ReadShort( int64 pos )</p>\n<p>uchar ReadUByte( int64 pos )</p>\n<p>uint ReadUInt( int64 pos )</p>\n<p>uint64 ReadUInt64( int64 pos )</p>\n<p>uint64 ReadUQuad( int64 pos )</p>\n<p>ushort ReadUShort( int64 pos )</p>\n<p>返回从地址 pos 读取文件的内容。用于不声明任何变量从文件中读取数据。</p>\n<h4 id=\"int-feof\"><a class=\"markdownIt-Anchor\" href=\"#int-feof\"></a> <code>int FEof()</code></h4>\n<p>如果当前读取位置为文件末尾，则返回 true。</p>\n<h4 id=\"int64-filesize\"><a class=\"markdownIt-Anchor\" href=\"#int64-filesize\"></a> <code>int64 FileSize()</code></h4>\n<p>返回当前文件的比特数。</p>\n<h4 id=\"int-fseekint64-pos\"><a class=\"markdownIt-Anchor\" href=\"#int-fseekint64-pos\"></a> <code>int FSeek(int64 pos)</code></h4>\n<p>设置当前读取位置为 pos 指向的地址。如果地址超出范围返回 -1，成功则返回 0。</p>\n<h4 id=\"int-fskipint64-offset\"><a class=\"markdownIt-Anchor\" href=\"#int-fskipint64-offset\"></a> <code>int FSkip(int64 offset)</code></h4>\n<p>将当前读取位置向前移动 offset 字节。offset 可以为负，即将读取位置向后移动。如果地址超出范围返回 -1，成功则返回 0。</p>\n<h4 id=\"int64-ftell\"><a class=\"markdownIt-Anchor\" href=\"#int64-ftell\"></a> <code>int64 FTell()</code></h4>\n<p>返回当前文件的读取位置。</p>\n<h5 id=\"数学函数\"><a class=\"markdownIt-Anchor\" href=\"#数学函数\"></a> 数学函数</h5>\n<p><code>double Abs(double x)</code></p>\n<p><code>double Ceil(double x)</code></p>\n<p><code>double Cos(double a)</code> <code>double Sin(double a)</code> <code>double Tan(double a)</code> The angle is given in degrees.</p>\n<p><code>double Exp(double x)</code></p>\n<p><code>double Floor(double x)</code></p>\n<p><code>double Log(double x)</code> 计算 x 的自然对数，ln(x)</p>\n<p><code>double Max(double a, double b)</code> <code>double Min(double a, double b)</code></p>\n<p><code>double Pow(double x, double y)</code></p>\n<p><code>int Random(int maximum)</code> 返回 0 到 maximum-1 的随机整数</p>\n<p><code>double Sqrt(double x )</code> 计算数字 x 的正平方根</p>\n<p><code>data_type SwapBytes(data_type x)</code> 交换变量的比特并返回结果，可以指定任何的数据类型 (byte, short, int, int64, float, double)</p>\n<h3 id=\"模板限制\"><a class=\"markdownIt-Anchor\" href=\"#模板限制\"></a> 模板限制</h3>\n<ul>\n<li>不允许使用指针</li>\n<li>不支持 goto 语句</li>\n<li>不支持多维数组（包括字符串数组）的定义。写模板时，struct 和数组的合并可以模拟多维数组。例如：<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"type\">float</span> row[<span class=\"number\">4</span>];</span><br><span class=\"line\">&#125; MATRIX[<span class=\"number\">4</span>];</span><br><span class=\"line\">MATRIX m;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"名词解释\"><a class=\"markdownIt-Anchor\" href=\"#名词解释\"></a> 名词解释</h1>\n<blockquote>\n<p>名词解释是考试内容之一。</p>\n</blockquote>\n<p>JPEG：Joint Photographic Experts Group 联合图像专家组</p>\n<p>MPEG：Moving picture Experts Group 运动图像专家组</p>\n<p>TIFF：Tagged Image File Format 标记图像文件格式</p>\n<p>AIFF：Audio Interchange File Format 音频交换文件格式</p>\n<p>RIFF：Resource Interchange File Format 资源交换档案标准</p>\n<p>ISO：International Organization for Standardization</p>\n<p>ITU：International Telecommunication Union 国际电信联盟</p>\n<p>ITU-T：International Telecommunications Union-Telecommunications</p>\n<p>IEC：International Electrotechnical Commission 国际电工委员会</p>\n<blockquote>\n<p>有另译：International Engineering committee</p>\n</blockquote>\n<p>PCM：Pulse Code Modulation 脉冲编码调制</p>\n<p>DPCM：Differential Pulse-code Modulation 差分脉冲编码调制</p>\n<p>ADPCM：Adaptive Differential Pulse Code Modulation 自适应差分脉冲编码调制</p>\n<p>AAC：Advanced Audio Coding</p>\n<p>AVI：Audio Video Interleave</p>\n<p>CODEC：enCOder / DECoder pair，解编码器</p>\n<p>DCT：Discrete Cosine Transform</p>\n<p>MDCT：modified discrete cosine transform</p>\n<p><span style=\"color:#ff0000\">IDR：立即编码刷新</span></p>\n<h1 id=\"本课知识点\"><a class=\"markdownIt-Anchor\" href=\"#本课知识点\"></a> 本课知识点</h1>\n<p>所有知识点如下：</p>\n<ol>\n<li>Audio, image and video format, container</li>\n<li>Video compression standards and applications</li>\n<li>AVI container</li>\n<li>Window Bitmap file structure</li>\n<li>WAVE format</li>\n<li>Explain the meaning of FOURCC tags “ 00db” , “ 01dc” , “01wb” ,“vids” , and “auds” in AVI container.</li>\n<li>What is CD data rate?</li>\n<li>List the components of a chunk.</li>\n<li>Potential coding errors</li>\n<li>Lossy compression and lossless compression</li>\n<li>Uniform and quantization and nonuniform quantization</li>\n<li>entropy and Huffman coding</li>\n<li>MS-ADPCM</li>\n<li>010 editor: Array, struct</li>\n<li>Fourier transform, Fourier series, Discrete time Fourier transform, Discrete Fourier transform</li>\n<li>Windowing</li>\n<li>FFT and complexity</li>\n<li>MDCT: overlap and add technique, long window, short window</li>\n<li>Psychoacoustics: Frequency masking, temporal masking, threshold in quiet, signal to masker ratio, critical bandwidth, bark scale, perceptual entropy</li>\n<li>MP3: bitstream format, MP3 sampling frequency, stereo/joint channel/dual channel/single channel, Huffman coding region, bit reservoir</li>\n<li>MP3 huffman code: linebits</li>\n<li>MP3 encoder and decoder process</li>\n<li>Color space</li>\n<li>Video frame format</li>\n<li>Image and video coding principles: four types of redundancy</li>\n<li>Three basic types of code frame in video coding</li>\n<li>Motion estimation and compensation</li>\n<li>JPEG encoding and decoding process: Minimum code Unit, modes of operation, DC entropy coding, AC entropy coding, run-length, size, EOB</li>\n<li>JPEG interchange format: image, frame, scan, marker,</li>\n<li>JPEG file interchange format</li>\n<li>Video encoding and decoding architecture: normative, informative</li>\n<li>MPEG coding structure, MPEG syntax</li>\n<li>H.264 encoding structure, baseline profile, main profile, vector block size, new features, video coding layer and network abstraction layer</li>\n<li>Inter frame prediction, motion vector prediction, Intra-frame prediction</li>\n<li>DCT transform in H.264</li>\n<li>entropy coding: Exp-Golomb coding and CAVLC</li>\n</ol>\n","raw":"---\ntitle: 「多媒体与信号处理」课程笔记\ntags:\n  - 嵌入式\n  - 笔记\n  - 多媒体\n  - MP3\n  - AVC\n  - 010编辑器\n  - JPEG\n  - WAV\n  - AVI\n  - BMP\n  - DCT\n  - USTC\ndescription: 科软嵌入式必选课程笔记\nabbrlink: 6c1cb5ed\ncover: 'https://cdn.gallery.uuanqin.top/img/jshkcover.webp'\ncategories:\n  - 嵌入式\ndate: 2023-11-22 22:10:23\ntop_img:\nkatex: true\n---\n\n> [!warning] 如果本页面出现格式错乱问题可在评论区留言，我将尽快处理。\n\n# 笔记说明\n\n这是 USTC 软件学院 - 苏州 2023 秋季学期课程笔记（互联网版本）。本着藏着掖着发霉不如对外分享发光的精神，现将其公布。[原本的笔记](https://github.com/uuanqin/multimedia-signal-processing-notes) 是卡片式的，为了便于互联网传播与收藏，现整合到同一篇文章当中。\n\n这篇笔记的特点在于：\n\n* 有机涵盖 PPT 内容，精心编排，存在本人的理解消化过程\n* 有重点标识、考点标识、实际考察标识\n* 存在一些习题以供复习\n* 部分图片为作者手工制作，便于知识的理解和掌握\n\n本笔记存在以下的符号定义：\n\n- 🔺表示老师经常在课上提，为考试重点。\n- <span style=\"color:#ff0000\">红色字体</span>为 *部分* 实际考察内容（指的是 2023 秋季学期考试）。\n\n本笔记的内容来源：\n\n* 主要来源：课程 PPT。注意，笔记的章节顺序是经过梳理调整的，顺序不一定与 PPT 讲授过程相符。\n* 参考补充：[秃头学长的笔记](https://blog.csdn.net/qq_39266065/article/details/106225637)，补充了一些练习题。\n\n笔记共分为 12 个章节。由于作者水平、精力与时间有限，「时频映射」的两个 Slices 以及「H.264」的 PPT 仅记录部分关键内容，内容也较粗糙（打上了「落叶🍂」标记）。由于当时考试不考「MP4」，所以笔记里也不包含这个章节。\n\n临考前老师列出了多媒体信号处理课程知识点（详看 本课知识点 小节）。在后续的章节中这些知识点将以「考点」标注，如下示例：\n\n> [!hint] 考点 X：\\[考点内容\\]\n\n如果你有以下需求：\n\n* 查看笔记源码\n* 想导入到自己的双向笔记库中\n* 习惯在 Github 上阅读\n* 为笔记做贡献\n\n可以访问 [本项目](https://github.com/uuanqin/USTC-SSE-multimedia-signal-processing-notes)：\n\n[![Readme Card](https://github-readme-stats.uuanqin.top/api/pin/?username=uuanqin&repo=USTC-SSE-multimedia-signal-processing-notes)](https://github.com/uuanqin/USTC-SSE-multimedia-signal-processing-notes)\n\n任何贡献都 Welcome！🎉🎉如果你有更新本笔记的想法（或者仅仅是纠错）可以通过邮件或评论区联系我！同时也期待你的 star~\n\n---\n\n# 导论（格式概览）\n\n什么是多媒体？包括文字、视频、静态图像、动画、交互内容。应用于广告、艺术、教育\n\n什么是信号处理？\n\n- 系统工程、电子工程和应用数学领域\n- 操作、分析模拟信号和数字信号\n- 代表时空变化的物理量\n- 典型的操作和应用：信号获取与重构、信号压缩、特征提取、质量提升（降噪，图像增强等）\n\n## 🔺 数据压缩\n\n无损压缩：识别并消除统计冗余，无信息丢失\n\n- LZW、Huffman coding（哈夫曼编码）、Arithmetic coding（算数编码）\n\n有损压缩：识别并移除不重要的信息\n\n- Quantization（量化）、JPEG\n\n## 数字容器格式 Digital Container Format\n\n> [!hint] 考点 1：音频、图像和视频的格式与容器\n\n**容器文件用做识别并交织不同数据形式。**\n\n容器格式部件的不同名称：\n\n- RIFF、PNG：chunks 块\n- QuickTime/MP4：atoms 原子\n- MPEG-TS：packets 包 （来自通信术语）\n- JPEG：段\n\n🎵 音频独有的容器：\n\n- AIFF（IFF 文件格式，在 Mac OS 平台上广泛使用）\n- WAV（RIFF 文件格式，在 Windows 平台上广泛使用）\n- XMF（可扩展音乐格式）\n\n🖼 静态图像独有的容器：\n\n- **TIFF** (Tagged Image File Format，标记图像文件格式) 静止图像和关联的元数据。\n\n其他可以接纳多种音视频类型或其他媒体的容器：\n\n- **3GP** (在许多手机中使用；基于 ISO 基本媒体文件格式，是 MP4 的变种）\n- **ASF**（Microsoft WMA 和 WMV 的容器）\n- **AVI**（标准的 Microsoft Windows 容器）\n- Flash Video (<span style=\"color:#ff0000\">FLV</span>, F4V) （来自 Adobe Systems 的视频和音频容器）\n- Matroska (MKV) （不限于任何编解码器或系统）\n- MJ2-Motion JPEG 2000 文件格式.\n- **QuickTime** File Format（Apple 的标准 QuickTime 视频容器）\n- MPEG program stream (standard container for MPEG-1 and MPEG-2 elementary streams)\n- MPEG-2 transport stream (a.k.a. MPEG-TS) (standard container for digital broadcasting and for transportation over unreliable media; used also on Blu-ray Disc video)\n- **MP4** (standard audio and video container for the MPEG-4 multimedia portfolio)\n- Ogg (standard container for Xiph.org audio format Vorbis and video format Theora)\n- RM (RealMedia; standard container for RealVideo and RealAudio)\n\n其他：SWF、RMVB\n\n## 音频格式 🎵\n\n非压缩的音频格式：WAVE、AIFF、Raw PCM\n\n无损压缩格式：FLAC、<span style=\"color:#ff0000\">Monkey’s audio (APE extension)</span>, Shorten, WMA Lossless\n\n有损压缩格式：MP3, AAC, **WMA**, AC3\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/20231101184441.webp)\n\n## 图像格式 🖼\n\nRAW、BMP、JPEG、JPEG2000、GIF、PNG\n\n## 视频格式 🎞\n\nMPEG-1、MPEG-2、MPEG-4 visual/AVC、H.261、H.263、H.264\n\n- Advanced Video Coding（ISO）=H.264（ITO）\n\n> tea：H 开头一般和电信相关\n\n视频压缩标准的历史详看 视频编码 小节。\n\n# BMP、WAV、AVI 格式\n\n## Windows Bitmap🖼\n\n### 文件结构\n\n> [!hint] 考点 4：Windows Bitmap 文件结构\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231104183213.webp)\n\nbfOffBits：是从位图文件头到位图数据的偏移量。即位图信息头 (BITMAPINFOHEADER)+ 全部颜色对照表 (RGBQUAD) 的字节数。\n\n数据由代表位图的连续行或扫描线的字节值数组组成。每条扫描线由连续的字节组成，这些字节按从左到右的顺序代表扫描线中的像素。\n\n代表扫描线的字节数取决于位图的宽度。\n\n<span style=\"color:#ff0000\">扫描线以 32bit 为边界</span>，必须用 0 填充至末尾。\n\n- 这意味着宽度为 8 位，20 位或 30 位的单色位图将具有相同的扫描线大小：32 位\n- 40 位宽的单色位图将具有 64 位的扫描线大小。\n\nBitmap 中的扫描线是**自底向上**存的\n\n- 数组中的第一个字节代表 bitmap 左下角\n- 数组中的最后一个字节代表 bitmap 右上角\n\n### 位图种类\n\n#### 灰度位图\n\n- 每个像素使用 **8 个比特（1 字节）**。Info Header 中的 biBitCount 将为 8。\n- 每个字节代表 256 种灰度阴影。白色为 FF，黑色为 00\n- 实质上是 8-bit 彩色位图的特例。存在一个颜色表，其中条目 0 指向黑色，条目 255 指向白色，而介于两者之间的条目指向灰色阴影。对于一个给定大小的图像来说，8-bit 灰度位图和 8-bit 彩色位图是一样的\n\n#### 24-Bit 彩色位图\n\n- 每个像素使用 **24 个比特（3 个字节）**。Info Header 中的 biBitCount 将为 24。\n- 每个像素 3 个字节代表红绿蓝。白色 FFFFFF，黑色 000000，红色 FF0000，绿色 00FF00，蓝色 0000FF\n\n#### 8-Bit 彩色位图\n\n- 每个像素使用 8 个比特，只有 256 种颜色，通过调色板实现\n- 颜色表在 info header 和 Data 之间，每一对含有 4 个字节（R, G, B, 0x0）\n\n颜色表：\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/20231101184757.webp)\n\n## WAV 格式 🎵\n\n> [!hint] 考点 5：WAVE 格式\n\n> [!hint] 考点 8：列出一个块的组件\n\nWAV 是存储数字音频（waveform）的简单文件格式，使用了 RIFF 结构将文件内容分为不同的块（chunk）。\n\n* 每个块均由标头和数据字节组成。\n\n- Header 指定块数据字节的类型和大小。\n\n它支持各种 bit 分辨率、采样率和音频通道\n\n流行于 Windows 平台，广泛应用于处理数字音频波形程序中\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231101184818.webp)\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231101184830.webp)\n\n所有使用 WAV 的应用必须能够读取两个必要块（fmt、data），并且可以有选择的忽略可选块。\n\n程序复制一个 WAV，应该复制 WAV 中所有的块，即使有一些块最后不会被解释\n\n次序要求：在 WAV 文件中，**除了 Format 块必须在 Data 块前外**，块的顺序没有限制\n\n注意，format 块也许不是第一个块。一个 WAV 文件通常有三个 chunk 以及一个可选 chunk，其在文件中的排列方式依次是：\n\n1. RIFF chunk\n2. Format chunk\n3. Fact chunk（附加块，可选）\n4. Data chunk\n\n所有的数据都以 8 位字节存储，以**小端**形式存于字节中\n\n「块（的）数据」和「数据块」不是一个概念：**数据块**有「块大小」和一些「块数据」，其他所有块也是如此。\n\n### 组成\n\nWAV 组成：不同类型的 chunk 的集合。每个块包含头及数据，头指定了**块数据**的类型和大小，一些类型的块可能含有子块。**RIFF 文件块必须以 2 个字节（1 word）对齐。**\n\n#### 【必含】fmt 块\n\nfmt 块，采样格式，包含描述波形的参数，比如采样率、位分辨率和通道数\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231101185009.webp)\n\n```C\ntypedef struct {\n    ID chunkID;                 // 块的标识。总是「fmt 」注意末尾有空格。\n    long chunkSize;             // 块的大小（除去chunkID、chunkSize）\n    short wFormatTag;           // 存储数据时使用的压缩方法\n    unsigned short wChannels;   // 音频的通道数。 1:单声道; 4:四通道\n    unsigned long dwSamplesPerSec;  // 采样率。标准：44.1KHZ 48KHZ 32KHZ 22.05KHZ 96KHZ\n    unsigned long dwAvgBytesPerSec; // 每秒播放多少字节，用于估计RAM需要的大小。\n                                    // 其值应等于 dwSamplesPerSec * wBlockAlign的上取\n    unsigned short wBlockAlign; // 采样帧的大小（字节）\n\t\t\t\t\t\t\t    // 其值等于 wChannels * (wBitsPerSample / 8) 的上取\n\t\t\t\t\t\t\t\t// 例如：\n\t\t\t\t\t\t\t\t// 3个未压缩的通道组成一个块，每个通道2个字节，则Block align=6\n    unsigned short wBitsPerSample;   // 采样点的位分辨率\n    unsigned short cbSize;      // Size of the extension，扩展字段的长度\n    // 也许有额外的域, 取决于 wFormatTag\n} FormatChunk;\n```\n\n| 🔺wFormatTag 值 | 含义                           |\n| --------------- | ------------------------------ |\n| 0x0001          | WAVE_FORMAT_PCM 未压缩的数据   |\n| 0x0002          | WAVE_FORMAT_ADPCM              |\n| 0x0006          | WAVE_FORMAT_ALAW （电话格式）  |\n| 0x0007          | WAVE_FORMAT_MULAW （电话格式） |\n| 0x55=85         | WAVE_FORMAT_MP3                |\n\n##### WAVEFORMATEXTENSIBLE 扩展的 WAVE 格式块\n\n```C\ntypedef struct {\n    WAVEFORMATEX Format;\n    union {\n        WORD wValidBitsPerSample; // 信号精度的比特数\n\t\t\t\t\t\t\t      // 假设使用24bit，但只前20位有效，则wValidBitsPerSample=20\n        WORD wSamplesPerBlock; // 一个音频压缩块数据的样本数\n        WORD wReserved;\n    } Samples;\n    DWORD dwChannelMask; // 指定流中通道到扬声器位置的分配的位掩码\n    GUID SubFormat; // 对每一个波形数据类型定义的 ID。例如WMA中不同压缩方式。\n} WAVEFORMATEXTENSIBLE\n```\n\n位掩码 dwChannelMask：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20231101185109.webp)\n\n<span style=\"color:#ff0000\">用于超过 2 通道或 16 分辨率的音频数据</span>：\n\n* `wFormatTag` = FFFE（-2）\n* `cbSize` = 24\n\n以 6 通道 5.1 格式为例子：\n\n```C\nWAVEFORMATPCMEX waveFormatPCMEx;\n// FormatChunk\nwFormatTag = WAVE_FORMAT_EXTENSIBLE; //FFFE\nwChannels = 6;\ndwSamplesPerSec = 48000L;\ndwAvgBytesPerSec = 864000L;          // nBlkAlign * nSamp/Sec = 18 * 48000 \nwBlockAlign = 18;\nwBitsPerSample = 24;                 // Container has 3 bytes\ncbSize = 22;\n// 以下是拓展的域\nwValidBitsPerSample = 20;            // Top 20 bits have data\ndwChannelMask = KSAUDIO_SPEAKER_5POINT1;\n// SPEAKER_FRONT_LEFT | SPEAKER_FRONT_RIGHT |\n// SPEAKER_FRONT_CENTER |SPEAKER_LOW_FREQUENCY |\n// SPEAKER_BACK_LEFT | SPEAKER_BACK_RIGHT\nSubFormat = KSDATAFORMAT_SUBTYPE_PCM; // Specify PCM\n```\n\n#### 【必含】data 块\n\n音频数据，包含实际波形数据，比如所有通道的数据波形\n\n```C\ntypedef struct {\n    ID chunkID;\n    long chunkSize;\n    unsigned char waveformData[];\n} DataChunk;\n```\n\n交错立体声波样本：多通道采样存储于交错的波形数据中；8bit 样本采用无符号数据表示，其他样本使用有符号数据表示。\n\n对于多声道声音，每个声道的单个采样点是交错的。一组交错的采样点称为一个采样帧。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231101185123.webp)\n\n假设存在两个通路，先存放 time1 的左通道和右通道数据，再存放 time2，以此类推。\n\n#### 其他\n\nfact 块（详见 音频编码基础 小节 的 ADPCM 章节）、cue 块\n\n## AVI 格式 🎵🎞\n\n> [!hint] 考点 3：AVI 容器\n\nAVI 是另一种 RIFF，由微软开发\n\n音视频交织，即视频段数据紧接音频数据。这允许媒体播放器**以块来读数据而不是文件整体**。\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/20231101185135.webp)\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231101185202.webp)\n\n注意 AVI 是 Wave 格式，必须以两个字节（1 word）对齐，填充。解码时不需要考虑填充的数据。\n\n索引目的：为了支持随机访问\n\n> [!hint] 考点 6：解释 FOURCC 中 \"00dc\"，\"vids\" 等标签的意思\n\n🔺流列表中的四字节码：\n\n- <span style=\"color:#ff0000\">vids：video stream</span>\n- auds：audio stream\n- mp4v：MEPG4 visual\n\n数据块可以直接驻留在 movi 列表中，或者被 res 列表包围。\n\n🔺FOURCC，定义块中信息的类型：\n\n- db：未压缩的视频帧\n- d**c**：压缩的视频帧\n- <span style=\"color:#ff0000\">wb：音频流</span>\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231101185239.webp)\n\n> [!Example] 习题助记\n> 1. What does fourcc code “vids” stands for?\n> 2. What does fourcc code “auds” stands for?\n> 3. What does fourcc code “00db” stands for?\n> 4. What does fourcc code “01wb” stands for?\n> 5. ln which scemarops is wFormatTag equal to -2 in a WAVE file?\n> \t音频通道大于 2，每一个抽样信号大于 16bit\n\n# 音频编码基础\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102130537.webp)\n\n数字音频编码器：\n\n1. 输入：模拟音频信号\n2. 编码器：转换为方便地数字形式\n3. 存储、处理、传输\n4. 解码器：将数字数据转换为模拟信号\n\n🔺音频编码目标：\n\n- 保真度：解码器尽量**提高**感知的音频质量，减少失真\n- 数据率：减少代表原始音频信号的数据量\n- 复杂性：减少计算复杂性\n- 延迟：减少编码延迟\n\n## PCM——最简单的编码器\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/20231102130552.webp)\n\n量化是一种有损的过程。\n\n在量化过程中使用的离散值数目越高，输出的信号越接近原始音频\n\n## CD：Compact Disc 激光唱片\n\n> [!hint] 考点 7：CD 的数据率\n\nCD 的数据率：44.1k/s × 16 bit × 2 =<span style=\"color:#ff0000\"> 1.4112 Mb/s</span>\n\n- 采样：时间间隔 0.023ms（1/0.000023≈43.5k）或采样频率 **44.1k。**\n- 每一个采样的比特数为 16bit，这种精度允许 65536 个离散电平来表示音频采样幅度。\n- 2 个通路\n\n## 潜在的编码错误\n\n> [!hint] 考点 9：潜在的编码错误\n\n- 采样错误——混叠效应（抽样速率小于二倍带宽）\n- 🔺<span style=\"color:#ff0000\">量化错误：过载错误、截断错误（round-off）</span>\n- 比特错误：存储和传输错误\n\n## 更复杂的编码器\n\n心理声学表明，每个样本理想采样比特为 18-20bits 来描述中等频率（2~5kHz）的音频样本。\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20231102130608.webp)\n\n冗余：感知冗余、统计冗余\n\n> [!hint] 考点 10：有损压缩和无损压缩\n\n## 有损压缩\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102130629.webp)\n\n**有损压缩通过量化来实现。**\n\n### 量化\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20231102130648.webp)\n\n如果有 R 比特可以表示的最大数为 $2^R$，两种量化方法表示的不同样本/编码数为：\n\n- midtread 中平：$2^R-1$，一般来说效果较好，噪声抑制（小电频通常为噪声，Midtread 会过滤掉）\n- midrise 中升：$2^R$，噪声放大\n\n> [!hint] 考点 11：均匀量化和非均匀量化\n\n#### 均匀量化 Uniform Quantization\n\n定义输入范围所需要的信息：\n\n- 量化器是 midtread 还是 midrise\n- 最大不过载的输入 $x_{max}$\n- 描述编码的比特数 R\n\nR 比特允许我们设置的输入范围：\n\n- midrise：$\\Delta=2*x_{max}/2^R$\n- midtread：$\\Delta=2*x_{max}/(2^R-1)$\n\n#### 非均匀量化 Nonuniform Quantization\n\n均匀量化会存在截断误差（最大值为 $\\Delta/2$)，但是，相对于非常低的幅度信号，此误差可能会很大。**由于截取失真的感知与相对误差更相关，因此这意味着均匀量化器在低功率输入信号上的表现要比在高功率信号上的差得多。** 要解决此问题，可以使用非均匀量化。\n\n![image.png|350](https://cdn.gallery.uuanqin.top/img/20231102130912.webp)\n\n压缩方法：\n\n- 幂律压缩：$c_{power}(|x|)=|x|^p，0<p<1$, (ACC 或 MP3 中 p=0.75）\n- 对数压缩\n\n量化错误 Quantization Errors：\n\n- 量化误差：$q(t)=x_{out}(t)-x_{in}(t)$\n- 信噪比 SNR（Signal-to-noise ratio） $SNR=10 \\log{\\frac{x_{in}^2}{q^2}}$\n- **低 量化误差 对应于 高 信噪比**\n\n截断错误 Round-off Error：产生于将一定范围的信号振幅输入对应到单一编码中\n\n过载错误 Overload Error：\n\n- 出现原因：量化器接收的信号振幅（绝对值）过大\n- 导致爆鸣（突突突的声音），为了避免它，通常把 $x_{max}$ 设置得足够大，但由于 R 比特数固定，这会导致截断错误。量化器设计要求在减少两种类型的误差之间取得平衡。\n\n过载错误、截断错误属于量化错误。\n\n## 无损压缩：熵编码\n\n> [!hint] 考点 12：熵和哈夫曼编码\n\n翻译量化编码为一些代表符号，每个符号使用了一定数量的比特。\n\n使一般的编码更短，从而降低平均的比特率。这需要估计每一个可能编码出现的概率。\n\n比特率计算：$R = \\sum_{i=1}^n{p_i \\cdot L_i}$，其中 $p_i$ 表示编码出现的概率，$L_i$ 表示编码后的长度。\n\n<span style=\"color:#ff0000\">熵代表了编码的极限：</span>\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231126174729.webp)\n\n**当我们能确保下一个输出编码是什么时，熵会变低；反之变高。**\n\n例：在 2 编码符号系统中，有\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102131253.webp)\n\n数学图像 [链接](https://www.desmos.com/calculator/fkd2gp4jc5?lang=zh-CN)\n\n- 当 p=0 或 1 时，熵为 0。我们知道下一个编码是什么，所以我们不需要发送任何 Bits。\n- 当 p=0.5，熵为 1。当所有编码符号出现的概率相同时，达到最大熵。在这种情况下使用熵编码进行压缩没有效果。\n- 对于其他概率，存在一种编码方式使得平均符号编码使用小于 1 个比特\n\n### 哈夫曼编码\n\n被用于传真、ASCII 文本数据编码压缩。\n\n是一种统计学编码，平均编码长度最小。\n\n编码长度可变，且越经常使用的字符编码长度越短。\n\n特点：\n\n1. 编码过程不唯一（取决于分支的标记或合并符号的选择），但 WPL 相同（在这里指的是比特率 R）且最优\n2. 在符号分布概率不均匀的情况下，哈夫曼编码的比特数比固定比特编码方法少\n3. 霍夫曼码中每个样本的平均位数在熵的一位以内，即平均采样比特数范围：\n\n$$\nEntropy\\le <R>_{Huffman} \\le Entropy + 1\n$$\n\n\n## WAVE MS-ADPCM\n\n> [!hint] 考点 13：MS-ADPCM\n\nDPCM 差分脉冲编码调制：\n\n- 以 PCM 为基线，增加了预测采样信号的功能。\n- 与 PCM 直接传输原始 PCM 采样不同的是，DPCM 传输的是原始采样信号与预测值（基于先前采样）之间的差异：$diff=x_{n+1}-xp_{n+1}$\n- 预测值计算举例：$xp_{n+1}=a*x_n+b*x_{n-1}$，a、b 为预测系数\n\ndiff 通常非常小，我们必须限制它的表示范围，如从 16bits 限制到 4bits。但我们也不能保证 diff 总是小的（如剧烈信号变化），为了解决这个问题，引入了 iDelta。如果 diff 非常大，则 iDelta 也会很大，反之亦然。\n\n于是我们定义：$iErrordata = diff / iDelta$，这样新的差异值将会稳定。\n\niErrordata 以 4bit 保存，称为「nibble」，范围为 -8~7。每次新的 iErrordata 生成后，iDelta 相应做出改变。\n\n```C\niDelta = iDelta * AdaptableTable[(unsigned)nibble]/256;\nconst int AdaptationTable[ ] = {\n230, 230, 230, 230, 307, 409, 512, 614,    // 对应nibble：\n768, 614, 512, 409, 307, 230, 230, 230 };  // 对应nibble：\n```\n\n\n### WAVEFORMAT\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231105205607.webp)\n\nMS-ADPCM 的 wave 文件中，存在与 fmt 块和 data 块的另一种块：fact 块\n\n- fact 块存储采样长度\n- data 块中，数据以块的方式存储，一个接着一个\n- 块有三个部分：头、数据和填充\n\n### 编码过程\n\n对于每个通道的每个块的编码过程：\n\n1. 决定块要使用的预测器\n2. 决定块的初始 idelta\n3. 输出块的头\n4. 编码并输出数据\n\n块头写入：\n\n1. 对每一个通道，输出预测器的选择\n2. 对每一个通道，输出初始 idelta (量化比例)\n3. 对每一个通道，输出第一个采样的 16bit PCM 值\n4. 对每一个通道，输出第二个采样的 16bit PCM 值\n\n然后剩下的块就可以进行编码。**注意第一个编码的值是块的第三个采样，因为前两个已经包含在头中了。**\n\n当块中有许多采样需要进行编码，将采取下列步骤：\n\n1. 从前两个采样中预测下一个样本：\n![image.png](https://cdn.gallery.uuanqin.top/img/20231123215918.webp)\n\n> 用预测系数计算会导致运算量增长，而除以 256 只需要移位，无浮点数除法\n\n2. 产生 4bit 有符号 error delta 以及避免上/下溢：$ierrordelta=\\frac{sample(n)-Ipredsamp}{idelta}$ 并将 ierrordelta 的范围修剪至\\[-8,7\\]\n3. 于是输出 nibble ierrordelta=`putnibble(ierrordelta)`\n4. 把「预测错误」加到预测的下一个样本，并避免上/下溢：$Inewsamp=Ipredsample+(idelta*ierrordelta)$ 将其缩紧至 16bit（short）\n5. 调整用于计算「预测错误」的量化步长：$idelta=\\frac{idelta*adaptiontable[ierrordelta]}{fixed\\_point\\_adaption\\_base}$ 如果 idelta 过小，将其设为最小的合法值\n6. 更新先前样本的记录：$isamp2 = isamp1; isamp1 = Inewsample$\n   ![image.png](https://cdn.gallery.uuanqin.top/img/20231102131901.webp)\n步骤 5 的目的是自适应量化步长。\n步骤 4.6 是为了保持和解码端一致，真正预测时是通过编码解码后的信号。此时和解码端保持一致，使误差不会太大。\n\n> [!Example] 习题助记\n> 1.What is audio CD rate?\n> \t   44.1KHZ × 2 × 16bit/s = 1.411 Mbit\n>2.What are audio coding goals?\n> \t   delity，rate，complexity，delay\n>3.List the components of a chunk.\n> \t   header，data\n>4.What kind of quantization errors are there in audio coding?\n> \t   overlode，round-off\n>5.What is the average number of bits per sample in a Huffman code?\n\n# 图片和视频编码基础\n\n🔺人类视觉系统对低频图像更敏感。\n\n> 图形学中的高低频：图像的低频代表着轮廓信息，高频代表着细节信息，相位代表位置信息。\n\n特定自然视频片段中与视频处理和压缩相关的特征：\n\n- 空间特征：纹理变化、物体对象的数目和形状、颜色\n- 时间特征：物体运动、光线变化、摄像机/视角变化\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102195839.webp)\n\n帧率：\n\n- 每秒小于 10 帧：用于超低比特流视频通信\n- 10~20 帧：典型低比特率视频通信\n- **25~30 帧：电视图像标准**\n- 50~60 帧：平滑（高数据率）\n\n> [!hint] 考点 23：色彩空间\n\n色彩空间：\n\n- 单色图：仅需一个数字表示某一个空间采样的亮度\n- 彩色图：至少需要三个数字才能准确表示某一个像素的颜色\n\n代表亮度和色彩的方法称为色彩空间：\n\n- RGB 色彩空间：捕获和显示图像的恰当方法。RGB 色彩空间中三种颜色同样重要，通常分辨率也相同。彩色阴极射线管（CRT）和液晶显示器（LCD）应用 RGB。\n- YCbCy 色彩空间（YUV 色彩模型）\n\n**图像的视觉质量受采样点数量的影响。**\n\n## YCbCr\n\n🔺<span style=\"color:#ff0000\">人类视觉系统对<b>亮度</b>更敏感（和颜色相比）</span>\n\n> 人眼的视杆细胞（感知亮度）比视锥细胞（感知色彩）数量多。\n\n### 色彩空间\n\n在 RGB 颜色空间中，这三种颜色同等重要，因此通常都以相同的分辨率存储。\n\nYCbCr 区分亮度和色度，亮度具有更高的分辨率。\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20231106221610.webp)\n\nY：亮度（luma），RGB 的加权平均，$Y=k_rR+k_gG+k_bB, k_g = 1-k_b-k_r$\n\nCb：彩度蓝\n\nCr：彩度红\n\n每一个色度是 R、G、B、Y 之间的差异\n\n为了降低存储和传输需求，可以将 RGB 图像转换为 YCbCr 图像\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102195927.webp)\n\nITU-R 建议的系数定义：$k_b=0.114, k_r=0.299$\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200018.webp)\n\n### 采样格式\n\n为了利用人眼对亮度和色度的不同敏感性，将视频信号转换为亮度/色彩空间时，可以对色度进行空间上的次采样或低通滤波\n\n#### 4:4:4 采样\n\n![image.png|205](https://cdn.gallery.uuanqin.top/img/20231102200027.webp)\n\nY，Cb 和 Cr 有着相同的分辨率。因此每一个分量存在于任何位置的像素上\n\n#### 4:2:2 采样\n\n![image.png|187](https://cdn.gallery.uuanqin.top/img/20231102200042.webp)\n\n色度组件的垂直分辨率与亮度相同，但水平分辨率只有亮度的一半。\n\n用于高质量彩色录制。\n\n#### 4:2:0 采样\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200051.webp)\n\nCb 和 Cr 的水平和垂直分辨率都是 Y 的一半。\n\n广泛用于消费类应用，如视频会议、DVD。\n\n**需要的采样数（比特）是 4:4:4 视频（或 RGB 视频）的一半**。\n\n> 为什么不叫做 4:1:1 采样？\n> 因为在历史上 4:1:1 采样已被用于指代这种采样：\n>\n> ![image.png|275](https://cdn.gallery.uuanqin.top/img/20231102200109.webp)\n\n例子：\n\n![image.png|375](https://cdn.gallery.uuanqin.top/img/20231102200139.webp)\n\n## 视频帧格式\n\n> [!hint] 考点 24：视频帧格式\n\n在进行压缩和传输之前，捕获的视频会被捕获或转换为一组“中间格式”之一。\n\n常见的中间格式（CIF）是一组流行格式的基础。\n\n![image.png|375](https://cdn.gallery.uuanqin.top/img/20231102200202.webp)\n\n## 质量评估\n\n### 主观测量——ITU-R 500\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200215.webp)\n\n通常采用的手段：双刺激连续质量量表（Double Stimulus Continuous Quality Scale）\n\n花费昂贵，耗时长\n\n### 客观质量测量\n\n> 峰值信噪比 ( PSNR ) 用于表示信号的最大可能功率与影响其表示的保真度的破坏噪声的功率之间的比率。虽然较高的 PSNR 通常表明重建质量较高，但在某些情况下可能并非如此，必须非常小心该指标的有效性范围。只有当它用于比较来自相同编解码器和相同内容的结果时，它才是最终有效的。一般来说，在估计图像质量，尤其是人类感知的视频质量时，与其他质量指标相比，PSNR 表现不佳。\n\n运用最广泛的是**峰值信噪比（Peak Signal to Noise Ratio, PSNR）**\n\n$$\n\\begin{aligned}\n{PSNR}_{dB} =& 10 \\log_{10}{\\frac{(2^n-1)^2}{MSE}} \\\\\nSNR=&10 \\log{\\frac{x_{in}^2}{q^2}}\n\\end{aligned}\n$$\n\nMSE：原始图像和受损图像或视频帧之间的均方误差\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/20231102200250.webp)\n\n## 图像视频处理准则\n\n> [!hint] 考点 25：图像视频处理准则：四种类型冗余度\n\n目标是减少信号中存在的冗余（🔺视频编码的四种冗余度）：\n\n- 时间冗余度（Temporal redundancy）：两帧相像\n- 空间冗余度（Spatial redundancy）：两点相像\n- 统计冗余度（Perceptual redundancy）\n- 感知冗余度（Statistical redundancy）\n\n## JPEG 图像压缩\n\n基本流程：\n\n- 在 JPEG 压缩中，图像被划分为 8×8 像素的块，然后对每个块进行 2-D 离散余弦转换（DCT）。\n- DCT 将像素块中的大多数信号压缩为小的 DCT 系数部分。\n- 量化这些 DCT 系数将使得它们大部分转化为 0。\n- 这些被量化的系数以之字形进行扫描，再进行游程编码和哈夫曼编码。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200322.webp)\n\n## 帧内帧间预测\n\n每一帧可以都被编码为分开的图像，例如对每一帧独立应用类似 JPEG 的编码。\n\n视频压缩通过利用时间冗余或帧间相似性达到比图片更好的压缩效果。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200334.webp)\n\n> [!hint] 考点 26：视频编码中，编码帧的三种基本类型\n\n🔺编码帧的三种基本类型：\n\n- 帧内编码帧（I - 帧）：独立于于所有其他帧进行编码\n- 预测编码帧（P - 帧）：基于先前编码的帧进行编码\n- 双向预测帧（B - 帧）：基于先前帧和未来帧进行编码\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200349.webp)\n\n## 运动估计与补偿\n\n> [!hint] 考点 27：运动估计和补偿\n\n为了最大限度利用相邻帧的可预测性，在运动补偿过程中估算两帧之间的移动并形成正确预测是非常重要的。\n\n估计帧与帧之间运动的过程称为运动估计；基于先前编码的参考帧预测给定帧，同时补偿两帧之间的相对运动的过程称为运动补偿预测 (MC-prediction)。\n\n### 基于块的的运动估计补偿\n\n对于当前帧 M×N 样本的每个块：\n\n1. 在参考帧中搜索一个区域，以找到一个“匹配”的 M×N 样本区域\n2. 被选中的候选区域称为当前块的预测块，并将其与当前块相减，得到残差\n3. 将残差块编译传输，当前块和候选位置区域之间的偏移（运动向量）也将被传输\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200446.webp)\n\n### 运动补偿块的大小\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200456.webp)\n\n### 子像素运动补偿\n\n一个更好的运动补偿预测可以由参考帧中的差值样本位置构建。\n\n分像素运动估计补偿引入查找分样本差值位置和整样本位置，选择最匹配的位置，并使用该位置的整数或子样本值进行运动补偿预测。\n\n过程：\n\n1. 在整样本网格（圆圈标记）中找到最佳匹配\n2. 搜索紧挨着最佳匹配（方块标记）的半样本位置。\n3. 如果需要，则搜索最佳半样本位置（三角形标记）旁边的四分之一样本位置\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200508.webp)\n\n预测越精确，残差越小，motion vector 数据量增加。\n\n随着插补步骤的增加，性能增益趋于减小：\n\n- 与整样本运动补偿相比，半样本插值具有显著的增益。\n- 四分之一样本插值有一定适度改进。\n- 8 个样本插值改进更小，以此类推。\n\n与更复杂的运动补偿方案相关的压缩效率权衡：**更精确的运动补偿需要更多的比特来编码向量域，但编码残差比特数更少；反之亦然。**\n\n## 图像模型\n\n1. 转换：压缩数据并去相关\n2. 量化：降低传输数据的精确度\n3. 重新排序：组织数据以合并重要值\n4. 预测图像编码\n\n### 预测图像编码\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200520.webp)\n\n空间预测，以 DPCM 为例：\n\n1. 编码预测：prediction P(X) = (2A+B+C)/4\n2. 残差计算：R(X) = X-P(X) ，然后编码并传输 R(X)\n3. 解码器解码残差并形成预测：P(X) = (2A+B+C)/4\n4. 重建像素：X = R(X) + P(X)\n\n### 转换编码\n\n转换后的数据应当去相关且被压缩：在转换后的数据中，大多数的信息应当被集中于少量的值中。\n\n转换应当可逆。\n\n转换应当容易计算：低内存需求、可使用有限精度算法实现、算数操作数低\n\n目前有许多转换：KLT，SVD，DCT\n\n在 N×N 样本块中，DCT 始终受欢迎，且图像一直在块单元中被处理。\n\n运动补偿残差往往会受到块边缘的伪影（blockiness）的影响。\n\n对整个图像或帧做的基于图像的转换操作有：\n\n- 图像传输（离散小波变换 DWT）胜过静态图像压缩的块传输（JPEG2000）\n- DWT 需要更高的内存需求（尤其是大图像），因为是以整个图像作为一个单元处理图像的\n- **DWT 并不“适合”基于块的运动补偿**\n\n#### 2D-DCT\n\n正向离散余弦转换：$Y=AXA^T$\n\n逆 DCT（IDCT）：$X=A^TYA$\n\nX 为 N×N 样本块，Y 为系数矩阵，A 为 N×N 传输矩阵\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200620.webp)\n\n例子：N=4，有 A：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200637.webp)\n\n#### DCT 系数的特征\n\nFDCT 输出是一组 N×N 的系数，表示 DCT 域中的图像块数据。\n\nDCT 自身保存所有 N×N 图像块中的信息。\n\n人眼对低频 DCT 参数更加敏感。\n\nDCT 有助于将感知上重要的信息与感知上不重要的信息分离开来。\n\n**用更高的精度编码低频的 DCT 信息，但使用更少或不使用比特来编码高频系数，从而丢弃在感知上不太重要的信息。**\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102200648.webp)\n\n在计算 IDCT 之前添加更多的系数，会逐渐提高原始区块的重建精度，到包含五个系数时，重建的区块与原始区块的匹配程度相当接近。\n\n可以从 16 个 DCT 系数的子集中重建块的近似副本。\n\n#### DCT 计算复杂性\n\n在典型的 DSP 上，单个 8×8 DCT 或 IDCT 需要几百个指令周期。\n\n以 CIF (352×288) 分辨率和 30 fps 帧率运行的解码器可能需要高达 71,280 IDCT /秒。\n\nIDCT 计算可占用高达 30% 的视频解码器编译周期。\n\n由于 DCT 和 IDCT 在小图像块上操作，因此内存需求相当小，与图像和视频压缩应用程序中的帧缓冲区和其他数据的大小相比，通常可以忽略不计。\n\nDCT 和 IDCT 函数的**高计算需求和小内存需求**使它们成为使用专用硬件加速器实现的理想候选者。\n\n### 量化\n\n$$\n\\begin{aligned}\nFQ = &round\\left( \\frac{X}{QP} \\right) \\\\\nY=&FQ\\cdot QP\n\\end{aligned}\n$$\n\nQP 表示量化步长。\n\n量化用于**丢弃感知上不重要的信息**。\n\n量化后，使用统计方法对剩余信息进行编码，从而使用尽可能少的比特。\n\n量化和去量化对内存的要求通常可以忽略不计。\n\n### 游程编码（RLC）\n\n量化后，绝大多数高频 DCT 系数为零。\n\n游程编码：\n\n- 将连续的 0 值系数成组（一个游程）\n- 编码 0 的个数（长度），不编码单独 0 系数\n\n**为了使连续零值系数的平均值尽可能高**，我们以对角之字形的方式扫描 DCT 系数矩阵。\n\n游程编码（RLC，Run-length coding）之后通常是可变长度编码（VLC）。\n\n### 重新排序\n\n![image.png|278](https://cdn.gallery.uuanqin.top/img/20231102201034.webp)\n\n**重排序是将非零系数组合在一起，实现有效地表示零系数**\n\n### 可变长度编码（VLC）\n\n一对（游程，量化 DCT 系数）的每个可能值称为一个符号。\n\n常见的符号被分配较短的码字，而不常见的符号被分配较长的码字。\n\nVLC 的一个缺点是编码图像中间的比特误差会阻止解码器正确重建剩余的比特流。\n\n通过在整个编码比特流中散布“重新同步标记”，解码器能够在发生错误时搜索下一个重新同步标记以进行同步。\n\n## 视频编码结构\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102201058.webp)\n\n## 通用视频编码模型\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102201109.webp)\n\n## 编码数据流\n\n编码器的两个主要的数据流路径：从左到右（编码）、从右到左（重建）。\n\n编码流：\n\n1. 输入视频帧 Fn 用于编码，并以宏块为单位进行处理\n2. Fn 和参考帧（如前编码帧 F'n-1）对比。运动估计函数在 F'n-1 中 16×16 的区域，查找出一个 Fn 中当前宏块的一个匹配。当前宏块位置和被选中的参考区域的偏移为一个移动向量（MV，motion vector）\n3. 基于被选中的 MV，生成运动补偿预测 P（被运动估计器选择的 16×16 区域）\n4. 当前宏块中减去 P 产生残差或 difference 宏块 D。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102201156.webp)\n\n数据重建流：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102201207.webp)\n\n## 解码数据流\n\n解码数据流：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102201222.webp)\n\n> [!Example] 习题助记\n> 1. Write down the full name of ADPCM in English\n> Adaptive Differential Pulse Code Modulation\n> 2. List the four types of redundancy used in video coding\n> 时间、空间、感知、统计\n> 3. What is the sample resolution of CIF\n> 352×288\n> 4. Write down the formula of PSNR\n> 5. ln video coding , there are three basic types of coded frames, what are they?\n> I P B\n> 6. What is the purpose of DCT?\n> 去相关，使数据更紧凑\n> 7. What is the purpose of Zigzag Scan or reordering?\n> 是将非零系数组合在一起并有效地表示零系数\n> 8. What is the purpose of quantization?\n> 量化用于丢弃感知上无关紧要的信息\n> 9. In motion estimation and compensation, what kind of redundancy is used in video coding?\n> temporal 时间冗余\n> 10. In 010 editor template, the following variable is defined at the beginning: char type[4];\n> The variable type is mapped to 0 bytes 3 to in the file.\n\n## 本小节参考链接\n\n- [质量评估指标：PSNR（Peak signal-to-noise ratio 峰值信噪比）_psnr指标_花生树什么树的博客-CSDN博客](https://blog.csdn.net/Doctor__Chen/article/details/124781119)\n- [傅里叶变换、拉普拉斯变换、Z 变换的联系是什么？为什么要进行这些变换？ - 知乎 (zhihu.com)](https://www.zhihu.com/question/22085329/answer/774074211)\n\n# JPEG 图像编码\n\n**Baseline 方法是迄今为止实现最广泛的 JPEG 方法。**\n\n## 基于 DCT 的编码/解码过程\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102201904.webp)\n\n编码过程：\n\n1. 输入的组件样本为 8×8 块\n2. 每个块被前向 DCT（FDCT）转换为一组 64 个值，作为 DCT 系数。\n   a. 第一个值称为 DC 系数\n   b. 其他 63 个值为 AC 系数\n3. 然后使用量化表中 64 个对应值中的一个对 64 个系数中的每个系数进行量化\n4. 然后将量化系数传递给熵编码过程，以进一步压缩\n\n解码过程：\n\n1. 熵解码器解码之字形的量化 DCT 系数\n2. 解量化后，通过反向 DCT（IDCT）将 DCT 系数转化为 8\\*8 样本块\n\n## 前向 DCT（FDCT）\n\n在编码器的输入中，原图像采样以 8×8 块成组，从无符号整数 $[0,2^P-1]$ 的范围转换为有符号整数 $[-2^{P-1},2^{P-1}-1]$，然后输入到 FDCT 中：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231123215755.webp)\n\n其中，\n\n$$\n\\begin{aligned}\nC(u),C(v)=&1/\\sqrt{ 2 }, &when~u,v=0\\\\\nC(u),C(v)=&1,&other~conditions\n\\end{aligned}\n$$\n\n## 反向 DCT（IDCT）\n\n解码器的输出中，IDCT 输出 8×8 采样块以形成重构图片：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231123215702.webp)\n\n其中，\n\n$$\n\\begin{aligned}\nC(u),C(v)=&1/\\sqrt{ 2 }, &when~ u,v=0\\\\\nC(u),C(v)=&1,&other ~conditions\n\\end{aligned}\n$$\n\n## 块样本和 DCT 系数的关系\n\n- 对一个块进行前向 DCT 计算后，64 个 DCT 系数结果被均匀量化器量化\n- 每一个系数 $S_{vu}$ 的量化器步长为对应量化表中的元素 $Q_{vu}$\n  ![image.png](https://cdn.gallery.uuanqin.top/img/20231102202014.webp)\n\n## DC 编码\n\n相邻的 8×8 块之间的 DC 系数通常有着强烈的关联性。量化的 DC 系数被编码为与前块的 DC 项的差值。这种特殊处理是值得的，因为 DC 系数包含了总图像能量的很大一部分。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202041.webp)\n\n## 之字形扫描\n\n所有的量化系数将以之字形顺序进行组织，将低频系数（一般为非 0）放置在高频系数前，以便于进行熵编码。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202052.webp)\n\n## 压缩与图像质量\n\n对于较复杂场景的彩色图像，所有基于 DCT 的操作模式通常会产生以下级别的图像质量：\n\n- 0.25-0.5 比特/像素：中等至良好质量\n- 0.5-0.75 比特/像素：良好至优秀质量\n- 0.75-1.5 比特/像素：杰出质量，满足大多数的应用\n- 1.5-2.0 比特/像素：和原图相差无几，满足有高质量需求的应用\n\n根据源特性和场景内容的不同，质量和压缩会有很大的不同。\n\n## 具有多个组件的源图像\n\n源图像可能包含 1~255 个图像组件。每一个组件包含样本的矩形数组。\n\n样本被定义为一个 $[0, 2^{P-1}]$ 范围的无符号整数。\n\n图像中的所有样本必须有着相同的精度 P，对于基于 DCT 的编解码器，P 可以是 8 或 12。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202132.webp)\n\n## 多组件交织\n\n许多应用程序需要将显示/打印多组件图像的过程与解压过程并行。\n\n这只有在组件在压缩数据流中交织在一起时才可行。\n\n编码交错：如果编码器从 a 压缩一个数据单元，从 B 压缩一个数据单元，从 C 压缩一个数据单元，然后返回到 a......\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202143.webp)\n\n## 不同维度的组件交织顺序\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202151.webp)\n\n上例中，B、C 在水平方向上与 A 相比少了一半样本。在这个例子中，A 的两个数据单元和 B、C 的各一个单元进行交织。\n\n> [!hint] 考点 28：JPEG 编码与解码过程：最小编码单元、操作模式、DC 熵编码、AC 熵编码、游程、SIZE、EOB\n\n## 最小编码单元 MCU\n\n在基于 DCT 的编解码器中，**数据单元**是一个 8x8 的样本块。\n\n<span style=\"color:#ff0000\">最小编码单元 MCU</span>：最小的交错**数据单元**组。对于非交错数据，MCU 是一个数据单元。对于交错数据，MCU 是由扫描中组件的采样因子定义的数据单元序列。交错数据是 MCU 的有序序列，MCU 中包含的数据单元数由交错的元件数及其相对采样因子决定。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202208.webp)\n\n当两个或更多的组件进行交织时，每一个组件 $C_i$ 被 $V_i$ 个数据单元划分为 $H_i$ 的矩形区域。**最大的组件交织数为 4，且每个 MCU 的数据单元最大值为 10**：\n\n$$\n\\sum_{i}{H_i\\times V_i}\\le 10\n$$\n\n这里的 i 是所有参与交织的 i。（注：置于 10 这个数字是规定的，没有理由）\n\n## 操作模式\n\n🔺有四种不同的操作模式，在这些模式下定义了各种编码过程：\n\n- 基于 DCT 的顺序模式（从上到下，一块一块编码）\n- 基于 DCT 的渐进模式（从轮廓到细节）\n- 无损模式\n- 层次模式\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202314.webp)\n\n### 顺序模式与渐进模式\n\n在顺序模式中，每一个图片组件在单个扫描中编码。\n\n在渐进模式中，每一个图片组件在多次扫描中编码。第一次扫描中编码粗糙，但可识别的图像版本可以快速传输，且通过后续的扫描进行改进，直到达到由量化表确定的图像质量水平。\n\n<span style=\"color:#ff0000\">有两种互补的方法可以对量化 DCT 系数块进行部分编码</span>：\n\n1. 在给定的扫描中，只有之字形序列特定的系数带需要进行编码\n2. 在给定的扫描中，无需将当前频带内的系数编码为完全（量化）精度。\n   1. 最重要的 N 个比特可以在第一次扫描中编码\n   2. 在随后的扫描中，次重要的比特再进行编码\n   3. 这个过程叫做「连续逼近」\n\n这两种程序可以单独使用，也可以灵活地混合使用。\n\n量化 DCT 系数的传递：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202328.webp)\n\n光谱选择与逐次逼近：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202337.webp)\n\n### 层次模式\n\n层次模式以多种分辨率的方式为图片提供金字塔型的编码。每一种的分辨率与其相邻的编码在水平或垂直维度或两者上相差两倍：\n\n1. 对原始图像在每个维度上按所需的 2 的倍数进行滤波和下采样。\n2. 使用顺序 DCT、渐进式 DCT 或无损编码器之一对这个减小尺寸的图像进行编码。\n3. 解码此缩小尺寸的图像，然后使用接收器必须使用的相同插值滤波器对它进行水平和/或垂直 2 插值和上采样。\n4. 使用此上采样图像作为该分辨率下的原始图像的预测，并使用前面介绍的顺序 DCT，逐行 DCT 或无损编码器之一对差异图像进行编码。\n5. 重复第 3 步和第 4 步，直到图像的全分辨率被编码\n\n## 基线顺序熵编码\n\n在基线顺序编码器中，FDCT、量化、DC 差分以及之字形排序步骤之后，是熵编码。\n\n在熵编码之前，通常只有很少的非零系数和很多零值系数。熵编码的任务是更有效地编码这些系数。\n\n基线顺序熵编码有两个步骤：\n\n1. 将量化 DCT 系数转换为中间符号序列（游程编码）\n2. 为符号分配可变长度代码（哈夫曼编码）\n\n### AC 系数\n\n每一个非零的 AC 系数这样编码：\n\n- `RUN-LENGTH`：之字形扫描序列中，被表示的非零 AC 系数前，连续数字 0 的长度。\n  - `RUN-LENGTH` 代表 <span style=\"color:#ff0000\">0~15</span>，Symbol-1 中 `(15, 0)` 代表 `RUN-LENGTH`=16。\n  - `(0,0)` 代表 `EOB`（块结束），可以将其视为“转义”符号。\n- `SIZE`：编码 `AMPLITUDE` 所用的比特数\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202410.webp)\n\n> [!example] 更多例子\n> 0005 → (3,3)(5)\n> 000003 → (5,2)(3)\n> 00,-12 →  (2,4)(-12)\n> 0..(16 个 0)..0 1 → (15,0)(0,1)(1)\n> 0..(17 个 0)..0 1 → (15,0)(1,1)(1)\n> 0..(18 个 0)..0 -3 → (15,0)(2,2)(-3)\n> 00000 3 0..0 → (5,2)(3)(0,0)\n> 0013 →  (2,1)(1) (0,2)(3)\n\n### AMPLITUDE 和 SIZE 的范围\n\n量化 AC 系数的取值范围决定了 AMPLITUDE 和 SIZE 信息必须表示的值的范围。对 8×8 FDCT 方程的数值分析表明，如果 64 点 (8×8 块) 输入信号包含 N 位整数，则输出数字的非小数部分 (DCT 系数) 最多可以增长 3 位。这也是量化 DCT 系数的最大可能大小。\n\n基线顺序在 $[-2^7,2^7-1]$ 范围内有 8 位整数源样本，因此量化的 AC 系数幅度由 $[-2^{10},2^{10}-1]$ 范围内的整数覆盖。\n\n带符号整数编码使用长度为 1 到 10 位的 symbol-2 AMPLITUDE 码，因此 SIZE 也代表 1 到 10 的值。RUNLENGTH 表示从 0 到 15 的值。\n\n### DC 系数\n\n8×8 样本块的差分 DC 系数的中间表示结构类似：\n\n- Symbol-1 只表示 SIZE 信息\n- Symbol-2 表示振幅信息\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202435.webp)\n\n因为 DC 系数是差分编码的，所以它覆盖的整数值 $[-2^{11},2^{11}-1]$ 是 AC 系数的两倍，因此必须为 DC 系数增加一个附加的电平。\n\n因此，DC 系数大小的 symbol–1 表示从 0 到 11 的值。\n\n> **差分编码**（differential encoding）指的是对数字数据流，除第一个元素外，将其中各元素都表示为各该元素与其前一元素的差的编码。差分编码的简单例子是储存序列式资料之间的差异（而不是储存资料本身）：不存“2, 4, 6, 9, 7”，而是存“2, 2, 2, 3, -2”。\n\n### 可变长度熵编码\n\n对于 DC 和 AC 系数，每个 symbol-1 均使用来自 Huffman 表集中的可变长度代码（VLC）进行编码。 每个 symbol-2 均使用“可变长度整数”（VLI）码进行编码。\n\nVLCs 和 VLIs 是具有可变长度的代码，但 VLI 不是霍夫曼代码。一个重要的区别是，VLC（ Huffman code）的长度直到解码才知道，而 VLI 的长度存储在其前一个 VLC 中。\n\nHuffman 码必须在外部指定为 JPEG 编码器的输入。\n\n请注意，Huffman 表在数据流中的表示形式是一种间接规范，解码器在解压缩之前必须以此间接规范来构造表（解码时需要重新构建 Huffman 树进行解码）。 JPEG 标准包括一组 Huffman 表的示例，但这不是强制性的。\n\n### 基线编码例子\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202510.webp)\n\n> [!hint] 考点 29：JPEG 交换格式（JIF）：图像、帧、扫描和标记\n\n## 图像、帧和扫描的关系\n\n- 压缩的图像数据只包含一张图片。\n- **在渐进模式和顺序模式编码过程中，一张图片只包含一帧。**\n- **在层次模式中，一张图片可以包含多帧。**\n- 一帧可以包含一个或多个扫描。\n- 顺序模式下，一个扫描包含一个完整的、单个/多个图像组件的编码。\n- <span style=\"color:#ff0000\">在层次模式中：当一张图像的三个组件非交织时，一帧包含三个扫描；如果三个组件交织一起，那么一帧包含一趟扫描。</span>\n- 一帧也可以包含两趟扫描：一趟是非交织的组件、另一趟为两组件交织。\n\n## 标记\n\n**标记用于标识压缩数据格式的各种结构部分。**\n\n所有的标记赋予两个字节编码：0xFF+ 不等于 0 或 0xFF 的字节。\n\n标记段包含一个标记以及相关参数的序列。标记段的第一个参数是两字节长的参数，它指定了标记段的字节数（除去两字节标记后的参数长度）\n\n被 SOF 和 SOS 标记码标识出的标记段被视为头（headers）：分别为帧报头和扫描报头。\n\nSOI（0xFFD8）：压缩图片开始标记\n\nEOI（0xFFD9）：压缩图片的结束标记\n\n### 高级语法\n\n基于顺序 DCT、渐进式 DCT 和无损操作模式的语法：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202539.webp)\n\n#### 帧头语义\n\n帧报头应该出现在帧的开始。该报头指定源图像特征、帧中的组件和每个组件的采样因子，并指定从中检索要与每个组件一起使用的量化表的目标。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202601.webp)\n\n| 标记结构 | 长度（字节） | 解释                                                              |\n| -------- | ------------ | ----------------------------------------------------------------- |\n| 0xFFC0   | 2            | SOF marker                                                        |\n| Lf       | 2            | Frame header length, not including the first two bytes 0xFF, 0xC0 |\n| P        | 1            | Sampling precision, equals 0x08 in a baseline system              |\n| Y        | 2            | Image height                                                      |\n| X        | 2            | Image width                                                       |\n| Nf       | 1            | Number of components in a frame. 1 (grey scale) or 3 (color)      |\n| C1       | 1            | Component 1                                                       |\n| (H1,V1)  | 1            | Horizontal and vertical sampling factor                           |\n| Tq1      | 1            | Quantization table                                                |\n| C2       | 1            | Component 2                                                       |\n| (H2,V2)  | 1            | Horizontal and vertical sampling factor                           |\n| Tq2      | 1            | Quantization table                                                |\n| ⋯        | ⋯            | ⋯                                                                 |\n\n#### 扫描头语义\n\n扫描头应在扫描开始时出现。这个报头指定扫描中包含哪些组件，指定从中检索要与每个组件一起使用的熵表的地址。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202705.webp)\n\n| 标记      | 长度（字节） | 解释                                                                                                                                                         |\n| --------- | ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 0xFFDA    | 2            | SOS marker                                                                                                                                                   |\n| Ls        | 2            | Scan header length, not including the first two bytes 0xFF, 0xDA                                                                                             |\n| Ns        | 1            | Number of components in a scan, in a baseline system, Ns=Nf (Number of components in a frame)                                                                |\n| Cs1       | 1            | Component number in a scan                                                                                                                                   |\n| (Td1,Ta1) | 1            | Tdn: the four most significant bits, used to select DC entropy coding table <br>Tan: the four least significant bits, used to select AC entropy coding table |\n| ⋯         |              |                                                                                                                                                              |\n| Ss        | 1            | Default values are [00] [3F] [00] in a baseline system                                                                                                       |\n| Se        | 1            | Default values are [00] [3F] [00] in a baseline system                                                                                                       |\n| (Ah,Al)   | 1            | Default values are [00] [3F] [00] in a baseline system                                                                                                       |\n\n#### DQT 标记段语义\n\n定义量化表 (DQT) 标记段，用于定义一个或多个量化表。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202826.webp)\n\n| 标记    | 长度（字节） | 解释                                                                                                                                     |\n| ------- | ------------ | ---------------------------------------------------------------------------------------------------------------------------------------- |\n| 0XFFDB  | 2            | DQT marker                                                                                                                               |\n| Lq      | 2            | Quantization table length， not including 0XFF， 0XDB                                                                                    |\n| (Pq,Tq) | 1            | Quantization table element precision <br>Pq=0, 8 bits for Q0~Qn, Pq=1, 16 bits for Qt; <br>Tq: Quantization table destination identifier |\n| Q0      | 1 or 2       | Quantization table element‐Specifies the kth element out of 64 elements                                                                  |\n| Q1      | 1 or 2       | Quantization table element‐Specifies the kth element out of 64 elements                                                                  |\n| Qn      | 1 or 2       | Quantization table element‐Specifies the kth element out of 64 elements                                                                  |\n\n#### 哈夫曼表规范语法\n\n哈夫曼表标记 (DHT) 段定义了一个或多个霍夫曼表规范。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102202912.webp)\n\n| 标记    | 长度（字节） | 解释                                                                                                                                                                                                                           |\n| ------- | ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 0xFFC4  | 1            | DHT marker                                                                                                                                                                                                                     |\n| Ls      | 2            | Huffman table definition length, not including 0xFF, 0xC4                                                                                                                                                                      |\n| (Tc,Th) | 1            | TC: Table class – 0 = DC table or lossless table, 1 = AC table. <br>Th:Huffman table destination identifier <br>Th Specifies one of four possible destinations at the decoder into which the Huffman table shall be installed. |\n| L 1     | 1            | Number of Huffman codes of length i                                                                                                                                                                                            |\n| ⋯       | ⋯            |                                                                                                                                                                                                                                |\n| L 16    | 1            |                                                                                                                                                                                                                                |\n| V 1     | 1            | Value associated with each Huffman code, t=L1+L2+…L16                                                                                                                                                                          |\n| ...     | ...          |                                                                                                                                                                                                                                |\n| V t     | 1            |                                                                                                                                                                                                                                |\n\n## JPEG 文件\n\n> [!hint] 考点 30：JPEG 文件交换格式（JFIF）\n\n到目前为止，我们描述的文件格式被称为「JPEG 交换格式 (JIF)」。然而，这种“纯粹”的文件格式很少使用，主要是因为，这个标准的某些缺点:\n\n- 色彩空间定义\n- 组件子采样注册\n- 像素宽高比定义\n\nJPEG 文件交换格式（JFIF）解决了 JIF 的局限性。JFIF 文件中的图像数据使用 JPEG 标准中的技术进行压缩，因此 JFIF 有时被称为“JPEG/JFIF”。\n\nJPEG 文件交换格式是一种最小的文件格式，它使 JPEG 比特流能够在各种平台和应用程序之间进行交换。\n\n此简化格式的唯一目的是允许交换 JPEG 压缩图像。\n\n尽管 JPEG 文件交换格式 (JFIF) 的语法支持任何 JPEG 过程，但强烈建议将 JPEG 基线过程用于文件交换，这确保了与所有支持 JPEG 的应用程序的最大兼容性。\n\n**JPEG 文件交换格式与标准的 JPEG 交换格式完全兼容。唯一的额外要求是必须在 SOI 标记之后出现 APP0 标记。**\n\nJFIF 文件使用 APP0 标记段，并在帧头中限制某些参数，定义如下：\n\n- 长度、标识符、版本、单位、X 密度、Y 密度、X 缩略图、Y 缩略图、(RGB)n\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203032.webp)\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203038.webp)\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203043.webp)\n\n## 编码过程\n\n编码图像的流程\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203054.webp)\n\n编码帧的流程\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203101.webp)\n\n编码扫描的流程\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203117.webp)\n\n编码重启间隔的流程\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203125.webp)\n\n对最小编码单元进行编码的过程\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203134.webp)\n\n使用哈夫曼编码 AC 系数的过程\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203141.webp)\n\n非零 AC 系数的顺序编码过程\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203149.webp)\n\n## 解码过程\n\n解码压缩图像数据的过程\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203157.webp)\n\n解码一帧的过程\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203206.webp)\n\n解码扫描的过程：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203212.webp)\n\n解码重启间隙的过程：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203223.webp)\n\n解码 MCU 的过程：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231102203230.webp)\n\n> [!example] 习题助记\n> 1. What are markers used for in JIF?\n> 标识压缩数据格式中不同的结构部分\n> 2. Describe the full name of SOI,EOI,SOF,SOS\n> Start of image marker,End of image marker,Start of Frame marker,Start of Scan marker\n> 3. What is JPEG file interchange format used for?\n> 定义分辨率颜色等相关参数，为了能在不同应用和平台转换\n> 4. An image contains ___ frame in the cases of sequential and progressive coding processes.\n> one frame\n\n\n# 视频编码\n\n## 视频编码标准的制定\n\n> [!hint] 考点 2：视频压缩标准及应用\n\n### ITU-T 国际电信联盟 - 电信\n\n#### H.261\n\n* 第一个视频压缩标准（1990 年）\n* 专为综合业务数字网络（ISDN）视频会议设计的。\n* 支持 352X288（CIF）和 176X144（QCIF）的分辨率色度分辨率子采样为 4：2：0\n* 由于视频电话需要，在仅需较低的复杂性同时进行实时编码和解码。\n* 由于它专注于对延迟敏感的双向视频，<span style=\"color:#ff0000\">H.261 仅允许 I 和 P 帧，不允许 B 帧</span>。（B 帧需要等待后帧解码，存在时延）\n* **基于整数像素精度**进行运动估计运算和搜索范围为 +/- 15 像素。\n* 将基于 8x8 块的 DCT 应用于残差。然后在所有 AC 系数上进行**固定**的线性量化用**固定**的量化步长线性量化。\n* 首先对量化系数进行游程编码，然后可变长度（霍夫曼）编码。\n* 将简单的 2D FIR 滤波器应用于块边缘减少块效应。\n\n#### H.263\n\n* 用于公共交换电话网络（PSTN）可视电话\n* H.263（1996）是在 H.261 之后开发的，专注于更好**更低比特率**的视频质量。\n* 通过普通电话调制解调器以 33.6 Kbps 的速度传输视频，是其重要的目标之一。\n* 目标分辨率为 SQCIF（128x96）至 CIF（352X288）\n* 与 H.261 类似，但运动矢量略有不同。其**允许为½（“半像素”）的倍数**。使用 16x16 宏块中的**四个 8x8 像素块的四个运动矢量**，而不是宏块的单个运动矢量。\n* PB 帧：P 帧和 B 帧（这是从当前编码的 P 帧和后一个先前编码的 P 帧预测而来的）编码为一个单元。\n* 使用基于内容的算术编码模式代替霍夫曼编码，对于相同的图像质量，比特率略有降低。\n* H.263 通常在相同的比特率下实现大约 3 dB 的改善，或者在相同的 SNR（质量）下将比特率减少 50％。\n\n#### H.264：Advanced video coding\n\n详看 🍂H.264-MPEG4-AVC（高级视频编码） 小节。\n\n### ISO 国际标准化组织\n\nMPEG 成立于 1988 年，旨在开发在数字存储媒体上移动图片（视频）和关联的音频（光盘）的压缩标准。\n\n#### MPEG-1\n\n* ISO 制定的第一个视频压缩算法 (1991)\n* 可在获得与 VHS 品质相似的视频和音频\n* 比特率 1.5Mb/s\n* 与典型的视频电话相比，支持电影内容中较重的运动（heavier motion）需要更多的计算资源\n* 允许更长的延迟，允许 B 帧\n* 使用自适应感知量化。单独的量化比例因子专门应用于每个频点以优化人类的视觉感知。\n\n#### MPEG-2\n\n* 是 MPEG-1 的扩展，支持更高的比特率，更高分辨率和**隔行**扫描图片（用于电视）。（先打奇数行再偶数行）\n* 是为数字电视开发的比特率较高的应用：DTV，HDTV 和 DVD\n* 由许多部分组成，包括视频，音频，系统，兼容性测试。\n* 在 30：1 左右的压缩率下表现良好。 MPEG-2 以 4~8 Mbps 达到的质量对于消费者视频应用程序是可接受的。\n\n##### MPEG-2 Profiles and Levels\n\n这些标准旨在解决大量不同的应用程序需要许多不同的工具或功能的问题。典型的应用程序可能仅使用 MPEG 功能的一小部分。 为了实现更有效的实现，MPEG 将功能的子集适当的组合在一起，并定义了一组配置文件和级别。\n\n* 档次（profile）定义了视频语法和功能的子集。\n* 在档次（profile）中，级别定义了某些参数的最大范围，例如分辨率，帧速率，比特率和缓冲区大小（下限）。\n\n两个广泛使用的配置文件/级别是：\n\n* Main Level at Main Profile (MP@ML)：用于压缩 DVD 上使用的常规电视（例如 NTSC 或 PAL）和标清数字电视（SD DTV）\n* Main Profile at High Level (MP@HL)：用于压缩高清电视（HDTV）（1080p）\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109211917.webp)\n\n#### MPEG-4\n\nMPEG-4 与 MPEG-1 和 MPEG-2 完全不同，它的主要目标是提供新功能，而不仅仅是提供更好的压缩。将提供增强的功能：\n\n* 支持基于对象或基于内容的表示。这使得可以对视频场景中的不同视频对象进行单独编码，并且允许对视频中的不同对象进行单独访问和操作。请注意，MPEG-4 没有指定如何识别或分割视频中的对象。但是，如果单个对象已知，MPEG-4 提供了一种压缩这些对象的方法。\n* 支持对合成或计算机生成的视频对象进行压缩，以及在单个视频中集成自然对象和合成对象。此外，MPEG-4 支持通过差错恢复（例如 Internet 和 3G 无线系统）进行防错通信。因此，MPEG-4 同时支持基于对象和基于帧的视频编码。\n* 与场景的交互\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/20231109213856.webp)\n\nDemuxer 用于解析和解码视频和音频对象。场景描述信息描述了解码对象如何组成和渲染以形成最终场景。\n\n与 MPEG-2 和 MPEG-4 简单档次相比，H.264 / AVC 在压缩效率方面取得了重大突破，通常可实现约 2 倍的压缩。\n\n为了满足从低质量，低分辨率监视摄像机到高清电视广播和 DVD 的各种应用，MPEG-4 第 2 部分定义了大约 21 个档次（profiles）：Simple, Advanced Simple, Main, Core, Advanced Coding Efficiency, Advanced Real Time Simple 等。最常用的档次是 Advanced Simple 和 Simple（都是 Advanced Simple 的子集）。\n\n### 当前视频压缩标准\n\n| 年份 | 标准                | 发布机构                                  | 🔺常用于                                                          |\n| ---- | ------------------- | ----------------------------------------- | --------------------------------------------------------------- |\n| 1990 | H.261               | ITU-T                                     |ISDN 上的视频会议, 可视电话                               |\n| 1993 | MPEG-1 part 2       | ISO, IEC                                  | Video-CD 数字存储媒介（CD-ROM）上的视频                                                       |\n| 1995 | H.262/MPEG-2 Part 2 | ISO, IEC, ITU-T                           | DVD Video, Blu-ray, Digital Video Broadcasting, 数字电视                 |\n| 1996 | H.263               | ITU-T                                     | 视频会议, PSTN 上的可视电话, Video on Mobile Phones (3GP) |\n| 1999 | MPEG-4 Part 2       | ISO, IEC                                  | Video on Internet (DivX, Xvid ...), 基于对象的编码, 合成内容, 集成                           |\n| 2003 | H.264/MPEG-4 AVC    | Sony, Panosonic, Samsung, ISO, IEC, ITU-T | Blu-ray,HD DVD Digital Video Broadcasting, 无线, 因特网, 电影, 视频电话, 视频会议                       |\n\n## 标准化的范围\n\n> [!hint] 考点 31：视频编码和解码架构：normative, informative\n\n视频压缩系统由一个编码器，压缩比特流和解码器组成。\n\n标准限定的范围有限，是为了在确保互操作性同时尽可能实现差异化：\n\n* <span style=\"color:#ff0000\">标准指定比特流语法和解码过程</span>\n* 标准不限定编码过程或具体解码器的实现。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109202142.webp)\n\n> [!hint] 考点 32：MPEG 编码结构、MPEG 语法\n\n## MPEG 编码结构\n\nMPEG 以单元层次结构编码视频，这些单元称为**序列、图像组 (GOPs)、图像、切片、宏块和 DCT 块**：\n\n* 对 16x16 像素的宏块执行 MC 预测（运动补偿预测）\n* 这些宏块组成一个切片\n* 一帧中的所有切片均包含一张图片，连续的图片形成一个 GOP。\n* 所有 GOP 形成一个序列。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109203121.webp)\n\n### GOP\n\n视频帧被分组为编码单元，称为图像组 (GOPs)。\n\nGOPs 具有重新初始化编码中使用的时间预测的属性。\n\n**GOP 的第一帧总是以帧内模式编码，称为 I 帧**\n\n![image.png|525](https://cdn.gallery.uuanqin.top/img/20231109203351.webp)\n\n用 I 帧通过正向预测或双向预测得到 P 帧或 B 帧。\n\nGOP 长度通常在 9 到 15 帧之间。\n\n**每个 B 帧都取决于过去帧和一个将来帧，这意味着将来帧必须是在当前 B 帧可以被解/编码之前被解/编码。**\n\n**编码后的视频数据以编码顺序放置在数据流中，而不是显示顺序**。\n\n### I P B 帧编码属性\n\nI，P 和 B 帧的编码通常需要不同数据量。\n\n- I 帧需要大量数据，因为它们的编码与其他框架无关。\n- <span style=\"color:#ff0000\">P 和 B 帧通常需要的数据少于 I 帧（时间预测）</span>。\n- B 帧的编码数据通常少于 P 帧，因为：\n\t- 同时使用前后参考帧，可以形成更好的预测。\n\t- 以较低的质量编码 B 帧通常不会带来负面影响，B 帧的编码质量较低不会影响序列中的其他帧。\n\n### 宏块\n\nMPEG 使用 16x16 像素 MC 预测来减少时间视频中固有的冗余。\n\n在 I 帧中，必须以帧内模式对每个宏块进行编码。\n\n在 P 帧中，每个宏块都可以使用前向编码预测或帧内模式。\n\n在 B 帧中，每个宏块都可以前向编码，后向或双向预测或帧内模式。\n\n为每个前向和后向预测指定一个 MV（motion vector）宏块，同时为每个双向指定两个 MV 预测宏块。\n\n### DCT 块\n\n每个宏块（intra or inter）被划分为 8x8 像素块。\n\n为每个块计算 2D-DCT。 DCT 系数被单独量化。\n\n量化系数经过 zigzag 扫描，游程长度进行编码，结果对（游程长度，幅度组成的一对）经过霍夫曼编码并输出至比特流。\n\n还有一些块间和宏块间处理。\n\n### Slices\n\nMPEG 编码要求每个宏块都属于一个切片，所有切片都构成整个图片。\n\n<span style=\"color:#ff0000\">切片是一系列任意数量的连续宏块：</span>\n\n* <span style=\"color:#ff0000\">每个切片至少应包含一个宏块。</span>\n* <span style=\"color:#ff0000\">切片不得重叠。</span>\n* <span style=\"color:#ff0000\">切片的位置可能因图片而异。</span>\n\n这提供了一种用于预测宏块中某些参数的结构，同时保持一定程度的错误弹性。\n\n在 I 帧中，DCT 系数的 DC 值在一个**片（Slice）内**从块到块被差分编码。（JPEG 是整幅图做差分编码）\n\n在 P 和 B 帧中，运动矢量在片内从宏块到宏块进行差分编码。\n\n如果位流中发生错误，则切片中的剩余数据将丢失。 但是，解码器可以通过搜索下一个切片起始码，重新同步位流并继续解码过程来恢复。\n\n### MPEG Syntax\n\n**序列头**指定图片的高度/宽度，以及样本宽高比，帧速率，比特率和缓冲区大小序列。 如果未使用默认的量化器，则还包括量化矩阵。\n\n**GOP 头**指定时间代码并指示 GOP 是否打开或关闭。\n\n**图像头**指定**时间参考参数**，图片类型（I，P 或 B）以及缓冲区充满度。 如果是使用时域预测，它还描述了运动矢量精度（完整或半像素）和运动矢量范围。\n\n**切片头**指定了切片开始的宏块行，以及 DCT 系数的初始量化器比例因子。\n\n**宏块头**包含一个标志，**指示是内部还是帧间编码**。\n\n对于帧间编码，它包含编码的运动矢量，这个运动矢量会基于相对于先前的运动矢量进行差分编码。\n\n可以在宏块级别上调整量化器比例因子。1bit 用于指定是否调整因子。\n\n序列、GOP、图片、切片的标头以这些代码开头：\n\n* 例如，通过简单地检查编码数据流而无需解析或解码数据，就能找到第二个 GOP 中第二张图片的第二切片编码的数据\n* 允许对压缩比特流的随机访问\n* 提高容错能力\n\n> [!Example] 习题助记\n> MPEG-1 is used in **VCD** ，MPEG-2 is used in **DVD**.\n> MP3 is a lossy compression method.\n> H.261、H.263 主要用于可视电话\n> The bit stream synatax is specified in MPEG video coding standard.\n> The encoding process is **NOT** specified in MPEG coding standard.\n> MPEG-1 allows B frames.\n> P frames require **LESS** data than I frames because of temporal prediction.\n> In video coding the position of slices may change from picture to picture.\n> In video coding **the Picture header** specifiles the temporal reference parameter\n\n# 🍂H.264-MPEG4-AVC（高级视频编码）\n\n> [!hint] 考点 33：H.264 编码结构、基线档次、主档次、向量块大小、新特性、视频编码层级和网络抽象层\n\n在过去十年中，视频编码领域最重要的发展之一是由 ITU 和 ISO/IEC 的联合视频团队（Joint Video Team，JVT）定义的 H.264/MPEG-4 AVC 标准。ITU 从 1997 年开始使用新的编码工具开展了 H.26L（for long term）的工作。结果令人印象深刻，因此 ISO/IEC 决定与 ITU 合作，采用一个共同的标准，成立了联合视频团队。ITU 于 2003 年 5 月批准了新的 H.264 标准。ISO 于 2003 年 10 月批准了该标准，命名为 MPEG-4 第 10 部分，即高级视频编码（AVC）。\n\n块框图和特性：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110224654.webp)\n\nH.264/AVC 在压缩效率方面取得了重大突破，通常相对于 MPEG-2 和 MPEG-4 简单档次实现了大约 2 倍的压缩比。\n\n在 H.264 标准化时，它支持三种档次（profiles）：基线档次、主要档次和扩展档次。\n\n- 后来，一项名为保真度范围扩展（FRExt）的修正引入了四个额外的配置，称为高级档次。\n- 最初，基本档次和主档次引起了最大的关注。\n\n基本档次需要较少的计算和系统内存，并且针对低延迟进行了优化：\n\n- <span style=\"color:#ff0000\">基本档次不包括 B 帧（由于固有时延）</span>或 **CABAC（由于计算复杂性**）。\n- 基本档次非常适合视频电话应用以及其他需要成本效益的实时编码应用。\n\n主档次旨在为广播和内容存储应用提供尽可能高的视频质量和最低的比特率。\n\n标准编解码器中的关键压缩特性：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110231714.webp)\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110231651.webp)\n\n应用趋势：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110232210.webp)\n\n## H.264/AVC 的目标和应用\n\n视频编码专家组（VCEG），ITU-T SG16\n\n- H.26L 项目（1998 年初），最初的重点是视频会议和电话通信。\n- 目标是将编码效率提高一倍，超过任何其他现有的视频编码标准。\n应用领域：\n- 有线、卫星、地面数字视频广播\n- 媒体存储、DVD、蓝光 DVD 等\n- 互联网流媒体、视频电话在 3G/4G 网络上\n- 视频会议\n- 数字视频监控、数字电影等\n\n## 与其他标准的关系\n\n在 ITU-T 和 MPEG 中都将批准相同的设计。\n\n在 ITU-T 中，这将是一个新的独立标准：\n\n- ITU-T 推荐标准 H.264。\n- ITU-T 系统（H.32x）将进行修改以支持它。\n在 MPEG 中，这将是 MPEG-4 套件中的一个新的“部分”：\n- 与之前的 MPEG-4 视觉编解码器设计分开。\n- 新的第 10 部分称为“高级视频编码”（类似于 MPEG-2 中的“AAC”位置，作为独立的编解码器）。\n与之前的标准不兼容（包括之前的 MPEG-4 视觉规范 - 核心技术不同）。\nMPEG-4 系统/文件格式正在进行修改以支持它。\nIETF 正在研究 RTP 有效载荷的封装。\n\n## 新功能和共同元素\n\n视频编码层基于混合视频编码（hybrid video coding），与其他标准在理念上类似，但存在重要的区别。\n\n新的关键功能包括：\n\n- 增强的运动补偿\n- 用于变换编码的小块\n- 改进的去块滤波器\n- 增强的熵编码\n\n与之前的标准相比，H.264/AVC 具有以下共同元素：\n\n- 16x16 宏块\n- 块运动位移\n- 块变换\n- 标量量化\n- I、P 和 B 帧类型\n相对于之前的标准，在相同感知质量下，H.264/AVC 可以实现约 50% 的比特率节省。\n\n## 档次\n\n受限基准档次（Constrained Baseline Profile，CBP）：\n\n- 主要用于视频会议和移动应用等低成本应用，于 2009 年开发。\n- 对应于基准档次、主档次和高级档次之间共同支持的功能子集。\n\n基准档次（Baseline Profile，BP）：\n\n- 主要用于需要额外数据丢失鲁棒性的低成本应用，如视频会议和移动应用。\n- 包括所有受限基准档次支持的功能，以及用于提高鲁棒性的额外功能。\n- 所有受限基准档次的比特流也被视为基准档次的比特流，因为这两个档次共享相同的档次标识码值。\n\n主档次（Main Profile，MP）：\n\n- 用于使用 MPEG-4 格式的标准定义数字电视广播，符合 DVB 标准定义。\n\n扩展档次（Extended Profile，XP）：\n\n- 用于流媒体视频档次。\n- 具有相对较高的压缩能力和一些额外的技巧，以提高对数据丢失和服务器流切换的鲁棒性。\n\n高级档次（High Profile，HiP）：\n\n- 于 2004 年开发，用于广播和光盘存储应用，特别适用于高清电视应用（例如，已被蓝光光盘存储格式和 DVB 高清电视广播服务采用）。\n\n高 10 档次（High 10 Profile，Hi10P）：\n\n- 在高级档次的基础上增加了对每个样本解码图像精度高达 10 位的支持。\n\n高 4:2:2 档次（High 4:2:2 Profile，Hi422P）：\n\n- 针对使用隔行视频的专业应用。\n- 在高 10 档次的基础上增加了对 4:2:2 色度子采样格式的支持，同时使用高达 10 位的解码图像精度。\n\n高 4:4:4 预测档次（High 4:4:4 Predictive Profile，Hi444PP）：\n\n- 在高 4:2:2 档次的基础上增加了对 4:4:4 色度采样的支持，每个样本的解码图像精度高达 14 位。\n- 此外，还支持高效的无损区域编码和将每个图像编码为三个独立的色彩平面。\n\n### 基准档次\n\n特点包括：\n\n- <span style=\"color:#ff0000\"> I 和 P 帧类型（不包括 B 帧，因为时延较大）</span>\n- 循环内去块滤波器\n- 1/4 像素级的运动补偿\n- 基于树状结构的运动分割，最小块大小为 4x4\n- 基于 VLC 的熵编码\n\n一些增强的错误容忍特性包括：\n\n- 灵活的宏块排序/任意切片排序\n- 冗余切片\n- 主要用于视频会议和无线应用\n\n### 主档次\n\n主档次的特点包括：\n\n- 所有基准档次的特点，除了增强的错误容忍特性\n- <span style=\"color:#ff0000\">B 帧类型</span>\n- <span style=\"color:#ff0000\">CABAC（上下文自适应二进制算术编码）</span>\n- 宏块级别的帧/场切换\n- 对 B 帧和 P 帧预测进行自适应加权\n- 支持隔行图像扫描\n\n主档次主要用于广播应用。\n\n## 基本宏块编码结构\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110233820.webp)\n\n## 运动补偿\n\n运动补偿的特点包括：\n\n- 不同的块大小和形状用于运动补偿\n- 1/4 像素精度\n  - 6 点滤波器用于 1/2 像素精度\n  - 简化滤波器用于 1/4 像素精度\n- 多个参考帧\n- 时间反转运动和广义 B 帧\n- B 帧预测加权\n\n## H.264/AVC 编码数据格式\n\nH.264 区分视频编码层（VCL）和网络抽象层（NAL）。\n\n编码过程的输出是 VCL 数据（表示编码视频数据的一系列比特），在传输或存储之前将其映射到 NAL 单元。\n\n分别指定 VCL 和 NAL 的目的是区分编码特定的功能（在 VCL 中）和传输特定的功能。\n\n每个 NAL 单元包含原始字节序列负载（RBSP），即对应于编码视频数据的一组数据和头部信息。\n\n编码的视频序列由一系列 NAL 单元表示，可以通过基于数据包的网络、比特流传输链路或存储在文件中进行传输。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110233942.webp)\n\n![image.png|375](https://cdn.gallery.uuanqin.top/img/20231110234417.webp)\n\n![image.png|300](https://cdn.gallery.uuanqin.top/img/20231110234420.webp)\n\nNAL 单元的第一个字节是一个头部，包含有关该包类型的信息。\n\n```c\nubyte forbidden_bit: 1; // set to 0\nubyte nal_ref_idc:2; // the level of priority\nubyte nal_unit_type:5; // NAL type\n```\n\n|Type|Defintion|\n|---|---|\n|0|Undefined|\n|1|Slice layer without partitioning non <span style=\"color:#ff0000\">IDR（instaneous decoding refresh 立即编码刷新）</span>|\n|2|Slice data partition A layer <span style=\"color:#ff0000\">（Partition A：片头信息，片里面宏块头信息，最重要）</span>|\n|3|Slice data partition B layer <span style=\"color:#ff0000\">（Partition B：帧内编码的数据）</span>|\n|4|Slice data partition C layer <span style=\"color:#ff0000\">（Partition C：帧间编码的数据）</span>|\n|5|Slice layer without partitioning IDR|\n|6|Additional information (SEI) 时间信息|\n|7|Sequence parameter set 序列参数集（序列编号、帧数、参考帧数目、图像大小、场模式）|\n|8|Picture parameter set 图像参数集（图像编号、熵编码方式、条带数目、初始量化步长）|\n|9|Access unit delimiter|\n|10|End of sequence|\n|11|End of stream|\n|12|Filler data|\n|13..23|Reserved|\n|24..31|Undefined|\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110235130.webp)\n\n## 参考图片\n\nH.264 编码器可以使用一到两个先前编码的图片作为参考，用于对每个帧间编码的宏块或宏块分区进行运动补偿预测。\n\n这使得编码器可以从比先前编码的图片更广泛的图片集中搜索当前宏块分区的最佳匹配。\n\n编码器和解码器各自维护一个或两个参考图片列表，其中包含先前已编码和解码的图片（出现在当前图片之前和/或之后的显示顺序中）。\n\n- P 帧中的帧间编码的宏块和宏块分区是从单个列表（列表 0）中的图片进行预测的。\n- B 帧中的帧间编码的宏块和宏块分区可以从两个列表（列表 0 和列表 1）中的图片进行预测。\n\n## Slices\n\n一个视频图像被编码为一个或多个切片，每个切片包含从 1 个宏块到图像中的总宏块数的整数个宏块（每个图像一个切片）。\n\n切片中的宏块数不需要在图像内是恒定的。编码切片之间的相互依赖性很小，这有助于限制错误的传播。\n\n符合基准配置的比特流包含编码的 I 和/或 P 切片：\n\n- I 切片只包含帧内编码的宏块（从同一切片中先前编码的样本进行预测）；\n- P 切片可以包含帧间编码的宏块（从先前编码的图片中的样本进行预测）、帧内编码的宏块或跳过的宏块。\n编码图像可以由不同类型的切片组成：\n- 基准档次的编码图像可以包含 I 和 P 切片的混合；\n- 主档次或扩展档次的图像可以包含 I、P 和 B 切片的混合。\n切片数据包括切片头、一系列编码的宏块和/或跳过的宏块的指示。\n切片头定义了切片类型和切片所属的编码图像，并可能包含与参考图片管理相关的指令。\n\n> [!hint] 考点 34：帧内预测、运动向量预测、帧间预测\n\n> [!hint] 考点 35：H.264 的 DCT 变换\n\n> [!hint] 考点 36：熵编码：指数格罗姆编码和 CAVLC\n\n## CAVLC\n\n这是用于编码变换系数的残差和之字形有序块的方法。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231111134717.webp)\n\nCAVLC（Context-Adaptive Variable Length Coding）旨在利用量化的 4×4 块的几个特点：\n\n* 在预测、变换和量化之后，块通常是稀疏的（主要包含零）。\n* 在之字形扫描后，最高的非零系数通常是 +/-1 的序列。\n* 相邻块中的非零系数的数量是相关的。\n* 非零系数的级别（幅度）在之字形扫描开始时往往较高，并且随着频率增高而降低。\n\n对一块变换系数进行 CAVLC 编码的过程如下：\n\n1. 编码系数的数量和尾部的 1。\n2. 编码每个尾部 1 的符号。\n3. 编码剩余非零系数的级别。\n4. 编码最后一个系数之前的零的总数。\n5. 编码每个零的连续出现次数。\n1. 编码系数的数量和尾部的 1\n第一步是编码非零系数的总数（NumCoef）和尾部的 1（T1s）。\nNumCoef 的取值范围可以是从 0（4x4 块中没有系数）到 16（16 个非零系数）。\nT1s 的取值范围可以是从 0 到 3。\n如果尾部的 +/- 1 的个数超过 3 个，只有最后 3 个被视为“特殊情况”，其他的被编码为普通系数。\n\n例如：4x4 块\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231111135021.webp)\n\nThe Num-Coef = 7, and T1s = 3\n\n用于编码 Num_Coeff 和 T1 的四个表格分别是 Num-VLC0、Num-VLC1、Num-VLC2 和 FLC。\n\nNum-VLC0：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231111135118.webp)\n\n表格的选择取决于先前编码块中，上方和左方的非零系数的数量 NU 和 NL。\n\n参数 N 的计算如下：\n\n* 如果块 U 和 L 都可用（即在同一个编码片中），N = (NU + NL) / 2。\n* 如果只有块 U 可用，N = NU。\n* 如果只有块 L 可用，N = NL。\n* 如果两者都不可用，N = 0。\n\n表格的选择基于以下方式中的 N 值：\n\n| N                    | Selected Table              |\n| -------------------- | --------------------------- |\n| 0,1    | Num-VLC0 |\n| 2,3                  |   Num-VLC1                 |\n| 4,5,6,7                 |       Num-VLC2               |\n|    8 or above                  |    FLC               |\n\nFLC 的形式如下：xxxxyy（即 6 位）\n\n其中 xxxx 和 yy 分别表示 Num_Coeff 和 T1。\n\n2. 对每个 T1 编码其尾随 1 的符号\n对于每个 T1，一个比特位编码其符号（0 表示正，1 表示负）。\n这些符号按照逆序编码，从最高频率的 T1 开始。\n\n3. 对剩余的非零系数编码其级别（符号和大小）\n 块中每个剩余的非零系数的级别（符号和大小）按照逆序进行编码。\n 选择用于编码每个级别的 VLC 表根据每个连续编码级别的大小进行自适应调整（上下文自适应）。\n 有 7 个可供选择的 VLC 表，从 Level_VLC0 到 Level_VLC6。\n Level_VLC0 偏向较低的大小，Level_VLC1 偏向稍高的大小，依此类推。\n 初始化表格为 Level_VLC0（除非非零系数超过 10 个且尾随 1 少于 3 个，在这种情况下从 Level_VLC1 开始）。\n 编码最高频率的非零系数。\n 如果该系数的大小大于预定义的阈值，则切换到下一个 VLC 表。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231111135814.webp)\n\n 级别的选择与最近编码的系数的大小相匹配。阈值列在表中；\n\n 第一个阈值为零，这意味着在编码第一个系数级别之后，表总是递增。\n\n4. 编码最后一个系数之前的零的总数。\n\n以下是用于编码最后一个系数之前的零的总数（TotZeros）的表格。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231111135924.webp)\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231111135948.webp)\n\n5. 编码每个零的连续出现次数\n在每个非零系数之前的零的数量（run_before）按照逆序进行编码。对于每个非零系数，除了以下两种情况外，都会编码一个 run_before 参数：\n(a) 如果没有更多的零需要编码；\n(b) 对于最后（最低频率）的非零系数，不需要编码 run_before。\n\n每个零的连续出现次数的 VLC 表的选择取决于：\n\n(a) 尚未编码的零的数量（ZerosLeft）；\n\n(b) run_before。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231111140035.webp)\n\n例子：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231111140120.webp)\n\n考虑以下 4×4 帧间残差块\n\n块的 Zigzag 重新排序如下所示：\n\n0,3,0,1,-1,-1,0,1,0,0,0,0,0,0,0,0\n\n因此，NumCoeff=5，TotZero=3，T1s=3\n\n假设 N=1\n\n编码：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231111140327.webp)\n\n解码：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231111140403.webp)\n\n# 心理声学模型\n\n> [!Hint] 考点 19：心理声学模型：频域掩蔽、时域掩蔽、听觉阈值、SMR、关键带宽、巴克刻度、感知熵\n\n## 声压等级 Sound Pressure Levels\n\n声音以压力波的形式到达人耳。声压 $p$ 在 $[10^-5,10^2]$ Pa 范围之间变化。\n\n声压等级 SPL，单位 dB：\n\n$$\n\nSPL= 10 \\log_{10}{\\left( \\frac{p}{p_{0}} \\right)^2}, p_{0}=20\\mu Pa\n\n$$\n\np0 为音频在 2kHz 左右的听觉阈值处的声压。\n\n声音也可以被声音强度 $I$ 来描述，表示声波单位面积的功率，与 p 的平方成正比。\n\n声压等级 SPL 也可以被定义为：\n\n$$\n\nSPL= 10 \\log_{10}{\\left( \\frac{I}{I_{0}} \\right)}, I_{0}=10^{-12}W/m^2\n\n$$\n\n$I_0$ 和 $p_0$ 对应。\n\n## 响度 Loudness\n\n响度等级定义为，在正面入射平面场下，被感知到的与所检测的声音一样响亮的 1 kHz 声音的级别。\n\n<span style=\"color:#ff0000\">响度取决于强度、持续时间、时间和频谱结构。</span>\n\n单位为 phon，描述了自变量为频率的函数中一条等响曲线。下图每条曲线指的是同样的响度。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231105213848.webp)\n\n在高音量水平下，以 phon 为单位测量的响度与以 dB 为单位测量的声强之间的差异减小。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231105214437.webp)\n\n## 掩蔽现象\n\n### 同时掩蔽（频域掩蔽）\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/20231105214640.webp)\n\n> 频域掩蔽是指在掩蔽声与被掩蔽声同时存在时产生的掩蔽效应，又称为同时掩蔽。在这种情况下，掩蔽声在掩蔽效应发生期间持续影响着被掩蔽声，形成一种强烈的掩蔽效应。通常情况下，频域中的一个强音会掩盖附近较弱的声音，而距离强音较近的弱音往往更容易被掩蔽；相反地，距离较远的弱音不太容易受到掩蔽效应的影响。图 3 解释了频域掩蔽现象，可以看到一个强信号掩蔽了两个接近其频率的弱信号，低于掩蔽域值的弱信号将无法听见，这导致听觉的安静阈值在掩蔽作用下提高。一般来说，低频声音更容易掩蔽高频声音。\n\n### 非同时掩蔽（时域掩蔽）\n\n> 时域掩蔽效应是在时域中相邻的声音之间互相的掩蔽效应，或被称为非同时掩蔽。时域掩蔽又分为超前掩蔽（pre-masking 或 backward masking）和滞后掩蔽（post-masking 或 forward masking）\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20231105214835.webp)\n\n虚线之间是掩蔽声音实际的存在时间。\n\n> 声音信号大多数时候是非稳态的瞬时信号，声压级随着时间变化很快，即强音后面跟着弱音，弱音后面又可能跟着强音。比较强的声音往往会掩蔽随后到来的较弱音。时域掩蔽又分为前掩蔽和后掩蔽。若掩蔽声音出现之前的一段时间内发生掩蔽效应，则称为前掩蔽；否则称为后掩蔽。前掩蔽效应要大于后掩蔽效应，前掩蔽发生作用的时间大于后掩蔽的时间。产生时域掩蔽的主要原因是人的大脑处理信息需要花费一定的时间，时域掩蔽也随着时间的推移很快衰减，是一种弱掩蔽效应。\n\n### 窄带噪声掩蔽\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/20231105214923.webp)\n\n信号掩蔽比（signal to mask ratio, SMR）。\n\n> 注意：信噪比是 SNR（Signal-to-noise ratio）\n\n> 窄带噪声通常是指带宽等于或者小于听觉临界频带的噪声。在图 1 中，以不同中心频率的窄带噪声作为掩蔽声时的听阈曲线，窄带噪声的中心频率分别为 0.25KHz，1KHz，4KHz，带宽分别为 0.1KHz、0.16KHz 和 0.7KHz，图上部水平虚线为掩蔽噪声声强级 60dB，中部实线表示刚好可听到的纯音声级，下部的虚线是听觉安静域值。从图中可以看出，被掩蔽纯音的频率偏离掩蔽噪声中心频率越大，掩蔽效应下降越快；因为是平滑以后的数据，故而不呈锯齿状。信号分量和掩蔽域值之间的声级差，称信号掩蔽比 (signal to mask ratio, SMR)，SMR 越大，掩蔽效果越小。上图中，0.25KHz，1KHz，4KHz 的最小 SMR 分别为 2、3 和 5dB，最小 SMR 是设计音频编码器很重要的参数。\n\n下图表示不同级别的掩蔽音调下，1kHz 窄带噪声掩蔽器的掩蔽阈值。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231105215907.webp)\n\n### 纯音掩蔽\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231105220158.webp)\n\n> 从图中可以看出，当被掩蔽音声级较低时，掩蔽域值向低频扩展（斜率较小）；而在声级较高时则相反。当掩蔽音声级为 90dB 时，掩蔽曲线峰值为 75dB，信号掩蔽比为 15dB。与噪声相比，纯音在掩蔽方面具有较大的信号掩蔽比（SMR），这意味着噪声比纯音具有更好的掩蔽效果。纯音的掩蔽效应基本符合以下几个规律：低频纯音容易掩蔽高频纯音，而高频纯音相对较难掩蔽低频纯音；频率相近的纯音容易互相掩蔽；当增加掩蔽声的声压级时，掩蔽阈值会提高，同时被掩蔽的频率范围也会扩展。\n\n### 临界带宽\n\n> 临界带宽指临界频带的带宽，即恰能产生变化的频率通带（频段）的宽度值。如响度测试中指恰能使声音响度产生变化的带宽值：当声音由一定频带组成时，它的响度变化呈现出下图所示的规律：带宽从很窄到越来越宽的过程中，声音整体响度开始时保持不变；当到达一个特定的带宽后，声音整体响度会随着带宽的变宽而变得更响。\n> ![image.png|275](https://cdn.gallery.uuanqin.top/img/20231106201541.webp)\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231106200607.webp)\n\nThreshold of a narrow band noise centered between two sinusoidal maskers at a level of 50dB as a function of the frequency separation between the two sinusoidals.\n\n### 掩蔽 Masking\n\n**掩蔽曲线的水平在接近遮蔽音调频率的地方最高**。\n\n当测试信号频率超过临界带宽远离遮蔽音调频率时，掩蔽曲线迅速下降。\n\n**掩蔽频率曲线的形状取决于掩蔽音调的频率和水平**。\n\n掩蔽曲线在很大程度上取决于掩蔽音调是音调还是噪声样式。\n\n## 音频编码的心理声学模型\n\n### 巴克刻度 Bark Scale\n\n> 巴克刻度是一种心理声学的尺度。\n>\n> 临界频带指的是由于耳蜗构造产生的听觉滤波器的频率带宽。听觉系统中，耳蜗起着频谱分析的作用，基底膜上特定位置点是对某一特征频率（Characteristic Frequency, CF）的响应最大，当声波偏离 CF 时，该点的响应减少，因此基底膜上每一点可等效成具有特定中心频率（CF）的带通滤波器，整个听觉系统可等效成一系列具有连续 CF 的、相互交叠的带通滤波器，称为“听觉滤波器”。临界频带就是听觉系统带通滤波功能的反映，听觉滤波器的带宽即为临界带宽。\n>\n> 概括地说，临界频带是声音频率带，在临界频带中第一个单音感知度会被第二单音的听觉掩蔽所干扰。根据相关的心理声学的研究，由于人耳的特殊结构，在同一个临界频带内信号容易发生掩蔽效应，即：主要信号容易被能量大并且频率接近的掩蔽信号所掩蔽。因此我们可以认为 Bark 域越近的信号越容易产生掩蔽效应。\n>\n> 声学研究中，人们使用听觉滤波器来模拟不同的临界频带。后来研究者发现人耳结构大致会对 24 个频率点产生共振，根据这个结论 Eberhard Zwicker 在 1961 年针对人耳特殊结构提出：信号在频带上也呈现出 24 个临界频带，分别从 1 到 24。这就是 Bark 域。\n>\n> 通常将人耳可听范围内的 20Hz～16kHz 分成 24 个临界频带，用临界频带级来表示临界频带的宽度，单位为巴克（Bark）：Bark=一个临界频带的宽度。当频率 f＜500Hz 时，1 Bark=f/100，临界带宽几乎恒定为 100Hz；当频率 f＞500Hz 时，1 Bark=4log(f/100)， 临界带宽随中心频率的升高而增加，约为中心频率的 20%。\n> ![image.png|500](https://cdn.gallery.uuanqin.top/img/20231106202935.webp)\n\n每个临界带宽（频率）对应于耳朵中基底膜上的固定距离。我们可以定义基底距离测量中的长度单位为一个临界带宽。\n\n### 掩蔽传播模型\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231106202329.webp)\n\nExcitation patterns for narrow-band noise signals centered at different frequencies and at a level of 60 dB.\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231106203058.webp)\n\nExcitation patterns for narrow-band noise signals centered at 1kHz and at different levels.\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231106203147.webp)\n\nThe curve in the diagram be expressed as a function of the Bark scale difference between the maskee and masker frequency.\n\n### 掩蔽曲线\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/20231106203258.webp)\n\n### MP3 的心理声学模型\n\n![image.png|379](https://cdn.gallery.uuanqin.top/img/20231106203341.webp)\n\n### 感知熵\n\n感知熵（Perceptual entropy）PE：在不引入任何感知差异的情况下，对信号进行编码所需的每个频率样本的平均比特数。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231126174641.webp)\n\n$n_b$ 是分区带 b 中的频率线数量，$energy_b$ 是分区 b 中的信号能量，$threshold_b$ 是掩蔽阈值。\n\nPE 可以用于确定 MDCT 或 attack 的块类型（PE>1800 比特表示短窗口）\n\n### Block Switching State Diagram\n\n![image.png|479](https://cdn.gallery.uuanqin.top/img/20231106203917.webp)\n\n## 本章参考的外部资源\n\n* [心理声学声掩蔽效应及应用 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/647121839)\n* [听力学小课堂 | 名词释义（15）：临界带宽、临界频带-苏州海卡缔听力技术有限公司 (heacad.cn)](http://www.heacad.cn/NewsDetail/3240260.html)\n* [声学感知刻度(mel scale、Bark scale、ERB)与声学特征提取(MFCC、BFCC、GFCC)_hz2erb_凌逆战的博客-CSDN博客](https://blog.csdn.net/qq_34218078/article/details/125145458)\n* [mp3是如何骗过你耳朵的？【差评君】_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1D5411S71K/?spm_id_from=333.999.0.0&vd_source=e03d48176855fc5349b27aef691f9cdb)\n\n# 🍂时频映射\n\n音频编码框图：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110202133.webp)\n\nT/F mapping: FFT, PQMF, MDCT\n\n傅里叶变换\n\n- 1822 年，傅里叶指出实时信号可以表示为具有不同频率的信号的总和。\n- 傅里叶变换定义如下：\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110202311.webp)\n\n- 傅里叶逆变换等于：\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110202315.webp)\n\n傅里叶级数\n\n- 对信号在有限时间间隔上的傅里叶变换可以用来在时域中重构原始信号。\n- 实际上，我们不需要完整的傅里叶变换数据来完全在时域中重构信号。\n- 我们只需要在离散频率点 f=k/T（其中 k 是整数）处的 X(f) 值。\n- 我们通过将窗口信号替换为在时间间隔从 -T/2 到 T/2 内相等的信号，但在该间隔之外周期性地重复，来进行数据压缩。\n对于生成的周期信号，我们可以定义傅里叶级数：\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110202643.webp)\n\n- $X[k]$ 只是时间限定信号在离散频率集合 $f=k/T$ 处的傅里叶变换。\n- 我们可以使用以下公式重构 x(t)：![image.png](https://cdn.gallery.uuanqin.top/img/20231110202703.webp)\n采样定理\n- 假设一个信号在频率范围从 -Fmax 到 Fmax 内具有频率内容。\n- 如果我们选择某个频率间隔 Fs≥2Fmax，并周期性地延续信号的频谱范围超出从 -Fs/2 到 Fs/2 的范围。\n- 从傅里叶级数的定义可以想象，这个频率周期函数只有离散时间分量 $x[n]$（如果我们定义 $T=1/F_s$，则有 $x[n]=x(nT)$）。\n\n在时域中对信号进行窗函数处理\n\n- 假设我们开始处理一个带限信号，并以采样频率 Fs≥2Fmax 对信号进行采样。\n- 假设我们想要使用有限的样本块进行计算，以便在等待信号完成之前开始进行计算。\n- 实现这个目标的一种方法是将原始的非有限信号 x(t) 与矩形窗函数相乘。\n\n矩形窗函数\n\n- 矩形窗函数 WR(t) 在 t=0 到 t=T 之间等于 1，在其他地方等于零。\n- 我们可能想知道这个时限信号是否仍然足够带限。\n- 时限信号的傅里叶变换等于原始信号的傅里叶变换与 WR(t) 的傅里叶变换 WR(f) 的卷积。\n- WR(f) 的傅里叶变换随着频率的增加下降得非常缓慢，这意味着时限信号的傅里叶变换很可能不再足够带限。\n- 如果我们使用这个窗函数，会发生混叠现象。\n\n正弦窗函数\n\n- 矩形窗函数的问题在于窗口边缘处的截断非常尖锐。\n- 尖锐的变化会导致高频成分。\n- 在时域中，更好的窗函数选择是在边缘处缓慢衰减，以避免尖锐的不连续性。\n- 正弦窗函数为 ws(t) = sin(πt/T)，0≤t≤T。当应用于离散时间信号的 N 个样本时，窗函数变为 ws[n] = sin(π(n+1/2)/N)，其中 n=0，...，N-1。\n- 从频谱中可以看出，主瓣比矩形窗函数更宽，但频率幅度下降得更快。\n\n汉宁窗函数\n\n- 汉宁窗函数在边缘处没有正弦窗函数那样的突变。\n- 汉宁窗函数为 wH(t) = 1/2(1-cos(2πt/T))，0≤t≤T。\n- 当应用于离散时间信号的 N 个样本时，窗函数变为 wH[n] = 1/2(1-cos[2π(n+1/2)/N])，其中 n=0，...，N-1。\n- 从频谱中可以看出，汉宁窗函数的衰减速度更快（有助于避免混叠），但其主瓣的宽度更大（对于准确的频率识别不利）。\n- 在窗函数设计中，我们面临权衡：低旁瓣能量（与杂散频率成分相关）和主瓣的宽度（窗函数的频率分辨率）。\n\n> [!hint] 考点 17：FFT 和复杂度\n\n快速傅里叶变换（FFT）\n\n- 直接计算 DFT 需要 $N^2$ 次复数乘法和加法运算。\n- 令人惊讶的是，FFT 允许我们在大约 $N×log_2N$ 次复数乘法/加法运算中完成完全相同的计算。\n- 以 N=1024 为例，FFT 只需要 DFT 所需计算时间的 1%。\n- 这个算法最早由高斯在 1880 年提出，后来由库利和图基在 1965 年重新发现。\n\n> [!hint] 考点 15：傅里叶变换、傅里叶级数、离散时间傅里叶变换、离散傅里叶变换\n\n|                    | 时域                   | 频域               |\n| ------------------ | ---------------------- | ------------------ |\n| 傅里叶变换         | 连续、无限             | 连续、无限         |\n| 傅里叶级数         | 有限信号周期延拓，连续 | 离散               |\n| 离散时间傅里叶变换 | 离散                   | 有限频谱的周期延拓 |\n| <span style=\"color:#ff0000\">离散傅里叶变换</span>     | 离散，有限             | 离散，有限                   |\n\n> [!hint] 考点 16：Windowing\n\n|        | 去混叠 | 频率选择性 |\n| ------ | ------ | ---------- |\n| 矩形窗 | 最差   | <span style=\"color:#ff0000\">最好</span>       |\n| 正弦窗 | 中等   | 中等       |\n| 汉宁窗 | 最好   | 最差           |\n\n> [!hint] 考点 18：MDCT：重叠相加技术、长窗、短窗\n\nMDCT\n\n重叠相加技术\n\n- PQMF 通常被视为时频银行（Time Frequency banks）。相应的编码称为子带编码。\n- 如果在音频编码过程中，将时域的数据样本映射到频域的数据样本，例如使用 FFT，这种音频编码方法称为变换编码。\n- 我们已经知道，在进行 DFT 之前，音频信号会进行窗函数处理以避免混叠效应，在解码器中，我们需要知道如何恢复原始信号。\n- 除了应用逆离散傅里叶变换之外，我们还需要将窗函数的影响从数据中去除。\n- 第一种方法是将逆 DFT 的输出除以窗函数系数。\n- 问题在于量化/反量化会在信号中引入小的误差。\n- 这些误差可能是听不到的，但是将逆 DFT 的输出除以窗函数可能会放大数据块边缘附近的误差，因为窗函数在该区域被设计为平滑地趋近于零。\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/20231110204338.webp)\n\n在编码器中，块输入信号是重叠的。在解码器中，我们重叠并相加输出信号。\n\n窗函数的设计使得在没有量化的情况下可以恢复原始信号。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110204716.webp)\n\n重叠量 $N-M ≤ N/2$\n\n在编码器中，每个连续的数据块从前一个数据块的起始位置后的 M 个样本开始，并包括 M 个新的数据样本。\n\n在解码器中：\n\n- 我们将逆变换和窗函数处理后的数据的前 M 个样本传输到输出缓冲区。\n- 将剩余的 N-M 个样本存储到存储缓冲区中。\n- 我们将前一个数据块存储缓冲区中的 N-M 个样本与当前数据块输出缓冲区的前 N-M 个样本相加。\n- 然后，我们将输出缓冲区的 M 个样本发送到解码器的输出流中。\n\n我们选择在解码器中进行窗函数处理的原因是：\n\n- 使逆变换块边缘附近的量化噪声较小；\n- 分析和合成阶段可以对称地进行。\n\n对于分析和合成窗函数 $wa[n]$ 和 $ws[n]$，有以下要求：\n\n- 在没有重叠的任何块区域中，![image.png](https://cdn.gallery.uuanqin.top/img/20231110204931.webp)\n- 在重叠区域中，![image.png](https://cdn.gallery.uuanqin.top/img/20231110204934.webp)\n该条件将一个块的窗函数的右侧与下一个块的窗函数的左侧相关联。i 是块的索引。\n\n窗的选择：\n\n如果分析和合成窗函数是相同的，我们有：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110205027.webp)\n\n一个满足这个条件的简单窗函数是：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110205032.webp)\n\n正弦窗口可能无法为特定应用提供频率分辨率与泄漏之间的权衡。实际上，我们可以通过一种归一化过程来修改任何窗口函数，以满足重叠相加条件。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110205646.webp)\n\n如果 w'(p) 具有控制其形状的参数，我们可以调整这些参数以调节归一化窗口以适应特定应用。归一化过程可以使用 Kaiser-Bessel 窗口作为核窗口，并在相邻块之间具有 50% 的重叠来进行，从而创建所谓的“Kaiser-Bessel 衍生”窗口。\n\n音频编码中的窗口考虑因素：\n\n- 在音频编码中，我们希望：\n  - 最大化频率分离。\n  - 最小化音频阻塞效应的影响。\n- 所选的窗口长度和形状与这两个属性有关。\n- 给定输入数据到滤波器组的块大小，窗口形状的选择决定了滤波器组的频谱分离程度：\n  - 正弦窗口比α=4 的 KBD 窗口具有更好的近端选择性（主瓣更窄）。\n  - 正弦窗口的侧瓣能量的抑制程度较差。\n根据输入音频信号的特性，正弦窗口或α=4 的 KBD 窗口可能为信号表示提供更好的频率分辨率：\n- 对于高度音调的信号，近端选择性比频率表示中的最终抑制更重要。\n- 如果信号的频率分量之间存在较大的分离，更高的最终抑制可以更好地利用信号分量的掩蔽效应。\n\n改进离散余弦变换（MDCT）：\n\n- 为了减少窗口化引起的阻塞效应，我们希望窗口边缘的过渡到零尽可能平缓。\n- 这意味着当我们设置大的重叠区域时，阻塞效应最小。\n- 然而，我们需要对每 M 个新的时间样本输入编码器的样本进行 N 个样本的变换数据的编码、传输/存储。\n- 在从冗余和无关信息去除中获得任何编码增益之前，我们将数据速率增加了 N/M 倍。\n- 为了解决这个问题，开发了 MDCT。\n- MDCT 是一种替代 DFT 的变换，允许块之间有 50% 的重叠，而不增加数据速率。\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110205908.webp)\n\n# MP3 的编码与解码\n\nNormative：必须的，必要的\n\nInformative：不必的\n\n> [!hint] 考点 22：MP3 的编解码器过程\n## MP3 编码器（Informative Elements）\n\n编码器概览：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109220436.webp)\n\n### 时频映射\n\nPQMF：在一个帧中，对 1152 个 PCM 音频样本进行滤波，使得每个子带包含 36 个子带样本。\n\n窗函数：在进行 MDCT 之前，对子带样本应用了四种不同的窗函数。\n\nMDCT：使用两种不同的 MDCT 块长度，一种是长块，包含 36 个样本，另一种是短块，包含 12 个样本。**短块适合变化较快的信号，长块适合平稳信号。**\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109220745.webp)\n\n### 块模式\n\n* 注意，短块长度是长块长度的 1/3。在短块模式下，三个短块替代一个长块，这样无论块类型如何，音频样本帧的 MDCT 样本数量保持不变。\n* 对于给定的音频样本帧，MDCT 可以全部具有相同的块长度（长块或短块），或者采用混合块模式。\n* 在混合块模式下，MDCT 对于两个较低频率子带使用长窗口，对于 30 个较高频率子带使用短窗口。这种模式在不牺牲较高频率的时间分辨率的情况下，为较低频率提供更好的频率分辨率。\n\n应用于 1152 个 PCM 样本的信号处理：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109221035.webp)\n\n### 去混叠\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109221050.webp)\n\n在量化之前，应用了一种抗混叠处理来消除在分析 PQMF 中引入的混叠，以减少传输的信息量。\n\n这种减少是通过一系列蝶形计算来实现的。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109221249.webp)\n\n### 非均匀量化\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109221321.webp)\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109221324.webp)\n\n<span style=\"color:#ff0000\">global_gain：全局量化步长。控制比特率。</span>\n\nscale_factor：子带因子控制噪声。\n\n在量化之前，将 MDCT 系数提升到 3/4 的幂，以在量化器值的范围内提供更一致的信噪比。\n\nscale_factor 用于调整量化噪声，以适应掩蔽阈值的不同频率轮廓。\n\n### 哈夫曼编码\n\n有序的频率线被分为三个不同的区域，分别称为“rzero”、“count1”和“big_value”区域。\n\n* 连零区域：从较高的频率开始，编码器将连续的全零值识别为一个区域，即“rzero”区域。“rzero”区域必须包含偶数个零值。\n* 数 1 区域：4 个一起编码。由一系列仅包含 -1、0 或 1 的值组成。这个区域的两个霍夫曼表每次编码 4 个值，因此值的数量必须是 4 的倍数。\n* big_value 区：2 个一起编码。涵盖了所有剩余的值，称为“big_values”区域。这些值与 30 个霍夫曼表一起进行编码。这个区域进一步分为三个子区域，每个子区域都有自己特定的霍夫曼表。\n\n### 比特分配（两层嵌套循环）\n\n外层循环：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109221944.webp)\n\n内层循环：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109221959.webp)\n\nQuantizer_change is the change of global_gain.\n\n> [!hint] 考点 20：MP3：比特流格式、MP3 采样频率、stereo/joint channel/dual channel/single channel、哈夫曼编码域，比特池\n\n### 比特流格式\n\n为了生成符合 MP3 标准的比特流，霍夫曼编码的频率线、辅助信息和帧头被组合成比特流。\n\n比特流被分割成帧，每帧表示 1152 个音频样本。\n\n帧头描述了编码音频所使用的比特率和采样频率。\n\n辅助信息告知使用的块类型、霍夫曼表、subband gain 和子带比例因子。\n\n### 比特池\n\n使用“比特储备池”方法来满足编码器对编码比特的时变需求。\n\n编码器只能从过去的帧中借用比特，而不能从未来的帧中借用比特。\n\nMPEG/Audio Layer 3 比特流使用一个 9 位指针，称为 main_data_begin，来表示当前处理帧的主数据的起始点。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109222321.webp)\n\n### Stereo Encoding\n\n联合立体声\n\n中侧立体声\n\n强度立体声\n\n## MP3 解码器（Normative Elements）\n\nMPEG 音频第三层解码概述：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109222737.webp)\n\n解码器主要由三个部分组成：“比特流解码”，“逆量化”和“频率到时间映射”。\n\n- 输入的编码比特流通过第一部分进行同步，并提取每帧的量化频率线和其他信息。\n- 接下来，量化的频率线进行反量化。\n- 最后，应用逆 MDCT 和合成 PQMF 来获得以 PCM 格式输出的信号。\n\nMP3 解码器的框图：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109222925.webp)\n\n比特流解码框图：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109222954.webp)\n\n### 辅助信息解码的过程\n\n- 帧中的辅助信息包含解码主数据所需的必要信息。\n- 它包含有关在 Huffman 解码过程中使用哪些霍夫曼表以及比例因子的信息。\n- 它还包含主数据开始的位置信息。\n\n### 哈夫曼信息解码\n\n- Huffman 信息解码块的任务是设置 Huffman 解码块所需的所有参数。\n- 第一个任务是从辅助信息中收集有关 Huffman 编码比特的数据。这包括在比特流中找到 Huffman 编码的比特，并确定每个频谱区域分区所使用的 Huffman 表。\n- 此外，该块必须确保生成所有频率线，而不管 Huffman 编码比特中描述了多少频率线。当出现少于 576 个频率线时，Huffman 信息解码块必须执行零填充以填补数据的不足。\n\n哈夫曼解码：\n\n- 由于 Huffman 编码是一种可变长度编码方法，没有尝试将 Huffman 编码比特中的各个码字分开，因此，如果不从已知为码字起始点的 Huffman 编码比特开始解码，无法识别 Huffman 编码比特中间的单个码字。\n- 如果在一串 Huffman 编码比特中发生错误，剩余的编码比特无法正确解码。**我们可以直接找下一帧的同步字，那么这一帧就去掉。**\n\n子带因子解码：![image.png](https://cdn.gallery.uuanqin.top/img/20231109223350.webp)\n\n### 反量化（Dequantization）或去缩放（Descaling）\n\n目的是重构编码器中由 MDCT 块生成的频率线的感知相同的数据。\n\n长窗口的计算公式为：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109223456.webp)\n\n短窗口的计算公式为：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109223500.webp)\n\n反量化：\n\n- <span style=\"color:#ff0000\">全局步长（global_gain）定义了在一个 granule 内用于一个声道的量化步长</span>。\n- 编码器中的比例因子（scalefactors）使用步长为 2 或 sqrt(2) 进行量化，可以通过 scalefac_scale 标志的值来识别，如果 scalefac_scale=0，则 scalefac_multiplier=0.5，否则 scalefac_multiplier=1。\n- pretab 和 preflag 变量仅在长窗口的情况下使用。一个表格为 pretab 变量的每个比例因子带指定了一个单独的值。\n- 对于短窗口，通过 subblock_gain 指定了一个 gain factor。\n\n### 重新排序（Reordering）\n\n通过解量化生成的频率线并不总是以相同的方式排序。\n\n在长窗口的 MDCT 块中，它会首先按子带，然后按频率生成排序的频率线。\n\n为了增加频率线的 Huffman 编码效率，在短窗口中，频率线首先按子带排序，然后按频率排序，最后按窗口排序。\n\n### 立体声处理\n\n在解量化之后，重构的值在进入合成滤波器组之前进行中侧处理（MS）。\n\n在中侧立体声（MS）模式下，传输的是归一化的中侧（middle/side）通道值 Mi/Si，而不是左右（left/right）通道值 Li/Ri。因此，可以使用这些 Mi/Si 值来重构 Li/Ri。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109224345.webp)\n\n### 去混叠\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109224359.webp)\n\n### 反向 MDCT\n\n从去混叠块中处理的频率线通过 IMDCT 块进行处理。IMDCT 的表达式如下所示：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109224424.webp)\n\nXk 表示频率线，对于短块 n=12，对于长块 n=36。\n\n根据 block_type 值，xi 与之前定义的窗口之一相乘：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109224428.webp)\n\n### IMDCT 的重叠相加\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109224656.webp)\n\n### 合成多相滤波器组\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231109224713.webp)\n\n## 编码语法（Normative Elements）\n\n### 位流格式\n\n一个 MP3 位流被组织成音频帧，其中包括五个部分：头部、CRC、辅助信息、主数据和附加数据。\n\n单声道的辅助信息块长度为 136 位，双声道的辅助信息块长度为 256 位。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110132621.webp)\n\n```c\n// 音频帧\nframe()\n{\n\theader()\n\terror_check()\n\taudio_data() // 音频数据\n\tancillary_data()\n}\n```\n\n### Header\n\n一开始的 32 位（4 字节）是头部信息。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110132753.webp)\n\n```c\nheader()\n{\n\tsyncword           12 bits bslbf // 12个1\n\tID                 1  bit  bslbf // 表明算法的ID。1表示MPEG音频，0做保留\n\tlayer              2  bits bslbf // 表明使用的层级。\n\t\t\t\t\t\t\t\t\t // 11：Layer I；   10 Layer II\n\t\t\t\t\t\t\t\t\t // 01：Layer III； 00 保留\n\tprotection_bit     1  bit  bslbf // 指示是否在音频比特流中增加了冗余，以方便错误检测。\n\t\t\t\t\t\t\t\t\t // 1：没有冗余，0：增加了冗余\n\tbitrate_index      4  bits bslbf // 指示比特率。全0表示'free format'，\n\t\t\t\t\t\t\t\t\t // 可以使用不出现在列表中的固定比特率\n\tsampling_frequency 2  bits bslbf // 抽样频率\n\tpadding_bit        1  bit  bslbf // 1：帧包含额外的槽以调整平均比特率到采样频率，否则为0。\n\t\t\t\t\t\t\t\t\t // padding只在44.1kHz采样频率下才有必要使用。\n\tprivate_bit        1  bit  bslbf // 私用比特。未来ISO将不再使用。\n\tmode               2  bits bslbf \n\tmode_extension     2  bits bslbf // 用于联合立体声模式中（mode='01'）\n\t\t\t\t\t\t\t\t\t// 指名应用哪种联合立体声编码方法类型。\n\t\t\t\t\t\t\t\t\t//该算法中隐含了应用强度立体声模式和ms_stereo模式的频率范围\n\tcopyright          1  bit  bslbf // 0:编码的比特流没有版权，1：存在版权保护\n\toriginal/home      1  bit  bslbf // 0：比特流为副本，1：比特流为原始版本\n\temphasis           2  bits bslbf // 加重的信息。表明解加重需要使用的类型。\n}\n```\n\n| bit_rate_index | bit rate |\n| -------------- | -------- |\n|'0000'| free|\n|'0001' |32 kbit/s|\n|'0010'| 40 kbit/s|\n|'0011'| 48 kbit/s|\n|'0100'| 56 kbit/s|\n|'0101' |64 kbit/s|\n|'0110'| 80 kbit/s|\n|'0111' |96 kbit/s|\n|'1000' |112 kbit/s|\n|'1001' |128 kbit/s|\n|'1010'| 160 kbit/s|\n|'1011' |192 kbit/s|\n|'1100' |224 kbit/s|\n|'1101' |256 kbit/s|\n|'1110' |320 kbit/s|\n|'1111'| forbidden|\n\nsampling_frequency 抽样频率：\n\n|     | MPEG-1 | MPEG-2 |\n| --- | ------ | ------ |\n|'00' |44.1kHz |22.05kHz|\n|'01' |48 kHz| 24kHz|\n|'10'| 32 kHz |16kHz|\n|'11' |reserved |reserved|\n\nmode：\n\n|      |                                                                                    |\n| ---- | ---------------------------------------------------------------------------------- |\n| '00' | stereo 立体声                                                                       |\n| '01' | joint_stereo 联合立体声 (intensity_stereo 增强立体声 and/or ms_stereo)  ms->mid-size |\n| '10' | dual_channel                                                                       |\n| '11' | single_channel 单通道                                                               |\n\nmode_extension：\n\n|      | intensity_stereo | ms_stereo |\n| ---- | ---------------- | --------- |\n| '00' | off              | off       |\n| '01' | on               | off       |\n| '10' | off              | on        |\n| '11' | on               | on        |\n\nemphasis：\n\n|      |                          |\n| ---- | ------------------------ |\n| '00' | no emphasis              |\n| '01' | 50/15 microsec. emphasis |\n| '10' | reserved                 |\n| '11' | CCITT J.17               |\n\n### ErrorCheck\n\n```c\nerror_check()\n{\n\tif (protection_bit==0) // 在Header中\n\t\tcrc_check 16 bits rpchof\n}\n```\n\n### Audio Data\n\n每一个音频帧包含来自 1 到 2 个音频 granules 的压缩数据。\n\n每一个 granule 由 18\\*32 子带样本组成\n\n帧中的音频数据以下面的方式进行分配：\n\n- main_data_begin pointer\n- side info for both granules (scfsi)\n- side info granule 1\n- side info granule 2\n- scalefactors and Huffman code data granule 1\n- scalefactors and Huffman code data granule 2\n\n#### 边信息\n\n```c\naudio_data(){\n\tmain_data_begin  9 bits uimsbf // main-data-begin 的值用于确定帧的主数据的第一个比特的位置。它将该位置指定为相对于音频同步字节的负偏移量（以字节为单位）\n\tif (mode == single_channel)\t{\n\t\tprivate_bits 5 bits bslbf // 用于私有用途的位。这些位在ISO的未来不会被使用。\n\t\t// scfsi_band 控制着尺度因子组（scfsi_bands）的尺度因子选择信息的使用。\n\t\tfor (scfsi_band=0; scfsi_band<4; scfsi_band++)\n\t\t\tscfsi[scfsi_band] 1 bits bslbf // 尺度因子选择信息。\n\t\t\t\t\t\t\t\t\t\t   // scfsi 控制着对于每个粒度是否传输尺度因子： \n\t\t\t\t\t\t\t\t\t\t   // '0' 对于每个粒度都传输尺度因子。 \n\t\t\t\t\t\t\t\t\t\t   // '1' 对于粒度0传输的尺度因子也适用于粒度1。\n\t\tfor (gr=0; gr<2; gr++) \t{\n\t\t\tpart2_3_length[gr] 12 bits uimsbf\n\t\t\t// 该值包含用于尺度因子和Huffman编码数据的主数据比特数。\n\t\t\t// 由于边信息的长度始终相同，可以使用该值来计算每个粒度的主要信息的起始位置\n\t\t\t// 以及辅助信息的位置（如果使用）。\n\t\t\t// part2_length - 该值包含用于尺度因子的主数据比特数。\n\t\t\tbig_values[gr] 9 bits uimsbf // 每个粒度的频谱值使用不同的Huffman编码表进行编码。\n\t\t\t\t\t\t\t// 完整的频率范围被分成几个区域，然后使用不同的Huffman表进行编码。\n\t\t\tglobal_gain[gr] 8 bits uimsbf // 全局量化步长\n\t\t\tscalefac_compress[gr] 4 bits bslbf // 选择用于比例因子传输的位数。\n\t\t\tblocksplit_flag[gr] 1 bit bslbf // 表示该块使用非正常（类型0）的窗口。\n\t\t}\n\t}\n\tif (blocksplit_flag[gr]){\n\t\tblock_type[gr] 2 bits bslbf // 指示实际粒度的窗口类型。\n\t\tswitch_point[gr] 1 bits uimsbf // 表示短/长变换的分割点。\n\t\tfor (region=0; region<2; region++)\n\t\t\ttable_select[region][gr] 5 bits bslbf // 指定用于压缩特定量化MDCT区域的Huffman编码表。\n\t\tfor (window=0; window<3; window++)\n\t\t\tsubblock_gain[window][gr] 3 bits uimsbf // 表示一个子块相对于全局增益的增益偏移量。仅在块类型2（短窗口）中使用。\n\t}\n\telse{\n\t\tfor (region=0; region<3; region++)\n\t\t\ttable_select[region][gr] 5 bits bslbf\n\t\t\t// region_address1[gr]，region_address2[gr]\n\t\t\t// 对频谱进行进一步分区，以增强Huffman编码器的性能。\n\t\t\t// 这是对big_values区域的细分。这个细分的目的是获得更好的错误鲁棒性（tea：这一点表示怀疑）和更好的编码效率。使用三个区域。\n\t\t\t// 每个区域根据最大量化值和局部信号统计使用不同的Huffman编码表进行编码。\n\t\t\tregion_address1[gr] 4 bits bslbf\n\t\t\tregion_address2[gr] 3 bits bslbf\n\t\t}\n\t\tpreflag[gr] 1 bit bslbf // 这是对量化值进行额外高频放大的快捷方式。\n\t\tscalefac_scale[gr] 1 bit bslbf // 比例因子按对数方式进行量化，步长为2，取决于scalefac_scale的值。\n\t\t// scalefac_scale = 0，步长为sqrt(2) \n\t\t// scalefac_scale = 1，步长为2\n\t\tcount1table_select[gr] 1 bit bslbf // 此标志选择两个可能的Huffman编码表之一，用于幅度不超过1的量化值四元组的区域。\n\t}\n```\n\n| scfsi_band | scalefactor bands |\n| ---------- | ----------------- |\n|0| 0,1,2,3,4,5,|\n|1| 6,7,8,9,10,|\n|2 |11 ... 15|\n|3| 16 ... 20|\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110194611.webp)\n\n在长窗口的情况下，slen1 是用于比例因子带 0-10 的比例因子的长度。slen2 是用于比例因子带 11-21 的比例因子的长度。\n\n| scalefac_compress | slen1 | slen2 |\n| ----------------- | ----- | ----- |\n|0 |0 |0|\n|1 |0 |1|\n|2| 0 |2|\n|3 |0 |3|\n|4| 3 |0|\n|5| 1 |1|\n|6 |1 |2|\n|7 |1 |3|\n|8| 2 |1|\n|9| 2 |2|\n|10 |2| 3|\n|11| 3 |1|\n|12| 3| 2|\n|13 |3 |3|\n|14| 4 |2|\n|15| 4| 3|\n\n#### Main Data\n\n```c\nfor (gr=0; gr<2; gr++)\n\tif (blocksplit_flag[gr] == 1 && block_type[gr] == 2){\n\t\tfor (cb=0; cb<switch_point_l[gr]; cb++)\n\t\tif (scfsi[cb]==0) || (gr==0)\n\t\t\tscalefac[cb][gr] 0..4 bits uimsbf\n\t\tfor (cb=switch_point_s[gr]; cb<cblimit_short; cb++)\n\t\t\tfor (window=0; window<3; window++)\n\t\t\tif (scfsi[cb]==0) || (gr==0)\n\t\t\t\tscalefac[cb][window][gr] 0..4 bits uimsbf\n\t}\n\telse\n\t\tfor (cb=0; cb<cblimit; cb++)\n\t\t\tif (scfsi[cb]==0) || (gr==0)\n\t\t\t\tscalefac[cb][gr] 0..4 bits uimsbf\n\t\t\t\tHuffmancodebits (part2_3_length-part2_length) bits bslbf\n\t\t\t\twhile (position != main_data_end){\n\t\t\t\t\tancillary_bit 1 bit bslbf\n\t\t\t\t}\n\t\t\t}\n```\n\n`scalefac[cb][gr]` - 比例因子用于给量化噪声上色。如果量化噪声被正确形状的颜色掩盖，它将完全被掩盖。\n\n编码器和解码器使用比例因子来获取数值块的除法因子。这些块延伸到多个频率线上。这些块被称为比例因子带，被选择得尽可能接近临界带。\n\n比例因子压缩表显示，比例因子 0...10 的范围为 0 到 15（最大长度为 4 位），比例因子 11...21 的范围为 0 到 7（最大长度为 3 位）。\n\n将频谱细分为比例因子带对于每个块长度和采样频率是固定的，并存储在编码器和解码器的表中。\n\n`Huffman_code_bits` - 伪函数\n\n- 所有绝对值小于等于 15 的量化值直接使用 Huffman 编码进行编码。总是对值 (x,y) 进行编码。\n- 如果发现幅度大于 15 的量化值，则使用 ESC 码来标记这些值。\n- 如果一对值中的一个或两个值不为零，则在 Huffman 编码字后附加一个或两个符号位。\n\n`hcod[|x|][|y|]` 是值 x、y 的 Huffman 编码表条目。\n\n`hlen[|x|][|y|]` 是值 x、y 的 Huffman 长度表条目。\n\n`max_table_entry` 是最大的表条目索引。这是一个系统常量（15，单个表中的最大条目数为 256）。\n\n`signx` 是第一个值的符号（如果为正，则为 0；如果为负，则为 1）。\n\n`signy` 是第二个值的符号（如果为正，则为 0；如果为负，则为 1）。\n\n> [!hint] 考点 21：MP3 huffman code: <span style=\"color:#ff0000\">linebits</span>\n\n```c\nstruct coded_word {\n\tcodeword      // hcod[|x|][|y|], length is hlen[|x|][|y|]\n\tlinbitsx      // 如果(x=15)，则构成一个ESC码。在这种情况下，该字段的长度为linbits，否则为零。该字段中包含的无符号整数加上15，以确定编码数据的绝对值。\n\tsignx         // sign of x (transmitted only if x not equal 0)\n\tlinbitsy      // See linbitsx.\n\tsigny         // sign of y (transmitted only if y not equal 0)\n}\n```\n\n只有在实际标记了大于或等于 15 的值时，才会使用 ESCaped 代码 linbitsx 或 linbitsy。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110200755.webp)\n\nHuffman 编码\n\n对于频谱的高端部分，使用两个特殊的 Huffman 表对值的四元组进行编码。\n\n```c\nstruct quad_word {\n\tcodeword // hcod[|v|][|w|][|x|][|y|]，hlen[|v|][|w|][|x|][|y|]\n\tsignv    //（仅当v不等于0时）\n\tsignw    //（仅当w不等于0时）\n\tsignx    //（仅当x不等于0时）\n\tsigny    //（仅当y不等于0时）\n}\n```\n\n在频谱的高端部分，只需计算零对的数量。由于当其他值已解码时，这个值是隐含已知的，因此不需要传输。\n\nHuffman 编码数据的排序方式：\n\n- 如果 block_type 为 0、1 或 3，则根据频率递增的顺序对 Huffman 编码数据进行排序。\n- 如果 block_type 为 2（短块），则 Huffman 编码数据的排序如下：\n  - 首先给出连续的比例因子带的 Huffman 编码数据，从比例因子带 0 开始，以比例因子带 11 结束。\n  - 在每个比例因子带内，按照时间窗口的顺序给出数据，从窗口 0 开始，以窗口 2 结束。每个窗口内的数据值按照频率递增的顺序排列。\n\nCharacteristic of 32 Huffman tables:\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110201127.webp)\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231110201152.webp)\n\n TIP: 考试的时候以长块为准。\n\n`cb_limit` - 长块（block_type != 2）的比例因子带数量。对于所有模式和所有采样频率的 Layer III，这是一个常数，为 21。\n\n`cb_limit_short` - 短块（block_type=2）的比例因子带数量。对于所有模式和所有采样频率的 Layer III，这是一个常数，为 12。\n\n`window` - 在 block_type=2 的情况下，实际时间槽的数量。window 的取值为 0、1、2。\n\n# 88、010 编辑器之模板的使用\n\n## 什么是 010 编辑器\n\n010 编辑器是一个专业的文本/HEX 编辑器，它可以快速并易于编辑电脑上的任何文件内容。\n\n- 查看并编辑任何硬盘上的二进制文件，以及文本文件（Unicode 文件、C/C++ 源文件等）\n- 独家的二进制模板技术能让你理解任何二进制文件\n- 通过强大的工具（查找、替换等功能）分析并编辑文本以及二进制数据\n- 使用硬盘、软盘等查找并修复问题\n\n## 二进制模板\n\n010 编辑器可以将二进制文件已易于使用的方式将其结构呈现在你的面前。二进制模板可以将二进制文件解析为指定的结构。\n\n模板有着和 C/C++ 相似的结构，但它们是以一个程序运行的。当模板中的变量声明后，变量将映射到当前文件的对应字节集合。\n\n<span style=\"color:#ff0000\">例子：</span>\n\n```C\nstruct FILE {\n    struct HEADER {\n        char type[4];   // 映射文件的0~3字节（注意，从0开始数）\n        int version;    // 映射文件的4~7字节\n        int numRecords; // 映射文件的8~11字节\n    } header;\n    struct RECORD {\n        int employeeId;\n        char name[40];\n        float salary;\n    } record[header.numRecords];\n} file;\n```\n\n当访问一个变量时，其值从文件中读出；当对一个变量进行赋值时，其值将写回文件。\n\n这些模板的 `structures` 和常规的 C 不同，因为它包含了控制语句，如 if，for，while。\n\n模板的执行顺序为从文件顶端到底部。\n\n## 写一个二进制模板\n\n### 模板基础\n\n模板可以使二进制文件更容易理解和编辑。每一个模板是以 `.bt` 为后缀的文本文件，可以被 010 编辑器编辑。\n\n### 数字\n\nDecimal - 456\n\nHexadecimal - 0xff, 25h, 0EFh\n\nOctal - 013 (任何数字前加 0)\n\nBinary - 0b011\n\n无符号值：数字后加 `u`，例如 12u\n\n8 字节的 int64：数字后加 `L`，例如 1L\n\n浮点数中对于一个指数会包含 e，例如 1e10\n\n浮点数默认为 8 字节 double 型，除非数字后加了 f（4 字节 float，例子：2.0f）\n\n### 数据类型\n\n8-Bit Signed Integer - char, byte, CHAR, BYTE\n\n8-Bit Unsigned Integer - uchar, ubyte, UCHAR, UBYTE\n\n16-Bit Signed Integer - short, int16, SHORT, INT16\n\n16-Bit Unsigned Integer - ushort, uint16, USHORT, UINT16, WORD\n\n32-Bit Signed Integer - int, int32, long, INT, INT32, LONG\n\n32-Bit Unsigned Integer - uint, uint32, ulong, UINT, UINT32, ULONG, DWORD\n\n64-Bit Signed Integer - int64, quad, QUAD, INT64, \\_\\_int64\n\n64-Bit Unsigned Integer - uint64, uquad, UQUAD, UINT64, QWORD, \\_\\_uint64\n\n32-Bit Floating Point Number - float, FLOAT\n\n64-Bit Floating Point Number - double, DOUBLE\n\n模板中可以使用数字类型，但数字在被运算前，必须转换为 int 或 float\n\n### 类型定义 typedef\n\n其他类型可以通过 `typedef` 关键字创建。\n\n```C\n// 创建类型语法：\ntypedef <data_type> <new_type_name>\n// 例子：创建新类型myInt，表示无符号整数\ntypedef unsigned int myInt;\n\n// 运用于数组：\ntypedef <data_type> <new_type_name> [ <array_size> ]\n// array_size必须为常量，typedef不能用于创建多维数组，但可以在structs中使用。\n// 例子：生成新的字符串类型数组\ntypedef char myString[15];\nmyString s = \"Test\";\n```\n\n### 声明模板变量\n\n声明变量的方法类似于 C 语言但有一个重要的区别：模板中已声明的变量映射到文件中的一组字节。\n\n可以通过定义 structs 或 unions 的方法将模板变量组织起来。\n\n### 特殊属性\n\n变量后后面可以使用 `<>` 将一个或多个的特殊属性括住。\n\n支持以下属性：\n\n```C\n<\n    format  = hex|decimal|octal|binary,\n    fgcolor = <color>,\n    bgcolor = <color>,\n    comment = \"<string>\",\n    open    = true|false|suppress,\n    hidden  = true|false,\n    read    = <function_name>\n>\n```\n\n### 局部变量\n\n在有些情况中，一些变量不需要映射到文件中的值或者显示在「模板结果」中（可以右击「模板结果」开启局部变量的查看）。我们可以使用关键字 `local` 声明变量。例子：\n\n```C\nlocal int i, total = 0;\nint recordCounts[5];\nfor( i = 0; i < 5; i++ )\n    total += recordCounts[i];\ndouble records[ total ];\n```\n\n### 字符串\n\n通常二进制文件中定义了 Null 结尾的字符串。010 编辑器可以通过特殊的语法进行阅读：\n\n```C\n// 以下两种方法将读取字符串，直到遇到「0」字节\nchar str[];\nstring str;\n// Unicode 字符串可以使用以下两种方法阅读：\nwchar_t str[];\nwstring str;\n```\n\n字符串中可以使用=、+、+=以及比较运算符，例子：\n\n```C\nlocal char str[15] = \"First\";\nlocal string s = \"Second\";\nlocal string r1 = str + s;\nlocal string r2 = str;\nr2 += s;\nreturn (r1 == r2);\n```\n\n### 颜色\n\n解析文件时，使用模板可以将不同颜色应用到不同的变量上，有两种方式：\n\n- 方式一：对单个变量设置颜色\n  ```C\n  // 语法：在变量后添加以下标签\n  <fgcolor=???> // 设置前景色\n  <bgcolor=???> // 设置背景色\n  // 例子：\n  int id <fgcolor=cBlack, bgcolor=0x0000FF>;\n  ```\n- 方式二：使用 `SetForeColor`，`SetBackColor`，`SetColor` 函数设置默认颜色。\n  ```C\n  // 在这些函数后定义变量\n  SetForeColor( cRed );\n  int first; // will be colored red\n  int second; // will be colored red\n\n  // 关闭涂色的方法\n  SetForeColor( cNone );\n  int third; // will not be colored\n  ```\n\n### 顺序\n\n当每一个模板变量都声明后，「当前文件的位置」将向前移动。可以通过使用函数 FTell 获取「当前文件位置」。\n\n通过使用 FSeek 或 FSkip 函数，「当前位置」可以在整个文件中移动。这项技术允许我们不按顺序解析文件。\n\n可以使用 ReadByte, ReadShort, ReadInt 等函数实现不定义变量而读取文件。\n\n> [!hint] 考点 14：010 编辑器：Array、Struct\n\n### 结构 struct\n\n关键字 `struct` 可以定义一个数据结构。可以使用 C/C++ 语法进行定义。例子：\n\n```C\n// 生成新类型myStruct，但不声明任何变量\nstruct myStruct {\n    int a;\n    int b;\n    int c;\n};\n// 声明一个结构\nmyStruct s;\n\n// 定义结构并声明两个实例\n// 其中，s1覆盖文件的前12个字节，s2覆盖接下来的12个字节\nstruct myStruct {\n    int a; // 4字节\n    int b;\n    int c;\n} s1, s2;\n```\n\n使用控制语句（`if`，`for`，`while`）的结构。例子：\n\n```C\n// 实例s只生成两个变量：a、b或a、c\nstruct myIfStruct {\n    int a;\n    if( a > 5 )\n        int b;\n    else\n        int c;\n} s;\n```\n\n结构可以嵌套，也可以声明数组。例子：\n\n```C\nstruct {\n    int width;\n    struct COLOR {\n        uchar r, g, b;\n    } colors[width];\n} line1;\n```\n\n使用 typedef 定义 struct 的别名：\n\n```C\ntypedef struct {\n    ushort id;\n    int size;\n} myData;\n```\n\n### 联合 union\n\nunion 中，所有变量从相同的位置开始。union 的大小为其中最大变量的大小。\n\n可以使用和 struct 相同的语法进行声明。例子：\n\n```C\n// 以下Union大小为8字节\nunion myUnion {\n    ushort s;\n    double d; // 8字节\n    int i;\n} u;\n```\n\n### 带参数的 struct 和 union\n\nstruct 或 union 关键字后可以接参数列表。参数列表的定义和函数相似。例子：\n\n```C\nstruct VarSizeStruct (int arraySize)\n{\n    int array[arraySize];\n};\n// 声明实例。传递参数到结构体中\nVarSizeStruct s1(5);\n\n// 可以使用typedef声明\ntypedef struct (int arraySize)\n{\n    int array[arraySize];\n} VarSizeStruct;\n```\n\n### 数组 Array\n\n数组变量定义的语法：\n\n```C\n<data type> <variable name> [ <expression> ] // 例子：int myArray[15];\n```\n\n一些例子：\n\n```C\n// 与ANSI C不同的是，数组的大小可以为任意表达式（包括变量、函数或操作符）\nint myArray[ FileSize() - myInt * 0x10 + (17 << 5) ];\n\n// 使用中括号获取单个元素\nmyArray[i] = value;\n```\n\n当数组的大小定义为 0 时将有警告提示（不是异常）并且不声明任何变量。\n\n010 编辑器允许数组以特殊的方式构建。当定义模板变量时，可以定义多个名称相同的变量。010 编辑器将这些相同变量看作数组，称之为 Duplicate Array。例子：\n\n```C\nint x; int x; int x;\n// 可以这样读取：\nx[0]; // 读取第一个x的值\n```\n\n可以使用 for 或 while 定义 Duplicate arrays：\n\n```C\nlocal int i;\nfor( i = 0; i < 5; i++ )\n    int x;\n```\n\n### 表达式\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231101183949.webp)\n\n可以使用任何的赋值运算符：+=, -=, \\*=, /=, &=, ^=, %=, |=, <<=, >>=\n\n可以使用小括号组合表达式。\n\n### 布尔运算符\n\n&&（AND)\n\n\\|\\|(OR)\n\n\\!(NOT- 单操作符)\n\n可以使用小括号指定操作顺序。\n\n### 控制语句\n\n可以使用 break、continue、return\n\n#### if 语句\n\n```C\nif( x < 5 )\n    x = 0;\n\nif( y > x )\n    max = y;\nelse\n{\n    max = x;\n    y = 0;\n}\n```\n\n#### for 语句\n\n```C\nfor( i = 0, x = 0; i < 15; i++ )\n{\n    x += i;\n}\n```\n\n#### while 语句\n\n```C\nwhile( myVar < 15 )\n{\n    x *= myVar;\n    myVar += 2;\n}\n\ndo\n{\n    x *= myVar;\n    myVar += 2;\n}while( myVar < 23 );\n```\n\n#### switch 语句\n\n```C\nswitch( <variable> )\n{\n    case <expression>: <statement>; [break;]\n    ...\n    default : <statement>;\n}\n```\n\n### 比特域\n\n比特域允许细分结构为多组比特。这一过程允许将多个变量打包成一个块的内存。\n\n定义比特域的语法：\n\n```C\ntype_name <variable_name> : number_of_bits;\n// type_name 可以是char, short, int, int64 (unsigned or signed) 或其他的等效类型\n```\n\n如果变量名省略，那么对应这个变量的比特数也将省略。例子：\n\n```C\n// 打包alpha和beta为一个32比特的值中，但忽略中间的12bit\nint alpha : 5;\nint      : 12;\nint beta : 15;\n```\n\n#### 比特域模式\n\n010 编辑器有两个特殊的比特域模式，定义了比特如何打包到变量中：\n\n- padded bitfields（默认）。比特打包为变量的方式取决于当前的字节顺序（大小端）。默认为，小端文件从右到左打包，大端文件从左往右打包。\n- unpadded bitfields\n\n##### Padded bitfields\n\n例子：\n\n```C\nushort a : 4;\nushort b : 7;\nushort c : 5;\n// 小端模式下，结构存储为：cccccbbb bbbbaaaa\n// 大端模式下，结构存储为：aaaabbbb bbbccccc\n```\n\n当需要的时候，程序会增加填充。例如某些特定的比特域将跨越变量的边界，这将会添加填充使得比特域从下一个变量开始。例如：\n\n```C\n// 第一个变量\nint apple : 10;\nint orange : 20;\n// 第二个变量\nint banana : 10;\nint peach : 12;\n// 此处填充10个比特\n// 第三个变量\nshort grape : 4; // 字节类型改变为short\n```\n\n##### Unpadded Bitfields\n\n将文件视为一个长长的比特流，不管是变量类型改变时还是比特不能被打包为单个变量时，都不存在任何的填充比特。\n\n进入此模式的方法：调用 `BitfieldDisablePadding` 函数（调用 `BitfieldEnablePadding` 以返回 padding 模式）\n\n在 unpadded Bitfield 模式中，每一个定义的变量从比特流中读取比特。例如：\n\n```C\nBitfieldDisablePadding();\nshort a : 10; // 从文件中读取10个比特\nint   b : 20; // 读取接下来的20个比特\nshort c : 10;\n// 如果比特域被定义为从右到左读取（小端数据的默认方式，或使用了BitfieldRightToLeft函数）\n// 变量将以此方式存储比特：aaaaaaaa bbbbbbaa bbbbbbbb ccbbbbbb cccccccc\n```\n\n### 函数\n\n010 编辑器中内置有大量的函数。支持许多标准 C 函数，并以首字母大写以区分它们。\n\n#### 调用\n\n使用典型 C 语言语法进行函数调用：`<function name> ( <argument_list> )`，例子：`Strlen(str);`\n\n#### 定义\n\n常规 C 语法：`<return type> <function name> ( <argument_list> ) {<statements> }`\n\nreturn type 可以为 void 或其他支持的数据类型。\n\n#### 函数的参数\n\n函数通常使用值传递，在变量名称前加上 `&` 可以使用引用传递。\n\n在参数名称后加上 `[]` 表明其为数组类型，数组类型会尽量为引用传递，否则为值传递。\n\n#### 接口函数\n\n#### `int Printf(const char format[][,argument,...])`\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231101184106.webp)\n\n支持宽度、精度、对齐的调整。如 `%5.2lf` 或 `%-15s`。`\\n` 表示换行。\n\n#### `void Warning(const char format[] [,argument,...])`\n\n和 `Printf` 函数相似，但结果字符串显示在状态栏中，并以橘色高亮显示。通常用于显示模板中的错误。\n\n#### I/O 函数\n\n#### `void BigEndian()`\n\n表明所有从文件中读写的子序列使用大端顺序。用于指定变量的字节顺序。\n\n#### `void LittleEndian()`\n\n小端。\n\n##### 读取函数\n\nchar ReadByte( int64 pos )\n\ndouble ReadDouble( int64 pos )\n\nfloat ReadFloat( int64 pos )\n\nint ReadInt( int64 pos )\n\nint64 ReadInt64( int64 pos )\n\nint64 ReadQuad( int64 pos )\n\nshort ReadShort( int64 pos )\n\nuchar ReadUByte( int64 pos )\n\nuint ReadUInt( int64 pos )\n\nuint64 ReadUInt64( int64 pos )\n\nuint64 ReadUQuad( int64 pos )\n\nushort ReadUShort( int64 pos )\n\n返回从地址 pos 读取文件的内容。用于不声明任何变量从文件中读取数据。\n\n#### `int FEof()`\n\n如果当前读取位置为文件末尾，则返回 true。\n\n#### `int64 FileSize()`\n\n返回当前文件的比特数。\n\n#### `int FSeek(int64 pos)`\n\n设置当前读取位置为 pos 指向的地址。如果地址超出范围返回 -1，成功则返回 0。\n\n#### `int FSkip(int64 offset)`\n\n将当前读取位置向前移动 offset 字节。offset 可以为负，即将读取位置向后移动。如果地址超出范围返回 -1，成功则返回 0。\n\n#### `int64 FTell()`\n\n返回当前文件的读取位置。\n\n##### 数学函数\n\n`double Abs(double x)`\n\n`double Ceil(double x)`\n\n`double Cos(double a)` `double Sin(double a)` `double Tan(double a)` The angle is given in degrees.\n\n`double Exp(double x)`\n\n`double Floor(double x)`\n\n`double Log(double x)` 计算 x 的自然对数，ln(x)\n\n`double Max(double a, double b)` `double Min(double a, double b)`\n\n`double Pow(double x, double y)`\n\n`int Random(int maximum)` 返回 0 到 maximum-1 的随机整数\n\n`double Sqrt(double x )` 计算数字 x 的正平方根\n\n`data_type SwapBytes(data_type x)` 交换变量的比特并返回结果，可以指定任何的数据类型 (byte, short, int, int64, float, double)\n\n### 模板限制\n\n- 不允许使用指针\n- 不支持 goto 语句\n- 不支持多维数组（包括字符串数组）的定义。写模板时，struct 和数组的合并可以模拟多维数组。例如：\n  ```C\n  typedef struct\n  {\n      float row[4];\n  } MATRIX[4];\n  MATRIX m;\n  ```\n\n# 名词解释\n\n> 名词解释是考试内容之一。\n\nJPEG：Joint Photographic Experts Group 联合图像专家组\n\nMPEG：Moving picture Experts Group 运动图像专家组\n\nTIFF：Tagged Image File Format 标记图像文件格式\n\nAIFF：Audio Interchange File Format 音频交换文件格式\n\nRIFF：Resource Interchange File Format 资源交换档案标准\n\nISO：International Organization for Standardization\n\nITU：International Telecommunication Union 国际电信联盟\n\nITU-T：International Telecommunications Union-Telecommunications\n\nIEC：International Electrotechnical Commission 国际电工委员会\n\n> 有另译：International Engineering committee\n\nPCM：Pulse Code Modulation 脉冲编码调制\n\nDPCM：Differential Pulse-code Modulation 差分脉冲编码调制\n\nADPCM：Adaptive Differential Pulse Code Modulation 自适应差分脉冲编码调制\n\nAAC：Advanced Audio Coding\n\nAVI：Audio Video Interleave\n\nCODEC：enCOder / DECoder pair，解编码器\n\nDCT：Discrete Cosine Transform\n\nMDCT：modified discrete cosine transform\n\n<span style=\"color:#ff0000\">IDR：立即编码刷新</span>\n\n# 本课知识点\n\n所有知识点如下：\n\n1. Audio, image and video format, container\n2. Video compression standards and applications\n3. AVI container\n4. Window Bitmap file structure\n5. WAVE format\n6. Explain the meaning of FOURCC tags “ 00db” , “ 01dc” , “01wb” ,“vids” , and “auds” in AVI container.\n7. What is CD data rate?\n8. List the components of a chunk.\n9. Potential coding errors\n10. Lossy compression and lossless compression\n11. Uniform and quantization and nonuniform quantization\n12. entropy and Huffman coding\n13. MS-ADPCM\n14. 010 editor: Array, struct\n15. Fourier transform, Fourier series, Discrete time Fourier transform, Discrete Fourier transform\n16. Windowing\n17. FFT and complexity\n18. MDCT: overlap and add technique, long window, short window\n19. Psychoacoustics: Frequency masking, temporal masking, threshold in quiet, signal to masker ratio, critical bandwidth, bark scale, perceptual entropy\n20. MP3: bitstream format, MP3 sampling frequency, stereo/joint channel/dual channel/single channel, Huffman coding region, bit reservoir\n21. MP3 huffman code: linebits\n22. MP3 encoder and decoder process\n23. Color space\n24. Video frame format\n25. Image and video coding principles: four types of redundancy\n26. Three basic types of code frame in video coding\n27. Motion estimation and compensation\n28. JPEG encoding and decoding process: Minimum code Unit, modes of operation, DC entropy coding, AC entropy coding, run-length, size, EOB\n29. JPEG interchange format: image, frame, scan, marker,\n30. JPEG file interchange format\n31. Video encoding and decoding architecture: normative, informative\n32. MPEG coding structure, MPEG syntax\n33. H.264 encoding structure, baseline profile, main profile, vector block size, new features, video coding layer and network abstraction layer\n34. Inter frame prediction, motion vector prediction, Intra-frame prediction\n35. DCT transform in H.264\n36. entropy coding: Exp-Golomb coding and CAVLC","categories":[{"name":"嵌入式","api":"api/categories/嵌入式.json"}],"tags":[{"name":"嵌入式","api":"api/tags/嵌入式.json"},{"name":"笔记","api":"api/tags/笔记.json"},{"name":"多媒体","api":"api/tags/多媒体.json"},{"name":"MP3","api":"api/tags/MP3.json"},{"name":"AVC","api":"api/tags/AVC.json"},{"name":"010编辑器","api":"api/tags/010编辑器.json"},{"name":"JPEG","api":"api/tags/JPEG.json"},{"name":"WAV","api":"api/tags/WAV.json"},{"name":"AVI","api":"api/tags/AVI.json"},{"name":"BMP","api":"api/tags/BMP.json"},{"name":"DCT","api":"api/tags/DCT.json"},{"name":"USTC","api":"api/tags/USTC.json"}]},"api":"api/posts/p/6c1cb5ed.json"}