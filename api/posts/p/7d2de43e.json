{"data":{"title":"防止网站被镜像的若干防护措施及反制手段","slug":"博客站点维护/防止网站被镜像的若干防护措施及反制手段","description":"我吃柠檬！网站被镜像自己却后知后觉","date":"2024-11-30T20:12:53.000Z","updated":"2025-07-14T16:07:39.224Z","language":"zh-CN","comments":true,"url":"p/7d2de43e/","cover":"https://cdn.gallery.uuanqin.top/img/202412010504201.webp","images":[],"content":"<p>今天在看腾讯云 CDN 统计数据时，发现一个不起眼的 Referer：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412010418836.webp\" alt=\"image.png\" /></p>\n<p>按照以往的习惯总是会把一些不熟悉的网站点开看看，结果差点就没发现这个山寨货：一个和本站一模一样的网站，但是里面全是繁体字，评论系统原封不动且正常使用。</p>\n<p>我甚至怀疑以前检查的时候我都自动忽略了。这次之所以能察觉出端倪是因为我发现假冒站的「友链朋友圈」点不开，返回循环重定向错误页面，打算找问题时才发现域名不对劲。至于繁体文字我一直以为是 Butterfly 偶发故障，毕竟点两下简繁切换按钮就好了。</p>\n<p>服了，我真的是要吐槽我自己了，<strong>为什么每次博客圈发生什么坏事我总是这么迟钝</strong>🤮：</p>\n<ul>\n<li>年初网站外链查的紧时，是蜀黍打电话过来时才把它当回事。（那时候已经看到过 <a href=\"https://www.eallion.com/\">@大大的蜗牛</a> 发表过类似文章，处理措施详见 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/e1ee5eca/\"><span class=\"yukari\">站内文章</span>这篇文章</a>）</li>\n<li>前段时间中小博客被盗刷 CDN，我是直到钱包被抠破才意识到事情严重，甚至眼睁睁看着正在被盗刷不知道该干啥。（然而那时候已经看到过 <a href=\"https://blog.liushen.fun/\">@清羽飞扬</a> 发表过类似文章）</li>\n<li>现在被镜像了，却不知道已经被镜像 2 个月了，然后才想起来 <a href=\"https://dusays.com\">@杜老师</a> 很早就发过类似的文章…</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412010504201.webp\" alt=\"wcnm\" width=\"325px\" /></p>\n<p>既然事情已经发生，那现在我们就着手处理吧。这篇文章主要分为 3 部分措施：</p>\n<ul>\n<li>🛡️预防和保护措施。即使不知道被谁镜像，也会影响镜像站的体验。</li>\n<li>🎯针对性保护措施。找出恶意 IP 进行针对性屏蔽。</li>\n<li>🗡️反制措施。当你知道对方的域名和爬虫 IP 时，就可以反击了。</li>\n</ul>\n<h1 id=\"假冒站点特征\"><a class=\"markdownIt-Anchor\" href=\"#假冒站点特征\"></a> 假冒站点特征</h1>\n<p>假冒镜像站的地址：<code>gatoelectric.online</code>（欢迎骚扰）。从域名上看不出什么名堂，感觉是个某个做电子的企业。ICP 备案查不到什么信息（废话），<a href=\"https://www.whois.com/whois/gatoelectric.online\">Whois</a> 展示如下：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412010347390.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>这个来自天津的 zhang💩zhen💩yu 同时也镜像了 <a href=\"https://www.sunzhongwei.com/sites-are-malicious-mirror-2024\">这位博主</a> 的网站，可以说是个惯犯了。</p>\n<p>Google 搜索「半方池水半方田 - Qin’s blog」可以搜索到冒牌镜像站，排名偏后。直接搜域名的话第一个就是冒牌镜像站。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202411302239632.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202411302242063.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<p>通过一些博主的文章了解到，这种假冒镜像站点的行为已经是自动化的了，目的可能是用于养域名，它们的特征有：</p>\n<ul>\n<li>国内网络无法访问冒牌镜像站点，返回 404。</li>\n<li>主页面的语言是繁体。（你猜受众会是谁？）</li>\n<li>伪装成搜索爬虫对网站进行爬取。</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412012008495.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<h1 id=\"️保护与预防手段\"><a class=\"markdownIt-Anchor\" href=\"#️保护与预防手段\"></a> 🛡️保护与预防手段</h1>\n<p>对网站的各个部分，我们可以采取相应的保护措施。</p>\n<h2 id=\"为网站添加-javascript-脚本引导用户前往官方站点\"><a class=\"markdownIt-Anchor\" href=\"#为网站添加-javascript-脚本引导用户前往官方站点\"></a> 为网站添加 JavaScript 脚本引导用户前往官方站点</h2>\n<p>原理是检测当前站点是否为正确站点并正常显示，否则：</p>\n<ul>\n<li>弹窗提示，说明此站点非官方站点。或直接重定向到官方站点。（为了方便一些博客日常本地调试，比如 Hexo，代码对 <code>localhost</code> 和 <code>127.0.0.1</code> 的站点不做弹窗和水印处理）</li>\n<li>弹窗提示，禁止页面嵌套</li>\n<li>全站贴满水印</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validDomain = <span class=\"string\">&#x27;uuanqin.top&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> redirectUrl = <span class=\"string\">&#x27;https://blog.uuanqin.top&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> hostname = <span class=\"variable language_\">document</span>.<span class=\"property\">location</span>.<span class=\"property\">hostname</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> isLocalHost = (hostname === <span class=\"string\">&#x27;localhost&#x27;</span> || hostname === <span class=\"string\">&#x27;127.0.0.1&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出格式化控制台消息，便于测试</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">GENUINE_LEFT_STYLE</span> = <span class=\"string\">&quot;color: #d1fae5; background: #064e3b; padding:5px 0;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">GENUINE_RIGHT_STYLE</span> = <span class=\"string\">&quot;color: #064e3b; background: #d1fae5; padding:5px 0;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">GENUINE_MESSAGE_TEMPLATE</span> = <span class=\"string\">`  </span></span><br><span class=\"line\"><span class=\"string\">%c uuanqin.top 镜像反制措施 %c V0.0.4 `</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">    <span class=\"variable constant_\">GENUINE_MESSAGE_TEMPLATE</span>,</span><br><span class=\"line\">    <span class=\"variable constant_\">GENUINE_LEFT_STYLE</span>,</span><br><span class=\"line\">    <span class=\"variable constant_\">GENUINE_RIGHT_STYLE</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查项1：域名合法性检查</span></span><br><span class=\"line\"><span class=\"comment\">// 精确提取域名后缀</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> domainParts = hostname.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> validDomainParts = validDomain.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>).<span class=\"property\">length</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> baseDomain = domainParts.<span class=\"title function_\">slice</span>(-validDomainParts).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isLocalHost &amp;&amp; baseDomain !== validDomain) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">createWatermark</span>(validDomain)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userResponse = <span class=\"title function_\">confirm</span>(<span class=\"string\">`警告：本页面非官方页面，可能存在有害信息！建议您立即跳转 <span class=\"subst\">$&#123;validDomain&#125;</span> 并向站长举报该冒牌镜像站！`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (userResponse) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"title function_\">replace</span>(redirectUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查项2：此时网页是否在 iframe 中</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">top</span> !== <span class=\"variable language_\">window</span>.<span class=\"property\">self</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> userResponse = <span class=\"title function_\">confirm</span>(<span class=\"string\">`检测到页面被嵌套在iframe中，这通常是恶意网站行为！请在独立窗口访问 <span class=\"subst\">$&#123;validDomain&#125;</span>。`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (userResponse) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"title function_\">open</span>(redirectUrl, <span class=\"string\">&#x27;_blank&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 水印生成函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createWatermark</span>(<span class=\"params\">text</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> watermarkDiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">pointerEvents</span> = <span class=\"string\">&#x27;none&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">position</span> = <span class=\"string\">&#x27;fixed&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&#x27;100%&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&#x27;100%&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">zIndex</span> = <span class=\"string\">&#x27;9999&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">opacity</span> = <span class=\"string\">&#x27;0.35&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">background</span> = <span class=\"string\">&#x27;transparent&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">overflow</span> = <span class=\"string\">&#x27;hidden&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&#x27;flex&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">justifyContent</span> = <span class=\"string\">&#x27;center&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">alignItems</span> = <span class=\"string\">&#x27;center&#x27;</span>;</span><br><span class=\"line\">    watermarkDiv.<span class=\"property\">style</span>.<span class=\"property\">flexWrap</span> = <span class=\"string\">&#x27;wrap&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> watermarkText = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    watermarkText.<span class=\"property\">innerText</span> = text;</span><br><span class=\"line\">    watermarkText.<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;#8d8d8d&#x27;</span>;</span><br><span class=\"line\">    watermarkText.<span class=\"property\">style</span>.<span class=\"property\">fontSize</span> = <span class=\"string\">&#x27;30px&#x27;</span>;</span><br><span class=\"line\">    watermarkText.<span class=\"property\">style</span>.<span class=\"property\">transform</span> = <span class=\"string\">&#x27;rotate(-30deg)&#x27;</span>;</span><br><span class=\"line\">    watermarkText.<span class=\"property\">style</span>.<span class=\"property\">whiteSpace</span> = <span class=\"string\">&#x27;nowrap&#x27;</span>;</span><br><span class=\"line\">    watermarkText.<span class=\"property\">style</span>.<span class=\"property\">margin</span> = <span class=\"string\">&#x27;20px&#x27;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 文本阴影（增加干扰）</span></span><br><span class=\"line\">    watermarkText.<span class=\"property\">style</span>.<span class=\"property\">textShadow</span> = <span class=\"string\">&#x27;2px 2px 5px rgba(0, 0, 0, 0.5)&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">        watermarkDiv.<span class=\"title function_\">appendChild</span>(watermarkText.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(watermarkDiv);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>js 引入前记得做混淆处理，因为据说恶意脚本会把一些网址给正则替换了。可以使用这个在线工具 <a href=\"https://obfuscator.io/\">JavaScript Obfuscator Tool</a> 对代码加密混淆，记得勾选 unicode escape sequence 选项把中文进行转义处理。</p>\n<p>当然最好的方法是让这段代码和一些关键组件 js 融合。不然假站禁掉 js 或挑出那个关键的 js 文件禁掉就破解了。</p>\n<p>将此 js 部署后效果立竿见影，几乎一发布就被假冒镜像站捕获到：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202411302206742.webp\" alt=\"image.png\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412012106456.webp\" alt=\"image.png\" /></p>\n<p>注意，后续更改 js 时注意把文件名也改一改以更新网站缓存。</p>\n<p>附一个检测到嵌入窗口的弹窗示例：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412130046526.webp\" alt=\"image.png\" width=\"275px\" /></p>\n<p>但是点击「确定」键会被浏览器阻止弹窗，并询问用户是否弹出窗口：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412130048153.webp\" alt=\"image.png\" width=\"249px\" /></p>\n<p>禁止 <code>iframe</code> 的话会导致一些合法的工具失效，比如「百度统计」中无法查看页面点击图。</p>\n<h2 id=\"waline-评论系统设置安全域名\"><a class=\"markdownIt-Anchor\" href=\"#waline-评论系统设置安全域名\"></a> Waline 评论系统设置安全域名</h2>\n<p>Waline 评论内容能被假冒镜像站显示是我完全没想到的。我们可以在环境变量配置安全域名。详看：<a href=\"https://waline.js.org/reference/server/env.html#%E5%AE%89%E5%85%A8\">服务端环境变量 | Waline</a></p>\n<p>效果为评论内容不加载，且禁止评论：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412010500769.webp\" alt=\"image.png\" /></p>\n<h1 id=\"针对性防御\"><a class=\"markdownIt-Anchor\" href=\"#针对性防御\"></a> 🎯针对性防御</h1>\n<p>得到假冒镜像站的域名或有害爬虫的 IP 后，我们可以进行定点屏蔽及时止损。</p>\n<h2 id=\"cdn-图床防盗链黑名单\"><a class=\"markdownIt-Anchor\" href=\"#cdn-图床防盗链黑名单\"></a> CDN 图床防盗链黑名单</h2>\n<p>腾讯云 CDN 访问控制开启防盗链黑名单：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412010310567.webp\" alt=\"image.png\" width=\"350px\" /></p>\n<p>注意：</p>\n<ul>\n<li>不用选「拒绝空 referer 访问」，这影响范围比较大，容易误伤一些正常访问，不好处理。</li>\n<li>对图床防盗链意思意思即可。如果站点也启用 CDN 的话，站点不用防盗链。因为这会导致用户点击你在假冒镜像站设置的跳转弹窗时被自己的官方站点拒绝。</li>\n</ul>\n<p>效果：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412010454378.webp\" alt=\"image.png\" /></p>\n<h2 id=\"找出可疑-ip-并封禁\"><a class=\"markdownIt-Anchor\" href=\"#找出可疑-ip-并封禁\"></a> 找出可疑 IP 并封禁</h2>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">关于用户的源 IP 地址</div>\n</div>\n<div class=\"callout-content\"><p>如果你的网站又套 CDN 或 Cloudflare 代理的，Nginx 日志中展示的可能不会是最初用户的 IP 地址。附常用 IP 地址检查：</p>\n<ul>\n<li>Cloudflare IP 地址：<a href=\"https://www.cloudflare.com/zh-cn/ips/\">IP 范围 | Cloudflare</a></li>\n<li>腾讯云 CDN IP 地址：<a href=\"https://cloud.tencent.com/document/product/228/10747\">内容分发网络 CDN IP 归属查询-配置指南-文档中心-腾讯云</a></li>\n</ul>\n</div></div><p>访问日志的途径：</p>\n<ul>\n<li>Nginx 访问日志一般在 <code>/var/log/nginx</code> 目录下</li>\n<li>Cloudflare：安全性 -&gt; 分析</li>\n</ul>\n<p>夜深人静的时候改动一下自己的文章并发布。不访问官方站点，而是直接访问假冒镜像站点，查看新文章或新改动是否更新。如果假站做出了改动，请查询日志，根据请求路径和时间判断出可疑的 IP。</p>\n<p>Cloudflare 封禁方式：安全性 -&gt; WAF -&gt; 工具。手工添加可疑 IP。</p>\n<p>可疑 IP 判断：</p>\n<ul>\n<li>频繁地、无故地扫描系统根目录不存在的文件或文件夹。</li>\n<li>如果你的主题不是 Wordpress 的话，那些频繁访问 <code>/wp-content</code> <code>/wp</code> <code>/wp-admin</code> 或各种敏感的 <code>.php</code> 文件的 IP 很可能是恶意 IP。</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412070240249.webp\" alt=\"image.png\" /></p>\n<p>只要你找对了，<strong>一击必杀</strong>！🔪🩸🩸🩸</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412070244386.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<h1 id=\"️反制措施\"><a class=\"markdownIt-Anchor\" href=\"#️反制措施\"></a> 🗡️反制措施</h1>\n\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">免责声明</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ul>\n<li>本章节内容仅供学习和交流，切勿用于违法行为。本文作者不对读者的不当使用负责。</li>\n<li>请确保你的反制行为不对其他第三方网站造成过度负担，也不违反当地法规。比如在进行重定向操作时，要慎重考虑重定向的目的站点。</li>\n</ul>\n</div></div><p>这里的反制措施主要指主动下线假冒镜像站点，或误导有害爬虫爬取其他页面，使不法分子造成一定的损失。</p>\n<h2 id=\"获得搜索引擎站长管理系统下伪站点的所有权\"><a class=\"markdownIt-Anchor\" href=\"#获得搜索引擎站长管理系统下伪站点的所有权\"></a> 获得搜索引擎站长管理系统下伪站点的所有权</h2>\n<blockquote>\n<p>常用站长工具有：百度站长、谷歌站长（Search Console）、Bing Webmasters。这里以「谷歌站长」为例，其他的操作方式大差不差。</p>\n</blockquote>\n<p>用自己的 Google 小号，在「谷歌站长」新加一个网站，网址就是冒牌镜像站的网址。利用冒牌镜像站原封不动爬取资源的特点，通过 HTML 验证获得「谷歌站长」下该假冒镜像站点的所有权。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412022031525.webp\" alt=\"image.png\" width=\"400px\" /></p>\n<p>Hexo 博客放置步骤可以是：</p>\n<ol>\n<li>放到 <code>source</code> 文件夹下</li>\n<li>在配置 <code>_config.yml</code> 中指定文件不被渲染</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">skip_render:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">googlefcd336221d7decf8.html</span> <span class=\"comment\"># 验证文件</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>正常发布即可</li>\n</ol>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412022049637.webp\" alt=\"image.png\" width=\"400px\" /></p>\n<p>然后就时不时看数据，建有索引的就直接提交删除：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412070220438.webp\" alt=\"image.png\" width=\"400px\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412070221117.webp\" alt=\"image.png\" width=\"400px\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412071704108.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>谷歌完成移除后，无论之前怎样搜，搜索结果中不会再出现冒牌镜像站了。</p>\n<blockquote>\n<p>狡猾的 zhang💩zhen💩yu 看完本文说道：学到啦，感谢博主！以后我不会爬取这些验证文件啦！</p>\n</blockquote>\n<p>今天 <code>250108</code> 实测发现，恶意爬虫不再爬取 HTML 验证文件，但谷歌站长还提供以下验证方法：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202501082243018.webp\" alt=\"image.png\" width=\"400px\" /></p>\n<p>Hexo 方法为在主题配置文件下配置以下内容即可。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">inject:</span></span><br><span class=\"line\">  <span class=\"attr\">head:</span></span><br><span class=\"line\">    <span class=\"comment\"># 反制镜像站措施</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&lt;meta</span> <span class=\"string\">name=&quot;google-site-verification&quot;</span> <span class=\"string\">content=&quot;ppz3zz_ljO3DX-wcnmsb-zhang-zhen-yu&quot;</span> <span class=\"string\">/&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202501082243862.webp\" alt=\"image.png\" width=\"400px\" /></p>\n<h2 id=\"在-cloudflare-中设置重定向规则\"><a class=\"markdownIt-Anchor\" href=\"#在-cloudflare-中设置重定向规则\"></a> 在 Cloudflare 中设置重定向规则</h2>\n<p>前面章节我们已经讲到我们在 Cloudflare 中已经找到了可疑 IP，并设置了 WAF 规则对其进行封禁。我们还可以在保持封禁的同时设置重定向规则，让可疑 IP 爬取到其他的网页。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412072310076.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<p>参考写法如下。至于重定向到哪里，就发挥读者的想象力咯：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412072312455.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<p>点击「部署」即可。然后再次访问冒牌镜像站，正能量扑面而来，相信它的受众们会很喜欢。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412072307337.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<blockquote>\n<p><strong>博主声明：上图仅作为本次演示用，并非当前本站的实际配置！</strong><br />\n更多 Cloudflare 重定向的玩法详见这篇文章：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/41b77d61/\"><span class=\"yukari\">站内文章</span>域名 DNS 服务托管至 Cloudflare 以及 301 重定向的配置</a></p>\n</blockquote>\n<p>此外，我们还可以利用这个有用的 <a href=\"https://releases.ubuntu.com/\">链接</a> ，得到最美的结局：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412120354705.webp\" alt=\"image.png\" width=\"250px\" /></p>\n<p>但你解除重定向后发现服务器还是没死，真是伤不到一点😅。</p>\n<h2 id=\"在-nginx-中将假爬虫的请求转发到其他站点\"><a class=\"markdownIt-Anchor\" href=\"#在-nginx-中将假爬虫的请求转发到其他站点\"></a> 在 Nginx 中将假爬虫的请求转发到其他站点</h2>\n\n<div class=\"callout\" data-callout=\"note\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">使用此方式的前提</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ul>\n<li>你已确定是伪造的 Google 爬虫爬取了你的网站。</li>\n<li>请确保落在 Nginx 上的访问的 IP 是来自真实用户的 IP，而不是被 Cloudflare 等服务代理过的 IP。</li>\n</ul>\n</div></div><p>首先获得谷歌爬虫的 IP 段：<a href=\"https://developers.google.cn/search/apis/ipranges/googlebot.json\">googlebot.json</a></p>\n<p>将 IP 段转换成这种形式：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">66.249.76.96/27 1;</span><br><span class=\"line\">66.249.77.0/27 1;</span><br><span class=\"line\">66.249.77.128/27 1;</span><br></pre></td></tr></table></figure>\n<p>可以找 AI 帮忙生成代码而不是直接要结果，毕竟 IP 太多了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入文件和输出文件的路径</span></span><br><span class=\"line\">input_file = <span class=\"string\">&#x27;googlebot.json&#x27;</span></span><br><span class=\"line\">output_file = <span class=\"string\">&#x27;converted_ipranges.txt&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取 JSON 数据</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(input_file, <span class=\"string\">&#x27;r&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = json.load(f)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提取 IP 地址段</span></span><br><span class=\"line\">ip_ranges = data.get(<span class=\"string\">&quot;prefixes&quot;</span>, [])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将结果写入输出文件</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(output_file, <span class=\"string\">&#x27;w&#x27;</span>, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"built_in\">range</span> <span class=\"keyword\">in</span> ip_ranges:</span><br><span class=\"line\">        <span class=\"comment\"># 检查是否包含 ipv4Prefix 或 ipv6Prefix，并提取</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&#x27;ipv4Prefix&#x27;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>:</span><br><span class=\"line\">            f.write(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;<span class=\"built_in\">range</span>[<span class=\"string\">&quot;ipv4Prefix&quot;</span>]&#125;</span> 1;\\n&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"string\">&#x27;ipv6Prefix&#x27;</span> <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>:</span><br><span class=\"line\">            f.write(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;<span class=\"built_in\">range</span>[<span class=\"string\">&quot;ipv6Prefix&quot;</span>]&#125;</span> 1;\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;转换结果已保存到 <span class=\"subst\">&#123;output_file&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>将上面生成的文件 <code>converted_ipranges.txt</code> 放到服务器中。</p>\n<p>打开 Nginx 日志（<code>/var/log/nginx</code> 目录下），搜索可疑爬虫的 User Agent，如果爬虫的 IP 不在官方的列表中，就说明这个爬虫是假的。</p>\n<p>在 Nginx 配置文件（<code>http</code> 块）中加入以下字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 加载 IP 白名单文件</span><br><span class=\"line\">geo $crawler_ip &#123;</span><br><span class=\"line\">    default 0;</span><br><span class=\"line\">    include /etc/nginx/conf.d/googlebot_ipranges/converted_ipranges.txt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>主站 <code>location</code> 块中加入判断，将假爬虫反代到其他站点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlisten 443 ssl;</span><br><span class=\"line\">    server_name  blog.uuanqin.top;</span><br><span class=\"line\">\taccess_log  /var/log/nginx/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">    location / &#123;     </span><br><span class=\"line\">        root   /var/www/blog.uuanqin.top;</span><br><span class=\"line\">        index  index.html index.htm;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tset $temp &quot;&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t# 符合UA</span><br><span class=\"line\">\t    if ($http_user_agent ~* &#x27;compatible; Googlebot/2.1;&#x27;) &#123;</span><br><span class=\"line\">\t\t\tset $temp &quot;$&#123;temp&#125;1&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t# 但不符合IP段时自动反代指定网页</span><br><span class=\"line\">\t\tif ($crawler_ip != 1) &#123;</span><br><span class=\"line\">\t\t\tset $temp &quot;$&#123;temp&#125;1&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif ($temp ~* &quot;11&quot;) &#123;</span><br><span class=\"line\">\t\t\tproxy_pass https://www.cac.gov.cn; # 网信办</span><br><span class=\"line\">\t\t\tbreak;  # 添加 break 语句，确保后续的处理被中断  </span><br><span class=\"line\">        &#125;\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t# 此处省略其他配置</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置更改后记得重启 Nginx：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<details class=\"callout\" data-callout=\"warning\" data-callout-fold=\"-\">\n<summary class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">写 Nginx 配置文件遇到的各种坑</div>\n<div class=\"callout-fold\"></div>\n</summary>\n<div class=\"callout-content\"><p>特么的，这些东西花了我几个小时排查，各式 AI 检查都不靠谱。可能是我的 Nginx 版本原因吧，单纯写个简单的「与」条件判断够复杂的。</p>\n<ul>\n<li><code>geo</code>、<code>map</code> 必须在 <code>server</code> 块外面</li>\n<li><code>if</code> 条件语句写在 <code>location</code> 里面</li>\n<li><code>if</code> 条件语句不能嵌套</li>\n<li><code>if</code> 条件语句中不能使用「与」「或」判断</li>\n<li><code>if</code> 和括号 <code>(</code> 中间必须有空格</li>\n<li><code>proxy_pass</code> 接的网址最后不能是 <code>/</code></li>\n<li>奇怪的正则表达式</li>\n</ul>\n</div></details><p>我们可以通过修改输出日志的格式完成 Nginx 的调试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log_format alogformat &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for -- is_crawler_ip: $crawler_ip | fakeBotWillBe11: $temp &quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\taccess_log  /var/log/nginx/host.access.log  alogformat;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过日志查看指定的 IP 是否被拦截。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412030204848.webp\" alt=\"image.png\" /></p>\n<blockquote>\n<p>然而并没有什么用，因为配置的原因，站长的 Nginx 日志暂时看不出用户原始地址，屏蔽的也只是 Cloudflare 的代理 IP 地址。</p>\n</blockquote>\n<h2 id=\"其他反制措施\"><a class=\"markdownIt-Anchor\" href=\"#其他反制措施\"></a> 其他反制措施</h2>\n<p>列举一些还可以进行的手段：</p>\n<ul>\n<li>向各种服务商举报滥用。我们可以向 Google、Bing、Cloudflare、Aliyun、域名商以 DMCA 为理由举报滥用行为。有试过的读者可以评论下，不知道有没有用。我嫌填表单麻烦没试。</li>\n<li>攻击对方服务器。这个方式就留给技术大拿们补充了。</li>\n</ul>\n<h1 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h1>\n<p>好不容易出个假冒镜像站点，不得好好把玩把玩？感觉假站的点击量都是我贡献的。不久后，Bing 收录了假冒镜像站的域名，但是没有展现任何一点信息，算是预防成功了吧。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412122342080.webp\" alt=\"image.png\" width=\"280px\" /></p>\n<p>继续排查反链，又发现一个假冒镜像站，特征一模一样，只不过镜像的是我的一个友链😂（心疼 3 分钟）。</p>\n<p>大家要保护好自己的网站哦。</p>\n<p>后续任务：</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\"> 来自评论区 @Tch 提出的建议：<code>endsWith</code> 不能完全阻止冒牌域名，e.g: <code>xxxuuanqin.top</code></li>\n</ul>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<p>镜像站相关：</p>\n<ul>\n<li>评论区的热心网友：<a href=\"https://www.tjsky.net/\">@秋风于渭水</a>、@匿名用户，及友链 <a href=\"https://tch.cool/\">@Tch</a>。感谢你们。</li>\n<li><a href=\"https://dusays.com/754/\">多方式防止网站被镜像 - 杜老师说</a></li>\n<li><a href=\"https://www.tjsky.net/tutorial/1026\">近期大量个人博客被自动化繁体镜像搬运 - 秋风于渭水</a></li>\n<li><a href=\"https://xyzbz.cn/archives/1214/comment-page-2\">第2页 - 六耳猕猴冒充孙悟空 - 子夜松声</a></li>\n<li><a href=\"https://yfzhu.cn/posts/1014/\">网站被恶意镜像了该怎么办 | 阿猪的博客</a></li>\n<li><a href=\"https://www.sunzhongwei.com/sites-are-malicious-mirror-2024\">我的个人博客网站再次被恶意镜像，这次手段高明了许多 - 安全 - 大象笔记</a></li>\n<li><a href=\"https://blog.meta-code.top/2024/10/27/2024-15/\">我也中招了！大量简中博客站点被镜像，并翻译成了繁体中文 | 百里飞洋</a></li>\n</ul>\n<p>Nginx 相关：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/cxm19881208/article/details/65441750\">nginx “proxy_pass” cannot have URI part in location given by regular expression-CSDN博客</a></li>\n<li><a href=\"https://www.eaimty.com/2018/nginx-if-multiple-conditions/\">在 Nginx 的 if 条件中使用“与”、“或” - EAimTY’s Blog</a></li>\n<li><a href=\"https://blog.csdn.net/qq_43382853/article/details/116540708\">nginx配置文件中对于if条件语句的写法（附nginx跨域文件配置）_nginx if语句-CSDN博客</a></li>\n</ul>\n<p>其他：</p>\n<ul>\n<li><a href=\"https://developers.google.cn/search/docs/crawling-indexing/verifying-googlebot?hl=zh-cn\">Googlebot 和其他 Google 抓取工具验证 | Google 搜索中心  |  文档  |  Google for Developers</a></li>\n</ul>\n","raw":"---\ntitle: 防止网站被镜像的若干防护措施及反制手段\ntags:\n  - JavaScript\n  - CDN\n  - Cloudflare\n  - Google\n  - Bing\n  - Waline\ncover: 'https://cdn.gallery.uuanqin.top/img/202412010504201.webp'\ndescription: 我吃柠檬！网站被镜像自己却后知后觉\ncategories:\n  - 博客站点维护\nabbrlink: 7d2de43e\ndate: 2024-12-01 04:12:53\ntop_img:\nswiper_index: 5\nswiper_desc: 近期热门 \nswiper_cover: 'https://cdn.gallery.uuanqin.top/img/202412010504201.webp'\n---\n\n今天在看腾讯云 CDN 统计数据时，发现一个不起眼的 Referer：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202412010418836.webp)\n\n按照以往的习惯总是会把一些不熟悉的网站点开看看，结果差点就没发现这个山寨货：一个和本站一模一样的网站，但是里面全是繁体字，评论系统原封不动且正常使用。\n\n我甚至怀疑以前检查的时候我都自动忽略了。这次之所以能察觉出端倪是因为我发现假冒站的「友链朋友圈」点不开，返回循环重定向错误页面，打算找问题时才发现域名不对劲。至于繁体文字我一直以为是 Butterfly 偶发故障，毕竟点两下简繁切换按钮就好了。\n\n服了，我真的是要吐槽我自己了，**为什么每次博客圈发生什么坏事我总是这么迟钝**🤮：\n\n- 年初网站外链查的紧时，是蜀黍打电话过来时才把它当回事。（那时候已经看到过 [@大大的蜗牛](https://www.eallion.com/) 发表过类似文章，处理措施详见 [[Hexo 博客与 Waline 评论区实现外链跳转中间页|这篇文章]]）\n- 前段时间中小博客被盗刷 CDN，我是直到钱包被抠破才意识到事情严重，甚至眼睁睁看着正在被盗刷不知道该干啥。（然而那时候已经看到过 [@清羽飞扬](https://blog.liushen.fun/) 发表过类似文章）\n- 现在被镜像了，却不知道已经被镜像 2 个月了，然后才想起来 [@杜老师](https://dusays.com) 很早就发过类似的文章......\n\n![wcnm|325](https://cdn.gallery.uuanqin.top/img/202412010504201.webp)\n\n既然事情已经发生，那现在我们就着手处理吧。这篇文章主要分为 3 部分措施：\n\n- 🛡️预防和保护措施。即使不知道被谁镜像，也会影响镜像站的体验。\n- 🎯针对性保护措施。找出恶意 IP 进行针对性屏蔽。\n- 🗡️反制措施。当你知道对方的域名和爬虫 IP 时，就可以反击了。\n\n# 假冒站点特征\n\n假冒镜像站的地址：`gatoelectric.online`（欢迎骚扰）。从域名上看不出什么名堂，感觉是个某个做电子的企业。ICP 备案查不到什么信息（废话），[Whois](https://www.whois.com/whois/gatoelectric.online) 展示如下：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/202412010347390.webp)\n\n这个来自天津的 zhang💩zhen💩yu 同时也镜像了 [这位博主](https://www.sunzhongwei.com/sites-are-malicious-mirror-2024) 的网站，可以说是个惯犯了。\n\nGoogle 搜索「半方池水半方田 - Qin's blog」可以搜索到冒牌镜像站，排名偏后。直接搜域名的话第一个就是冒牌镜像站。\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/202411302239632.webp)\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/202411302242063.webp)\n\n通过一些博主的文章了解到，这种假冒镜像站点的行为已经是自动化的了，目的可能是用于养域名，它们的特征有：\n\n- 国内网络无法访问冒牌镜像站点，返回 404。\n- 主页面的语言是繁体。（你猜受众会是谁？）\n- 伪装成搜索爬虫对网站进行爬取。\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/202412012008495.webp)\n\n# 🛡️保护与预防手段\n\n对网站的各个部分，我们可以采取相应的保护措施。\n\n## 为网站添加 JavaScript 脚本引导用户前往官方站点\n\n原理是检测当前站点是否为正确站点并正常显示，否则：\n\n- 弹窗提示，说明此站点非官方站点。或直接重定向到官方站点。（为了方便一些博客日常本地调试，比如 Hexo，代码对 `localhost` 和 `127.0.0.1` 的站点不做弹窗和水印处理）\n- 弹窗提示，禁止页面嵌套\n- 全站贴满水印\n\n```js\nconst validDomain = 'uuanqin.top';\nconst redirectUrl = 'https://blog.uuanqin.top';\nconst hostname = document.location.hostname;\nconst isLocalHost = (hostname === 'localhost' || hostname === '127.0.0.1');\n\n// 输出格式化控制台消息，便于测试\nconst GENUINE_LEFT_STYLE = \"color: #d1fae5; background: #064e3b; padding:5px 0;\";\nconst GENUINE_RIGHT_STYLE = \"color: #064e3b; background: #d1fae5; padding:5px 0;\";\nconst GENUINE_MESSAGE_TEMPLATE = `  \n%c uuanqin.top 镜像反制措施 %c V0.0.4 `;\nconsole.log(\n    GENUINE_MESSAGE_TEMPLATE,\n    GENUINE_LEFT_STYLE,\n    GENUINE_RIGHT_STYLE\n);\n\n// 检查项1：域名合法性检查\n// 精确提取域名后缀\nconst domainParts = hostname.split('.');\nconst validDomainParts = validDomain.split('.').length;\nconst baseDomain = domainParts.slice(-validDomainParts).join('.');\nif (!isLocalHost && baseDomain !== validDomain) {\n    createWatermark(validDomain)\n    const userResponse = confirm(`警告：本页面非官方页面，可能存在有害信息！建议您立即跳转 ${validDomain} 并向站长举报该冒牌镜像站！`);\n    if (userResponse) {\n        window.location.replace(redirectUrl);\n    }\n}\n\n// 检查项2：此时网页是否在 iframe 中\nif (window.top !== window.self) {\n    const userResponse = confirm(`检测到页面被嵌套在iframe中，这通常是恶意网站行为！请在独立窗口访问 ${validDomain}。`);\n    if (userResponse) {\n        window.open(redirectUrl, '_blank');\n    }\n}\n\n/**\n 水印生成函数\n */\nfunction createWatermark(text) {\n    const watermarkDiv = document.createElement('div');\n    watermarkDiv.style.pointerEvents = 'none';\n    watermarkDiv.style.position = 'fixed';\n    watermarkDiv.style.top = '0';\n    watermarkDiv.style.left = '0';\n    watermarkDiv.style.width = '100%';\n    watermarkDiv.style.height = '100%';\n    watermarkDiv.style.zIndex = '9999';\n    watermarkDiv.style.opacity = '0.35';\n    watermarkDiv.style.background = 'transparent';\n    watermarkDiv.style.overflow = 'hidden';\n    watermarkDiv.style.display = 'flex';\n    watermarkDiv.style.justifyContent = 'center';\n    watermarkDiv.style.alignItems = 'center';\n    watermarkDiv.style.flexWrap = 'wrap';\n\n    const watermarkText = document.createElement('div');\n    watermarkText.innerText = text;\n    watermarkText.style.color = '#8d8d8d';\n    watermarkText.style.fontSize = '30px';\n    watermarkText.style.transform = 'rotate(-30deg)';\n    watermarkText.style.whiteSpace = 'nowrap';\n    watermarkText.style.margin = '20px';\n    // 文本阴影（增加干扰）\n    watermarkText.style.textShadow = '2px 2px 5px rgba(0, 0, 0, 0.5)';\n\n    for (let i = 0; i < 100; i++) {\n        watermarkDiv.appendChild(watermarkText.cloneNode(true));\n    }\n\n    document.body.appendChild(watermarkDiv);\n}\n```\n\njs 引入前记得做混淆处理，因为据说恶意脚本会把一些网址给正则替换了。可以使用这个在线工具 [JavaScript Obfuscator Tool](https://obfuscator.io/) 对代码加密混淆，记得勾选 unicode escape sequence 选项把中文进行转义处理。\n\n当然最好的方法是让这段代码和一些关键组件 js 融合。不然假站禁掉 js 或挑出那个关键的 js 文件禁掉就破解了。\n\n将此 js 部署后效果立竿见影，几乎一发布就被假冒镜像站捕获到：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202411302206742.webp)\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202412012106456.webp)\n\n注意，后续更改 js 时注意把文件名也改一改以更新网站缓存。\n\n附一个检测到嵌入窗口的弹窗示例：\n\n![image.png|275](https://cdn.gallery.uuanqin.top/img/202412130046526.webp)\n\n但是点击「确定」键会被浏览器阻止弹窗，并询问用户是否弹出窗口：\n\n![image.png|249](https://cdn.gallery.uuanqin.top/img/202412130048153.webp)\n\n禁止 `iframe` 的话会导致一些合法的工具失效，比如「百度统计」中无法查看页面点击图。\n\n## Waline 评论系统设置安全域名\n\nWaline 评论内容能被假冒镜像站显示是我完全没想到的。我们可以在环境变量配置安全域名。详看：[服务端环境变量 | Waline](https://waline.js.org/reference/server/env.html#%E5%AE%89%E5%85%A8)\n\n效果为评论内容不加载，且禁止评论：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202412010500769.webp)\n\n# 🎯针对性防御\n\n得到假冒镜像站的域名或有害爬虫的 IP 后，我们可以进行定点屏蔽及时止损。\n\n## CDN 图床防盗链黑名单\n\n腾讯云 CDN 访问控制开启防盗链黑名单：\n\n![image.png|350](https://cdn.gallery.uuanqin.top/img/202412010310567.webp)\n\n注意：\n\n- 不用选「拒绝空 referer 访问」，这影响范围比较大，容易误伤一些正常访问，不好处理。\n- 对图床防盗链意思意思即可。如果站点也启用 CDN 的话，站点不用防盗链。因为这会导致用户点击你在假冒镜像站设置的跳转弹窗时被自己的官方站点拒绝。\n\n效果：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202412010454378.webp)\n\n## 找出可疑 IP 并封禁\n\n> [!hint] 关于用户的源 IP 地址\n> 如果你的网站又套 CDN 或 Cloudflare 代理的，Nginx 日志中展示的可能不会是最初用户的 IP 地址。附常用 IP 地址检查：\n> - Cloudflare IP 地址：[IP 范围 | Cloudflare](https://www.cloudflare.com/zh-cn/ips/)\n> - 腾讯云 CDN IP 地址：[内容分发网络 CDN IP 归属查询-配置指南-文档中心-腾讯云](https://cloud.tencent.com/document/product/228/10747)\n\n访问日志的途径：\n\n- Nginx 访问日志一般在 `/var/log/nginx` 目录下\n- Cloudflare：安全性 -> 分析\n\n夜深人静的时候改动一下自己的文章并发布。不访问官方站点，而是直接访问假冒镜像站点，查看新文章或新改动是否更新。如果假站做出了改动，请查询日志，根据请求路径和时间判断出可疑的 IP。\n\nCloudflare 封禁方式：安全性 -> WAF -> 工具。手工添加可疑 IP。\n\n可疑 IP 判断：\n\n- 频繁地、无故地扫描系统根目录不存在的文件或文件夹。\n- 如果你的主题不是 Wordpress 的话，那些频繁访问 `/wp-content` `/wp` `/wp-admin` 或各种敏感的 `.php` 文件的 IP 很可能是恶意 IP。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202412070240249.webp)\n\n只要你找对了，**一击必杀**！🔪🩸🩸🩸\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/202412070244386.webp)\n\n# 🗡️反制措施\n\n> [!warning] 免责声明\n> - 本章节内容仅供学习和交流，切勿用于违法行为。本文作者不对读者的不当使用负责。\n> - 请确保你的反制行为不对其他第三方网站造成过度负担，也不违反当地法规。比如在进行重定向操作时，要慎重考虑重定向的目的站点。\n\n这里的反制措施主要指主动下线假冒镜像站点，或误导有害爬虫爬取其他页面，使不法分子造成一定的损失。\n\n## 获得搜索引擎站长管理系统下伪站点的所有权\n\n> 常用站长工具有：百度站长、谷歌站长（Search Console）、Bing Webmasters。这里以「谷歌站长」为例，其他的操作方式大差不差。\n\n用自己的 Google 小号，在「谷歌站长」新加一个网站，网址就是冒牌镜像站的网址。利用冒牌镜像站原封不动爬取资源的特点，通过 HTML 验证获得「谷歌站长」下该假冒镜像站点的所有权。\n\n![image.png|400](https://cdn.gallery.uuanqin.top/img/202412022031525.webp)\n\nHexo 博客放置步骤可以是：\n\n1. 放到 `source` 文件夹下\n2. 在配置 `_config.yml` 中指定文件不被渲染\n\n```yaml\nskip_render:\n  - googlefcd336221d7decf8.html # 验证文件\n```\n3. 正常发布即可\n\n![image.png|400](https://cdn.gallery.uuanqin.top/img/202412022049637.webp)\n\n然后就时不时看数据，建有索引的就直接提交删除：\n\n![image.png|400](https://cdn.gallery.uuanqin.top/img/202412070220438.webp)\n\n![image.png|400](https://cdn.gallery.uuanqin.top/img/202412070221117.webp)\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/202412071704108.webp)\n\n谷歌完成移除后，无论之前怎样搜，搜索结果中不会再出现冒牌镜像站了。\n\n> 狡猾的 zhang💩zhen💩yu 看完本文说道：学到啦，感谢博主！以后我不会爬取这些验证文件啦！\n\n今天 `250108` 实测发现，恶意爬虫不再爬取 HTML 验证文件，但谷歌站长还提供以下验证方法：\n\n![image.png|400](https://cdn.gallery.uuanqin.top/img/202501082243018.webp)\n\nHexo 方法为在主题配置文件下配置以下内容即可。\n\n```yaml\ninject:\n  head:\n    # 反制镜像站措施\n    - <meta name=\"google-site-verification\" content=\"ppz3zz_ljO3DX-wcnmsb-zhang-zhen-yu\" />\n```\n\n![image.png|400](https://cdn.gallery.uuanqin.top/img/202501082243862.webp)\n\n## 在 Cloudflare 中设置重定向规则\n\n前面章节我们已经讲到我们在 Cloudflare 中已经找到了可疑 IP，并设置了 WAF 规则对其进行封禁。我们还可以在保持封禁的同时设置重定向规则，让可疑 IP 爬取到其他的网页。\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/202412072310076.webp)\n\n参考写法如下。至于重定向到哪里，就发挥读者的想象力咯：\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/202412072312455.webp)\n\n点击「部署」即可。然后再次访问冒牌镜像站，正能量扑面而来，相信它的受众们会很喜欢。\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/202412072307337.webp)\n\n> **博主声明：上图仅作为本次演示用，并非当前本站的实际配置！**\n> 更多 Cloudflare 重定向的玩法详见这篇文章：[[域名 DNS 服务托管至 Cloudflare 以及 301 重定向的配置]]\n\n此外，我们还可以利用这个有用的 [链接](https://releases.ubuntu.com/) ，得到最美的结局：\n\n![image.png|250](https://cdn.gallery.uuanqin.top/img/202412120354705.webp)\n\n但你解除重定向后发现服务器还是没死，真是伤不到一点😅。\n\n## 在 Nginx 中将假爬虫的请求转发到其他站点\n\n> [!note] 使用此方式的前提\n> - 你已确定是伪造的 Google 爬虫爬取了你的网站。\n> - 请确保落在 Nginx 上的访问的 IP 是来自真实用户的 IP，而不是被 Cloudflare 等服务代理过的 IP。\n\n首先获得谷歌爬虫的 IP 段：[googlebot.json](https://developers.google.cn/search/apis/ipranges/googlebot.json)\n\n将 IP 段转换成这种形式：\n\n```txt\n66.249.76.96/27 1;\n66.249.77.0/27 1;\n66.249.77.128/27 1;\n```\n\n可以找 AI 帮忙生成代码而不是直接要结果，毕竟 IP 太多了：\n\n```python\nimport json\n\n# 输入文件和输出文件的路径\ninput_file = 'googlebot.json'\noutput_file = 'converted_ipranges.txt'\n\n# 读取 JSON 数据\nwith open(input_file, 'r', encoding='utf-8') as f:\n    data = json.load(f)\n\n# 提取 IP 地址段\nip_ranges = data.get(\"prefixes\", [])\n\n# 将结果写入输出文件\nwith open(output_file, 'w', encoding='utf-8') as f:\n    for range in ip_ranges:\n        # 检查是否包含 ipv4Prefix 或 ipv6Prefix，并提取\n        if 'ipv4Prefix' in range:\n            f.write(f'{range[\"ipv4Prefix\"]} 1;\\n')\n        elif 'ipv6Prefix' in range:\n            f.write(f'{range[\"ipv6Prefix\"]} 1;\\n')\n\nprint(f\"转换结果已保存到 {output_file}\")\n```\n\n将上面生成的文件 `converted_ipranges.txt` 放到服务器中。\n\n打开 Nginx 日志（`/var/log/nginx` 目录下），搜索可疑爬虫的 User Agent，如果爬虫的 IP 不在官方的列表中，就说明这个爬虫是假的。\n\n在 Nginx 配置文件（`http` 块）中加入以下字段：\n\n```conf\n# 加载 IP 白名单文件\ngeo $crawler_ip {\n    default 0;\n    include /etc/nginx/conf.d/googlebot_ipranges/converted_ipranges.txt;\n}\n```\n\n主站 `location` 块中加入判断，将假爬虫反代到其他站点：\n\n```conf\nserver {\n\n\tlisten 443 ssl;\n    server_name  blog.uuanqin.top;\n\taccess_log  /var/log/nginx/host.access.log  main;\n\n\t\n    location / {     \n        root   /var/www/blog.uuanqin.top;\n        index  index.html index.htm;\t\n\n\t\tset $temp \"\";\n\t\n\t\t# 符合UA\n\t    if ($http_user_agent ~* 'compatible; Googlebot/2.1;') {\n\t\t\tset $temp \"${temp}1\";\n\t\t}\n\t\t# 但不符合IP段时自动反代指定网页\n\t\tif ($crawler_ip != 1) {\n\t\t\tset $temp \"${temp}1\";\n\t\t}\n\n\t\tif ($temp ~* \"11\") {\n\t\t\tproxy_pass https://www.cac.gov.cn; # 网信办\n\t\t\tbreak;  # 添加 break 语句，确保后续的处理被中断  \n        }\t\n    }\n\n\t# 此处省略其他配置\n}\n```\n\n配置更改后记得重启 Nginx：\n\n```sh\nnginx -s reload\n```\n\n> [!warning]- 写 Nginx 配置文件遇到的各种坑\n> 特么的，这些东西花了我几个小时排查，各式 AI 检查都不靠谱。可能是我的 Nginx 版本原因吧，单纯写个简单的「与」条件判断够复杂的。\n> - `geo`、`map` 必须在 `server` 块外面\n> - `if` 条件语句写在 `location` 里面\n> - `if` 条件语句不能嵌套\n> - `if` 条件语句中不能使用「与」「或」判断\n> - `if` 和括号 `(` 中间必须有空格\n> - `proxy_pass` 接的网址最后不能是 `/`\n> - 奇怪的正则表达式\n\n我们可以通过修改输出日志的格式完成 Nginx 的调试：\n\n```conf\nlog_format alogformat '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for -- is_crawler_ip: $crawler_ip | fakeBotWillBe11: $temp \"';\n\nserver{\n\taccess_log  /var/log/nginx/host.access.log  alogformat;\n}\n```\n\n通过日志查看指定的 IP 是否被拦截。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202412030204848.webp)\n\n> 然而并没有什么用，因为配置的原因，站长的 Nginx 日志暂时看不出用户原始地址，屏蔽的也只是 Cloudflare 的代理 IP 地址。\n\n## 其他反制措施\n\n列举一些还可以进行的手段：\n\n- 向各种服务商举报滥用。我们可以向 Google、Bing、Cloudflare、Aliyun、域名商以 DMCA 为理由举报滥用行为。有试过的读者可以评论下，不知道有没有用。我嫌填表单麻烦没试。\n- 攻击对方服务器。这个方式就留给技术大拿们补充了。\n\n# 后记\n\n好不容易出个假冒镜像站点，不得好好把玩把玩？感觉假站的点击量都是我贡献的。不久后，Bing 收录了假冒镜像站的域名，但是没有展现任何一点信息，算是预防成功了吧。\n\n![image.png|280](https://cdn.gallery.uuanqin.top/img/202412122342080.webp)\n\n继续排查反链，又发现一个假冒镜像站，特征一模一样，只不过镜像的是我的一个友链😂（心疼 3 分钟）。\n\n大家要保护好自己的网站哦。\n\n后续任务：\n\n- [x] 来自评论区 @Tch 提出的建议：`endsWith` 不能完全阻止冒牌域名，e.g: `xxxuuanqin.top`\n\n# 本文参考\n\n镜像站相关：\n\n- 评论区的热心网友：[@秋风于渭水](https://www.tjsky.net/)、@匿名用户，及友链 [@Tch](https://tch.cool/)。感谢你们。\n- [多方式防止网站被镜像 - 杜老师说](https://dusays.com/754/)\n- [近期大量个人博客被自动化繁体镜像搬运 - 秋风于渭水](https://www.tjsky.net/tutorial/1026)\n- [第2页 - 六耳猕猴冒充孙悟空 - 子夜松声](https://xyzbz.cn/archives/1214/comment-page-2)\n- [网站被恶意镜像了该怎么办 | 阿猪的博客](https://yfzhu.cn/posts/1014/)\n- [我的个人博客网站再次被恶意镜像，这次手段高明了许多 - 安全 - 大象笔记](https://www.sunzhongwei.com/sites-are-malicious-mirror-2024)\n- [我也中招了！大量简中博客站点被镜像，并翻译成了繁体中文 | 百里飞洋](https://blog.meta-code.top/2024/10/27/2024-15/)\n\nNginx 相关：\n\n- [nginx \"proxy_pass\" cannot have URI part in location given by regular expression-CSDN博客](https://blog.csdn.net/cxm19881208/article/details/65441750)\n- [在 Nginx 的 if 条件中使用“与”、“或” - EAimTY's Blog](https://www.eaimty.com/2018/nginx-if-multiple-conditions/)\n- [nginx配置文件中对于if条件语句的写法（附nginx跨域文件配置）_nginx if语句-CSDN博客](https://blog.csdn.net/qq_43382853/article/details/116540708)\n\n其他：\n\n- [Googlebot 和其他 Google 抓取工具验证 | Google 搜索中心  |  文档  |  Google for Developers](https://developers.google.cn/search/docs/crawling-indexing/verifying-googlebot?hl=zh-cn)","categories":[{"name":"博客站点维护","api":"api/categories/博客站点维护.json"}],"tags":[{"name":"CDN","api":"api/tags/CDN.json"},{"name":"Cloudflare","api":"api/tags/Cloudflare.json"},{"name":"JavaScript","api":"api/tags/JavaScript.json"},{"name":"Google","api":"api/tags/Google.json"},{"name":"Bing","api":"api/tags/Bing.json"},{"name":"Waline","api":"api/tags/Waline.json"}]},"api":"api/posts/p/7d2de43e.json"}