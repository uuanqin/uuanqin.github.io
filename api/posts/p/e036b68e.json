{"data":{"title":"SpringBoot 中的面向切面编程（AOP）","slug":"技术学习/SpringBoot 中的面向切面编程（AOP）","description":"回忆 AOP 基本概念，备忘基本的 AOP 使用方式","date":"2024-08-09T17:04:09.000Z","updated":"2025-06-11T16:08:12.779Z","language":"zh-CN","comments":true,"url":"p/e036b68e/","cover":"https://cdn.gallery.uuanqin.top/img/202409050029414.webp","images":[],"content":"\n<div class=\"callout\" data-callout=\"notice\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">SpringBoot 的两大核心</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ol>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/66216cb4/\"><span class=\"yukari\">站内文章</span>IoC</a>：控制反转</li>\n<li>AOP：面向切面编程</li>\n</ol>\n</div></div><h1 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\"></a> 概念</h1>\n<p>AOP（Aspect Oriented Programming，面向切面编程、面向方面编程），其实就是面向特定方法编程。AOP 是 OOP（面向对象编程）的一种延续，二者互补，并不对立。AOP 是一种编程思想，动态代理是这种思想的主流实现方式。</p>\n<p>AOP 之所以叫面向切面编程，是因为它的核心思想就是将横切关注点从核心业务逻辑中分离出来，形成一个个的<strong>切面（Aspect）</strong>。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202410081930509.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<p>应用场景：</p>\n<ul>\n<li>日志记录：自定义日志记录注解，利用 AOP，一行代码即可实现日志记录。</li>\n<li>性能统计：利用 AOP 在目标方法的执行前后统计方法的执行时间，方便优化和分析。</li>\n<li>事务管理：<code>@Transactional</code> 注解可以让 Spring 为我们进行事务管理比如回滚异常操作，免去了重复的事务管理逻辑。<code>@Transactional</code>注解就是基于 AOP 实现的。</li>\n<li>权限控制：利用 AOP 在目标方法执行前判断用户是否具备所需要的权限，如果具备，就执行目标方法，否则就不执行。例如，SpringSecurity 利用<code>@PreAuthorize</code> 注解一行代码即可自定义权限校验。</li>\n<li>接口限流：利用 AOP 在目标方法执行前通过具体的限流算法和实现对请求进行限流处理。</li>\n<li>缓存管理：利用 AOP 在目标方法执行前后进行缓存的读取和更新。</li>\n</ul>\n<p>优势：</p>\n<ol>\n<li>代码无侵入</li>\n<li>减少重复代码</li>\n<li>提高开发效率</li>\n<li>维护方便</li>\n</ol>\n<p>AOP 的常见实现方式有动态代理、字节码操作等方式。</p>\n<p>Spring AOP 是 Spring 框架的高级技术，旨在管理 bean 对象的过程中，丰要通过底层的动态代理机制，对特定的方法进行编程。</p>\n<blockquote>\n<p>AOP是一种思想，Spring AOP是这个思想的一种实现。AOP和Spring AOP的关系相当于IoC和DI之间的关系一样。</p>\n</blockquote>\n<p>引入 AOP 依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一些概念：</p>\n<ul>\n<li><strong>横切关注点 Cross-cutting Concerns</strong> ：多个类或对象中的公共行为（如日志记录、事务管理、权限控制、接口限流、接口幂等等）。</li>\n<li><strong>连接点 JoinPoint</strong>：可以被 AOP 控制的方法（暗含方法执行时的相关信息）</li>\n<li><strong>切面 Aspect</strong>：对横切关注点进行封装的类，一个切面是一个类。切面可以定义多个通知，用来实现具体的功能。描述通知与切入点的对应关系（通知 + 切入点）\n<ul>\n<li><strong>通知 Advice</strong>：指那些重复的逻辑，也就是共性功能 (最终体现为一个方法）</li>\n<li><strong>切入点 PointCut</strong>：匹配连接点的条件，通知仅会在切入点方法执行时被应用。一个切点是一个表达式，它用来匹配哪些连接点需要被切面所增强。切点可以通过注解、正则表达式、逻辑运算等方式来定义。</li>\n</ul>\n</li>\n<li><strong>目标对象 Target</strong>：通知所应用的对象。</li>\n<li><strong>织入 Weaving</strong>：织入是将切面和目标对象连接起来的过程，也就是将通知应用到切点匹配的连接点上。常见的织入时机有两种，分别是编译期织入（Compile-Time Weaving 如：AspectJ）和运行期织入（Runtime Weaving 如：AspectJ、Spring AOP）。</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202410081918060.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<h2 id=\"入门示例\"><a class=\"markdownIt-Anchor\" href=\"#入门示例\"></a> 入门示例</h2>\n<p>一个 AOP 程序的示例：为 DeptServletImpl 类的所有方法增加一层统计其运行时间逻辑。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/QQ截图20240511212142.webp\" alt=\"QQ截图20240511212142.png\" /></p>\n<p>解释：</p>\n<ul>\n<li><code>TimeAspect</code> 是一个 AOP 程序。\n<ul>\n<li><code>@Aspect</code> 注解说明当前类是 AOP 类（切面类）。</li>\n<li>这个类中的模板方法执行以下操作：\n<ol>\n<li>记录开始时间</li>\n<li>调用原始方法运行</li>\n<li>记录结束时间并输出日志</li>\n</ol>\n</li>\n<li><code>@Around</code> 注解填写切入点表达式，针对某些方法进行编程</li>\n</ul>\n</li>\n</ul>\n<p>执行流程：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240511213435.webp\" alt=\"image.png\" /></p>\n<p>SpringAOP 的底层是基于动态代理实现的。程序最后注入的就不是目标对象，而是代理对象。代理对象完成了我们所编写的增强的功能。</p>\n<h1 id=\"通知类型\"><a class=\"markdownIt-Anchor\" href=\"#通知类型\"></a> 通知类型</h1>\n<table>\n<thead>\n<tr>\n<th>通知类型</th>\n<th>名称</th>\n<th>在目标方法执行位置</th>\n<th>备注</th>\n<th>IDEA 中的图标</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>@Around</code></td>\n<td>环绕通知</td>\n<td>前、后</td>\n<td>如果原始方法抛异常，那么原始方法后的代码就不会执行</td>\n<td><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/aroundAdvice.svg\" alt=\"aroundAdvice.svg\" /><br></td>\n</tr>\n<tr>\n<td><code>@Before</code></td>\n<td>前置通知</td>\n<td>前</td>\n<td></td>\n<td><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/beforeAdvice.svg\" alt=\"beforeAdvice.svg\" /><br></td>\n</tr>\n<tr>\n<td><code>@After</code></td>\n<td>后置通知</td>\n<td rowspan=\"2\">后</td>\n<td>无论是否有异常都执行，因此又叫做最终通知</td>\n<td><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/afterAdvice.svg\" alt=\"afterAdvice.svg\" /><br></td>\n</tr>\n<tr>\n<td><code>@AfterReturning</code></td>\n<td>返回后通知</td>\n<td>发生异常<strong>不会</strong>执行</td>\n<td><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/afterReturningAdvice.svg\" alt=\"afterReturningAdvice.svg\" /><br></td>\n</tr>\n<tr>\n<td><code>@AfterThrowing</code></td>\n<td>抛出异常后通知</td>\n<td>-</td>\n<td>发生异常后执行</td>\n<td><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/afterThrowingAdvice.svg\" alt=\"img\" /></td>\n</tr>\n</tbody>\n</table>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202410081927615.webp\" alt=\"image.png\" width=\"425px\" /></p>\n<p>关于环绕通知：</p>\n<ul>\n<li><code>@Around</code> 环绕通知需要自己调用 <code>ProceedingJoinPoint.proceed()</code> 来让原始方法执行，其他通知不需要考虑目标方法执行</li>\n<li><code>@Around</code> 环绕通知方法的返回值，必须指定为 <code>Object</code>，来接收原始方法的返回值。</li>\n</ul>\n<p><code>@PointCut</code>：该注解的作用是将公共的切点表达式抽取出来，需要用到时引用该切点表达式即可。被注解的方法访问级别：</p>\n<ul>\n<li><code>private</code>：仅能在当前切面类中引用该表达式</li>\n<li><code>public</code>：在其他外部的切面类中也可以引用该表达式</li>\n</ul>\n<h2 id=\"切面类示例\"><a class=\"markdownIt-Anchor\" href=\"#切面类示例\"></a> 切面类示例</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAspect1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 抽取切入点表达式，避免代码重复</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125; <span class=\"comment\">// 公有函数 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123; log.info(<span class=\"string\">&quot;before ...&quot;</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;around before ...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用目标对象的原始方法执行</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> proceedingJoinPoint.proceed();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;around after ...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span>&#123; log.info(<span class=\"string\">&quot;after ...&quot;</span>);  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">()</span>&#123; log.info(<span class=\"string\">&quot;afterReturning ...&quot;</span>);  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">()</span>&#123;  log.info(<span class=\"string\">&quot;afterThrowing ...&quot;</span>);  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"通知顺序\"><a class=\"markdownIt-Anchor\" href=\"#通知顺序\"></a> 通知顺序</h1>\n<p>通知顺序：当有多个切面的切入点都匹配到了目标方法，目标方法运行时，多个通知方法都会被执行。</p>\n<ol>\n<li>不同切面类中，默认按照切面类的类名字母排序\n<ul>\n<li>目标方法前的通知方法：字母排名靠前的先执行</li>\n<li>目标方法后的通知方法：字母排名靠前的后执行</li>\n</ul>\n</li>\n<li>用 <code>@Order(number)</code> 加在切面类上来数字控制顺序\n<ul>\n<li>目标方法前的通知方法：数字小的先执行</li>\n<li>目标方法后的通知方法：数字小的后执行</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"切入点表达式\"><a class=\"markdownIt-Anchor\" href=\"#切入点表达式\"></a> 切入点表达式</h1>\n<p>切入点表达式：描述切入点方法的一种表达式。主要用来决定项目中的哪些方法需要加入通知。</p>\n<p>常见形式：</p>\n<ul>\n<li><code>execution(...)</code>：根据方法的签名来匹配</li>\n<li><code>@annotation(...)</code>：根据注解匹配</li>\n</ul>\n<h2 id=\"execution\"><a class=\"markdownIt-Anchor\" href=\"#execution\"></a> <code>execution()</code></h2>\n<p><code>execution</code> 主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution([访问修饰符] 返回值 [packageName.className]methodName(methodParams) [<span class=\"keyword\">throws</span> 异常])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// packageName.className 不建议省略，否则容易导致匹配范围过大，性能降低</span></span><br><span class=\"line\"><span class=\"comment\">// 上面的异常指的是方法上声明抛出的异常，不是实际抛出的异常</span></span><br><span class=\"line\"><span class=\"comment\">// 方法参数类型写全类名，比如java.lang.Integer</span></span><br><span class=\"line\"><span class=\"comment\">// 多个切入点表达式可以通过 || 连接</span></span><br></pre></td></tr></table></figure>\n<p>可以使用的通配符：</p>\n<ul>\n<li><code>*</code>：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</li>\n<li><code>..</code>：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</li>\n</ul>\n<p>根据业务需要，可以使用 <code>&amp;&amp;</code>、<code>||</code>、<code>!</code> 来组合比较复杂的切入点表达式。</p>\n<p>一些示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* com.*.service.*.update*(*))</span><br><span class=\"line\">execution(* com.*.uuanqin..DeptService.*(..))</span><br><span class=\"line\">execution(* *(..))  <span class=\"comment\">// 最为通配的方法，慎用</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut(&quot;execution(* com.itheima.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pointcut(</span></span><br><span class=\"line\"><span class=\"meta\">\t&quot;execution(* com.itheima.service.impl.DeptServiceImpl.list(..)) || &quot;+</span></span><br><span class=\"line\"><span class=\"meta\">\t&quot;execution(* com.itheima.service.impl.DeptServiceImpl.delete(..))&quot;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br></pre></td></tr></table></figure>\n<p>书写建议：</p>\n<ul>\n<li>所有业务方法名在命名时尽量规范，方便切入点表达式快速匹配。如：查询类方法都是 <code>find</code> 开头，更新类方法都是 <code>update</code> 开头。</li>\n<li>描述切入点方法通常基于接口描述，而不是直接描述实现类，增强拓展性。</li>\n<li>在满足业务需要的前提下，尽量缩小切入点的匹配范围。如：包名匹配尽量不使用 <code>..</code>，可以使用 <code>*</code> 匹配单个包。</li>\n</ul>\n<h2 id=\"annotation\"><a class=\"markdownIt-Anchor\" href=\"#annotation\"></a> <code>@annotation()</code></h2>\n<p><code>@annotation</code> 切入点表达式，用于匹配标识有特定注解的方法。</p>\n<p>自定义注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span> <span class=\"comment\">// 注解运行时有效</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span>         <span class=\"comment\">// 注解标识在方法上</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyLog &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>切入点表达式示例，它将作用于标注有 <code>@MyLog</code> 的方法上：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut(&quot;@annotation(your.package.MyLog)&quot;)</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"连接点\"><a class=\"markdownIt-Anchor\" href=\"#连接点\"></a> 连接点</h1>\n<p>在 Spring 中用 JoinPoint 抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。</p>\n<p>两种对象获取信息的方式是一致的：</p>\n<ul>\n<li>对于 <code>@Around</code> 通知，获取连接点信息只能使用 <code>ProceedingJoinPoint</code></li>\n<li>对于其他四种通知，获取连接点信息只能使用 <code>JoinPoint</code>，它是 <code>ProceedingJoinPoint</code> 的父类型</li>\n</ul>\n<p>获取目标对象的相关信息示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//切面类</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAspect8</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.uuanqin.service.DeptService.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pt</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(JoinPoint joinPoint)</span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;MyAspect8 ... before ...&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//1. 获取 目标对象的类名 .</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;目标对象的类名：&#123;&#125;&quot;</span>, className);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2. 获取 目标方法的方法名 .</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;目标方法的方法名：&#123;&#125;&quot;</span>,methodName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3. 获取 目标方法运行时传入的参数 .</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;目标方法运行时传入的参数：&#123;&#125;&quot;</span>, Arrays.toString(args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;pt()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">around</span><span class=\"params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;MyAspect8 around before …&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1. 获取 目标对象的类名 .</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;目标对象的类名：&#123;&#125;&quot;</span>, className);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2. 获取 目标方法的方法名 .</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">methodName</span> <span class=\"operator\">=</span> joinPoint.getSignature().getName();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;目标方法的方法名：&#123;&#125;&quot;</span>,methodName);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3. 获取 目标方法运行时传入的参数 .</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;目标方法运行时传入的参数：&#123;&#125;&quot;</span>, Arrays.toString(args));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4. 放行 目标方法执行 .</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> joinPoint.proceed(); <span class=\"comment\">// 我们可以对返回值进行篡改</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//5. 获取 目标方法运行的返回值 .</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;目标方法运行的返回值：&#123;&#125;&quot;</span>,result);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;MyAspect8 around after …&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"应用实例\"><a class=\"markdownIt-Anchor\" href=\"#应用实例\"></a> 应用实例</h1>\n<h2 id=\"记录操作日志\"><a class=\"markdownIt-Anchor\" href=\"#记录操作日志\"></a> 记录操作日志</h2>\n<p>日志信息包含：操作人、操作时间、执行方法的全类名、执行方法名、方法运行时参数、返回值、方法执行时长。</p>\n<p>思路：需要对所有业务类中的增、删、改 方法添加统一功能，使用 AOP 技术最为方便。</p>\n<p>步骤：</p>\n<ul>\n<li>引入 AOP 起步依赖</li>\n<li>准备好日志相关的表结构，并引入实体类</li>\n<li>准备好一个自定义注解，实现切入点表达式的 <code>@annotation()</code> 方法。</li>\n<li>定义切面类，完成记录操作日志的逻辑。</li>\n</ul>\n<h2 id=\"权限控制\"><a class=\"markdownIt-Anchor\" href=\"#权限控制\"></a> 权限控制</h2>\n<p>背景：在 Controller 中，一些方法需要获取管理员权限才能调用。我们可以通过加上注解的方式实现权限控制。</p>\n<p>定义一些权限常量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserConstant</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户登录态键</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">USER_LOGIN_STATE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;user_login&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  region 权限</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认角色</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_ROLE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;user&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 管理员角色</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">ADMIN_ROLE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;admin&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 被封号</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">BAN_ROLE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ban&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// endregion</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 权限校验</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uuanqin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AuthCheck &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 必须有某个角色</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    String <span class=\"title function_\">mustRole</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AOP 切面实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 权限校验 AOP</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AuthInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 执行拦截</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> joinPoint</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> authCheck</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;@annotation(authCheck)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">doInterceptor</span><span class=\"params\">(ProceedingJoinPoint joinPoint, AuthCheck authCheck)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">mustRole</span> <span class=\"operator\">=</span> authCheck.mustRole();</span><br><span class=\"line\">        <span class=\"type\">RequestAttributes</span> <span class=\"variable\">requestAttributes</span> <span class=\"operator\">=</span> RequestContextHolder.currentRequestAttributes();</span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> ((ServletRequestAttributes) requestAttributes).getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 一些权限校验逻辑。比如查数据库等操作，检查用户的权限字段是否和mustRole匹配。</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 不匹配抛异常或者返回错误信息等。</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果通过权限校验，则放行</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> joinPoint.proceed();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 Controller 中可以通过加上一条注解即可实现权限校验：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新（仅管理员）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> interfaceInfoUpdateRequest</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/update&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> BaseResponse&lt;Boolean&gt; <span class=\"title function_\">updateInterfaceInfo</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> InfoUpdateRequest InfoUpdateRequest)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 省略一些校验逻辑</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ResultUtils.success(result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于 Request 不同的获取方式详看这篇文章：<a href=\"https://www.cnblogs.com/zwh0910/p/17168833.html\">RequestContextHolder详解（获取request对象的四种方法） - 周文豪 - 博客园 (cnblogs.com)</a></p>\n<h2 id=\"全局异常处理器\"><a class=\"markdownIt-Anchor\" href=\"#全局异常处理器\"></a> 全局异常处理器</h2>\n<p><code>@RestControllerAdvice</code> 是 Spring 框架提供的一个切面注解，用于定义全局异常处理器和全局数据绑定设置。它结合了 <code>@ControllerAdvice</code> 和 <code>@ResponseBody</code> 两个注解的功能：</p>\n<ul>\n<li><code>@ControllerAdvice</code> 是一个用于定义全局控制器增强（即全局异常处理和全局数据绑定）的注解。通过使用 <code>@ControllerAdvice</code>，我们可以将异常处理和数据绑定逻辑集中到一个类中，避免在每个控制器中重复编写相同的异常处理代码。</li>\n<li><code>@ResponseBody</code> 是用于指示控制器方法返回的对象将被直接写入响应体中的注解。它告诉 Spring 将方法的返回值序列化为 JSON 或其他适当的响应格式，并将其作为 HTTP 响应的主体返回给客户端。</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li>捕获代码中所有的异常，内部消化，让前端得到更详细的业务报错 / 信息</li>\n<li>同时屏蔽掉项目框架本身的异常（不暴露服务器内部状态）</li>\n<li>集中处理，比如记录日志</li>\n</ul>\n<p>全局异常处理器切面类示例写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 全局异常处理器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uuanqin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestControllerAdvice</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalExceptionHandler</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(BusinessException.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> BaseResponse&lt;?&gt; businessExceptionHandler(BusinessException e) &#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;BusinessException&quot;</span>, e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResultUtils.error(e.getCode(), e.getMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(RuntimeException.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> BaseResponse&lt;?&gt; runtimeExceptionHandler(RuntimeException e) &#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;RuntimeException&quot;</span>, e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ResultUtils.error(ErrorCode.SYSTEM_ERROR, <span class=\"string\">&quot;系统错误&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意事项：</p>\n<ul>\n<li><code>@RestControllerAdvice</code> 并不能捕获所有异常，例如 Error 类的子类（如 <code>OutOfMemoryError</code>）通常无法被捕获。</li>\n<li>某些异常可能会被其他全局异常处理器或框架层面的异常处理机制捕获，而不会被 <code>@RestControllerAdvice</code> 处理。</li>\n<li><code>Error</code> 及其子类：<code>Error</code> 是 <code>Throwable</code> 的子类，表示严重的错误，通常由虚拟机抛出，如 <code>OutOfMemoryError</code>、<code>StackOverflowError</code> 等。<code>这些异常通常意味着应用程序处于不可恢复的状态</code>，因此无法被 <code>@RestControllerAdvice</code> 捕获。</li>\n<li><code>ThreadDeath</code>：<code>ThreadDeath</code> 是 <code>Error</code> 的子类，它表示线程意外终止的异常。与其他 <code>Error</code> 一样，<code>ThreadDeath</code> 异常也无法被 <code>@RestControllerAdvice</code> 捕获。</li>\n<li><code>VirtualMachineError</code> 及其子类：<code>VirtualMachineError</code> 是 <code>Error</code> 的子类，表示与 Java 虚拟机相关的错误，如 <code>InternalError</code>、<code>UnknownError</code> 等。这些错误通常与虚拟机的内部状态或配置有关，无法被 <code>@RestControllerAdvice</code> 捕获。</li>\n</ul>\n<p>下面罗列一些上面全局异常处理器配套的类。</p>\n<p>自定义异常类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义异常类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uuanqin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BusinessException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RuntimeException</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 错误码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BusinessException</span><span class=\"params\">(<span class=\"type\">int</span> code, String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BusinessException</span><span class=\"params\">(ErrorCode errorCode)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(errorCode.getMessage());</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = errorCode.getCode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BusinessException</span><span class=\"params\">(ErrorCode errorCode, String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(message);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = errorCode.getCode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自定义错误码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义错误码</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uuanqin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ErrorCode</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    SUCCESS(<span class=\"number\">0</span>, <span class=\"string\">&quot;ok&quot;</span>),</span><br><span class=\"line\">    PARAMS_ERROR(<span class=\"number\">40000</span>, <span class=\"string\">&quot;请求参数错误&quot;</span>),</span><br><span class=\"line\">    NOT_LOGIN_ERROR(<span class=\"number\">40100</span>, <span class=\"string\">&quot;未登录&quot;</span>),</span><br><span class=\"line\">    NO_AUTH_ERROR(<span class=\"number\">40101</span>, <span class=\"string\">&quot;无权限&quot;</span>),</span><br><span class=\"line\">    NOT_FOUND_ERROR(<span class=\"number\">40400</span>, <span class=\"string\">&quot;请求数据不存在&quot;</span>),</span><br><span class=\"line\">    FORBIDDEN_ERROR(<span class=\"number\">40300</span>, <span class=\"string\">&quot;禁止访问&quot;</span>),</span><br><span class=\"line\">    SYSTEM_ERROR(<span class=\"number\">50000</span>, <span class=\"string\">&quot;系统内部异常&quot;</span>),</span><br><span class=\"line\">    OPERATION_ERROR(<span class=\"number\">50001</span>, <span class=\"string\">&quot;操作失败&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 状态码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> code;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 信息</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    ErrorCode(<span class=\"type\">int</span> code, String message) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.code = code;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getCode</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> code;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getMessage</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回工具类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uuanqin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResultUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 成功</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; BaseResponse&lt;T&gt; <span class=\"title function_\">success</span><span class=\"params\">(T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BaseResponse</span>&lt;&gt;(<span class=\"number\">0</span>, data, <span class=\"string\">&quot;ok&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BaseResponse <span class=\"title function_\">error</span><span class=\"params\">(ErrorCode errorCode)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BaseResponse</span>&lt;&gt;(errorCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BaseResponse <span class=\"title function_\">error</span><span class=\"params\">(<span class=\"type\">int</span> code, String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BaseResponse</span>(code, <span class=\"literal\">null</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 失败</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BaseResponse <span class=\"title function_\">error</span><span class=\"params\">(ErrorCode errorCode, String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BaseResponse</span>(errorCode.getCode(), <span class=\"literal\">null</span>, message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>抛异常工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抛异常工具类</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uuanqin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThrowUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 条件成立则抛异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">throwIf</span><span class=\"params\">(<span class=\"type\">boolean</span> condition, RuntimeException runtimeException)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> runtimeException;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 条件成立则抛异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">throwIf</span><span class=\"params\">(<span class=\"type\">boolean</span> condition, ErrorCode errorCode)</span> &#123;</span><br><span class=\"line\">        throwIf(condition, <span class=\"keyword\">new</span> <span class=\"title class_\">BusinessException</span>(errorCode));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 条件成立则抛异常</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">throwIf</span><span class=\"params\">(<span class=\"type\">boolean</span> condition, ErrorCode errorCode, String message)</span> &#123;</span><br><span class=\"line\">        throwIf(condition, <span class=\"keyword\">new</span> <span class=\"title class_\">BusinessException</span>(errorCode, message));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1m84y1w7Tb?p=176&amp;spm_id_from=pageDriver&amp;vd_source=e03d48176855fc5349b27aef691f9cdb\">Day13-05. AOP基础-核心概念_哔哩哔哩_bilibili</a></li>\n<li><a href=\"https://intellij-icons.jetbrains.design/\">IntelliJ Platform Icons (jetbrains.design)</a></li>\n<li><a href=\"https://blog.csdn.net/c103363/article/details/136812854\">全局异常捕获（@RestControllerAdvice）介绍和使用-CSDN博客</a></li>\n<li><a href=\"https://javaguide.cn/system-design/framework/spring/ioc-and-aop.html#aop-%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98\">IoC &amp; AOP详解（快速搞懂） | JavaGuide</a></li>\n</ul>\n","raw":"---\ntitle: SpringBoot 中的面向切面编程（AOP）\ntags:\n  - SpringBoot\n  - AOP\n  - Java\n  - Spring AOP\ncover: 'https://cdn.gallery.uuanqin.top/img/202409050029414.webp'\ndescription: 回忆 AOP 基本概念，备忘基本的 AOP 使用方式\ncategories:\n  - 技术学习\nabbrlink: e036b68e\ndate: 2024-08-10 01:04:09\ntop_img:\n---\n\n> [!notice] SpringBoot 的两大核心\n>\n> 1. [[SpringBoot 中的 IoC & DI 入门|IoC]]：控制反转\n> 2. AOP：面向切面编程\n\n# 概念\n\nAOP（Aspect Oriented Programming，面向切面编程、面向方面编程），其实就是面向特定方法编程。AOP 是 OOP（面向对象编程）的一种延续，二者互补，并不对立。AOP 是一种编程思想，动态代理是这种思想的主流实现方式。\n\nAOP 之所以叫面向切面编程，是因为它的核心思想就是将横切关注点从核心业务逻辑中分离出来，形成一个个的**切面（Aspect）**。\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/202410081930509.webp)\n\n\n应用场景：\n\n- 日志记录：自定义日志记录注解，利用 AOP，一行代码即可实现日志记录。\n- 性能统计：利用 AOP 在目标方法的执行前后统计方法的执行时间，方便优化和分析。\n- 事务管理：`@Transactional` 注解可以让 Spring 为我们进行事务管理比如回滚异常操作，免去了重复的事务管理逻辑。`@Transactional`注解就是基于 AOP 实现的。\n- 权限控制：利用 AOP 在目标方法执行前判断用户是否具备所需要的权限，如果具备，就执行目标方法，否则就不执行。例如，SpringSecurity 利用`@PreAuthorize` 注解一行代码即可自定义权限校验。\n- 接口限流：利用 AOP 在目标方法执行前通过具体的限流算法和实现对请求进行限流处理。\n- 缓存管理：利用 AOP 在目标方法执行前后进行缓存的读取和更新。\n\n\n优势：\n\n1. 代码无侵入\n2. 减少重复代码\n3. 提高开发效率\n4. 维护方便\n\nAOP 的常见实现方式有动态代理、字节码操作等方式。\n\n\nSpring AOP 是 Spring 框架的高级技术，旨在管理 bean 对象的过程中，丰要通过底层的动态代理机制，对特定的方法进行编程。\n\n> AOP是一种思想，Spring AOP是这个思想的一种实现。AOP和Spring AOP的关系相当于IoC和DI之间的关系一样。\n\n引入 AOP 依赖：\n\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n一些概念：\n- **横切关注点 Cross-cutting Concerns** ：多个类或对象中的公共行为（如日志记录、事务管理、权限控制、接口限流、接口幂等等）。\n- **连接点 JoinPoint**：可以被 AOP 控制的方法（暗含方法执行时的相关信息）\n- **切面 Aspect**：对横切关注点进行封装的类，一个切面是一个类。切面可以定义多个通知，用来实现具体的功能。描述通知与切入点的对应关系（通知 + 切入点）\n\t- **通知 Advice**：指那些重复的逻辑，也就是共性功能 (最终体现为一个方法）\n\t- **切入点 PointCut**：匹配连接点的条件，通知仅会在切入点方法执行时被应用。一个切点是一个表达式，它用来匹配哪些连接点需要被切面所增强。切点可以通过注解、正则表达式、逻辑运算等方式来定义。\n- **目标对象 Target**：通知所应用的对象。\n- **织入 Weaving**：织入是将切面和目标对象连接起来的过程，也就是将通知应用到切点匹配的连接点上。常见的织入时机有两种，分别是编译期织入（Compile-Time Weaving 如：AspectJ）和运行期织入（Runtime Weaving 如：AspectJ、Spring AOP）。\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/202410081918060.webp)\n\n\n## 入门示例\n\n一个 AOP 程序的示例：为 DeptServletImpl 类的所有方法增加一层统计其运行时间逻辑。\n\n![QQ截图20240511212142.png](https://cdn.gallery.uuanqin.top/img/QQ%E6%88%AA%E5%9B%BE20240511212142.webp)\n\n解释：\n\n- `TimeAspect` 是一个 AOP 程序。\n\t- `@Aspect` 注解说明当前类是 AOP 类（切面类）。\n\t- 这个类中的模板方法执行以下操作：\n\t\t1. 记录开始时间\n\t\t2. 调用原始方法运行\n\t\t3. 记录结束时间并输出日志\n\t- `@Around` 注解填写切入点表达式，针对某些方法进行编程\n\n执行流程：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240511213435.webp)\n\nSpringAOP 的底层是基于动态代理实现的。程序最后注入的就不是目标对象，而是代理对象。代理对象完成了我们所编写的增强的功能。\n\n# 通知类型\n\n| 通知类型              | 名称      | 在目标方法执行位置 | 备注                        | IDEA 中的图标                                                                                      |\n| ----------------- | ------- | --------- | ------------------------- | --------------------------------------------------------------------------------------------- |\n| `@Around`         | 环绕通知    | 前、后       | 如果原始方法抛异常，那么原始方法后的代码就不会执行 | ![aroundAdvice.svg](https://cdn.gallery.uuanqin.top/img/aroundAdvice.svg)<br>                 |\n| `@Before`         | 前置通知    | 前         |                           | ![beforeAdvice.svg](https://cdn.gallery.uuanqin.top/img/beforeAdvice.svg)<br>                 |\n| `@After`          | 后置通知    | 后         | 无论是否有异常都执行，因此又叫做最终通知      | ![afterAdvice.svg](https://cdn.gallery.uuanqin.top/img/afterAdvice.svg)<br>                   |\n| `@AfterReturning` | 返回后通知   | 后         | 发生异常**不会**执行              | ![afterReturningAdvice.svg](https://cdn.gallery.uuanqin.top/img/afterReturningAdvice.svg)<br> |\n| `@AfterThrowing`  | 抛出异常后通知 | -         | 发生异常后执行                   | ![img](https://cdn.gallery.uuanqin.top/img/afterThrowingAdvice.svg)                           |\n\n![image.png|425](https://cdn.gallery.uuanqin.top/img/202410081927615.webp)\n\n\n关于环绕通知：\n\n- `@Around` 环绕通知需要自己调用 `ProceedingJoinPoint.proceed()` 来让原始方法执行，其他通知不需要考虑目标方法执行\n- `@Around` 环绕通知方法的返回值，必须指定为 `Object`，来接收原始方法的返回值。\n\n`@PointCut`：该注解的作用是将公共的切点表达式抽取出来，需要用到时引用该切点表达式即可。被注解的方法访问级别：\n\n- `private`：仅能在当前切面类中引用该表达式\n- `public`：在其他外部的切面类中也可以引用该表达式\n\n## 切面类示例\n\n```java\n@Slf4j\n@Component\n@Aspect\npublic class MyAspect1 {\n\n\t// 抽取切入点表达式，避免代码重复\n    @Pointcut(\"execution(* com.itheima.service.impl.DeptServiceImpl.*(..))\")\n    public void pt(){} // 公有函数 \n\n    @Before(\"pt()\")\n    public void before(){ log.info(\"before ...\"); }\n\n    @Around(\"pt()\")\n    public Object around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {\n        log.info(\"around before ...\");\n\n        //调用目标对象的原始方法执行\n        Object result = proceedingJoinPoint.proceed();\n\n        log.info(\"around after ...\");\n        return result;\n    }\n\n    @After(\"pt()\")\n    public void after(){ log.info(\"after ...\");  }\n\n    @AfterReturning(\"pt()\")\n    public void afterReturning(){ log.info(\"afterReturning ...\");  }\n\n    @AfterThrowing(\"pt()\")\n    public void afterThrowing(){  log.info(\"afterThrowing ...\");  }\n}\n```\n\n# 通知顺序\n\n通知顺序：当有多个切面的切入点都匹配到了目标方法，目标方法运行时，多个通知方法都会被执行。\n\n1. 不同切面类中，默认按照切面类的类名字母排序\n\t- 目标方法前的通知方法：字母排名靠前的先执行\n\t- 目标方法后的通知方法：字母排名靠前的后执行\n2. 用 `@Order(number)` 加在切面类上来数字控制顺序\n\t- 目标方法前的通知方法：数字小的先执行\n\t- 目标方法后的通知方法：数字小的后执行\n\n# 切入点表达式\n\n切入点表达式：描述切入点方法的一种表达式。主要用来决定项目中的哪些方法需要加入通知。\n\n常见形式：\n\n- `execution(...)`：根据方法的签名来匹配\n- `@annotation(...)`：根据注解匹配\n\n## `execution()`\n\n`execution` 主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为：\n\n```java\nexecution([访问修饰符] 返回值 [packageName.className]methodName(methodParams) [throws 异常])\n\n// packageName.className 不建议省略，否则容易导致匹配范围过大，性能降低\n// 上面的异常指的是方法上声明抛出的异常，不是实际抛出的异常\n// 方法参数类型写全类名，比如java.lang.Integer\n// 多个切入点表达式可以通过 || 连接\n```\n\n可以使用的通配符：\n\n- `*`：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分\n- `..`：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数\n\n根据业务需要，可以使用 `&&`、`||`、`!` 来组合比较复杂的切入点表达式。\n\n一些示例：\n\n```java\nexecution(* com.*.service.*.update*(*))\nexecution(* com.*.uuanqin..DeptService.*(..))\nexecution(* *(..))  // 最为通配的方法，慎用\n```\n\n```java\n@Pointcut(\"execution(* com.itheima.service.impl.DeptServiceImpl.*(..))\")\n\n@Pointcut(\n\t\"execution(* com.itheima.service.impl.DeptServiceImpl.list(..)) || \"+\n\t\"execution(* com.itheima.service.impl.DeptServiceImpl.delete(..))\"\n)\n```\n\n书写建议：\n\n- 所有业务方法名在命名时尽量规范，方便切入点表达式快速匹配。如：查询类方法都是 `find` 开头，更新类方法都是 `update` 开头。\n- 描述切入点方法通常基于接口描述，而不是直接描述实现类，增强拓展性。\n- 在满足业务需要的前提下，尽量缩小切入点的匹配范围。如：包名匹配尽量不使用 `..`，可以使用 `*` 匹配单个包。\n\n## `@annotation()`\n\n`@annotation` 切入点表达式，用于匹配标识有特定注解的方法。\n\n自定义注解：\n\n```java\n@Retention(RetentionPolicy.RUNTIME) // 注解运行时有效\n@Target(ElementType.METHOD)         // 注解标识在方法上\npublic @interface MyLog {}\n```\n\n切入点表达式示例，它将作用于标注有 `@MyLog` 的方法上：\n\n```java\n@Pointcut(\"@annotation(your.package.MyLog)\")\n```\n\n# 连接点\n\n在 Spring 中用 JoinPoint 抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。\n\n两种对象获取信息的方式是一致的：\n\n- 对于 `@Around` 通知，获取连接点信息只能使用 `ProceedingJoinPoint`\n- 对于其他四种通知，获取连接点信息只能使用 `JoinPoint`，它是 `ProceedingJoinPoint` 的父类型\n\n获取目标对象的相关信息示例：\n\n```java\n//切面类\n@Slf4j\n@Aspect\n@Component\npublic class MyAspect8 {\n\n    @Pointcut(\"execution(* com.uuanqin.service.DeptService.*(..))\")\n    private void pt(){}\n\n    @Before(\"pt()\")\n    public void before(JoinPoint joinPoint){\n        log.info(\"MyAspect8 ... before ...\");\n        //1. 获取 目标对象的类名 .\n        String className = joinPoint.getTarget().getClass().getName();\n        log.info(\"目标对象的类名：{}\", className);\n\n        //2. 获取 目标方法的方法名 .\n        String methodName = joinPoint.getSignature().getName();\n        log.info(\"目标方法的方法名：{}\",methodName);\n\n        //3. 获取 目标方法运行时传入的参数 .\n        Object[] args = joinPoint.getArgs();\n        log.info(\"目标方法运行时传入的参数：{}\", Arrays.toString(args));\n    }\n\n    @Around(\"pt()\")\n    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {\n        log.info(\"MyAspect8 around before …\");\n\n        //1. 获取 目标对象的类名 .\n        String className = joinPoint.getTarget().getClass().getName();\n        log.info(\"目标对象的类名：{}\", className);\n\n        //2. 获取 目标方法的方法名 .\n        String methodName = joinPoint.getSignature().getName();\n        log.info(\"目标方法的方法名：{}\",methodName);\n\n        //3. 获取 目标方法运行时传入的参数 .\n        Object[] args = joinPoint.getArgs();\n        log.info(\"目标方法运行时传入的参数：{}\", Arrays.toString(args));\n\n        //4. 放行 目标方法执行 .\n        Object result = joinPoint.proceed(); // 我们可以对返回值进行篡改\n\n        //5. 获取 目标方法运行的返回值 .\n        log.info(\"目标方法运行的返回值：{}\",result);\n\n        log.info(\"MyAspect8 around after …\");\n        return result;\n    }\n}\n```\n\n# 应用实例\n\n## 记录操作日志\n\n日志信息包含：操作人、操作时间、执行方法的全类名、执行方法名、方法运行时参数、返回值、方法执行时长。\n\n思路：需要对所有业务类中的增、删、改 方法添加统一功能，使用 AOP 技术最为方便。\n\n步骤：\n\n- 引入 AOP 起步依赖\n- 准备好日志相关的表结构，并引入实体类\n- 准备好一个自定义注解，实现切入点表达式的 `@annotation()` 方法。\n- 定义切面类，完成记录操作日志的逻辑。\n\n## 权限控制\n\n背景：在 Controller 中，一些方法需要获取管理员权限才能调用。我们可以通过加上注解的方式实现权限控制。\n\n定义一些权限常量：\n\n```java\npublic interface UserConstant {\n\n    /**\n     * 用户登录态键\n     */\n    String USER_LOGIN_STATE = \"user_login\";\n\n    //  region 权限\n\n    /**\n     * 默认角色\n     */\n    String DEFAULT_ROLE = \"user\";\n\n    /**\n     * 管理员角色\n     */\n    String ADMIN_ROLE = \"admin\";\n\n    /**\n     * 被封号\n     */\n    String BAN_ROLE = \"ban\";\n\n    // endregion\n}\n```\n\n定义注解：\n\n```java\n/**\n * 权限校验\n *\n * @author uuanqin\n */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface AuthCheck {\n\n    /**\n     * 必须有某个角色\n     *\n     * @return\n     */\n    String mustRole() default \"\";\n\n}\n```\n\nAOP 切面实现类：\n\n```java\n/**\n * 权限校验 AOP\n */\n@Aspect\n@Component\npublic class AuthInterceptor {\n\n    /**\n     * 执行拦截\n     *\n     * @param joinPoint\n     * @param authCheck\n     * @return\n     */\n    @Around(\"@annotation(authCheck)\")\n    public Object doInterceptor(ProceedingJoinPoint joinPoint, AuthCheck authCheck) throws Throwable {\n        String mustRole = authCheck.mustRole();\n        RequestAttributes requestAttributes = RequestContextHolder.currentRequestAttributes();\n        HttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest();\n\n\t\t// 一些权限校验逻辑。比如查数据库等操作，检查用户的权限字段是否和mustRole匹配。\n\t\t// 不匹配抛异常或者返回错误信息等。\n\n        // 如果通过权限校验，则放行\n        return joinPoint.proceed();\n    }\n}\n```\n\n在 Controller 中可以通过加上一条注解即可实现权限校验：\n\n```java\n/**\n * 更新（仅管理员）\n *\n * @param interfaceInfoUpdateRequest\n * @return\n */\n@PostMapping(\"/update\")\n@AuthCheck(mustRole = UserConstant.ADMIN_ROLE)\npublic BaseResponse<Boolean> updateInterfaceInfo(@RequestBody InfoUpdateRequest InfoUpdateRequest) {\n\t// 省略一些校验逻辑\n\treturn ResultUtils.success(result);\n}\n```\n\n关于 Request 不同的获取方式详看这篇文章：[RequestContextHolder详解（获取request对象的四种方法） - 周文豪 - 博客园 (cnblogs.com)](https://www.cnblogs.com/zwh0910/p/17168833.html)\n\n## 全局异常处理器\n\n`@RestControllerAdvice` 是 Spring 框架提供的一个切面注解，用于定义全局异常处理器和全局数据绑定设置。它结合了 `@ControllerAdvice` 和 `@ResponseBody` 两个注解的功能：\n\n- `@ControllerAdvice` 是一个用于定义全局控制器增强（即全局异常处理和全局数据绑定）的注解。通过使用 `@ControllerAdvice`，我们可以将异常处理和数据绑定逻辑集中到一个类中，避免在每个控制器中重复编写相同的异常处理代码。\n- `@ResponseBody` 是用于指示控制器方法返回的对象将被直接写入响应体中的注解。它告诉 Spring 将方法的返回值序列化为 JSON 或其他适当的响应格式，并将其作为 HTTP 响应的主体返回给客户端。\n\n作用：\n\n- 捕获代码中所有的异常，内部消化，让前端得到更详细的业务报错 / 信息\n- 同时屏蔽掉项目框架本身的异常（不暴露服务器内部状态）\n- 集中处理，比如记录日志\n\n全局异常处理器切面类示例写法：\n\n```java\n/**\n * 全局异常处理器\n * @author uuanqin\n */\n@RestControllerAdvice\n@Slf4j\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(BusinessException.class)\n    public BaseResponse<?> businessExceptionHandler(BusinessException e) {\n        log.error(\"BusinessException\", e);\n        return ResultUtils.error(e.getCode(), e.getMessage());\n    }\n\n    @ExceptionHandler(RuntimeException.class)\n    public BaseResponse<?> runtimeExceptionHandler(RuntimeException e) {\n        log.error(\"RuntimeException\", e);\n        return ResultUtils.error(ErrorCode.SYSTEM_ERROR, \"系统错误\");\n    }\n}\n```\n\n注意事项：\n\n- `@RestControllerAdvice` 并不能捕获所有异常，例如 Error 类的子类（如 `OutOfMemoryError`）通常无法被捕获。\n- 某些异常可能会被其他全局异常处理器或框架层面的异常处理机制捕获，而不会被 `@RestControllerAdvice` 处理。\n- `Error` 及其子类：`Error` 是 `Throwable` 的子类，表示严重的错误，通常由虚拟机抛出，如 `OutOfMemoryError`、`StackOverflowError` 等。`这些异常通常意味着应用程序处于不可恢复的状态`，因此无法被 `@RestControllerAdvice` 捕获。\n- `ThreadDeath`：`ThreadDeath` 是 `Error` 的子类，它表示线程意外终止的异常。与其他 `Error` 一样，`ThreadDeath` 异常也无法被 `@RestControllerAdvice` 捕获。\n- `VirtualMachineError` 及其子类：`VirtualMachineError` 是 `Error` 的子类，表示与 Java 虚拟机相关的错误，如 `InternalError`、`UnknownError` 等。这些错误通常与虚拟机的内部状态或配置有关，无法被 `@RestControllerAdvice` 捕获。\n\n下面罗列一些上面全局异常处理器配套的类。\n\n自定义异常类：\n\n```java\n/**\n * 自定义异常类\n *\n * @author uuanqin\n */\npublic class BusinessException extends RuntimeException {\n\n    /**\n     * 错误码\n     */\n    private final int code;\n\n    public BusinessException(int code, String message) {\n        super(message);\n        this.code = code;\n    }\n\n    public BusinessException(ErrorCode errorCode) {\n        super(errorCode.getMessage());\n        this.code = errorCode.getCode();\n    }\n\n    public BusinessException(ErrorCode errorCode, String message) {\n        super(message);\n        this.code = errorCode.getCode();\n    }\n\n    public int getCode() {\n        return code;\n    }\n}\n```\n\n自定义错误码示例：\n\n```java\n/**\n * 自定义错误码\n * @author uuanqin\n */\npublic enum ErrorCode {\n\n    SUCCESS(0, \"ok\"),\n    PARAMS_ERROR(40000, \"请求参数错误\"),\n    NOT_LOGIN_ERROR(40100, \"未登录\"),\n    NO_AUTH_ERROR(40101, \"无权限\"),\n    NOT_FOUND_ERROR(40400, \"请求数据不存在\"),\n    FORBIDDEN_ERROR(40300, \"禁止访问\"),\n    SYSTEM_ERROR(50000, \"系统内部异常\"),\n    OPERATION_ERROR(50001, \"操作失败\");\n\n    /**\n     * 状态码\n     */\n    private final int code;\n\n    /**\n     * 信息\n     */\n    private final String message;\n\n    ErrorCode(int code, String message) {\n        this.code = code;\n        this.message = message;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n}\n```\n\n返回工具类：\n\n```java\n/**\n * 返回工具类\n *\n * @author uuanqin\n */\npublic class ResultUtils {\n\n    /**\n     * 成功\n     */\n    public static <T> BaseResponse<T> success(T data) {\n        return new BaseResponse<>(0, data, \"ok\");\n    }\n\n    /**\n     * 失败\n     */\n    public static BaseResponse error(ErrorCode errorCode) {\n        return new BaseResponse<>(errorCode);\n    }\n\n    /**\n     * 失败\n     */\n    public static BaseResponse error(int code, String message) {\n        return new BaseResponse(code, null, message);\n    }\n\n    /**\n     * 失败\n     */\n    public static BaseResponse error(ErrorCode errorCode, String message) {\n        return new BaseResponse(errorCode.getCode(), null, message);\n    }\n}\n```\n\n抛异常工具类：\n\n```java\n/**\n * 抛异常工具类\n *\n * @author uuanqin\n */\npublic class ThrowUtils {\n\n    /**\n     * 条件成立则抛异常\n     */\n    public static void throwIf(boolean condition, RuntimeException runtimeException) {\n        if (condition) {\n            throw runtimeException;\n        }\n    }\n\n    /**\n     * 条件成立则抛异常\n     */\n    public static void throwIf(boolean condition, ErrorCode errorCode) {\n        throwIf(condition, new BusinessException(errorCode));\n    }\n\n    /**\n     * 条件成立则抛异常\n     */\n    public static void throwIf(boolean condition, ErrorCode errorCode, String message) {\n        throwIf(condition, new BusinessException(errorCode, message));\n    }\n}\n```\n\n\n# 本文参考\n\n- [Day13-05. AOP基础-核心概念_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1m84y1w7Tb?p=176&spm_id_from=pageDriver&vd_source=e03d48176855fc5349b27aef691f9cdb)\n- [IntelliJ Platform Icons (jetbrains.design)](https://intellij-icons.jetbrains.design/)\n- [全局异常捕获（@RestControllerAdvice）介绍和使用-CSDN博客](https://blog.csdn.net/c103363/article/details/136812854)\n- [IoC & AOP详解（快速搞懂） | JavaGuide](https://javaguide.cn/system-design/framework/spring/ioc-and-aop.html#aop-%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98)","categories":[{"name":"技术学习","api":"api/categories/技术学习.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"SpringBoot","api":"api/tags/SpringBoot.json"},{"name":"AOP","api":"api/tags/AOP.json"},{"name":"Spring AOP","api":"api/tags/Spring-AOP.json"}]},"api":"api/posts/p/e036b68e.json"}