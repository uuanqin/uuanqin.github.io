{"title":"SpringBoot 的原理以及写一个自定义 Starter","tags":["Java","SpringBoot","Spring","starter","SDK","maven","Hutool"],"cover":"https://cdn.gallery.uuanqin.top/img/20240717190725.webp","description":"记录开发简易 Starter 的基本步骤","abbrlink":"21b7da2d","categories":["技术学习"],"date":"2024-07-16T21:25:56.000Z","top_img":null,"summary":"Spring 与 SpringBoot Spring 发展到今天已经形成了一种开发生态圈，Spring 提供了若干个子项目，每个项目用于完成特定的功能。 Spring 和 SpringBoot： Spring Boot 可以帮助我们非常快速的构建应用程序、简化开发、提高效率。SpringBoot 简化配置，本质还是 Spring，SpringBoot 不能替代 Spring。官方推荐的学习路径可以从 SpringBoot 开始。 SpringBoot 使用简单快捷的原因是因为底层提供了： 起步依赖：简化 `pom.xml` 的配置 自动配置：简化 bean 的声明以及配置 > 当我们提到 SpringBoot 的原理时，就指的是起步依赖和自动配置的原理。在面试中，如果问 SpringBoot 原理，就是在着重问你自动配置的原理（面试高频）。 SpringBoot 的原理 起步依赖（Starters） 利用 Maven 的依赖传递，我们可以直接简单引用起步依赖即可自动引用常见依赖： `spring-boot-starter-web`：包含了 web 应用开发所需要的常见依赖。内嵌有 Tomcat。 `spring-boot-starter-test`：包含了单元测试所需要的常见依赖。 `spring-boot-starter-aop`：AOP 起步依赖 起步依赖的版本号都在父工程中指定（在 `pom.xml` 中被 `<parent>` 标签括住的内容）。 > Maven 的依赖传递示意： 自动配置 SpringBoot 的自动配置就是当 spring 容器启动后，一些配置类、bean 对象就自动存入到了 IoC 容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。 IDEA 中查看所有 Bean 对象示例： 自动配置方式示例 在启动类前加上 `@ComponentScan` 指定扫描的范围 启动类前加上 `@Import` 导入 启动类前使用 `@EnableXxxx` 注解，该注解封装了 `@Import`。这种方式更方便和优雅，是 SpringBoot 中所采用的方式。只有第三方依赖提供者最清楚应该导入什么类。 源码浅析自动装配原理 启动类/引导类注解 `@SpringBootApplication` 是 SpringBoot 项目的基石。..."}