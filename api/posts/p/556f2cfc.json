{"data":{"title":"【麒麟实训】撷英分享","slug":"【麒麟实训】撷英分享","description":"麒麟实训期间的技术积累。","date":"2022-04-26T14:25:43.000Z","updated":"2024-08-30T11:16:44.248Z","language":"zh-CN","comments":true,"url":"p/556f2cfc/","cover":"https://cdn.gallery.uuanqin.top/img/20240730234421.webp","images":[],"content":"\n<div class=\"callout\" data-callout=\"notice\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">文章重组提示 <code>240730</code></div>\n</div>\n<div class=\"callout-content\"><p>本文将以下文章进行聚合：</p>\n<ul>\n<li>【麒麟实训】Deb 的打包（小练习分享）</li>\n<li>【麒麟实训】撷英 1 - Pyqt 程序编译与打包探索</li>\n<li>【麒麟实训】撷英 2 - Python 代码控制 word 文档模板</li>\n<li>【麒麟实训】撷英 3 - Python 执行 Linux 命令公共方法</li>\n</ul>\n</div></div><h1 id=\"麒麟实训deb-的打包小练习分享\"><a class=\"markdownIt-Anchor\" href=\"#麒麟实训deb-的打包小练习分享\"></a> 【麒麟实训】Deb 的打包（小练习分享）</h1>\n<p>练习 Deb 的打包流程。<strong>本文章为一次小练习的记录，操作过程多少有瑕疵，可能不适合实践参考。</strong>“实训撷英”专栏将有更专门的打包介绍。</p>\n<p>文章部分内容来源于我的实训工作文档：<strong>《练习 1 过程文档（改进）》、《练习 2 过程文档（改进）》</strong>。规范的打包过程请参考《麒麟软件打包规范》。</p>\n<h2 id=\"deb-的二进制文件打包\"><a class=\"markdownIt-Anchor\" href=\"#deb-的二进制文件打包\"></a> Deb 的二进制文件打包</h2>\n<p>创建 DEBIAN 文件夹、etc、opt、usr 文件夹。</p>\n<p>目录格式：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-64.png\" alt=\"\" width=\"324px\" /></p>\n<p>在 DEBIAN 文件夹下创建 control 文件：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-65.png\" alt=\"\" width=\"308px\" /></p>\n<blockquote>\n<p>企业老师给出的意见：</p>\n<p><strong>control 文件中包含空的关键字，应该删除，如 section 无对应信息则不存在。</strong></p>\n</blockquote>\n<p>最终的目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── DEBIAN</span><br><span class=\"line\">│   └── control</span><br><span class=\"line\">├── etc</span><br><span class=\"line\">├── opt</span><br><span class=\"line\">│   └── sublime-text</span><br><span class=\"line\">│       ├── changelog.txt</span><br><span class=\"line\">│       ├── crash_reporter</span><br><span class=\"line\">│       ├── Lib</span><br><span class=\"line\">│       ├── libcrypto.so.1.1</span><br><span class=\"line\">│       ├── libssl.so.1.1</span><br><span class=\"line\">│       ├── Packages</span><br><span class=\"line\">│       ├── plugin_host-3.3</span><br><span class=\"line\">│       ├── plugin_host-3.8</span><br><span class=\"line\">|       ├── Icon </span><br><span class=\"line\">│       └── sublime_text</span><br><span class=\"line\">└── usr</span><br><span class=\"line\">    └── share</span><br><span class=\"line\">        └── applications</span><br><span class=\"line\">        │   └── sublime_text.desktop</span><br><span class=\"line\">        └──icons</span><br><span class=\"line\">        └── hicolor</span><br><span class=\"line\">        \t├──128x128</span><br><span class=\"line\">            │   └── apps</span><br><span class=\"line\">            │   └── sublime-text.png</span><br><span class=\"line\">            └──256x256</span><br><span class=\"line\">            ... ...</span><br></pre></td></tr></table></figure>\n<p>打包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -b project project_v1.0.0_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i project_v1.0.0_amd64.deb</span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-66.png\" alt=\"\" width=\"500px\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/3419d8f19c789d4a0df5853d710f223.png\" alt=\"\" width=\"351px\" /></p>\n<p>新程序</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20220427112054890.png\" alt=\"\" width=\"500px\" /></p>\n<p>运行效果</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-69.png\" alt=\"\" width=\"500px\" /></p>\n<p>卸载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -r project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 干净卸载：</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -P sublime-text</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://blog.csdn.net/LvJzzZ/article/details/109452895\">deb打包流程步骤_逐渐江江江江化的博客-CSDN博客_deb打包</a></p>\n<h2 id=\"问题解决\"><a class=\"markdownIt-Anchor\" href=\"#问题解决\"></a> 问题解决</h2>\n<h3 id=\"开始菜单图标显示不出来的问题\"><a class=\"markdownIt-Anchor\" href=\"#开始菜单图标显示不出来的问题\"></a> 开始菜单图标显示不出来的问题</h3>\n<p>请注意：图标目录<strong>Icons</strong>的名称和位置进行正确的设置、以及放置。参看上文给的目录树。</p>\n<p>比如正确的放置方法时：icons/hicolor/128x128/下，还需要建立 apps 文件夹，里面放置 png 图标。</p>\n<h3 id=\"打包报错软件包名字错误\"><a class=\"markdownIt-Anchor\" href=\"#打包报错软件包名字错误\"></a> 打包报错：软件包名字错误</h3>\n<p>注意，“Package”字段的内容，用“-”（减号）不用“_&quot;（下划线）哦，否则会报以下错误：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/b1019d44efa1006555b419258d254b2.png\" alt=\"\" /></p>\n<p>借 shibo 同学的图</p>\n<h3 id=\"打包报错与本机架构不符\"><a class=\"markdownIt-Anchor\" href=\"#打包报错与本机架构不符\"></a> 打包报错：与本机架构不符</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg --add-architecture amd64</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://blog.csdn.net/qiuchangyong/article/details/97505379\">Ubuntu使用dpkg查看与修改architecture的用法_qiuchangyong的博客-CSDN博客</a></p>\n<h2 id=\"deb-源码打包\"><a class=\"markdownIt-Anchor\" href=\"#deb-源码打包\"></a> Deb 源码打包</h2>\n<p>下载源码压缩包，解压。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf p7zip.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将解压后的文件移动到构造好的目录中，得到以下目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── opt</span><br><span class=\"line\">│   └── apps</span><br><span class=\"line\">│       └── p7zip</span><br><span class=\"line\">│           ├── Asm</span><br><span class=\"line\">│           │   └── x86</span><br><span class=\"line\">│           ├── C</span><br><span class=\"line\">│           ├── check</span><br><span class=\"line\">│           ├── contrib</span><br><span class=\"line\">│           ├── CPP</span><br><span class=\"line\">│           ├── DOC</span><br><span class=\"line\">│           ├── GUI</span><br><span class=\"line\">│           ├── man1</span><br><span class=\"line\">│           └── Utils     // 不应该存放源码</span><br><span class=\"line\">└── usr</span><br><span class=\"line\">    └── share</span><br><span class=\"line\">        ├── applications</span><br><span class=\"line\">        └── icons</span><br><span class=\"line\">            └── hicolor</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>企业老师给出的意见：</p>\n<p>_ 不应该 _ 将源码文件全部存放到/opt/apps/p7zip 目录下（因为是二进制软件包，不应该将源码存放到对应目录下）；不应该有空目录/usr/share/icons/hicolor</p>\n</blockquote>\n<p>在/p7zip-16.02 目录下执行指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dh_make --createorig -s</span><br></pre></td></tr></table></figure>\n<p>生成 debian 文件夹。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20220506102802357.png\" alt=\"image-20220506102802357\" /></p>\n<p>修改 debian/control</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20220506104427558.png\" alt=\"image-20220506104427558\" width=\"475px\" /></p>\n<p>在 rules 中添加 Override：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20220506104934917.png\" alt=\"image-20220506104934917\" width=\"500px\" /></p>\n<p>在 debian 下创建 install 文件，并写入以下内容：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20220506110213565.png\" alt=\"image-20220506110213565\" width=\"500px\" /></p>\n<p>执行 debuild 命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debuild -i -us -uc -b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成过程需要补充安装以下软件（Build-Depends）</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install debhelper</span><br></pre></td></tr></table></figure>\n<p>这时，在源码文件的上一级目录会多出几个文件，其中就包括 deb 包：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20220506110901935.png\" alt=\"image-20220506110901935\" width=\"500px\" /></p>\n<p>执行安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i p7zip_16.02_all.deb</span><br></pre></td></tr></table></figure>\n<p>查看安装效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -l p7zip</span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20220506111049159.png\" alt=\"image-20220428215252343\" /></p>\n<p>可以正常卸载：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -P p7zip</span><br></pre></td></tr></table></figure>\n<p>卸载后查找不到 p7zip。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20220506111234325.png\" alt=\"image-20220506111234325\" width=\"500px\" /></p>\n<h2 id=\"deb-源码打包野生方法\"><a class=\"markdownIt-Anchor\" href=\"#deb-源码打包野生方法\"></a> Deb 源码打包（野生方法）</h2>\n<p>从网上找来的自己摸索的方法。可能不符合麒麟软件的打包规范。这是初次练习的成果。</p>\n<p>安装需要的工具：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install debmake</span><br><span class=\"line\">sudo apt-get install python3-debia</span><br><span class=\"line\">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>\n<p>生成 debian 文件夹配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debmake -e unknow@unknow.cn -p p7zip -u 16.02 -f &quot;unknow unknow&quot; -n</span><br></pre></td></tr></table></figure>\n<p>命令解释：</p>\n<ul>\n<li>邮件地址 <a href=\"mailto:unknow@unknow.cn\">unknow@unknow.cn</a></li>\n<li>软件包名 p7zip</li>\n<li>软件版本号 16.02</li>\n<li>作者全名 unknow unknow</li>\n</ul>\n<p>命令执行后，会多出 debian 文件夹：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/QQ截图20220427123914.png\" alt=\"QQ截图20220427123914\" width=\"475px\" /></p>\n<p>编辑 debian/control</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/QQ截图20220427235600.png\" alt=\"QQ截图20220427235600\" width=\"475px\" /></p>\n<p>生成 deb 包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg-buildpackage -us -uc -tc</span><br><span class=\"line\"></span><br><span class=\"line\"># 生成过程需要补充安装以下软件（Build-Depends）</span><br><span class=\"line\">sudo apt-get install debhelper</span><br></pre></td></tr></table></figure>\n<p>这是，在源码文件的上一级目录会多出几个文件，其中就包括 deb 包：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/QQ截图20220427230246.png\" alt=\"QQ截图20220427230246\" width=\"215px\" /></p>\n<p>执行安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i p7zip_16.02_amd64.deb</span><br></pre></td></tr></table></figure>\n<p>查看安装效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -l p7zip</span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/QQ截图20220427235449.png\" alt=\"QQ截图20220427235449\" /></p>\n<p>参考：<a href=\"https://www.csdn.net/tags/NtjaEg0sNjY5NDMtYmxvZwO0O0OO0O0O.html\">debmake - CSDN</a></p>\n<h2 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\"></a> 其他</h2>\n<h3 id=\"虚拟机-kylin-系统的安装\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机-kylin-系统的安装\"></a> 虚拟机 Kylin 系统的安装</h3>\n<p>请参看：<a href=\"https://www.jianshu.com/p/24a52d78d5a6\">使用VirtualBox安装Kylin桌面版操作系统 - 简书 (jianshu.com)</a></p>\n<p>屏幕调大的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xrandr -s 1920x1200_60 # 在麒麟终端输入</span><br></pre></td></tr></table></figure>\n<p>自己多试一下：</p>\n\n<div class=\"callout\" data-callout=\"error\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-zap\"><polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"/></svg>\n</div>\n<div class=\"callout-title-inner\">图片失效</div>\n</div>\n<div class=\"callout-content\"><p>原文此位置包含图片，现链接已被覆盖造成丢失，且复查时存在疏漏。原图片命名为：image-70.png</p>\n</div></div><p>或者在麒麟桌面设置那里调，一劳永逸。</p>\n<h3 id=\"tree-命令\"><a class=\"markdownIt-Anchor\" href=\"#tree-命令\"></a> tree 命令</h3>\n<p>安装：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install tree</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tree</span><br><span class=\"line\">$ tree -d # 仅列出目录</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://blog.csdn.net/weixin_31445091/article/details/116543595\">linux tree命令,Linux tree命令实例详解_章鱼老师的博客-CSDN博客</a></p>\n<h1 id=\"麒麟实训撷英-1-pyqt-程序编译与打包探索\"><a class=\"markdownIt-Anchor\" href=\"#麒麟实训撷英-1-pyqt-程序编译与打包探索\"></a> 【麒麟实训】撷英 1 - Pyqt 程序编译与打包探索</h1>\n<p>本篇文章内容仅供简略参考。</p>\n<p>文章内容来源于我的<strong>飞书文档&gt;麒麟实训&gt;大作业 - 编译与打包</strong>，更多问题的详细记录、示例文件以及调研文档请参看源文档。</p>\n<h2 id=\"python-源码编译\"><a class=\"markdownIt-Anchor\" href=\"#python-源码编译\"></a> Python 源码编译</h2>\n<p>python 编译</p>\n<p>安装 pyinstaller:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install https://github.com/pyinstaller/pyinstaller/tarball/develop</span><br></pre></td></tr></table></figure>\n<p>只需对入口文件执行命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 两种打包方式</span></span><br><span class=\"line\">pyinstaller -F run.py <span class=\"comment\"># 打包成一个二进制文件，但启动速度慢</span></span><br><span class=\"line\">pyinstaller -D run.py <span class=\"comment\"># 打包出多个文件，程序启动速度快</span></span><br></pre></td></tr></table></figure>\n<p>参考：</p>\n<p><a href=\"http://c.biancheng.net/view/2690.html\">Python PyInstaller安装和使用教程（详解版） (biancheng.net)</a></p>\n<p><a href=\"https://blog.csdn.net/qq_38316721/article/details/122599987\">PyQt5软件打包_王火火的博客-CSDN博客_pyqt打包</a></p>\n<h2 id=\"pyqt-窗口图标\"><a class=\"markdownIt-Anchor\" href=\"#pyqt-窗口图标\"></a> Pyqt 窗口图标</h2>\n<p>关于应用程序窗口图标显示问题可参考：<a href=\"http://t.zoukankan.com/jingsupo-p-13536449.html\">http://t.zoukankan.com/jingsupo-p-13536449.html</a></p>\n<p>加代码的地方：在 ui <a href=\"http://xn--vnu486bqgs.py\">转成的.py</a> 文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">self</span>.setWindowIcon(QIcon(<span class=\"string\">&#x27;:/signal-slot-demo.ico&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p>打包后，编译生成的二进制文件的同级目录需要放上图标。</p>\n<h2 id=\"打包过程总览\"><a class=\"markdownIt-Anchor\" href=\"#打包过程总览\"></a> 打包过程总览</h2>\n<ol>\n<li>按照《麒麟软件打包规范》构造 deb 包目录</li>\n<li>打开源码项目执行 <code>pyinstaller -D run.py -n signal-slot-demo</code></li>\n<li>在 pyinstaller 中生成的 signal-slot-demo 文件夹中添加 icon 图标。并将该文件夹放入构造好的 deb 包目录下的/opt/apps/中</li>\n</ol>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/asynccode\" alt=\"img\" /></p>\n<ol start=\"4\">\n<li>进入构造好的目录，执行命令：<code>debuild -i -us -uc -b</code></li>\n<li>返回上一级目录执行：<code>sudo dpkg -i signal-slot-demo_1.0.0-1_all.deb</code></li>\n</ol>\n<p>结果：运行正常。窗口图标、任务栏图标、开始菜单栏图标运行正常。（开始菜单栏中的图标是.desktop 文件中 Icon 指定的 svg 图标。程序窗口以及任务栏图标是 Pyqt 中代码指定的图标。）</p>\n<h2 id=\"具体文件示例\"><a class=\"markdownIt-Anchor\" href=\"#具体文件示例\"></a> 具体文件示例</h2>\n<p>Control 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Source: signal-slot-demo</span><br><span class=\"line\">Version: 1.0.0</span><br><span class=\"line\">Maintainer: Wu WanQin &lt;wuanqin@tju.edu.cn&gt;</span><br><span class=\"line\">Section: unknown</span><br><span class=\"line\">Priority: optional</span><br><span class=\"line\">Build-Depends: debhelper</span><br><span class=\"line\">Standards-Version: 4.4.1</span><br><span class=\"line\">Homepage: https://uuanqin.top</span><br><span class=\"line\"></span><br><span class=\"line\">Package:signal-slot-demo</span><br><span class=\"line\">Multi-Arch: foreign</span><br><span class=\"line\">Architecture: all</span><br><span class=\"line\">Depends: $&#123;shlibs:Depends&#125;, $&#123;misc:Depends&#125;</span><br><span class=\"line\">Description: 信号与信号槽示例。</span><br></pre></td></tr></table></figure>\n<p>Install 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opt/apps/signal-slot-demo/ /opt/apps</span><br><span class=\"line\">usr/share /usr/</span><br></pre></td></tr></table></figure>\n<p>.desktop 文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Name=Signal-Slot-Demo</span><br><span class=\"line\">Comment=An example</span><br><span class=\"line\">Exec=/opt/apps/signal-slot-demo/signal-slot-demo %F</span><br><span class=\"line\">Icon=/usr/share/icons/scalable/apps/signal-slot-demo.svg</span><br><span class=\"line\">Terminal=false</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">X-Ubuntu-Touch=true</span><br><span class=\"line\">Categories=Office</span><br></pre></td></tr></table></figure>\n<h1 id=\"麒麟实训撷英-2-python-代码控制-word-文档模板\"><a class=\"markdownIt-Anchor\" href=\"#麒麟实训撷英-2-python-代码控制-word-文档模板\"></a> 【麒麟实训】撷英 2 - Python 代码控制 word 文档模板</h1>\n<p>通过 python 是可以控制 word 文档内容的，本篇文章简要介绍其原理，具体实现与实际案例可看我的开源项目。详细文档可查看我的<strong>飞书文档&gt;麒麟实训&gt;大作业 - 文档生成工具</strong>。</p>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\"></a> 简介</h2>\n<p>文档生成工具主要通过对自动化适配工具生成的 csv 报告、html 报告进行读取、解析、整理，进而生成指定的 word 总报告。</p>\n<p>项目地址：<a href=\"https://gitee.com/uuanqin/report_generator.git\">https://gitee.com/uuanqin/report_generator.git</a></p>\n<h2 id=\"基本原理\"><a class=\"markdownIt-Anchor\" href=\"#基本原理\"></a> 基本原理</h2>\n<p>每一个 word 文档都可以通过 xml 表示，这个 xml 中包含文字信息和格式信息。通过给定的 doc 报告模板，我们可以以 xml 的方式进行操作，在实现增删改查 xml 元素的同时保持原有给定的格式基本不变。</p>\n<h2 id=\"业务流程\"><a class=\"markdownIt-Anchor\" href=\"#业务流程\"></a> 业务流程</h2>\n<p>伪代码：</p>\n<ul>\n<li>获取所有生成最终报告需要的源报告路径</li>\n<li>根据路径对文件及文件夹进行读取</li>\n<li>对每个文件中的数据提取、解析、整理</li>\n<li>读取报告模板，填写每个部分的 word 表格</li>\n<li>“FAIL&quot;,“PASS” 字体染色</li>\n<li>保存为中间文件 <em>temp.xml</em></li>\n<li>读取 <em>temp.xml</em>，替换其中的变量，保存为中间文件 <em>麒麟操作系统适配认证自动化测试报告.xml</em></li>\n<li>移动 <em>麒麟操作系统适配认证自动化测试报告.xml</em> 到目标文件夹中，修改后缀为.doc</li>\n</ul>\n<h2 id=\"效果示例\"><a class=\"markdownIt-Anchor\" href=\"#效果示例\"></a> 效果示例</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20220701160509387.png\" alt=\"image-20220701160509387\" /></p>\n<h2 id=\"文档对象插入\"><a class=\"markdownIt-Anchor\" href=\"#文档对象插入\"></a> 文档对象插入</h2>\n<p>关于 python 控制 word 中的文档对象可查看以下方法：</p>\n<p><a href=\"https://blog.csdn.net/u011420268/article/details/106402153/\">python在word文档里插入文件对象_奶爸大山的博客-CSDN博客_python word附件</a></p>\n<p>经我与导师们实际调研与操作得到以下结论：</p>\n<ul>\n<li>需要事先在 word 插入好文档对象，我们才可能通过代码改变这个文档对象。</li>\n<li>python 代码中只能改变文档对象指向的内容，新增加文档对象。</li>\n<li>支持改变的文档对象只能是 xlsx 格式或 docx 格式，其他格式的文档对象插入时，生成的 ole.bin 文件暂时没找到办法进行生成。</li>\n</ul>\n<h1 id=\"麒麟实训撷英-3-python-执行-linux-命令公共方法\"><a class=\"markdownIt-Anchor\" href=\"#麒麟实训撷英-3-python-执行-linux-命令公共方法\"></a> 【麒麟实训】撷英 3 - Python 执行 Linux 命令公共方法</h1>\n<p>废话不说，show you my code，自己看。</p>\n<p>这些公共方法可以直接用于<strong>执行 sudo 指令、验证用户密码、以及执行普通命令</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sudo_verify</span>(<span class=\"params\">password:<span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    在使用sudo命令之前最好调用一次该程序验证sudo密码的正确性。</span></span><br><span class=\"line\"><span class=\"string\">    :param password: 需要验证的密码</span></span><br><span class=\"line\"><span class=\"string\">    :return: 布尔类型 表示通过与否，字符串类型表示返回信息。（密码正确时返回空串）</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    test_str = <span class=\"string\">&#x27;sudo test&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    echo = subprocess.Popen([<span class=\"string\">&#x27;echo&#x27;</span>, password], stdout=subprocess.PIPE, )</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo = subprocess.Popen([<span class=\"string\">&#x27;sudo&#x27;</span>, <span class=\"string\">&#x27;-S&#x27;</span>, <span class=\"string\">&#x27;echo&#x27;</span>, test_str],</span><br><span class=\"line\">                            stdin=echo.stdout,</span><br><span class=\"line\">                            stdout=subprocess.PIPE,</span><br><span class=\"line\">                            <span class=\"comment\"># stderr=subprocess.PIPE</span></span><br><span class=\"line\">                            )</span><br><span class=\"line\"></span><br><span class=\"line\">    return_str = sudo.stdout.read().decode().replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> return_str == test_str:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span>,<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span>,return_str.replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sudo_do_something</span>(<span class=\"params\">password:<span class=\"built_in\">str</span>,command:<span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    调用此方法以执行需要加sudo的命令。</span></span><br><span class=\"line\"><span class=\"string\">    :param password: 密码</span></span><br><span class=\"line\"><span class=\"string\">    :param command: 列表,如：[&#x27;./run.sh&#x27;, test_type, debpkg]</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    is_pass,rtstring=sudo_verify(password)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_pass:</span><br><span class=\"line\">        echo = subprocess.Popen([<span class=\"string\">&#x27;echo&#x27;</span>, password], stdout=subprocess.PIPE, )</span><br><span class=\"line\">        sudo = subprocess.Popen([<span class=\"string\">&#x27;sudo&#x27;</span>, <span class=\"string\">&#x27;-S&#x27;</span>] + command,</span><br><span class=\"line\">                                stdin=echo.stdout,</span><br><span class=\"line\">                                stdout=subprocess.PIPE,</span><br><span class=\"line\">                                <span class=\"comment\"># stderr=subprocess.PIPE</span></span><br><span class=\"line\">                                )</span><br><span class=\"line\"></span><br><span class=\"line\">        rtstring = sudo.stdout.read().decode()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> is_pass,rtstring</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">command</span>(<span class=\"params\">command</span>):</span><br><span class=\"line\">    p = subprocess.Popen(command,</span><br><span class=\"line\">                            <span class=\"comment\"># stdin=echo.stdout,</span></span><br><span class=\"line\">                            stdout=subprocess.PIPE,</span><br><span class=\"line\">                            <span class=\"comment\"># stderr=subprocess.PIPE</span></span><br><span class=\"line\">                            )</span><br><span class=\"line\"></span><br><span class=\"line\">    rtstring = p.stdout.read().decode()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rtstring</span><br></pre></td></tr></table></figure>","raw":"---\ntitle: 【麒麟实训】撷英分享\ntags:\n  - Deb包\n  - Kylin\n  - Linux\n  - 麒麟实训\n  - pyinstaller\n  - PyQt\n  - Python\n  - 编译\n  - CSV\n  - HTML\n  - lxml\n  - OLE\n  - Python\n  - Word\n  - XML\n  - 实现\ndescription: 麒麟实训期间的技术积累。\ncover: https://cdn.gallery.uuanqin.top/img/20240730234421.webp\ntop_img: \nabbrlink: 556f2cfc\ndate: 2022-04-26 22:25:43\n---\n\n> [!notice] 文章重组提示 `240730`\n> 本文将以下文章进行聚合：\n> - 【麒麟实训】Deb 的打包（小练习分享）\n> - 【麒麟实训】撷英 1 - Pyqt 程序编译与打包探索\n> - 【麒麟实训】撷英 2 - Python 代码控制 word 文档模板\n> - 【麒麟实训】撷英 3 - Python 执行 Linux 命令公共方法\n\n# 【麒麟实训】Deb 的打包（小练习分享）\n\n练习 Deb 的打包流程。**本文章为一次小练习的记录，操作过程多少有瑕疵，可能不适合实践参考。**“实训撷英”专栏将有更专门的打包介绍。\n\n文章部分内容来源于我的实训工作文档：**《练习 1 过程文档（改进）》、《练习 2 过程文档（改进）》**。规范的打包过程请参考《麒麟软件打包规范》。\n\n## Deb 的二进制文件打包\n\n创建 DEBIAN 文件夹、etc、opt、usr 文件夹。\n\n目录格式：\n\n![|324](https://cdn.gallery.uuanqin.top/img/image-64.png)\n\n在 DEBIAN 文件夹下创建 control 文件：\n\n![|308](https://cdn.gallery.uuanqin.top/img/image-65.png)\n\n> 企业老师给出的意见：\n>\n> **control 文件中包含空的关键字，应该删除，如 section 无对应信息则不存在。**\n\n最终的目录结构：\n\n```tree\n.\n├── DEBIAN\n│   └── control\n├── etc\n├── opt\n│   └── sublime-text\n│       ├── changelog.txt\n│       ├── crash_reporter\n│       ├── Lib\n│       ├── libcrypto.so.1.1\n│       ├── libssl.so.1.1\n│       ├── Packages\n│       ├── plugin_host-3.3\n│       ├── plugin_host-3.8\n|       ├── Icon \n│       └── sublime_text\n└── usr\n    └── share\n        └── applications\n        │   └── sublime_text.desktop\n        └──icons\n        └── hicolor\n        \t├──128x128\n            │   └── apps\n            │   └── sublime-text.png\n            └──256x256\n            ... ...\n```\n\n打包：\n\n```\nsudo dpkg -b project project_v1.0.0_amd64.deb\n```\n\n安装：\n\n```\nsudo dpkg -i project_v1.0.0_amd64.deb\n```\n\n![|500](https://cdn.gallery.uuanqin.top/img/image-66.png)\n\n![|351](https://cdn.gallery.uuanqin.top/img/3419d8f19c789d4a0df5853d710f223.png)\n\n新程序\n\n![|500](https://cdn.gallery.uuanqin.top/img/image-20220427112054890.png)\n\n运行效果\n\n![|500](https://cdn.gallery.uuanqin.top/img/image-69.png)\n\n卸载：\n\n```bash\nsudo dpkg -r project\n\n# 干净卸载：\nsudo dpkg -P sublime-text\n```\n\n参考：[deb打包流程步骤\\_逐渐江江江江化的博客-CSDN博客\\_deb打包](https://blog.csdn.net/LvJzzZ/article/details/109452895)\n\n## 问题解决\n\n### 开始菜单图标显示不出来的问题\n\n请注意：图标目录**Icons**的名称和位置进行正确的设置、以及放置。参看上文给的目录树。\n\n比如正确的放置方法时：icons/hicolor/128x128/下，还需要建立 apps 文件夹，里面放置 png 图标。\n\n### 打包报错：软件包名字错误\n\n注意，“Package”字段的内容，用“-”（减号）不用“\\_\"（下划线）哦，否则会报以下错误：\n\n![](https://cdn.gallery.uuanqin.top/img/b1019d44efa1006555b419258d254b2.png)\n\n借 shibo 同学的图\n\n### 打包报错：与本机架构不符\n\n```\nsudo dpkg --add-architecture amd64\n```\n\n参考：[Ubuntu使用dpkg查看与修改architecture的用法\\_qiuchangyong的博客-CSDN博客](https://blog.csdn.net/qiuchangyong/article/details/97505379)\n\n## Deb 源码打包\n\n下载源码压缩包，解压。\n\n```\ntar zxvf p7zip.tar.gz\n```\n\n将解压后的文件移动到构造好的目录中，得到以下目录结构：\n\n```\n.\n├── opt\n│   └── apps\n│       └── p7zip\n│           ├── Asm\n│           │   └── x86\n│           ├── C\n│           ├── check\n│           ├── contrib\n│           ├── CPP\n│           ├── DOC\n│           ├── GUI\n│           ├── man1\n│           └── Utils     // 不应该存放源码\n└── usr\n    └── share\n        ├── applications\n        └── icons\n            └── hicolor\n```\n\n> 企业老师给出的意见：\n>\n> _ 不应该 _ 将源码文件全部存放到/opt/apps/p7zip 目录下（因为是二进制软件包，不应该将源码存放到对应目录下）；不应该有空目录/usr/share/icons/hicolor\n\n在/p7zip-16.02 目录下执行指令：\n\n```\ndh_make --createorig -s\n```\n\n生成 debian 文件夹。\n\n![image-20220506102802357](https://cdn.gallery.uuanqin.top/img/image-20220506102802357.png)\n\n修改 debian/control\n\n![image-20220506104427558|475](https://cdn.gallery.uuanqin.top/img/image-20220506104427558.png)\n\n在 rules 中添加 Override：\n\n![image-20220506104934917|500](https://cdn.gallery.uuanqin.top/img/image-20220506104934917.png)\n\n在 debian 下创建 install 文件，并写入以下内容：\n\n![image-20220506110213565|500](https://cdn.gallery.uuanqin.top/img/image-20220506110213565.png)\n\n执行 debuild 命令：\n\n```bash\ndebuild -i -us -uc -b\n\n# 生成过程需要补充安装以下软件（Build-Depends）\nsudo apt-get install debhelper\n```\n\n这时，在源码文件的上一级目录会多出几个文件，其中就包括 deb 包：\n\n![image-20220506110901935|500](https://cdn.gallery.uuanqin.top/img/image-20220506110901935.png)\n\n执行安装：\n\n```\nsudo dpkg -i p7zip_16.02_all.deb\n```\n\n查看安装效果：\n\n```\nsudo dpkg -l p7zip\n```\n\n![image-20220428215252343](https://cdn.gallery.uuanqin.top/img/image-20220506111049159.png)\n\n可以正常卸载：\n\n```\nsudo dpkg -P p7zip\n```\n\n卸载后查找不到 p7zip。\n\n![image-20220506111234325|500](https://cdn.gallery.uuanqin.top/img/image-20220506111234325.png)\n\n## Deb 源码打包（野生方法）\n\n从网上找来的自己摸索的方法。可能不符合麒麟软件的打包规范。这是初次练习的成果。\n\n安装需要的工具：\n\n```\nsudo apt-get install debmake\nsudo apt-get install python3-debia\nsudo apt-get install build-essential\n```\n\n生成 debian 文件夹配置文件：\n\n```\ndebmake -e unknow@unknow.cn -p p7zip -u 16.02 -f \"unknow unknow\" -n\n```\n\n命令解释：\n\n* 邮件地址 unknow@unknow.cn\n* 软件包名 p7zip\n* 软件版本号 16.02\n* 作者全名 unknow unknow\n\n命令执行后，会多出 debian 文件夹：\n\n![QQ截图20220427123914|475](https://cdn.gallery.uuanqin.top/img/QQ%E6%88%AA%E5%9B%BE20220427123914.png)\n\n编辑 debian/control\n\n![QQ截图20220427235600|475](https://cdn.gallery.uuanqin.top/img/QQ%E6%88%AA%E5%9B%BE20220427235600.png)\n\n生成 deb 包：\n\n```\nsudo dpkg-buildpackage -us -uc -tc\n\n# 生成过程需要补充安装以下软件（Build-Depends）\nsudo apt-get install debhelper\n```\n\n这是，在源码文件的上一级目录会多出几个文件，其中就包括 deb 包：\n\n![QQ截图20220427230246|215](https://cdn.gallery.uuanqin.top/img/QQ%E6%88%AA%E5%9B%BE20220427230246.png)\n\n执行安装：\n\n```\nsudo dpkg -i p7zip_16.02_amd64.deb\n```\n\n查看安装效果：\n\n```\nsudo dpkg -l p7zip\n```\n\n![QQ截图20220427235449](https://cdn.gallery.uuanqin.top/img/QQ%E6%88%AA%E5%9B%BE20220427235449.png)\n\n参考：[debmake - CSDN](https://www.csdn.net/tags/NtjaEg0sNjY5NDMtYmxvZwO0O0OO0O0O.html)\n\n## 其他\n\n### 虚拟机 Kylin 系统的安装\n\n请参看：[使用VirtualBox安装Kylin桌面版操作系统 - 简书 (jianshu.com)](https://www.jianshu.com/p/24a52d78d5a6)\n\n屏幕调大的命令：\n\n```\nxrandr -s 1920x1200_60 # 在麒麟终端输入\n```\n\n自己多试一下：\n\n> [!Error] 图片失效\n> 原文此位置包含图片，现链接已被覆盖造成丢失，且复查时存在疏漏。原图片命名为：image-70.png\n\n或者在麒麟桌面设置那里调，一劳永逸。\n\n### tree 命令\n\n安装：\n\n```\n$ sudo apt-get install tree\n```\n\n使用：\n\n```\n$ tree\n$ tree -d # 仅列出目录\n```\n\n参考：[linux tree命令,Linux tree命令实例详解\\_章鱼老师的博客-CSDN博客](https://blog.csdn.net/weixin_31445091/article/details/116543595)\n\n# 【麒麟实训】撷英 1 - Pyqt 程序编译与打包探索\n\n本篇文章内容仅供简略参考。\n\n文章内容来源于我的**飞书文档>麒麟实训>大作业 - 编译与打包**，更多问题的详细记录、示例文件以及调研文档请参看源文档。\n\n## Python 源码编译\n\npython 编译\n\n安装 pyinstaller:\n\n```sh\npip install https://github.com/pyinstaller/pyinstaller/tarball/develop\n```\n\n只需对入口文件执行命令：\n\n```sh\n# 两种打包方式\npyinstaller -F run.py # 打包成一个二进制文件，但启动速度慢\npyinstaller -D run.py # 打包出多个文件，程序启动速度快\n```\n\n参考：\n\n[Python PyInstaller安装和使用教程（详解版） (biancheng.net)](http://c.biancheng.net/view/2690.html)\n\n[PyQt5软件打包\\_王火火的博客-CSDN博客\\_pyqt打包](https://blog.csdn.net/qq_38316721/article/details/122599987)\n\n## Pyqt 窗口图标\n\n关于应用程序窗口图标显示问题可参考：http://t.zoukankan.com/jingsupo-p-13536449.html\n\n加代码的地方：在 ui 转成的.py 文件\n\n```python\nself.setWindowIcon(QIcon(':/signal-slot-demo.ico'))\n```\n\n打包后，编译生成的二进制文件的同级目录需要放上图标。\n\n## 打包过程总览\n\n1.  按照《麒麟软件打包规范》构造 deb 包目录\n2.  打开源码项目执行 `pyinstaller -D run.py -n signal-slot-demo`\n3.  在 pyinstaller 中生成的 signal-slot-demo 文件夹中添加 icon 图标。并将该文件夹放入构造好的 deb 包目录下的/opt/apps/中\n\n![img](https://cdn.gallery.uuanqin.top/img/asynccode)\n\n4.  进入构造好的目录，执行命令：`debuild -i -us -uc -b`\n5.  返回上一级目录执行：`sudo dpkg -i signal-slot-demo_1.0.0-1_all.deb`\n\n结果：运行正常。窗口图标、任务栏图标、开始菜单栏图标运行正常。（开始菜单栏中的图标是.desktop 文件中 Icon 指定的 svg 图标。程序窗口以及任务栏图标是 Pyqt 中代码指定的图标。）\n\n## 具体文件示例\n\nControl 文件\n\n```\nSource: signal-slot-demo\nVersion: 1.0.0\nMaintainer: Wu WanQin <wuanqin@tju.edu.cn>\nSection: unknown\nPriority: optional\nBuild-Depends: debhelper\nStandards-Version: 4.4.1\nHomepage: https://uuanqin.top\n\nPackage:signal-slot-demo\nMulti-Arch: foreign\nArchitecture: all\nDepends: ${shlibs:Depends}, ${misc:Depends}\nDescription: 信号与信号槽示例。\n```\n\nInstall 文件\n\n```\nopt/apps/signal-slot-demo/ /opt/apps\nusr/share /usr/\n```\n\n.desktop 文件\n\n```desktop\n[Desktop Entry]\nName=Signal-Slot-Demo\nComment=An example\nExec=/opt/apps/signal-slot-demo/signal-slot-demo %F\nIcon=/usr/share/icons/scalable/apps/signal-slot-demo.svg\nTerminal=false\nType=Application\nX-Ubuntu-Touch=true\nCategories=Office\n```\n\n# 【麒麟实训】撷英 2 - Python 代码控制 word 文档模板\n\n通过 python 是可以控制 word 文档内容的，本篇文章简要介绍其原理，具体实现与实际案例可看我的开源项目。详细文档可查看我的**飞书文档>麒麟实训>大作业 - 文档生成工具**。\n\n## 简介\n\n文档生成工具主要通过对自动化适配工具生成的 csv 报告、html 报告进行读取、解析、整理，进而生成指定的 word 总报告。\n\n项目地址：https://gitee.com/uuanqin/report_generator.git\n\n## 基本原理\n\n每一个 word 文档都可以通过 xml 表示，这个 xml 中包含文字信息和格式信息。通过给定的 doc 报告模板，我们可以以 xml 的方式进行操作，在实现增删改查 xml 元素的同时保持原有给定的格式基本不变。\n\n## 业务流程\n\n伪代码：\n\n* 获取所有生成最终报告需要的源报告路径\n* 根据路径对文件及文件夹进行读取\n* 对每个文件中的数据提取、解析、整理\n* 读取报告模板，填写每个部分的 word 表格\n*   “FAIL\",\"PASS\" 字体染色\n* 保存为中间文件 _temp.xml_\n* 读取 _temp.xml_，替换其中的变量，保存为中间文件 _麒麟操作系统适配认证自动化测试报告.xml_\n* 移动 _麒麟操作系统适配认证自动化测试报告.xml_ 到目标文件夹中，修改后缀为.doc\n\n## 效果示例\n\n![image-20220701160509387](https://cdn.gallery.uuanqin.top/img/image-20220701160509387.png)\n\n## 文档对象插入\n\n关于 python 控制 word 中的文档对象可查看以下方法：\n\n[python在word文档里插入文件对象\\_奶爸大山的博客-CSDN博客\\_python word附件](https://blog.csdn.net/u011420268/article/details/106402153/)\n\n经我与导师们实际调研与操作得到以下结论：\n\n* 需要事先在 word 插入好文档对象，我们才可能通过代码改变这个文档对象。\n*   python 代码中只能改变文档对象指向的内容，新增加文档对象。\n* 支持改变的文档对象只能是 xlsx 格式或 docx 格式，其他格式的文档对象插入时，生成的 ole.bin 文件暂时没找到办法进行生成。\n\n# 【麒麟实训】撷英 3 - Python 执行 Linux 命令公共方法\n\n废话不说，show you my code，自己看。\n\n这些公共方法可以直接用于**执行 sudo 指令、验证用户密码、以及执行普通命令**。\n\n```python\ndef sudo_verify(password:str):\n    \"\"\"\n    在使用sudo命令之前最好调用一次该程序验证sudo密码的正确性。\n    :param password: 需要验证的密码\n    :return: 布尔类型 表示通过与否，字符串类型表示返回信息。（密码正确时返回空串）\n    \"\"\"\n    test_str = 'sudo test'\n\n    echo = subprocess.Popen(['echo', password], stdout=subprocess.PIPE, )\n\n    sudo = subprocess.Popen(['sudo', '-S', 'echo', test_str],\n                            stdin=echo.stdout,\n                            stdout=subprocess.PIPE,\n                            # stderr=subprocess.PIPE\n                            )\n\n    return_str = sudo.stdout.read().decode().replace(\"\\n\",\"\")\n    if return_str == test_str:\n        return True,\"\"\n    else:\n        return False,return_str.replace(\"\\n\",\"\")\n\ndef sudo_do_something(password:str,command:list):\n    \"\"\"\n    调用此方法以执行需要加sudo的命令。\n    :param password: 密码\n    :param command: 列表,如：['./run.sh', test_type, debpkg]\n    :return:\n    \"\"\"\n    is_pass,rtstring=sudo_verify(password)\n    if is_pass:\n        echo = subprocess.Popen(['echo', password], stdout=subprocess.PIPE, )\n        sudo = subprocess.Popen(['sudo', '-S'] + command,\n                                stdin=echo.stdout,\n                                stdout=subprocess.PIPE,\n                                # stderr=subprocess.PIPE\n                                )\n\n        rtstring = sudo.stdout.read().decode()\n    return is_pass,rtstring\n\ndef command(command):\n    p = subprocess.Popen(command,\n                            # stdin=echo.stdout,\n                            stdout=subprocess.PIPE,\n                            # stderr=subprocess.PIPE\n                            )\n\n    rtstring = p.stdout.read().decode()\n    return rtstring\n```","categories":[],"tags":[{"name":"Linux","api":"api/tags/Linux.json"},{"name":"Deb包","api":"api/tags/Deb包.json"},{"name":"Kylin","api":"api/tags/Kylin.json"},{"name":"麒麟实训","api":"api/tags/麒麟实训.json"},{"name":"pyinstaller","api":"api/tags/pyinstaller.json"},{"name":"PyQt","api":"api/tags/PyQt.json"},{"name":"Python","api":"api/tags/Python.json"},{"name":"编译","api":"api/tags/编译.json"},{"name":"CSV","api":"api/tags/CSV.json"},{"name":"HTML","api":"api/tags/HTML.json"},{"name":"lxml","api":"api/tags/lxml.json"},{"name":"OLE","api":"api/tags/OLE.json"},{"name":"Word","api":"api/tags/Word.json"},{"name":"XML","api":"api/tags/XML.json"},{"name":"实现","api":"api/tags/实现.json"}]},"api":"api/posts/p/556f2cfc.json"}