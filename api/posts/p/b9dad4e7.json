{"data":{"title":"利用 Cron 编写简单的定时脚本","slug":"核心协同/自动化/利用 Cron 编写简单的定时脚本","description":"介绍一些简单定时脚本的编写并利用 Webhook 推送","date":"2024-07-24T14:43:43.000Z","updated":"2024-11-01T18:30:21.751Z","language":"zh-CN","comments":true,"url":"p/b9dad4e7/","cover":"https://cdn.gallery.uuanqin.top/img/githubstarcover.webp","images":[],"content":"\n<div class=\"callout\" data-callout=\"notice\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">文章重要更新 <code>240724</code></div>\n</div>\n<div class=\"callout-content\"><p>由于近期惨遭某些省的 IP 多轮恶意刷量，现新增两个小脚本加强网站被攻击状况的感知。<br />\n原文写于 <code>231206</code>。</p>\n</div></div>\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">除了使用自建服务器上的 Cron 执行定时脚本以外，还可以使用 GitHub Action 完成这项工作。</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>这篇文章通过一些简单的 Python 脚本演示定时脚本配合 Webhook 的使用。</p>\n<p>通过这个思路，你可以展开更多的想法：</p>\n<ul>\n<li>实时监测 GitHub 的各项信息并推送</li>\n<li>NPM 包下载量监测</li>\n<li>LeetCode 每日一题</li>\n<li>排名监测</li>\n<li>获取某官网上的重要公告</li>\n<li>监控云服务平台的各项数据</li>\n<li>…</li>\n</ul>\n<p>本文主要介绍：</p>\n<ol>\n<li>获取用户 Github 上的 Star 数量并推送的脚本编写</li>\n<li>根据用户名监测某作者 NPM 包年下载量</li>\n<li><strong>实时监测多吉云团队公布的文章「近期部分加速域名晚间遭遇恶意流量事件说明」通告是否更新</strong></li>\n<li><strong>监控腾讯云 CDN 请求数是否超限</strong></li>\n</ol>\n<h1 id=\"获取-github-上的-star-数量并推送\"><a class=\"markdownIt-Anchor\" href=\"#获取-github-上的-star-数量并推送\"></a> 获取 Github 上的 Star 数量并推送</h1>\n<h2 id=\"github-应用注册\"><a class=\"markdownIt-Anchor\" href=\"#github-应用注册\"></a> GitHub 应用注册</h2>\n<p>打开你的 GitHub 主页（profile）进入开发者选项：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231206211025.webp\" alt=\"image.png\" /></p>\n<p>选择「新建一个」GitHub APP。根据需要进行相关设置的填写。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231206211112.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>生成密钥：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231206211249.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>记住密钥，待会脚本需要调用。</p>\n<h2 id=\"脚本的编写\"><a class=\"markdownIt-Anchor\" href=\"#脚本的编写\"></a> 脚本的编写</h2>\n<p>这里参考了 <a href=\"https://github.com/songquanpeng/scripts\">songquanpeng/scripts</a> 的实现，并进行修复与改编。</p>\n<p>这个 python 脚本（这里命名为 <code>github_stars.py</code>）所做的工作：</p>\n<ol>\n<li>调用 GitHub API（<a href=\"https://docs.github.com/en/rest/repos?apiVersion=2022-11-28\">Repositories - GitHub Docs</a>）</li>\n<li>统计所有项目的 star 数量</li>\n<li>与上次统计结果进行比较（结果保存在本地）</li>\n<li>调用推送服务发送 POST JSON 格式的请求</li>\n</ol>\n<p>执行脚本需要的三个参数：</p>\n<ul>\n<li>GitHub 用户名</li>\n<li>GitHub API 令牌</li>\n<li>调用的推送服务（将发送 POST）请求</li>\n</ul>\n<p>源代码【非面向对象版本】如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 存储上次检测的 star 数的文件</span></span><br><span class=\"line\">filename = <span class=\"string\">&quot;./.star_count&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># Push链接</span></span><br><span class=\"line\">push_url = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 用户名</span></span><br><span class=\"line\">username=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">star_counter</span>(<span class=\"params\">username: <span class=\"built_in\">str</span>, token: <span class=\"string\">&quot;&quot;</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    调用GitHub API获取个人仓库信息，返回统计的stars数</span></span><br><span class=\"line\"><span class=\"string\">    :param username:</span></span><br><span class=\"line\"><span class=\"string\">    :param token:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 链接的构建</span></span><br><span class=\"line\">    all_repos_url = <span class=\"string\">f&quot;https://api.github.com/users/<span class=\"subst\">&#123;username&#125;</span>/repos?per_page=100&quot;</span></span><br><span class=\"line\">    header = &#123;&#125; <span class=\"keyword\">if</span> token == <span class=\"string\">&quot;&quot;</span> <span class=\"keyword\">else</span> &#123;<span class=\"string\">&quot;Authorization&quot;</span>: <span class=\"string\">f&quot;bearer <span class=\"subst\">&#123;token&#125;</span>&quot;</span>&#125;</span><br><span class=\"line\">    <span class=\"comment\"># 向GitHub发送请求</span></span><br><span class=\"line\">    res = requests.get(all_repos_url, header)</span><br><span class=\"line\">    repos = res.json()</span><br><span class=\"line\">    <span class=\"comment\"># 解析响应并统计</span></span><br><span class=\"line\">    count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos:</span><br><span class=\"line\">        count += repo[<span class=\"string\">&quot;stargazers_count&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">load_count</span>() -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    加载上一次的统计结果，若无则默认为0</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            count = <span class=\"built_in\">int</span>(f.read())</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">save_count</span>(<span class=\"params\">count: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    保存统计结果</span></span><br><span class=\"line\"><span class=\"string\">    :param count:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(<span class=\"built_in\">str</span>(count))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">send_message</span>(<span class=\"params\">msg: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    发送消息</span></span><br><span class=\"line\"><span class=\"string\">    :param msg:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/json; charset=UTF-8&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pyload = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;title&quot;</span>:<span class=\"string\">&quot;GitHub Stars&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;msg&quot;</span>:msg</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response = requests.post(push_url,data=json.dumps(pyload),headers=headers).text</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(response)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">message_construct</span>(<span class=\"params\">last_count,current_count</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    自定义的信息构造函数。</span></span><br><span class=\"line\"><span class=\"string\">    样例：【每日检测】检测到用户uuanqin总star数增加 :) 。[0 -&gt; 6, total: 6]</span></span><br><span class=\"line\"><span class=\"string\">    :param last_count:</span></span><br><span class=\"line\"><span class=\"string\">    :param current_count:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    s = <span class=\"string\">f&quot;【每日检测】检测到用户<span class=\"subst\">&#123;username&#125;</span>总star数&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> current_count &gt; last_count:</span><br><span class=\"line\">        s += <span class=\"string\">f&quot;增加 :) 。&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        s += <span class=\"string\">f&quot;降低 :( 。&quot;</span></span><br><span class=\"line\">    s += <span class=\"string\">f&quot;[<span class=\"subst\">&#123;last_count&#125;</span> -&gt; <span class=\"subst\">&#123;current_count&#125;</span>, total: <span class=\"subst\">&#123;current_count-last_count&#125;</span>]&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 参数检查</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(sys.argv) != <span class=\"number\">4</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error! This script requires three arguments: GITHUB_USERNAME GITHUB_TOKEN PUSH_URL&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\"># 参数设置</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> push_url,username</span><br><span class=\"line\">    username = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">    token = sys.argv[<span class=\"number\">2</span>]</span><br><span class=\"line\">    push_url = sys.argv[<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取上一次统计结果</span></span><br><span class=\"line\">    last_count = load_count()</span><br><span class=\"line\">    <span class=\"comment\"># 获取本次统计结果</span></span><br><span class=\"line\">    current_count = star_counter(username, token)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 根据数量变化进行判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> current_count != last_count:</span><br><span class=\"line\">        send_message(message_construct(last_count,current_count))</span><br><span class=\"line\">        <span class=\"comment\"># 只有数量发生变化才保存结果</span></span><br><span class=\"line\">        save_count(current_count)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>注意，代码中不要使用奇奇怪怪的字符，比如 emoji 表情等，导致 utf-8 和 gbk 都不能识别。</p>\n<p>这里我使用了自己的部署服务。使用示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python ./github_stars.py uuanqin 9xxxxxxxx7 https://push.uuanqin.top/webhook/8xxxxxxe</span><br></pre></td></tr></table></figure>\n<p>把脚本放在 Linux 服务器上，记得测试。</p>\n<blockquote>\n<p>这里使用的 API 似乎有点老了，但是还能用。我在文档中没有找到<strong>确切</strong>的对应文档说明。</p>\n</blockquote>\n<h2 id=\"定时执行\"><a class=\"markdownIt-Anchor\" href=\"#定时执行\"></a> 定时执行</h2>\n<p>新建 cron 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 8 * * * /usr/bin/python /var/www/push_script/github_stars/github_stars.py uuanqin 9xxxxxxxxxxxxxx7 https://push.uuanqin.top/webhook/8xxxxxxxxxxxxxxe</span><br></pre></td></tr></table></figure>\n<p>添加定时任务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab github_stars.cron</span><br></pre></td></tr></table></figure>\n<p>每天早上 8 点 02 分调用该脚本。</p>\n<p>附 <a href=\"https://tool.lu/crontab/\">在线网站</a> 验证结果：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231206214712.webp\" alt=\"image.png\" width=\"237px\" /></p>\n<blockquote>\n<p>不了解 cron 可以查看这篇文章：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/88536c89/\"><span class=\"yukari\">站内文章</span>Linux 使用 Cron 创建定时任务</a></p>\n</blockquote>\n<p>像我的部署服务使用了飞书群机器人，推送效果如下：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231206214530.webp\" alt=\"image.png\" /></p>\n<h1 id=\"npm-下载量的监测\"><a class=\"markdownIt-Anchor\" href=\"#npm-下载量的监测\"></a> NPM 下载量的监测</h1>\n<p>根据上一小节介绍的脚本，我们重构一下，改成面向对象的版本。以下脚本能同时支持 GitHub stars 数量的检测以及 NPM 年下载量的检测。</p>\n<p>脚本使用了第三方 npm 数据服务：<a href=\"https://npm-stat.com/\">npm-stat: download statistics for NPM packages</a></p>\n<p>注意，临时的数据文件存储在 <code>DIR_OF_TEMP_FILE</code> 目录下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> abc <span class=\"keyword\">import</span> ABC, abstractmethod</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> dateutil.relativedelta <span class=\"keyword\">import</span> relativedelta</span><br><span class=\"line\"></span><br><span class=\"line\">DIR_OF_TEMP_FILE = <span class=\"string\">&quot;/var/www/push_script/count_detect&quot;</span>  <span class=\"comment\"># 临时变量存储文件夹</span></span><br><span class=\"line\">DIR_OF_PUBLIC_JSON_FILE = <span class=\"string\">&quot;/var/www/public_json_files&quot;</span>    <span class=\"comment\"># json数据文件保存的文件夹</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Obj</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 存储统计数的文件名</span></span><br><span class=\"line\">    filename = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    title = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    last_count = <span class=\"number\">0</span></span><br><span class=\"line\">    current_count = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># Push链接</span></span><br><span class=\"line\">    push_url = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,push_url</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.push_url = push_url</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.load_count()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.count()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">count</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @abstractmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">message_construct</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_count</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        加载上一次的统计结果，若无则默认为0</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"variable language_\">self</span>.filename, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                count = <span class=\"built_in\">int</span>(f.read())</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">            count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.last_count = count</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">save_count</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        保存统计结果</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"variable language_\">self</span>.filename, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(<span class=\"built_in\">str</span>(<span class=\"variable language_\">self</span>.current_count))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_message</span>(<span class=\"params\">self, msg: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        发送消息</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/json; charset=UTF-8&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pyload = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;title&quot;</span>: <span class=\"variable language_\">self</span>.title,</span><br><span class=\"line\">            <span class=\"string\">&quot;msg&quot;</span>: msg</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        response = requests.post(<span class=\"variable language_\">self</span>.push_url, data=json.dumps(pyload), headers=headers).text</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 根据数量变化进行判断</span></span><br><span class=\"line\">        current_count = <span class=\"variable language_\">self</span>.current_count</span><br><span class=\"line\">        last_count = <span class=\"variable language_\">self</span>.last_count</span><br><span class=\"line\">        <span class=\"keyword\">if</span> current_count != last_count:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.send_message(<span class=\"variable language_\">self</span>.message_construct())</span><br><span class=\"line\">            <span class=\"comment\"># 只有数量发生变化才保存结果</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.save_count()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GitHubStars</span>(<span class=\"title class_ inherited__\">Obj</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 用户名</span></span><br><span class=\"line\">    username = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    github_token = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,push_url,token,username</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.filename = os.path.join(DIR_OF_TEMP_FILE,<span class=\"string\">&quot;.star_count&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.title = <span class=\"string\">&quot;GitHub Stars Count&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.github_token = token</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.username = username</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(push_url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">count</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        调用GitHub API获取个人仓库信息，返回统计的stars数</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 链接的构建</span></span><br><span class=\"line\">        all_repos_url = <span class=\"string\">f&quot;https://api.github.com/users/<span class=\"subst\">&#123;self.username&#125;</span>/repos?per_page=100&quot;</span></span><br><span class=\"line\">        header = &#123;&#125; <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.github_token == <span class=\"string\">&quot;&quot;</span> <span class=\"keyword\">else</span> &#123;<span class=\"string\">&quot;Authorization&quot;</span>: <span class=\"string\">f&quot;bearer <span class=\"subst\">&#123;self.github_token&#125;</span>&quot;</span>&#125;</span><br><span class=\"line\">        <span class=\"comment\"># 向GitHub发送请求</span></span><br><span class=\"line\">        res = requests.get(all_repos_url, header)</span><br><span class=\"line\">        repos = res.json()</span><br><span class=\"line\">        <span class=\"comment\"># 解析响应并统计</span></span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos:</span><br><span class=\"line\">            count += repo[<span class=\"string\">&quot;stargazers_count&quot;</span>]</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_count =  count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">message_construct</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        自定义的信息构造函数。</span></span><br><span class=\"line\"><span class=\"string\">        样例：【每日检测】检测到用户uuanqin总star数增加 :) 。[0 -&gt; 6, total: 6]</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        s = <span class=\"string\">f&quot;【每日检测】检测到用户<span class=\"subst\">&#123;self.username&#125;</span>总star数&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.current_count &gt; <span class=\"variable language_\">self</span>.last_count:</span><br><span class=\"line\">            s += <span class=\"string\">f&quot;增加 :) 。&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            s += <span class=\"string\">f&quot;降低 :( 。&quot;</span></span><br><span class=\"line\">        s += <span class=\"string\">f&quot;[<span class=\"subst\">&#123;self.last_count&#125;</span> -&gt; <span class=\"subst\">&#123;self.current_count&#125;</span>, total: <span class=\"subst\">&#123;self.current_count-self.last_count&#125;</span>]&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NpmAuthorDownloads</span>(<span class=\"title class_ inherited__\">Obj</span>):</span><br><span class=\"line\">    username = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,push_url,username</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.filename = os.path.join(DIR_OF_TEMP_FILE,<span class=\"string\">&quot;.npm_count&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.title = <span class=\"string\">&quot;GitHub Stars Count&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.username = username</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__(push_url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">count</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        nowtime = datetime.datetime.now()</span><br><span class=\"line\">        yesterdate = nowtime - datetime.timedelta(days=+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># last_year = yesterdate - relativedelta(years=1)</span></span><br><span class=\"line\">        yesterdate_strf=yesterdate.strftime(<span class=\"string\">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class=\"line\">        last_year_strf= <span class=\"string\">&quot;2023-10-18&quot;</span> <span class=\"comment\"># 这是我写的第一个插件发布前两天 # last_year.strftime(&#x27;%Y-%m-%d&#x27;)</span></span><br><span class=\"line\">        url = <span class=\"string\">f&quot;https://npm-stat.com/api/download-counts?author=<span class=\"subst\">&#123;self.username&#125;</span>&amp;from=<span class=\"subst\">&#123;last_year_strf&#125;</span>&amp;until=<span class=\"subst\">&#123;yesterdate_strf&#125;</span>&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 向GitHub发送请求</span></span><br><span class=\"line\">        res = requests.get(url)</span><br><span class=\"line\">        repos = res.json()</span><br><span class=\"line\">        <span class=\"comment\"># 解析响应并统计</span></span><br><span class=\"line\">        count = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> p,con <span class=\"keyword\">in</span> repos.items():</span><br><span class=\"line\">            <span class=\"keyword\">for</span> d,v <span class=\"keyword\">in</span> con.items():</span><br><span class=\"line\">                count += v</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.current_count = count</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 写入计算结果到Json文件以便公开访问</span></span><br><span class=\"line\">        public_dict = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;npm-stat-by-author&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;total&quot;</span>: count</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        json_str = json.dumps(public_dict)</span><br><span class=\"line\">        json_name = os.path.join(DIR_OF_PUBLIC_JSON_FILE,<span class=\"string\">&quot;npm_stat_author_total.json&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(json_name, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(json_str)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">message_construct</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        自定义的信息构造函数。</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        s = <span class=\"string\">f&quot;【每日检测】检测到用户<span class=\"subst\">&#123;self.username&#125;</span>的NPM账户去年包下载量发生变动。&quot;</span></span><br><span class=\"line\">        s += <span class=\"string\">f&quot;[<span class=\"subst\">&#123;self.last_count&#125;</span> -&gt; <span class=\"subst\">&#123;self.current_count&#125;</span>, total: <span class=\"subst\">&#123;self.current_count - self.last_count&#125;</span>]&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 参数检查</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(sys.argv) &lt;<span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error! Arguments is illegal&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">type</span> = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">    obj = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>==<span class=\"string\">&quot;github_stars&quot;</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(sys.argv) != <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error! This script requires Four arguments: TYPE GITHUB_USERNAME GITHUB_TOKEN PUSH_URL&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span>==<span class=\"string\">&quot;npm_downloads&quot;</span> <span class=\"keyword\">and</span> <span class=\"built_in\">len</span>(sys.argv) != <span class=\"number\">4</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error! This script requires Four arguments: TYPE NPM_AUTHOR PUSH_URL&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span>!= <span class=\"string\">&quot;github_stars&quot;</span> <span class=\"keyword\">and</span> <span class=\"built_in\">type</span>!= <span class=\"string\">&quot;npm_downloads&quot;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error! Arguments is illegal&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"string\">&quot;github_stars&quot;</span>:</span><br><span class=\"line\">        obj = GitHubStars(sys.argv[<span class=\"number\">4</span>],sys.argv[<span class=\"number\">3</span>],sys.argv[<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"string\">&quot;npm_downloads&quot;</span>:</span><br><span class=\"line\">        obj = NpmAuthorDownloads(sys.argv[<span class=\"number\">3</span>],sys.argv[<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    obj.push()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>示例 cron：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 8 * * * /usr/bin/python /var/www/push_script/count_detect/count_detect.py github_stars uuanqin 94xxxxc2b7 https://push.uuanqin.top/webhook/3f2xxxxbd</span><br><span class=\"line\">3 8 * * * /usr/bin/python /var/www/push_script/count_detect/count_detect.py npm_downloads wuanqin https://push.uuanqin.top/webhook/3f2xxxxbd</span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240724230653.webp\" alt=\"image.png\" /></p>\n<h1 id=\"检测重要网页的更新\"><a class=\"markdownIt-Anchor\" href=\"#检测重要网页的更新\"></a> 检测重要网页的更新</h1>\n<blockquote>\n<p>背景：2024 年 7 月开始，中小型博客网站遭遇恶意流量攻击。多吉云团队公布的高危 IP 为中小博客站长提供了有用的防范信息。我们需要定时检测这个重要信息的更新及时将危险 IP 列入黑名单中。</p>\n</blockquote>\n<p>信息通知地址：<a href=\"https://www.dogecloud.com/announcement/26\">公告 - 多吉云 (dogecloud.com)</a></p>\n<p>通过 F12 调试工具得知接口 API 请求地址为： <a href=\"https://api.dogecloud.com/home/announcement/detail.json?id=26\">https://api.dogecloud.com/home/announcement/detail.json?id=26</a></p>\n<p>编写简单脚本检测文章内容是否改变。如果改变则推送通知。</p>\n<p>脚本内容为上一小节中脚本的简化：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"comment\"># !/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Notice</span>:</span><br><span class=\"line\">    filename = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    title = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Push链接</span></span><br><span class=\"line\">    push_url = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 上次页面内容</span></span><br><span class=\"line\">    last_content = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 本次加载内容</span></span><br><span class=\"line\">    now_content = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, push_url</span>):</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.push_url = push_url</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.filename = os.path.join(os.getcwd(), <span class=\"string\">&quot;.cdn_notice&quot;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.title = <span class=\"string\">&quot;CDN Notice was Updated&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.load_page()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.get()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">load_page</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        加载上一次的页面报告，若无则默认为空</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"variable language_\">self</span>.filename, <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                last_content = f.read()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">            last_content = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.last_content = last_content</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">save_page</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        保存页面 只有页面发生变化才保存结果</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"variable language_\">self</span>.filename, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(<span class=\"variable language_\">self</span>.now_content)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_message</span>(<span class=\"params\">self, msg: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        发送消息</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        headers = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/json; charset=UTF-8&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pyload = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;title&quot;</span>: <span class=\"variable language_\">self</span>.title,</span><br><span class=\"line\">            <span class=\"string\">&quot;msg&quot;</span>: msg</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        response = requests.post(<span class=\"variable language_\">self</span>.push_url, data=json.dumps(pyload), headers=headers).text</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(response)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 根据页面变化进行判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"variable language_\">self</span>.now_content != <span class=\"variable language_\">self</span>.last_content:</span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.send_message(<span class=\"variable language_\">self</span>.message_construct())</span><br><span class=\"line\">            <span class=\"comment\"># 只有页面发生变化才保存结果</span></span><br><span class=\"line\">            <span class=\"variable language_\">self</span>.save_page()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        获取页面数据</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># header = &#123;&#125; if self.github_token == &quot;&quot; else &#123;&quot;Authorization&quot;: f&quot;bearer &#123;self.github_token&#125;&quot;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        res = requests.get(<span class=\"string\">&quot;https://api.dogecloud.com/home/announcement/detail.json?id=26&quot;</span>)</span><br><span class=\"line\">        res_json = res.json()</span><br><span class=\"line\">        <span class=\"variable language_\">self</span>.now_content = res_json[<span class=\"string\">&quot;data&quot;</span>][<span class=\"string\">&quot;content&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">message_construct</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        自定义的信息构造函数。</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        s = <span class=\"string\">f&quot;【每日检测】检测到多吉云CDN恶意IP公示更新。请及时查看： https://www.dogecloud.com/announcement/26&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"comment\"># 参数检查</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(sys.argv) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error! Arguments is illegal&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    push_url = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">    obj = Notice(push_url)</span><br><span class=\"line\"></span><br><span class=\"line\">    obj.push()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>示例 cron：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9 8 * * * /usr/bin/python /var/www/push_script/cdn_notice/cdn_notice.py https://push.uuanqin.top/webhook/3f2xxxxbd</span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240724230600.webp\" alt=\"image.png\" /></p>\n<h1 id=\"监控腾讯云-cdn-命中请求数\"><a class=\"markdownIt-Anchor\" href=\"#监控腾讯云-cdn-命中请求数\"></a> 监控腾讯云 CDN 命中请求数</h1>\n<blockquote>\n<p>腾讯云预警时效还是有点长，敏感度不够，我们可以利用 API 自写脚本进行预警。CDN 流量与带宽监控需要开通 ecdn，所以这里就监控命中的请求数或响应码。</p>\n</blockquote>\n<p>需求：每半小时对 CDN 响应状态码进行分析，半小时内命中的响应状态码数量异常时将推送通知。</p>\n<p>安装 SDK：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install tencentcloud-sdk-python-cdn</span><br></pre></td></tr></table></figure>\n<p>通过腾讯云 API Explorer 快速得到 SDK 代码写法：<a href=\"https://console.cloud.tencent.com/api/explorer?Product=cdn&amp;Version=2018-06-06&amp;Action=DescribeCdnData\">API Explorer - 云 API - 控制台 (tencent.com)</a></p>\n<blockquote>\n<p>任何时候使用任何 API 时都要注意保护好密钥。详见：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/b05ac1ee/\"><span class=\"yukari\">站内文章</span>将 CDN 缓存自动刷新加入到博客发布的工作流（Hexo、WordPress）</a></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> types</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> tencentcloud.common <span class=\"keyword\">import</span> credential</span><br><span class=\"line\"><span class=\"keyword\">from</span> tencentcloud.common.profile.client_profile <span class=\"keyword\">import</span> ClientProfile</span><br><span class=\"line\"><span class=\"keyword\">from</span> tencentcloud.common.profile.http_profile <span class=\"keyword\">import</span> HttpProfile</span><br><span class=\"line\"><span class=\"keyword\">from</span> tencentcloud.common.exception.tencent_cloud_sdk_exception <span class=\"keyword\">import</span> TencentCloudSDKException</span><br><span class=\"line\"><span class=\"keyword\">from</span> tencentcloud.cdn.v20180606 <span class=\"keyword\">import</span> cdn_client, models</span><br><span class=\"line\"></span><br><span class=\"line\">IMPORTANT_PUSH_URL = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">NORMAL_PUSH_URL = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">now_datetime = datetime.datetime.now().strftime(<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class=\"line\">last_datetime = (datetime.datetime.now()+datetime.timedelta(minutes=-<span class=\"number\">30</span>)).strftime(<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">MESSAGE_TITLE = <span class=\"string\">&quot;CDN请求监控&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">detect</span>():</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 实例化一个认证对象，入参需要传入腾讯云账户 SecretId 和 SecretKey，此处还需注意密钥对的保密</span></span><br><span class=\"line\">        <span class=\"comment\"># 代码泄露可能会导致 SecretId 和 SecretKey 泄露，并威胁账号下所有资源的安全性。以下代码示例仅供参考，建议采用更安全的方式来使用密钥，请参见：https://cloud.tencent.com/document/product/1278/85305</span></span><br><span class=\"line\">        <span class=\"comment\"># 密钥可前往官网控制台 https://console.cloud.tencent.com/cam/capi 进行获取</span></span><br><span class=\"line\">        cred = credential.Credential(os.environ.get(<span class=\"string\">&quot;TENCENT_API_SECRETID&quot;</span>), os.environ.get(<span class=\"string\">&quot;TENCENT_API_SECRETKEY&quot;</span>))</span><br><span class=\"line\">        <span class=\"comment\"># 实例化一个http选项，可选的，没有特殊需求可以跳过</span></span><br><span class=\"line\">        httpProfile = HttpProfile()</span><br><span class=\"line\">        httpProfile.endpoint = <span class=\"string\">&quot;cdn.tencentcloudapi.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 实例化一个client选项，可选的，没有特殊需求可以跳过</span></span><br><span class=\"line\">        clientProfile = ClientProfile()</span><br><span class=\"line\">        clientProfile.httpProfile = httpProfile</span><br><span class=\"line\">        <span class=\"comment\"># 实例化要请求产品的client对象,clientProfile是可选的</span></span><br><span class=\"line\">        client = cdn_client.CdnClient(cred, <span class=\"string\">&quot;&quot;</span>, clientProfile)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 实例化一个请求对象,每个接口都会对应一个request对象</span></span><br><span class=\"line\">        req = models.DescribeCdnDataRequest()</span><br><span class=\"line\">        params = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;StartTime&quot;</span>:  last_datetime,</span><br><span class=\"line\">            <span class=\"string\">&quot;EndTime&quot;</span>: now_datetime,</span><br><span class=\"line\">            <span class=\"string\">&quot;Metric&quot;</span>: <span class=\"string\">&quot;statusCode&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Interval&quot;</span>: <span class=\"string\">&quot;5min&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        req.from_json_string(json.dumps(params))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 返回的resp是一个DescribeCdnDataResponse的实例，与请求对象对应</span></span><br><span class=\"line\">        resp = client.DescribeCdnData(req)</span><br><span class=\"line\">        <span class=\"comment\"># 输出json格式的字符串回包</span></span><br><span class=\"line\">        res_dict = json.loads(resp.to_json_string())</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(res_dict)</span><br><span class=\"line\">        data_analyse(res_dict)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> TencentCloudSDKException <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(err)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 限制值</span></span><br><span class=\"line\">HALF_HOUR_LIMIT_HITS = <span class=\"number\">500</span></span><br><span class=\"line\"><span class=\"comment\"># FIVE_MINUTES_LIMIT_HITS = 200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">data_analyse</span>(<span class=\"params\">info_dict:<span class=\"built_in\">dict</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    数据分析。</span></span><br><span class=\"line\"><span class=\"string\">    :param info_dict:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> HALF_HOUR_LIMIT_HITS</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    total_dict = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">    cdn_datas = info_dict.get(<span class=\"string\">&quot;Data&quot;</span>)[<span class=\"number\">0</span>].get(<span class=\"string\">&quot;CdnData&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> cdn_datas:</span><br><span class=\"line\">        metric = data.get(<span class=\"string\">&quot;Metric&quot;</span>)</span><br><span class=\"line\">        total = data.get(<span class=\"string\">&quot;SummarizedData&quot;</span>).get(<span class=\"string\">&quot;Value&quot;</span>)</span><br><span class=\"line\">        total_dict[metric]=total</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    total_2xx = total_dict.get(<span class=\"string\">&quot;2xx&quot;</span>)</span><br><span class=\"line\">    total_3xx = total_dict.get(<span class=\"string\">&quot;3xx&quot;</span>)</span><br><span class=\"line\">    total_4xx = total_dict.get(<span class=\"string\">&quot;4xx&quot;</span>)</span><br><span class=\"line\">    total_5xx = total_dict.get(<span class=\"string\">&quot;5xx&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    s = <span class=\"string\">&quot;【CDN状态码检测】 &quot;</span> + last_datetime + <span class=\"string\">&quot; 至 &quot;</span> + now_datetime</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> total_2xx&gt;= HALF_HOUR_LIMIT_HITS:</span><br><span class=\"line\">        send_message(IMPORTANT_PUSH_URL,MESSAGE_TITLE,<span class=\"string\">f&quot;<span class=\"subst\">&#123;s&#125;</span>2xx 响应次数过多，CDN可能正在遭受盗刷！count=<span class=\"subst\">&#123;total_2xx&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> total_3xx&gt;= HALF_HOUR_LIMIT_HITS:</span><br><span class=\"line\">        send_message(NORMAL_PUSH_URL,MESSAGE_TITLE,<span class=\"string\">f&quot;<span class=\"subst\">&#123;s&#125;</span>3xx 响应次数异常。count=<span class=\"subst\">&#123;total_3xx&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> total_4xx&gt;= HALF_HOUR_LIMIT_HITS:</span><br><span class=\"line\">        send_message(NORMAL_PUSH_URL,MESSAGE_TITLE,<span class=\"string\">f&quot;<span class=\"subst\">&#123;s&#125;</span>4xx 响应次数异常。count=<span class=\"subst\">&#123;total_4xx&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> total_5xx&gt;= HALF_HOUR_LIMIT_HITS:</span><br><span class=\"line\">        send_message(NORMAL_PUSH_URL,MESSAGE_TITLE,<span class=\"string\">f&quot;<span class=\"subst\">&#123;s&#125;</span> 5xx 响应次数异常。count=<span class=\"subst\">&#123;total_5xx&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">send_message</span>(<span class=\"params\">push_url:<span class=\"built_in\">str</span>,title:<span class=\"built_in\">str</span>, msg: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    发送消息</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/json; charset=UTF-8&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pyload = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;title&quot;</span>: title,</span><br><span class=\"line\">        <span class=\"string\">&quot;msg&quot;</span>: msg</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    response = requests.post(push_url, data=json.dumps(pyload), headers=headers).text</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(response)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> IMPORTANT_PUSH_URL,NORMAL_PUSH_URL</span><br><span class=\"line\">    <span class=\"comment\"># 参数检查</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(sys.argv) &lt; <span class=\"number\">3</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Error! Arguments is illegal&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    IMPORTANT_PUSH_URL = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">    NORMAL_PUSH_URL = sys.argv[<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    detect()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>示例 cron 写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/30 * * * * /usr/bin/python /var/www/push_script/cdn_request_detect/hit-request-notice.py https://push.uuanqin.top/webhook/92xxxxx70be7 https://push.uuanqin.top/webhook/3fxxxx24bd</span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240724230616.webp\" alt=\"image.png\" /></p>\n<h1 id=\"cron-的其它应用\"><a class=\"markdownIt-Anchor\" href=\"#cron-的其它应用\"></a> cron 的其它应用</h1>\n<ul>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/34fc0316/\"><span class=\"yukari\">站内文章</span>go-cqhttp 部署与简单编程</a></li>\n</ul>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/8713596/how-to-retrieve-the-list-of-all-github-repositories-of-a-person\">How to retrieve the list of all GitHub repositories of a person? - Stack Overflow</a></li>\n<li><a href=\"https://blog.csdn.net/jiongxian1/article/details/115914973\">linux cron_/var/spool/cron/ccsp&quot;:1: premature eof_追逐吾之所求的博客-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/Baozijiaruqing/article/details/103900387\">Python~OS模块–将文件保存到指定路径_python用os创建文件夹保存在哪-CSDN博客</a></li>\n<li><a href=\"https://www.cnblogs.com/monogem/p/11170011.html\">python datetime库使用和时间加减计算 - Monogem - 博客园 (cnblogs.com)</a></li>\n<li><a href=\"https://blog.csdn.net/hyj_king/article/details/123396754\">【python】将json字符串转化为json对象_python json字符串转json对象-CSDN博客</a></li>\n</ul>\n","raw":"---\ntitle: 利用 Cron 编写简单的定时脚本\ntags:\n  - GitHub\n  - cron\n  - Python\n  - Webhook\n  - script\n  - SDK\n  - CDN\n  - 腾讯云\ncover: 'https://cdn.gallery.uuanqin.top/img/githubstarcover.webp'\nabbrlink: b9dad4e7\ndescription: 介绍一些简单定时脚本的编写并利用 Webhook 推送\ncategories:\n  - 核心协同\n  - 自动化\ndate: 2024-07-24 22:43:43\ntop_img:\n---\n\n> [!notice] 文章重要更新 `240724`\n> 由于近期惨遭某些省的 IP 多轮恶意刷量，现新增两个小脚本加强网站被攻击状况的感知。\n> 原文写于 `231206`。\n\n> [!hint] 除了使用自建服务器上的 Cron 执行定时脚本以外，还可以使用 GitHub Action 完成这项工作。\n\n这篇文章通过一些简单的 Python 脚本演示定时脚本配合 Webhook 的使用。\n\n通过这个思路，你可以展开更多的想法：\n\n* 实时监测 GitHub 的各项信息并推送\n* NPM 包下载量监测\n* LeetCode 每日一题\n* 排名监测\n* 获取某官网上的重要公告\n* 监控云服务平台的各项数据\n* ......\n\n本文主要介绍：\n\n1. 获取用户 Github 上的 Star 数量并推送的脚本编写\n2. 根据用户名监测某作者 NPM 包年下载量\n3. **实时监测多吉云团队公布的文章「近期部分加速域名晚间遭遇恶意流量事件说明」通告是否更新**\n4. **监控腾讯云 CDN 请求数是否超限**\n\n# 获取 Github 上的 Star 数量并推送\n## GitHub 应用注册\n\n打开你的 GitHub 主页（profile）进入开发者选项：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231206211025.webp)\n\n选择「新建一个」GitHub APP。根据需要进行相关设置的填写。\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20231206211112.webp)\n\n生成密钥：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20231206211249.webp)\n\n记住密钥，待会脚本需要调用。\n\n## 脚本的编写\n\n这里参考了 [songquanpeng/scripts](https://github.com/songquanpeng/scripts) 的实现，并进行修复与改编。\n\n这个 python 脚本（这里命名为 `github_stars.py`）所做的工作：\n\n1. 调用 GitHub API（[Repositories - GitHub Docs](https://docs.github.com/en/rest/repos?apiVersion=2022-11-28)）\n2. 统计所有项目的 star 数量\n3. 与上次统计结果进行比较（结果保存在本地）\n4. 调用推送服务发送 POST JSON 格式的请求\n\n执行脚本需要的三个参数：\n\n- GitHub 用户名\n- GitHub API 令牌\n- 调用的推送服务（将发送 POST）请求\n\n源代码【非面向对象版本】如下：\n\n```python\n# -*- coding: utf-8 -*-\n\n#!/usr/bin/python3\nimport json\nimport requests\nimport sys\n\n# 存储上次检测的 star 数的文件\nfilename = \"./.star_count\"\n# Push链接\npush_url = \"\"\n# 用户名\nusername=\"\"\n\ndef star_counter(username: str, token: \"\") -> int:\n    \"\"\"\n    调用GitHub API获取个人仓库信息，返回统计的stars数\n    :param username:\n    :param token:\n    :return:\n    \"\"\"\n    # 链接的构建\n    all_repos_url = f\"https://api.github.com/users/{username}/repos?per_page=100\"\n    header = {} if token == \"\" else {\"Authorization\": f\"bearer {token}\"}\n    # 向GitHub发送请求\n    res = requests.get(all_repos_url, header)\n    repos = res.json()\n    # 解析响应并统计\n    count = 0\n    for repo in repos:\n        count += repo[\"stargazers_count\"]\n    return count\n\n\ndef load_count() -> int:\n    '''\n    加载上一次的统计结果，若无则默认为0\n    :return:\n    '''\n    try:\n        with open(filename, 'r') as f:\n            count = int(f.read())\n    except IOError:\n        count = 0\n    return count\n\n\ndef save_count(count: int):\n    '''\n    保存统计结果\n    :param count:\n    :return:\n    '''\n    with open(filename, 'w') as f:\n        f.write(str(count))\n\n\ndef send_message(msg: str):\n    \"\"\"\n    发送消息\n    :param msg:\n    :return:\n    \"\"\"\n    headers = {\n        \"Content-Type\": \"application/json; charset=UTF-8\"\n    }\n    pyload = {\n        \"title\":\"GitHub Stars\",\n        \"msg\":msg\n    }\n    response = requests.post(push_url,data=json.dumps(pyload),headers=headers).text\n    print(response)\n\ndef message_construct(last_count,current_count) -> str:\n    \"\"\"\n    自定义的信息构造函数。\n    样例：【每日检测】检测到用户uuanqin总star数增加 :) 。[0 -> 6, total: 6]\n    :param last_count:\n    :param current_count:\n    :return:\n    \"\"\"\n    s = f\"【每日检测】检测到用户{username}总star数\"\n    if current_count > last_count:\n        s += f\"增加 :) 。\"\n    else:\n        s += f\"降低 :( 。\"\n    s += f\"[{last_count} -> {current_count}, total: {current_count-last_count}]\"\n    return s\n\ndef main():\n    # 参数检查\n    if len(sys.argv) != 4:\n        print(\"Error! This script requires three arguments: GITHUB_USERNAME GITHUB_TOKEN PUSH_URL\")\n        return\n    # 参数设置\n    global push_url,username\n    username = sys.argv[1]\n    token = sys.argv[2]\n    push_url = sys.argv[3]\n\n    # 获取上一次统计结果\n    last_count = load_count()\n    # 获取本次统计结果\n    current_count = star_counter(username, token)\n\n    # 根据数量变化进行判断\n    if current_count != last_count:\n        send_message(message_construct(last_count,current_count))\n        # 只有数量发生变化才保存结果\n        save_count(current_count)\n\nif __name__ == '__main__':\n    main()\n```\n\n注意，代码中不要使用奇奇怪怪的字符，比如 emoji 表情等，导致 utf-8 和 gbk 都不能识别。\n\n这里我使用了自己的部署服务。使用示例：\n\n```sh\npython ./github_stars.py uuanqin 9xxxxxxxx7 https://push.uuanqin.top/webhook/8xxxxxxe\n```\n\n把脚本放在 Linux 服务器上，记得测试。\n\n> 这里使用的 API 似乎有点老了，但是还能用。我在文档中没有找到**确切**的对应文档说明。\n\n## 定时执行\n\n新建 cron 文件：\n\n```cron\n2 8 * * * /usr/bin/python /var/www/push_script/github_stars/github_stars.py uuanqin 9xxxxxxxxxxxxxx7 https://push.uuanqin.top/webhook/8xxxxxxxxxxxxxxe\n```\n\n添加定时任务：\n\n```sh\ncrontab github_stars.cron\n```\n\n每天早上 8 点 02 分调用该脚本。\n\n附 [在线网站](https://tool.lu/crontab/) 验证结果：\n\n![image.png|237](https://cdn.gallery.uuanqin.top/img/20231206214712.webp)\n\n> 不了解 cron 可以查看这篇文章：[[Linux 使用 Cron 创建定时任务]]\n\n像我的部署服务使用了飞书群机器人，推送效果如下：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231206214530.webp)\n\n# NPM 下载量的监测\n\n根据上一小节介绍的脚本，我们重构一下，改成面向对象的版本。以下脚本能同时支持 GitHub stars 数量的检测以及 NPM 年下载量的检测。\n\n脚本使用了第三方 npm 数据服务：[npm-stat: download statistics for NPM packages](https://npm-stat.com/)\n\n注意，临时的数据文件存储在 `DIR_OF_TEMP_FILE` 目录下。\n\n```python\n# -*- coding: utf-8 -*-\nimport datetime\n#!/usr/bin/python3\nimport json\nimport os\n\nimport requests\nimport sys\nfrom abc import ABC, abstractmethod\n\nfrom dateutil.relativedelta import relativedelta\n\nDIR_OF_TEMP_FILE = \"/var/www/push_script/count_detect\"  # 临时变量存储文件夹\nDIR_OF_PUBLIC_JSON_FILE = \"/var/www/public_json_files\"    # json数据文件保存的文件夹\n\nclass Obj:\n    # 存储统计数的文件名\n    filename = \"\"\n    title = \"\"\n    last_count = 0\n    current_count = 0\n    # Push链接\n    push_url = \"\"\n\n    def __init__(self,push_url):\n        self.push_url = push_url\n        self.load_count()\n        self.count()\n\n\n    @abstractmethod\n    def count(self):\n        pass\n\n    @abstractmethod\n    def message_construct(self):\n        pass\n\n\n    def load_count(self):\n        '''\n        加载上一次的统计结果，若无则默认为0\n        '''\n        try:\n            with open(self.filename, 'r') as f:\n                count = int(f.read())\n        except IOError:\n            count = 0\n        self.last_count = count\n\n\n    def save_count(self):\n        '''\n        保存统计结果\n        '''\n        with open(self.filename, 'w') as f:\n            f.write(str(self.current_count))\n\n    def send_message(self, msg: str):\n        \"\"\"\n        发送消息\n        \"\"\"\n        headers = {\n            \"Content-Type\": \"application/json; charset=UTF-8\"\n        }\n        pyload = {\n            \"title\": self.title,\n            \"msg\": msg\n        }\n        response = requests.post(self.push_url, data=json.dumps(pyload), headers=headers).text\n        print(response)\n\n    def push(self):\n        # 根据数量变化进行判断\n        current_count = self.current_count\n        last_count = self.last_count\n        if current_count != last_count:\n            self.send_message(self.message_construct())\n            # 只有数量发生变化才保存结果\n            self.save_count()\n\n\nclass GitHubStars(Obj):\n\n    # 用户名\n    username = \"\"\n    github_token = \"\"\n    def __init__(self,push_url,token,username):\n\n        self.filename = os.path.join(DIR_OF_TEMP_FILE,\".star_count\")\n        self.title = \"GitHub Stars Count\"\n        self.github_token = token\n        self.username = username\n        super().__init__(push_url)\n\n    def count(self):\n        \"\"\"\n        调用GitHub API获取个人仓库信息，返回统计的stars数\n        \"\"\"\n        # 链接的构建\n        all_repos_url = f\"https://api.github.com/users/{self.username}/repos?per_page=100\"\n        header = {} if self.github_token == \"\" else {\"Authorization\": f\"bearer {self.github_token}\"}\n        # 向GitHub发送请求\n        res = requests.get(all_repos_url, header)\n        repos = res.json()\n        # 解析响应并统计\n        count = 0\n        for repo in repos:\n            count += repo[\"stargazers_count\"]\n        self.current_count =  count\n\n    def message_construct(self) -> str:\n        \"\"\"\n        自定义的信息构造函数。\n        样例：【每日检测】检测到用户uuanqin总star数增加 :) 。[0 -> 6, total: 6]\n        \"\"\"\n        s = f\"【每日检测】检测到用户{self.username}总star数\"\n        if self.current_count > self.last_count:\n            s += f\"增加 :) 。\"\n        else:\n            s += f\"降低 :( 。\"\n        s += f\"[{self.last_count} -> {self.current_count}, total: {self.current_count-self.last_count}]\"\n        return s\n\nclass NpmAuthorDownloads(Obj):\n    username = \"\"\n    def __init__(self,push_url,username):\n        self.filename = os.path.join(DIR_OF_TEMP_FILE,\".npm_count\")\n        self.title = \"GitHub Stars Count\"\n        self.username = username\n        super().__init__(push_url)\n\n    def count(self):\n        nowtime = datetime.datetime.now()\n        yesterdate = nowtime - datetime.timedelta(days=+1)\n        # last_year = yesterdate - relativedelta(years=1)\n        yesterdate_strf=yesterdate.strftime('%Y-%m-%d')\n        last_year_strf= \"2023-10-18\" # 这是我写的第一个插件发布前两天 # last_year.strftime('%Y-%m-%d')\n        url = f\"https://npm-stat.com/api/download-counts?author={self.username}&from={last_year_strf}&until={yesterdate_strf}\"\n        # 向GitHub发送请求\n        res = requests.get(url)\n        repos = res.json()\n        # 解析响应并统计\n        count = 0\n        for p,con in repos.items():\n            for d,v in con.items():\n                count += v\n        self.current_count = count\n        \n        # 写入计算结果到Json文件以便公开访问\n        public_dict = {\n            \"name\":\"npm-stat-by-author\",\n            \"total\": count\n        }\n        json_str = json.dumps(public_dict)\n        json_name = os.path.join(DIR_OF_PUBLIC_JSON_FILE,\"npm_stat_author_total.json\")\n        with open(json_name, 'w') as f:\n            f.write(json_str)\n\n\n    def message_construct(self):\n        \"\"\"\n        自定义的信息构造函数。\n        \"\"\"\n        s = f\"【每日检测】检测到用户{self.username}的NPM账户去年包下载量发生变动。\"\n        s += f\"[{self.last_count} -> {self.current_count}, total: {self.current_count - self.last_count}]\"\n        return s\n\n\ndef main():\n    # 参数检查\n    if len(sys.argv) <2:\n        print(\"Error! Arguments is illegal\")\n        return\n\n    type = sys.argv[1]\n    obj = None\n\n    if type==\"github_stars\" and len(sys.argv) != 5:\n        print(\"Error! This script requires Four arguments: TYPE GITHUB_USERNAME GITHUB_TOKEN PUSH_URL\")\n        return\n    elif type==\"npm_downloads\" and len(sys.argv) != 4:\n        print(\"Error! This script requires Four arguments: TYPE NPM_AUTHOR PUSH_URL\")\n        return\n    elif type!= \"github_stars\" and type!= \"npm_downloads\":\n        print(\"Error! Arguments is illegal\")\n        return\n\n\n    if type == \"github_stars\":\n        obj = GitHubStars(sys.argv[4],sys.argv[3],sys.argv[2])\n    elif type == \"npm_downloads\":\n        obj = NpmAuthorDownloads(sys.argv[3],sys.argv[2])\n\n    obj.push()\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n示例 cron：\n\n```cron\n2 8 * * * /usr/bin/python /var/www/push_script/count_detect/count_detect.py github_stars uuanqin 94xxxxc2b7 https://push.uuanqin.top/webhook/3f2xxxxbd\n3 8 * * * /usr/bin/python /var/www/push_script/count_detect/count_detect.py npm_downloads wuanqin https://push.uuanqin.top/webhook/3f2xxxxbd\n```\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240724230653.webp)\n\n# 检测重要网页的更新\n\n> 背景：2024 年 7 月开始，中小型博客网站遭遇恶意流量攻击。多吉云团队公布的高危 IP 为中小博客站长提供了有用的防范信息。我们需要定时检测这个重要信息的更新及时将危险 IP 列入黑名单中。\n\n信息通知地址：[公告 - 多吉云 (dogecloud.com)](https://www.dogecloud.com/announcement/26)\n\n通过 F12 调试工具得知接口 API 请求地址为： https://api.dogecloud.com/home/announcement/detail.json?id=26\n\n编写简单脚本检测文章内容是否改变。如果改变则推送通知。\n\n脚本内容为上一小节中脚本的简化：\n\n```python\n# -*- coding: utf-8 -*-\nimport datetime\n# !/usr/bin/python3\nimport json\nimport os\n\nimport requests\nimport sys\n\n\nclass Notice:\n    filename = \"\"\n    title = \"\"\n\n    # Push链接\n    push_url = \"\"\n\n    # 上次页面内容\n    last_content = \"\"\n    # 本次加载内容\n    now_content = \"\"\n\n    def __init__(self, push_url):\n        self.push_url = push_url\n        self.filename = os.path.join(os.getcwd(), \".cdn_notice\")\n        self.title = \"CDN Notice was Updated\"\n        self.load_page()\n        self.get()\n\n    def load_page(self):\n        '''\n        加载上一次的页面报告，若无则默认为空\n        '''\n        try:\n            with open(self.filename, 'r') as f:\n                last_content = f.read()\n        except IOError:\n            last_content = \"\"\n        self.last_content = last_content\n\n    def save_page(self):\n        '''\n        保存页面 只有页面发生变化才保存结果\n        '''\n        with open(self.filename, 'w') as f:\n            f.write(self.now_content)\n\n    def send_message(self, msg: str):\n        \"\"\"\n        发送消息\n        \"\"\"\n        headers = {\n            \"Content-Type\": \"application/json; charset=UTF-8\"\n        }\n        pyload = {\n            \"title\": self.title,\n            \"msg\": msg\n        }\n        response = requests.post(self.push_url, data=json.dumps(pyload), headers=headers).text\n        print(response)\n\n    def push(self):\n        # 根据页面变化进行判断\n        if self.now_content != self.last_content:\n            self.send_message(self.message_construct())\n            # 只有页面发生变化才保存结果\n            self.save_page()\n\n    def get(self):\n        \"\"\"\n        获取页面数据\n        \"\"\"\n\n        # header = {} if self.github_token == \"\" else {\"Authorization\": f\"bearer {self.github_token}\"}\n\n        res = requests.get(\"https://api.dogecloud.com/home/announcement/detail.json?id=26\")\n        res_json = res.json()\n        self.now_content = res_json[\"data\"][\"content\"]\n\n    def message_construct(self) -> str:\n        \"\"\"\n        自定义的信息构造函数。\n        \"\"\"\n        s = f\"【每日检测】检测到多吉云CDN恶意IP公示更新。请及时查看： https://www.dogecloud.com/announcement/26\"\n        return s\n\n\ndef main():\n    # 参数检查\n    if len(sys.argv) < 2:\n        print(\"Error! Arguments is illegal\")\n        return\n\n    push_url = sys.argv[1]\n    obj = Notice(push_url)\n\n    obj.push()\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n示例 cron：\n\n```cron\n9 8 * * * /usr/bin/python /var/www/push_script/cdn_notice/cdn_notice.py https://push.uuanqin.top/webhook/3f2xxxxbd\n```\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240724230600.webp)\n\n# 监控腾讯云 CDN 命中请求数\n\n\n> 腾讯云预警时效还是有点长，敏感度不够，我们可以利用 API 自写脚本进行预警。CDN 流量与带宽监控需要开通 ecdn，所以这里就监控命中的请求数或响应码。\n\n需求：每半小时对 CDN 响应状态码进行分析，半小时内命中的响应状态码数量异常时将推送通知。\n\n安装 SDK：\n\n```sh\npip install tencentcloud-sdk-python-cdn\n```\n\n通过腾讯云 API Explorer 快速得到 SDK 代码写法：[API Explorer - 云 API - 控制台 (tencent.com)](https://console.cloud.tencent.com/api/explorer?Product=cdn&Version=2018-06-06&Action=DescribeCdnData)\n\n> 任何时候使用任何 API 时都要注意保护好密钥。详见：[[将 CDN 缓存自动刷新加入到博客发布的工作流（Hexo、WordPress）]]\n\n```python\n# -*- coding: utf-8 -*-\n\n#!/usr/bin/python3\n\nimport json\nimport os\nimport datetime\nimport sys\nimport types\n\nimport requests\nfrom tencentcloud.common import credential\nfrom tencentcloud.common.profile.client_profile import ClientProfile\nfrom tencentcloud.common.profile.http_profile import HttpProfile\nfrom tencentcloud.common.exception.tencent_cloud_sdk_exception import TencentCloudSDKException\nfrom tencentcloud.cdn.v20180606 import cdn_client, models\n\nIMPORTANT_PUSH_URL = \"\"\nNORMAL_PUSH_URL = \"\"\nnow_datetime = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\nlast_datetime = (datetime.datetime.now()+datetime.timedelta(minutes=-30)).strftime(\"%Y-%m-%d %H:%M:%S\")\n\nMESSAGE_TITLE = \"CDN请求监控\"\ndef detect():\n    try:\n        # 实例化一个认证对象，入参需要传入腾讯云账户 SecretId 和 SecretKey，此处还需注意密钥对的保密\n        # 代码泄露可能会导致 SecretId 和 SecretKey 泄露，并威胁账号下所有资源的安全性。以下代码示例仅供参考，建议采用更安全的方式来使用密钥，请参见：https://cloud.tencent.com/document/product/1278/85305\n        # 密钥可前往官网控制台 https://console.cloud.tencent.com/cam/capi 进行获取\n        cred = credential.Credential(os.environ.get(\"TENCENT_API_SECRETID\"), os.environ.get(\"TENCENT_API_SECRETKEY\"))\n        # 实例化一个http选项，可选的，没有特殊需求可以跳过\n        httpProfile = HttpProfile()\n        httpProfile.endpoint = \"cdn.tencentcloudapi.com\"\n\n        # 实例化一个client选项，可选的，没有特殊需求可以跳过\n        clientProfile = ClientProfile()\n        clientProfile.httpProfile = httpProfile\n        # 实例化要请求产品的client对象,clientProfile是可选的\n        client = cdn_client.CdnClient(cred, \"\", clientProfile)\n\n        # 实例化一个请求对象,每个接口都会对应一个request对象\n        req = models.DescribeCdnDataRequest()\n        params = {\n            \"StartTime\":  last_datetime,\n            \"EndTime\": now_datetime,\n            \"Metric\": \"statusCode\",\n            \"Interval\": \"5min\"\n        }\n        req.from_json_string(json.dumps(params))\n\n        # 返回的resp是一个DescribeCdnDataResponse的实例，与请求对象对应\n        resp = client.DescribeCdnData(req)\n        # 输出json格式的字符串回包\n        res_dict = json.loads(resp.to_json_string())\n        print(res_dict)\n        data_analyse(res_dict)\n\n    except TencentCloudSDKException as err:\n        print(err)\n\n# 限制值\nHALF_HOUR_LIMIT_HITS = 500\n# FIVE_MINUTES_LIMIT_HITS = 200\n\ndef data_analyse(info_dict:dict):\n    \"\"\"\n    数据分析。\n    :param info_dict:\n    :return:\n    \"\"\"\n    global HALF_HOUR_LIMIT_HITS\n\n\n    total_dict = dict()\n    cdn_datas = info_dict.get(\"Data\")[0].get(\"CdnData\")\n    for data in cdn_datas:\n        metric = data.get(\"Metric\")\n        total = data.get(\"SummarizedData\").get(\"Value\")\n        total_dict[metric]=total\n\n\n    total_2xx = total_dict.get(\"2xx\")\n    total_3xx = total_dict.get(\"3xx\")\n    total_4xx = total_dict.get(\"4xx\")\n    total_5xx = total_dict.get(\"5xx\")\n\n    s = \"【CDN状态码检测】 \" + last_datetime + \" 至 \" + now_datetime\n\n    if total_2xx>= HALF_HOUR_LIMIT_HITS:\n        send_message(IMPORTANT_PUSH_URL,MESSAGE_TITLE,f\"{s}2xx 响应次数过多，CDN可能正在遭受盗刷！count={total_2xx}\")\n\n    if total_3xx>= HALF_HOUR_LIMIT_HITS:\n        send_message(NORMAL_PUSH_URL,MESSAGE_TITLE,f\"{s}3xx 响应次数异常。count={total_3xx}\")\n\n    if total_4xx>= HALF_HOUR_LIMIT_HITS:\n        send_message(NORMAL_PUSH_URL,MESSAGE_TITLE,f\"{s}4xx 响应次数异常。count={total_4xx}\")\n\n    if total_5xx>= HALF_HOUR_LIMIT_HITS:\n        send_message(NORMAL_PUSH_URL,MESSAGE_TITLE,f\"{s} 5xx 响应次数异常。count={total_5xx}\")\n\n\ndef send_message(push_url:str,title:str, msg: str):\n    \"\"\"\n    发送消息\n    \"\"\"\n    headers = {\n        \"Content-Type\": \"application/json; charset=UTF-8\"\n    }\n    pyload = {\n        \"title\": title,\n        \"msg\": msg\n    }\n    response = requests.post(push_url, data=json.dumps(pyload), headers=headers).text\n    print(response)\n\ndef main():\n    global IMPORTANT_PUSH_URL,NORMAL_PUSH_URL\n    # 参数检查\n    if len(sys.argv) < 3:\n        print(\"Error! Arguments is illegal\")\n        return\n\n    IMPORTANT_PUSH_URL = sys.argv[1]\n    NORMAL_PUSH_URL = sys.argv[2]\n\n\n    detect()\n\nif __name__ == '__main__':\n    main()\n\n```\n\n示例 cron 写法：\n\n```cron\n*/30 * * * * /usr/bin/python /var/www/push_script/cdn_request_detect/hit-request-notice.py https://push.uuanqin.top/webhook/92xxxxx70be7 https://push.uuanqin.top/webhook/3fxxxx24bd\n```\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240724230616.webp)\n\n# cron 的其它应用\n\n- [[go-cqhttp 部署与简单编程]]\n\n# 本文参考\n\n* [How to retrieve the list of all GitHub repositories of a person? - Stack Overflow](https://stackoverflow.com/questions/8713596/how-to-retrieve-the-list-of-all-github-repositories-of-a-person)\n* [linux cron_/var/spool/cron/ccsp\":1: premature eof_追逐吾之所求的博客-CSDN博客](https://blog.csdn.net/jiongxian1/article/details/115914973)\n* [Python~OS模块--将文件保存到指定路径_python用os创建文件夹保存在哪-CSDN博客](https://blog.csdn.net/Baozijiaruqing/article/details/103900387)\n* [python datetime库使用和时间加减计算 - Monogem - 博客园 (cnblogs.com)](https://www.cnblogs.com/monogem/p/11170011.html)\n* [【python】将json字符串转化为json对象_python json字符串转json对象-CSDN博客](https://blog.csdn.net/hyj_king/article/details/123396754)","categories":[{"name":"核心协同","api":"api/categories/核心协同.json"},{"name":"自动化","api":"api/categories/核心协同/自动化.json"}],"tags":[{"name":"Python","api":"api/tags/Python.json"},{"name":"CDN","api":"api/tags/CDN.json"},{"name":"腾讯云","api":"api/tags/腾讯云.json"},{"name":"GitHub","api":"api/tags/GitHub.json"},{"name":"SDK","api":"api/tags/SDK.json"},{"name":"script","api":"api/tags/script.json"},{"name":"cron","api":"api/tags/cron.json"},{"name":"Webhook","api":"api/tags/Webhook.json"}]},"api":"api/posts/p/b9dad4e7.json"}