{"title":"Groovy 基础","tags":["Groovy","Java","语法糖"],"cover":"https://cdn.gallery.uuanqin.top/img/202504170005366.webp","description":"既然接触了，干脆就学完吧","abbrlink":"22279b30","categories":["计算机语言"],"date":"2025-05-13T23:55:25.000Z","top_img":null,"summary":"刷题几乎不会用到 Groovy，本文目的仅在于快速熟悉 Groovy 语言，并了解其与 Java 语言的区别。 Groovy 简介 Groovy 是一门基于 JVM 的脚本语言。它在兼容 Java 语法的同时，借鉴了 Ruby、Python 等语言的特性，有自己一套简洁而灵活的语法。同时，运行在 JVM 上也意味着它也可以使用 Java 语言编写的库。这两点结合，让 Groovy 极其适合编写 Java 代码的测试脚本。 Groovy 兼容 Java 的语法。有关 Java 语法详见：[[【语言热身】Java 基础（热身索引）]] Groovy 提供了大量的语法糖来方便我们编写脚本。 在 IDEA 中，可以通过 Tools->Groovy Console 随时随地进行简单 Groovy 的编写与调试。也可以另外创建 Groovy 项目。 缺点： 效率问题。Groovy 作为运行在 JVM 上的动态语言，运行效率是低于 Java 的。虽然可以用 `@CompileStatic` 注解来静态编译一些类以提高效率，但这样又会失去 Groovy 的一些动态语言的特性。 语法过于灵活，运用不当会降低可读性与可维护性。Groovy 支持元编程特性，可以在运行时动态添加方法。这一点自然可以简化代码，但也有很大的可能会降低可维护性。函数式编程与大量的语法糖会让不熟悉 Groovy 的人读起来一头雾水，反而降低了可读性。 main 方法 > 🍬 优化了 Java 的 main 方法。类似 Python。 main 方法的写法可以和 Java 相同。 Groovy 中 main 方法不一定要写在类中。 甚至，main 方法根本就不需要： 变量的定义和交换 > 🍬 简化 Java 多变量定义即交换方法。类似 Python。 数据类型 字符串 > 🍬 弥补了 Java 字符串处理中没有重复操作的痛点。类似 Python。 字符串操作： `+`：字符串链接 `*`：字符串重复 `str.length()`：字符串长度 可选类型 > 🍬 优化了 Java 的类型创建。类似 Python。 Groovy 是一种 \" 可选 \" 类型的语言，在理解该语言的基础知识时，这种区别很重要。..."}