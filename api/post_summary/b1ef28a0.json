{"title":"SpringBoot 项目的上线方式","tags":["SpringBoot","Nginx","宝塔","Linux","Java","Spring","Docker"],"cover":"https://cdn.gallery.uuanqin.top/img/20240723234813.webp","description":"备忘 SpringBoot 后端项目的部署方式","abbrlink":"b1ef28a0","categories":["技术学习"],"date":"2024-07-24T00:10:09.000Z","top_img":null,"summary":"项目构建与多环境 多环境的分类： 本地环境。可以理解为自己的电脑。 开发环境。开发人员远程开发，连接同一台机器。 测试环境：用于完成单元测试 / 性能测试 / 功能测试 / 系统集成测试，拥有独立的数据库、独立的服务器 预发布环境：和正式环境一致，正式数据库，更严谨。 正式环境：线上的，公开对外访问的项目。尽量不要改动。 沙箱环境：用于实验的环境。 通过配置环境区分多环境： IDEA Maven 命令面板选择并执行对应项目的：`Lifecycle`->`package` 命令进行打包。命令执行完成后将在 target 目录生成 jar 包。 > [!hint] SpringBoot 项目打包操作依赖 > 进行打包时需要引入 `spring-boot-maven-plugin`。不过基于官方骨架创建项目，会自动添加这个插件。 > 打包时可以在 IDEA 的 Maven 命令面板中选择 `Skip Tests` 禁掉单元测试。 本地部署 执行以下命令： 这样 SpringBoot 项目就会使用 `application-prod.yml` 的配置。 Linux+Nginx 部署 把打好的 jar 包直接扔上服务器。假设我扔在这个目录中：`/var/www/temp_test`。必要时给予权限： > 也可以是：本地代码上传到仓库，然后服务器使用 Git 拉取代码，在服务器中运行 maven （服务器中需提前安装好 maven，并配置好仓库源）进行打包操作 `mvn package -DskipTests`。 Linux 运行命令以启动项目（后台运行）： 查看运行的程序： > 关于 nohup 命令详看：[[Linux 使用 nohup 后台运行程序]] Nginx 配置文件： > 前端项目部署方式可看：[[Ant Design Pro 前端项目初始化到部署上线]] Docker 容器部署 Docker 是容器，可以将项目的环境（比如 java、nginx）和项目的代码一起打包成镜像，所有具有权限的用户都能下载镜像，更容易分发和移植。 启动项目时不需要敲更多的命令，而是通过下载镜像、启动镜像即可。..."}