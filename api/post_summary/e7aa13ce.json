{"title":"SPI 概念及案例实践（下）","tags":["SPI","ServiceLoader","Java"],"description":"写一个更灵活的 SPI 框架","categories":["技术学习"],"abbrlink":"e7aa13ce","cover":"https://cdn.gallery.uuanqin.top/img/20240731214853.webp","date":"2024-08-01T13:08:18.000Z","top_img":null,"summary":"> [!hint] 阅读前提示 > 为了更好地理解文章，建议先阅读 [[SPI 概念及案例实践（上）]]。 在 [[SPI 概念及案例实践（上）|这篇文章]] 中我们学习并实践了 Java 原生的 SPI 机制。但我们还想更便捷的使用 SPI。设想这样一个场景：当公司 A 使用互联网连接服务时，我们直接这样调用服务： 这样就不需要在 `pom.xml` 中导入不同的 jar 包以获取实现类，又或者在多个实现类中选择一个具体的服务实现。编写好一个 SPI 框架，我们能更好地调用和扩展 SPI 服务。 本文源代码详见文末。 写一个 SPI 框架 重写 ServiceLoader 现在，公司 A 决定写一套 SPI 框架。 新建模块 `simple-company-frame`。在 `simple-company-frame` 模块 `pom.xml` 中导入以下模块以提供日志功能： 重写 ServiceLoader ： 相当于一个工具类，提供了读取配置并加载实现类的方法。 关键实现如下： 用 Map 来存储已加载的配置信息 键名 => 实现类。 扫描指定路径，读取每个配置文件，获取到 键名 => 实现类 信息并存储在 Map 中。 定义获取实例方法，根据用户传入的接口和键名，从 Map 中找到对应的实现类，然后通过反射获取到实现类对象。可以维护一个对象实例缓存，创建过一次的对象从缓存中读取即可。 我们扫描的 SPI 目录有两个： `META-INF/my/system/` 框架的 SPI 目录 `META-INF/my/custom/` 用户自定义的 SPI 目录（优先级高） 为框架编写自己 `InternetService` 的实现类 在 `simple-company-frame` 模块新建包 `internet`，存放与互联网连接相关的代码。 写随便两个公司自己编写的实现类，用于后续测试。比如： 写一个 `InternetService` 工厂类 互联网连接服务对象是可以复用的，没必要每次执行连接操作前都创建一个新的对象。所以我们可以使用设计模式中的 工厂模式 + 单例模式 来简化创建和获取互联网连接服务对象的操作。 写配置 测试 回到 `simple-company` 模块。 `pom.x..."}