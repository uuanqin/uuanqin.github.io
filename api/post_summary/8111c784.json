{"title":"STM32 移植 FreeRTOS - 基于标准库","tags":["STM32","移植","FreeRTOS","C","Keil"],"description":"标准库下FreeRTOS的移植。","categories":["嵌入式"],"abbrlink":"8111c784","date":"2024-04-02T13:44:07.000Z","cover":"https://cdn.gallery.uuanqin.top/img/20240404231107.webp","top_img":null,"summary":"这篇文章介绍标准库下将 FreeRTOS 移植到 STM32 的过程。主要内容包括： 源码下载与介绍 基础工程从零创建 移植步骤 创建一个任务并点亮 LED 灯 FreeRTOS 源码下载 下载途径 通过 FreeRTOS 官网下载：FreeRTOS - Market leading RTOS (Real Time Operating System) for embedded systems with Internet of Things extensions 通过代码托管网站下载：FreeRTOS Real Time Kernel (RTOS) - Browse /FreeRTOS at SourceForge.net 这里我们打算下载 2018 年发布的版本：V9.0.0，因为它的内核稳定，且网上资料较多。我们使用第二种方式进行下载。 选择 zip 格式进行源码下载： FreeRTOS 源码结构介绍 基础工程构建 移植前我们需要有一个基础工程。首先构建一个最简单的 STM-32 基于标准库方式开发的工程（详见 [[STM32 工程的创建 - 基于寄存器或标准库]]） 移植 printf 详看：[[串口驱动程序之「发送数据」]] > 如果你已经移植好可以跳过这一步。这里主要是为了无缝衔接 [[STM32 工程的创建 - 基于寄存器或标准库|这篇文章]]。 延时函数 编写延时函数，将这两个文件放到合适的位置。记得引入到「组」中。这里直接使用 普中 写好的代码。注意，以前在标准库中使用的延时函数建议成下面的函数。 Systick.h： Systick.c： 进行到这里还不能成功编译，因为 Systick 使用了 FreeRTOS 的函数。 移植 FreeRTOS 在项目中新建名为 `FreeRTOS` 的文件夹。 将从往上下载的 FreeRTOS 源码中，标识为【A】的目录下所有内容粘贴到我们新创建的名为 `FreeRTOS` 的文件夹中。 删除【B】文件夹下，除了【C】之外的所有文件夹。也就是只保留 `Keil`、`MemMang` 和 `RVDS` 这三个文件夹。 结果如下： 回到 Keil 中（这里沿用 普中 的风格）： 新建组 `FreeRTOS_core`： - 添加【Core】标记的 `.c` 文件，共 6 个。..."}