{"data":{"title":"树状数组上手了就十分简单","slug":"算法与数据结构/树状数组上手了就十分简单","description":"理解起来可难了","date":"2025-09-24T15:26:16.000Z","updated":"2025-09-25T13:03:44.301Z","language":"zh-CN","comments":true,"url":"p/47fd7a85/","cover":"https://cdn.gallery.uuanqin.top/img/202509242325635.webp","images":[],"content":"<p>本文题目难度标识：🟩简单，🟨中等，🟥困难。</p>\n<h1 id=\"直观感受树状数组\"><a class=\"markdownIt-Anchor\" href=\"#直观感受树状数组\"></a> 直观感受树状数组</h1>\n<p>树状数组是一种支持「单点修改」和「区间查询」的，代码量小的数据结构：</p>\n<ul>\n<li>单点修改：给定数组 <code>arr</code>，将 <code>arr[i]</code> 自增为 <code>k</code>。这里的自增可以是赋值等其他操作。</li>\n<li>区间查询：给定 <code>l</code>、<code>r</code>，求 <code>arr[l..r]</code> 的和或其他区间特征。</li>\n</ul>\n<p>普通树状数组维护的信息及运算要满足 结合律 且 可差分，如加法（和）、乘法（积）、异或等。</p>\n<ul>\n<li>结合律：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo>∘</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>∘</mo><mi>z</mi><mo>=</mo><mi>x</mi><mo>∘</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo>∘</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x\\circ y)\\circ z = x\\circ (y\\circ z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>可差分：具有逆运算的运算，即已知 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>∘</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x\\circ y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，可求出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>。</li>\n</ul>\n<p>事实上，树状数组能解决的问题是 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/10ab676/\"><span class=\"bilink-pop-up\">站内文章</span>线段树</a> 能解决的问题的子集：树状数组能做的，线段树一定能做；线段树能做的，树状数组不一定可以。然而，树状数组的代码要远比线段树短，时间效率常数也更小，因此仍有学习价值。</p>\n<p>通过对树状数组进行扩展，我们还可以使其进行「区间修改」和「单点查询」：</p>\n<ul>\n<li>区间修改：给定 <code>l</code>、<code>r</code>、<code>k</code>，将 <code>arr[l..r]</code> 中的每个数自增 <code>k</code>。这里的自增可以是其他操作。</li>\n<li>单点查询：给定 <code>x</code>，求 <code>arr[x]</code>。</li>\n</ul>\n<p>比如，在差分数组和辅助数组的帮助下，树状数组还可解决「区间加求单点值」「区间加区间和」问题。</p>\n<h2 id=\"树状数组的构建逻辑\"><a class=\"markdownIt-Anchor\" href=\"#树状数组的构建逻辑\"></a> 树状数组的构建逻辑</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202509242231418.webp\" alt=\"image.png\" /></p>\n<p>树状数组中的结点 <code>c[i]</code> 管辖了原数组 <code>a</code> 中的一个范围，<code>a[l..r]</code>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo>≤</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">l\\le r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>。比如：</p>\n<ul>\n<li><code>c[i]</code> 的值为 <code>a[l..r]</code> 的和；</li>\n<li><code>a[i]</code> 会直接交给 <code>c[i]</code> 管辖；</li>\n<li>树状数组的 <code>index</code> 是 1-base 的，<code>c[0]</code> 不管辖任何内容。</li>\n</ul>\n<p>树状数组只有一个父结点，<code>c[i]</code> 的父结点为 <code>c[i+lowbit(i)]</code>。这是它构建树的核心原理。反过来推断，<code>c[i]</code> 子节点的序号 z 将满足 <code>z+lowbit(z)==x</code>。</p>\n\n<div class=\"callout\" data-callout=\"note\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\"><code>lowbit(x)</code> 函数</div>\n</div>\n<div class=\"callout-content\"><p>函数 <code>lowbit(x)</code> 表示 <code>x</code> 二进制表示中，最低比特位所代表的数。比如：</p>\n<ul>\n<li><code>lowbit(0b1101010)=0b10</code></li>\n<li><code>lowbit(0b0101000)=0b1000</code></li>\n</ul>\n<p>它的实现为 <code>(x)-&gt;x&amp;-x</code>，具体原理可以看这篇文章：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/d155facc/\"><span class=\"bilink-pop-up\">站内文章</span>位运算技巧总结</a>。</p>\n</div></div><p><code>c[y]</code> 是 <code>c[x]</code> 的祖父结点，意味着 x 能通过不断加上 <code>lowbit</code> 能得到 y。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202509242237890.webp\" alt=\"image.png\" /></p>\n<p>具体的性质与证明详见：<a href=\"https://oi-wiki.org/ds/fenwick/#__tabbed_4_2\">树状数组 - OI Wiki</a>。</p>\n<h1 id=\"树状数组基本操作\"><a class=\"markdownIt-Anchor\" href=\"#树状数组基本操作\"></a> 树状数组基本操作</h1>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">🟨 <a href=\"https://www.luogu.com.cn/problem/P3374\">P3374 【模板】树状数组 1 - 洛谷</a></div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>本节将以树状数组维护区间和为例。</p>\n<h2 id=\"单点修改区间查询模板\"><a class=\"markdownIt-Anchor\" href=\"#单点修改区间查询模板\"></a> 单点修改区间查询模板</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] arr;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> nextInt();</span><br><span class=\"line\">        arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n+<span class=\"number\">1</span>]; <span class=\"comment\">// 1-base</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] nums = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>&#125;; <span class=\"comment\">// 原始数组</span></span><br><span class=\"line\">        buildTree(nums); <span class=\"comment\">// 用原始数组去初始化树状数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> index,<span class=\"type\">int</span> val)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> index;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur&lt;arr.length)&#123;</span><br><span class=\"line\">            arr[cur]+=val;</span><br><span class=\"line\">            cur+=lowbit(cur);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">sumRange</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> sumR(x-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> sumR(y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r-l;  <span class=\"comment\">// 利用了前缀和的知识</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">sumRange</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> x;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cur&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            ans+=arr[cur];</span><br><span class=\"line\">            cur-=lowbit(cur);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -x&amp;x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：\n<ul>\n<li>单点修改：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Theta(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Θ</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>区间查询：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Θ</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Theta(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Θ</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n</li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<h2 id=\"建树\"><a class=\"markdownIt-Anchor\" href=\"#建树\"></a> 建树</h2>\n<p>最基本的建树方式就是对于原数组中的每个 <code>nums[i]</code>，都执行一遍 <code>add</code> 操作。时间复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"keyword\">static</span> <span class=\"title function_\">build</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> i+<span class=\"number\">1</span>;    <span class=\"comment\">// 1-base</span></span><br><span class=\"line\">\t\tadd(cur,nums[i]); <span class=\"comment\">// O(log n)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们还可以使用更快的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 建树技巧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 每一个节点的值是由所有与自己直接相连的儿子的值求和得到的。因此可以倒着考虑贡献，即每次确定完儿子的值后，用自己的值更新自己的直接父亲。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"keyword\">static</span> <span class=\"title function_\">build</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> i+<span class=\"number\">1</span>;    <span class=\"comment\">// 1-base</span></span><br><span class=\"line\">\t\tarr[cur] += nums[i];</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> cur + lowbit(cur);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p&lt;=n) arr[p] += arr[cur];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//预处理一个 sum 前缀和数组，再计算 c 数组。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"keyword\">static</span> <span class=\"title function_\">build</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> i+<span class=\"number\">1</span>;    <span class=\"comment\">// 1-base</span></span><br><span class=\"line\">\t\tarr[cur] = sum[cur] - sum[cur-lowbit(cur)];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"树状数组变形\"><a class=\"markdownIt-Anchor\" href=\"#树状数组变形\"></a> 树状数组变形</h1>\n<h2 id=\"区间加求单点值或区间和\"><a class=\"markdownIt-Anchor\" href=\"#区间加求单点值或区间和\"></a> 区间加求单点值或区间和</h2>\n<p>「区间加求单点值或区间和」与基本树状数组不同的是，要求树状数组实现区间修改。</p>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">🟨 <a href=\"https://www.luogu.com.cn/problem/P3368\">P3368 【模板】树状数组 2 - 洛谷</a></div>\n</div>\n<div class=\"callout-content\"><p>区间加求单点值。</p>\n</div></div><p>对于基本树状数组，每次进行单点修改很容易。如果题目进行区间修改，一个想法是对区间范围不断进行单点修改，这样的效率会很低。<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/f4bb8efc/\"><span class=\"bilink-pop-up\">站内文章</span>差分数组</a> 可以解决这个问题。</p>\n<p>考虑查询 <code>a[1..r]</code> 的和：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>r</mi></munderover><msub><mi>a</mi><mi>i</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>r</mi></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><msub><mi>d</mi><mi>j</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>r</mi></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></munderover><msub><mi>d</mi><mi>j</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>r</mi></munderover><msub><mi>d</mi><mi>i</mi></msub><mo>×</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>r</mi></munderover><msub><mi>d</mi><mi>i</mi></msub><mo>×</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>r</mi></munderover><msub><mi>d</mi><mi>i</mi></msub><mo>×</mo><mi>i</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n\\sum_{i=1}^{r} a_{i} &amp;= \\sum_{i=1}^{r} \\sum_{j=1}^{i} d_{j} \\\\\n\\\\\n\\sum_{i=1}^{r} \\sum_{j=1}^{i} d_{j} &amp;= \\sum_{i=1}^{r} d_{i} \\times (r - i + 1) \\\\\n&amp;= \\sum_{i=1}^{r} d_{i} \\times (r + 1) - \\sum_{i=1}^{r} d_{i} \\times i\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:11.779958em;vertical-align:-5.639979em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:6.139979em;\"><span style=\"top:-8.139979em;\"><span class=\"pstrut\" style=\"height:3.8116690000000006em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-5.586202em;\"><span class=\"pstrut\" style=\"height:3.8116690000000006em;\"></span><span class=\"mord\"></span></span><span style=\"top:-3.1145329999999998em;\"><span class=\"pstrut\" style=\"height:3.8116690000000006em;\"></span><span class=\"mord\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8116690000000006em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:0.25064099999999967em;\"><span class=\"pstrut\" style=\"height:3.8116690000000006em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.639979em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:6.139979em;\"><span style=\"top:-8.139979em;\"><span class=\"pstrut\" style=\"height:3.8116690000000006em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8116690000000006em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.4137769999999998em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.1145329999999998em;\"><span class=\"pstrut\" style=\"height:3.8116690000000006em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span><span style=\"top:0.25064099999999967em;\"><span class=\"pstrut\" style=\"height:3.8116690000000006em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.639979em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>观察式子可知，我们可以用两个树状数组维护 <code>d[i]</code> 和 <code>d[i]*i</code> 的信息。</p>\n<p>「求单点值」的问题比「求区间和」更弱。下面代码给出了「区间加区间和」所需要的数据结构与方法，<code>main</code> 函数中依照题目要求，只使用了「求单点值」的做法。稍作改动就可实现「求区间和」。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">long</span>[] sumD;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">long</span>[] sumDi;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Scanner in = new Scanner(System.in);</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> nextInt();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> nextInt();</span><br><span class=\"line\">        sumD = <span class=\"keyword\">new</span> <span class=\"title class_\">long</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">        sumDi = <span class=\"keyword\">new</span> <span class=\"title class_\">long</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> nextInt();</span><br><span class=\"line\">            arr[i] = e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] d = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        d[<span class=\"number\">0</span>] = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            d[i] = arr[i] - arr[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        build(d);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">op</span> <span class=\"operator\">=</span> nextInt();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> nextInt();</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> nextInt();</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> nextInt();</span><br><span class=\"line\">                add(x, y, k);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> nextInt();</span><br><span class=\"line\">                System.out.println(sumR(x, x)); <span class=\"comment\">// 这里改动以下就成为区间加区间和</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        os.flush();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        add(x, val);</span><br><span class=\"line\">        add(y + <span class=\"number\">1</span>, -val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur &lt; sumD.length) &#123;</span><br><span class=\"line\">            sumD[cur] += val;</span><br><span class=\"line\">            sumDi[cur] += (<span class=\"type\">long</span>) val * x;</span><br><span class=\"line\">            cur += lowbit(cur);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">long</span> <span class=\"title function_\">sumR</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">xx</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) (x) * sumR(sumD, x - <span class=\"number\">1</span>) - sumR(sumDi, x - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">yy</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) (y + <span class=\"number\">1</span>) * sumR(sumD, y) - sumR(sumDi, y);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> yy - xx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">long</span> <span class=\"title function_\">sumR</span><span class=\"params\">(<span class=\"type\">long</span>[] a, <span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> x;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sum += a[cur];</span><br><span class=\"line\">            cur -= lowbit(cur);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -x &amp; x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">build</span><span class=\"params\">(<span class=\"type\">int</span>[] arr)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            sumD[cur] += arr[i];</span><br><span class=\"line\">            sumDi[cur] += (<span class=\"type\">long</span>) arr[i] * cur;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">newCur</span> <span class=\"operator\">=</span> cur + lowbit(cur);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newCur &lt; sumD.length) &#123;</span><br><span class=\"line\">                sumD[newCur] += sumD[cur];</span><br><span class=\"line\">                sumDi[newCur] += sumDi[cur];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 标准输入输出模板</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">StreamTokenizer</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StreamTokenizer</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in)));</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">PrintWriter</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PrintWriter</span>(System.out);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">nextInt</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        sc.nextToken();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">int</span>) sc.nval;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://oi-wiki.org/ds/fenwick/#__tabbed_4_2\">树状数组 - OI Wiki</a></li>\n</ul>\n","raw":"---\ntitle: 树状数组上手了就十分简单\ntags:\n  - 树状数组\n  - 线段树\n  - Java\ncover: 'https://cdn.gallery.uuanqin.top/img/202509242325635.webp'\ndescription: 理解起来可难了\nkatex: true\ncategories:\n  - 算法与数据结构\nabbrlink: 47fd7a85\ndate: 2025-09-24 23:26:16\ntop_img:\n---\n\n本文题目难度标识：🟩简单，🟨中等，🟥困难。\n\n# 直观感受树状数组\n\n树状数组是一种支持「单点修改」和「区间查询」的，代码量小的数据结构：\n\n- 单点修改：给定数组 `arr`，将 `arr[i]` 自增为 `k`。这里的自增可以是赋值等其他操作。\n- 区间查询：给定 `l`、`r`，求 `arr[l..r]` 的和或其他区间特征。\n\n普通树状数组维护的信息及运算要满足 结合律 且 可差分，如加法（和）、乘法（积）、异或等。\n\n- 结合律：$(x\\circ y)\\circ z = x\\circ (y\\circ z)$\n- 可差分：具有逆运算的运算，即已知 $x\\circ y$ 和 $x$，可求出 $y$。\n\n事实上，树状数组能解决的问题是 [[线段树模板的理解和使用|线段树]] 能解决的问题的子集：树状数组能做的，线段树一定能做；线段树能做的，树状数组不一定可以。然而，树状数组的代码要远比线段树短，时间效率常数也更小，因此仍有学习价值。\n\n通过对树状数组进行扩展，我们还可以使其进行「区间修改」和「单点查询」：\n\n- 区间修改：给定 `l`、`r`、`k`，将 `arr[l..r]` 中的每个数自增 `k`。这里的自增可以是其他操作。\n- 单点查询：给定 `x`，求 `arr[x]`。\n\n比如，在差分数组和辅助数组的帮助下，树状数组还可解决「区间加求单点值」「区间加区间和」问题。\n\n## 树状数组的构建逻辑\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202509242231418.webp)\n\n树状数组中的结点 `c[i]` 管辖了原数组 `a` 中的一个范围，`a[l..r]`，$l\\le r$。比如：\n\n- `c[i]` 的值为 `a[l..r]` 的和；\n- `a[i]` 会直接交给 `c[i]` 管辖；\n- 树状数组的 `index` 是 1-base 的，`c[0]` 不管辖任何内容。\n\n树状数组只有一个父结点，`c[i]` 的父结点为 `c[i+lowbit(i)]`。这是它构建树的核心原理。反过来推断，`c[i]` 子节点的序号 z 将满足 `z+lowbit(z)==x`。\n\n> [!note] `lowbit(x)` 函数\n> 函数 `lowbit(x)` 表示 `x` 二进制表示中，最低比特位所代表的数。比如：\n> - `lowbit(0b1101010)=0b10`\n> - `lowbit(0b0101000)=0b1000`\n> \n> 它的实现为 `(x)->x&-x`，具体原理可以看这篇文章：[[位运算技巧总结]]。\n\n`c[y]` 是 `c[x]` 的祖父结点，意味着 x 能通过不断加上 `lowbit` 能得到 y。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202509242237890.webp)\n\n具体的性质与证明详见：[树状数组 - OI Wiki](https://oi-wiki.org/ds/fenwick/#__tabbed_4_2)。\n\n# 树状数组基本操作\n\n> [!example] 🟨 [P3374 【模板】树状数组 1 - 洛谷](https://www.luogu.com.cn/problem/P3374)\n\n本节将以树状数组维护区间和为例。\n\n## 单点修改区间查询模板\n\n```java\npublic class Main{\n    public static int[] arr;\n    public static void main(String[] args) throws IOException{\n        int n = nextInt();\n        arr = new int[n+1]; // 1-base\n        int[] nums = new int[]{1,2,3,4,5,6,7}; // 原始数组\n        buildTree(nums); // 用原始数组去初始化树状数组\n    }\n\n    public static void add(int index,int val){\n        int cur = index;\n        while(cur<arr.length){\n            arr[cur]+=val;\n            cur+=lowbit(cur);\n        }\n    }\n\n    public static int sumRange(int x,int y){\n        int l = sumR(x-1);\n        int r = sumR(y);\n        return r-l;  // 利用了前缀和的知识\n    }\n\n    public static int sumRange(int x){\n        int cur = x;\n        int ans = 0;\n        while(cur>0){\n            ans+=arr[cur];\n            cur-=lowbit(cur);\n        }\n        return ans;\n    }\n\n    public static int lowbit(int x){\n        return -x&x;\n    }\n}\n```\n\n复杂度分析：\n\n- 时间复杂度：\n\t- 单点修改：$\\Theta(\\log n)$。\n\t- 区间查询：$\\Theta(\\log n)$。\n- 空间复杂度：$O(n)$\n\n## 建树\n\n最基本的建树方式就是对于原数组中的每个 `nums[i]`，都执行一遍 `add` 操作。时间复杂度 $O(n\\log n)$。\n\n```java\npublic void static build(int[] nums){\n\tfor(int i=0;i<nums.length;i++){\n\t\tint cur = i+1;    // 1-base\n\t\tadd(cur,nums[i]); // O(log n)\n\t}\n}\n```\n\n我们还可以使用更快的 $O(n)$ 建树技巧。\n\n```java\n// 每一个节点的值是由所有与自己直接相连的儿子的值求和得到的。因此可以倒着考虑贡献，即每次确定完儿子的值后，用自己的值更新自己的直接父亲。\npublic void static build(int[] nums){\n\tfor(int i=0;i<nums.length;i++){\n\t\tint cur = i+1;    // 1-base\n\t\tarr[cur] += nums[i];\n\t\tint p = cur + lowbit(cur);\n\t\tif(p<=n) arr[p] += arr[cur];\n\t}\n}\n\n//预处理一个 sum 前缀和数组，再计算 c 数组。\npublic void static build(int[] nums){\n\tfor(int i=0;i<nums.length;i++){\n\t\tint cur = i+1;    // 1-base\n\t\tarr[cur] = sum[cur] - sum[cur-lowbit(cur)];\n\t}\n}\n```\n\n# 树状数组变形\n\n## 区间加求单点值或区间和\n\n「区间加求单点值或区间和」与基本树状数组不同的是，要求树状数组实现区间修改。\n\n> [!example] 🟨 [P3368 【模板】树状数组 2 - 洛谷](https://www.luogu.com.cn/problem/P3368)\n> 区间加求单点值。\n\n对于基本树状数组，每次进行单点修改很容易。如果题目进行区间修改，一个想法是对区间范围不断进行单点修改，这样的效率会很低。[[差分数组|差分数组]] 可以解决这个问题。\n\n考虑查询 `a[1..r]` 的和：\n\n$$\n\\begin{aligned}\n\\sum_{i=1}^{r} a_{i} &= \\sum_{i=1}^{r} \\sum_{j=1}^{i} d_{j} \\\\\n\\\\\n\\sum_{i=1}^{r} \\sum_{j=1}^{i} d_{j} &= \\sum_{i=1}^{r} d_{i} \\times (r - i + 1) \\\\\n&= \\sum_{i=1}^{r} d_{i} \\times (r + 1) - \\sum_{i=1}^{r} d_{i} \\times i\n\\end{aligned}\n$$\n\n观察式子可知，我们可以用两个树状数组维护 `d[i]` 和 `d[i]*i` 的信息。\n\n「求单点值」的问题比「求区间和」更弱。下面代码给出了「区间加区间和」所需要的数据结构与方法，`main` 函数中依照题目要求，只使用了「求单点值」的做法。稍作改动就可实现「求区间和」。\n\n```java\nimport java.io.*;\n\npublic class Main {\n    public static long[] sumD;\n    public static long[] sumDi;\n\n    public static void main(String[] args) throws IOException {\n        //Scanner in = new Scanner(System.in);\n        int n = nextInt();\n        int m = nextInt();\n        sumD = new long[n + 1];\n        sumDi = new long[n + 1];\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            int e = nextInt();\n            arr[i] = e;\n        }\n        int[] d = new int[n];\n        d[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n            d[i] = arr[i] - arr[i - 1];\n        }\n        build(d);\n        for (int i = 0; i < m; i++) {\n            int op = nextInt();\n            if (op == 1) {\n                int x = nextInt();\n                int y = nextInt();\n                int k = nextInt();\n                add(x, y, k);\n            } else {\n                int x = nextInt();\n                System.out.println(sumR(x, x)); // 这里改动以下就成为区间加区间和\n            }\n\n        }\n        os.flush();\n    }\n\n    public static void add(int x, int y, int val) {\n        add(x, val);\n        add(y + 1, -val);\n    }\n\n    public static void add(int x, int val) {\n        int cur = x;\n        while (cur < sumD.length) {\n            sumD[cur] += val;\n            sumDi[cur] += (long) val * x;\n            cur += lowbit(cur);\n        }\n    }\n\n    public static long sumR(int x, int y) {\n        long xx = (long) (x) * sumR(sumD, x - 1) - sumR(sumDi, x - 1);\n        long yy = (long) (y + 1) * sumR(sumD, y) - sumR(sumDi, y);\n        return yy - xx;\n    }\n\n    public static long sumR(long[] a, int x) {\n        int cur = x;\n        long sum = 0;\n        while (cur > 0) {\n            sum += a[cur];\n            cur -= lowbit(cur);\n        }\n        return sum;\n    }\n\n    public static int lowbit(int x) {\n        return -x & x;\n    }\n\n    public static void build(int[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            int cur = i + 1;\n            sumD[cur] += arr[i];\n            sumDi[cur] += (long) arr[i] * cur;\n            int newCur = cur + lowbit(cur);\n            if (newCur < sumD.length) {\n                sumD[newCur] += sumD[cur];\n                sumDi[newCur] += sumDi[cur];\n            }\n        }\n    }\n\n    /**\n     * 标准输入输出模板\n     */\n\n    static StreamTokenizer sc = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n    static PrintWriter os = new PrintWriter(System.out);\n\n    static int nextInt() throws IOException {\n        sc.nextToken();\n        return (int) sc.nval;\n    }\n}\n```\n\n# 本文参考\n\n- [树状数组 - OI Wiki](https://oi-wiki.org/ds/fenwick/#__tabbed_4_2)\n","categories":[{"name":"算法与数据结构","api":"api/categories/算法与数据结构.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"树状数组","api":"api/tags/树状数组.json"},{"name":"线段树","api":"api/tags/线段树.json"}]},"api":"api/posts/p/47fd7a85.json"}