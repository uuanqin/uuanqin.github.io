{"data":{"title":"部署 Hexo 个人博客框架到服务器","slug":"博客站点维护/Hexo/部署 Hexo 个人博客框架到服务器","description":"将博客框架Hexo部署到ECS服务器。","date":"2023-04-13T10:10:00.000Z","updated":"2024-12-12T17:21:19.933Z","language":"zh-CN","comments":true,"url":"p/ad28b4a/","cover":"https://cdn.gallery.uuanqin.top/img/hexowordpresscover546546.png","images":[],"content":"<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\"></a> 前言</h1>\n<h2 id=\"我为什么要从-wordpress-换为-hexo\"><a class=\"markdownIt-Anchor\" href=\"#我为什么要从-wordpress-换为-hexo\"></a> 我为什么要从 Wordpress 换为 Hexo</h2>\n<p>一个关键字：卡！Wordpress 太卡了，十分笨重和不方便。对于小小服务器来说简直是难以承受。况且对于内容为主的博客，Wordpress 显得过于臃肿，有大量插件可以用，也意味着你要看更多的广告和垃圾信息。此外，Wordpress 用户数量多，社区庞大，但社区内容鱼龙混杂，充斥大量商业化甚至无用的信息，不够纯粹，质量偏低</p>\n<p>Wordpress 对于小白来说好上手，无脑后台管理。而拥有一点点编程经验的我完全可以凭一点点知识储备和动手能力砍掉多余的，无用的东西。Hexo 相较于 Wordpress，更轻，静态页面对 SEO 更友好，文章数据管理更方便、更让人贴心。</p>\n<h2 id=\"实现思路和原理\"><a class=\"markdownIt-Anchor\" href=\"#实现思路和原理\"></a> 实现思路和原理</h2>\n<p>整个过程实现的原理可以用下图表示。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/view.jpg\" alt=\"preview\" /></p>\n<p>可参照下文顺序进行配置。</p>\n<h1 id=\"本地配置准备\"><a class=\"markdownIt-Anchor\" href=\"#本地配置准备\"></a> 本地配置准备</h1>\n<h2 id=\"hexo\"><a class=\"markdownIt-Anchor\" href=\"#hexo\"></a> Hexo</h2>\n<p>本地启用 Hexo：按照官方文档搭建基本环境（Node.js，Git），在本地尝试部署并熟悉 hexo 的写作流程，了解配置文件结构，此处不再赘述。<a href=\"https://hexo.io/zh-cn/docs/\">官方文档 | Hexo</a></p>\n<p>在本地 Hexo 站点目录下安装 hexo-deployer-git 插件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置-ssh-密匙\"><a class=\"markdownIt-Anchor\" href=\"#配置-ssh-密匙\"></a> 配置 SSH 密匙</h2>\n<p>为了使本地可以跟远程的 github 建立联系，需要在本地配置 SSH 密钥，这样我们就可以在本地直接提交代码到 GitHub 上或者远端 git 仓库。</p>\n<p>如果是第一次配置 SSH，则配置一下 git 的 username 和 email</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;你要设置的名字&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;你要设置的邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p>之后生成 SSH 密钥：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">&quot;你刚刚设置的邮箱&quot;</span></span><br></pre></td></tr></table></figure>\n<p>如果不需要设置密码的话，连续三个回车就好了。</p>\n<p>复制好公钥后面要用：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20230408233136534.png\" alt=\"image-20230408233136534\" /></p>\n<h1 id=\"服务器端操作\"><a class=\"markdownIt-Anchor\" href=\"#服务器端操作\"></a> 服务器端操作</h1>\n<blockquote>\n<p>如果你刚刚重新初始化阿里服务器云盘，可能会连接报错。具体解决方法请看文末。</p>\n</blockquote>\n<h2 id=\"nginx\"><a class=\"markdownIt-Anchor\" href=\"#nginx\"></a> Nginx</h2>\n<p>安装 Nginx 并配置好域名（如果有）。具体操作详见我的这篇文章。</p>\n<h2 id=\"git\"><a class=\"markdownIt-Anchor\" href=\"#git\"></a> Git</h2>\n<h3 id=\"git-的安装与用户创建\"><a class=\"markdownIt-Anchor\" href=\"#git-的安装与用户创建\"></a> git 的安装与用户创建</h3>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装git</span></span><br><span class=\"line\">yum install git</span><br><span class=\"line\"><span class=\"comment\"># 创建git账户</span></span><br><span class=\"line\">adduser git\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\"># 添加Git账户权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 740 /etc/sudoers</span><br><span class=\"line\">vim /etc/sudoers</span><br></pre></td></tr></table></figure>\n<p>在 vim 编辑模式下，这个地方加上一行 <code>git     ALL=(ALL)     ALL</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## Allow root to run any commands anywhere</span><br><span class=\"line\">root    ALL=(ALL)     ALL</span><br><span class=\"line\">git     ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure>\n<p>执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 400 /etc/sudoers  <span class=\"comment\"># 改回权限</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> passwd git\t\t\t<span class=\"comment\"># 设置 git 账户密码</span></span><br></pre></td></tr></table></figure>\n<p>输两次密码即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Changing password <span class=\"keyword\">for</span> user git.</span><br><span class=\"line\">New password:\t\t\t\t\t\t<span class=\"comment\"># 输的时候是看不到的</span></span><br><span class=\"line\">Retype new password:</span><br><span class=\"line\">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>\n<p>执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git\t<span class=\"comment\"># 切换至 git 用户</span></span><br><span class=\"line\"><span class=\"comment\"># 创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/.ssh</span><br><span class=\"line\">vim ~/.ssh/authorized_keys</span><br><span class=\"line\">然后把本地公钥粘贴在authorized_keys里（详见上文）</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 ~/.ssh/authorized_keys</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 700 ~/.ssh</span><br></pre></td></tr></table></figure>\n<p>这里提一嘴，有时候切换不了 git 用户，即 <code>su git</code> 执行不了。其实也没事，就是知道 git 用户目录是 <code>/home/git/</code> 就行，即上面命令中的 <code>~</code> 指的是 <code>/home/git/</code></p>\n<p>在本地电脑中，终端执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -v git@&lt;你的服务器主机IP&gt;</span><br></pre></td></tr></table></figure>\n<p>如果能<strong>免密登录</strong>，那就成了。</p>\n<h3 id=\"仓库创建与钩子创建\"><a class=\"markdownIt-Anchor\" href=\"#仓库创建与钩子创建\"></a> 仓库创建与钩子创建</h3>\n<p>保证之前在 Nginx 配置里的网站根目录的权限：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> -R git:git &lt;网站根目录&gt;</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> -R 755 &lt;网站根目录&gt;</span><br></pre></td></tr></table></figure>\n<p>创建仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> repo <span class=\"comment\"># 我选择在git的用户目录下创建</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> repo\t   <span class=\"comment\"># 创建空白的git仓库</span></span><br><span class=\"line\">git init --bare hexo.git\t<span class=\"comment\"># 创建一个空白的 git 仓库</span></span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R git:git hexo.git\t<span class=\"comment\"># 注意保证权限</span></span><br><span class=\"line\">vim ~/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n<p>在 post-receive 里边输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">git --work-tree=/var/www/uuanqin.top --git-dir=/home/git/repo/hexo.git checkout -f</span><br></pre></td></tr></table></figure>\n<p>以上内容建议手打。可以看出第一个参数对应的是网站根目录，第二个参数是代码仓库目录。</p>\n<p>添加权限：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> -R git:git hexo.git/hooks/post-receive</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure>\n<h1 id=\"本地上传到仓库\"><a class=\"markdownIt-Anchor\" href=\"#本地上传到仓库\"></a> 本地上传到仓库</h1>\n<h2 id=\"hexo-配置\"><a class=\"markdownIt-Anchor\" href=\"#hexo-配置\"></a> Hexo 配置</h2>\n<p>进入本地电脑 hexo 博客的根目录，编辑 <strong>站点配置文件 _config.yml</strong> ，找到 deploy，修改成以下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  #repo改为repo: git@&lt;服务器IP&gt;:&lt;服务器端的仓库&gt;</span><br><span class=\"line\">  repo: git@hjxlog.com:/var/repo/hexo.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>最后在本地电脑 hexo 博客的根目录执行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>deploy 不需要输入 git 账户密码。如果还提示需要输入，说明之前配公钥的步骤没有成功。</p>\n</blockquote>\n<p>出现错误记得检查服务器端权限问题：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chown</span> -R git:git &lt;你的仓库&gt;</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R git:git &lt;网站根目录&gt;</span><br></pre></td></tr></table></figure>\n<p>在浏览器输入网址即可。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20230409160319825.png\" alt=\"image-20230409160319825\" /></p>\n<p>嫌每次都输入两个命令麻烦，可以在 package.json 中添加 npm 脚本：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;publish&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hexo clean &amp;&amp; hexo g -d&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>下次执行时可以直接：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run publish</span><br></pre></td></tr></table></figure>\n<h1 id=\"其他问题\"><a class=\"markdownIt-Anchor\" href=\"#其他问题\"></a> 其他问题</h1>\n<h2 id=\"ssh-连接问题\"><a class=\"markdownIt-Anchor\" href=\"#ssh-连接问题\"></a> SSH 连接问题</h2>\n<p>服务器云盘初始化后，再次使用 ssh 连接时会有 <code>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</code> 的提示。解决方法：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -R &lt;之前连接时的网段IP&gt;</span><br></pre></td></tr></table></figure>\n<p>再次 SSL 连接：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh root@&lt;服务器公网IP&gt;</span><br></pre></td></tr></table></figure>\n<p>出现一句：</p>\n<p>Are you sure you want to continue connecting (yes/no)?</p>\n<p>输入：yes 回车</p>\n<p>参考：<a href=\"https://blog.csdn.net/wangguchao/article/details/85614914\">问题解决——SSH时出现WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!_口袋里のInit的博客-CSDN博客</a></p>\n<h2 id=\"钩子不起作用\"><a class=\"markdownIt-Anchor\" href=\"#钩子不起作用\"></a> 钩子不起作用</h2>\n<p>出现已经推送到服务器但是钩子不起作用，且出现 cannot run hooks/post-receive: No such file or directory 的提示：</p>\n<p>请重新创建并<strong>手打</strong>post-receive 文件，保证该文件有可执行权。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> +x post-receive</span><br><span class=\"line\"><span class=\"built_in\">chown</span> -R git:git post-receive</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://blog.csdn.net/qq_48736958/article/details/113444533\"> cannot run hooks/post-receive: No such file or directory_渣渣林的博客-CSDN博客</a></p>\n<h2 id=\"hexo-d-命令报错\"><a class=\"markdownIt-Anchor\" href=\"#hexo-d-命令报错\"></a> hexo d 命令报错</h2>\n<p>hexo d 命令报错 ERROR Deployer not found: git</p>\n<p>解决方案</p>\n<p>这是因为没安装 <code>hexo-deployer-git</code> 插件，在<strong>站点目录</strong>下输入下面的插件安装就好了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>然后在使用 <code>Hexo d</code> 命令就可以推送了。</p>\n<p>参考：<a href=\"https://blog.csdn.net/qq_21808961/article/details/84476504\">hexo d命令报错 ERROR Deployer not found: git_蓝蓝223的博客-CSDN博客</a></p>\n<h1 id=\"更多\"><a class=\"markdownIt-Anchor\" href=\"#更多\"></a> 更多</h1>\n<p>双线部署详看这篇文章：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/55893d1/\"><span class=\"yukari\">站内文章</span>实现网站国内外分流（境外接入 Cloudflare）</a></p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<p><a href=\"https://blog.csdn.net/qq_44706030/article/details/112759634\">将 Hexo 部署到阿里云轻量服务器_hexo部署到阿里云_小阳coding的博客-CSDN博客</a></p>\n","raw":"---\ntitle: 部署 Hexo 个人博客框架到服务器\ntags:\n  - ECS\n  - Linux\ncategories:\n  - 博客站点维护\n  - Hexo\ncover: 'https://cdn.gallery.uuanqin.top/img/hexowordpresscover546546.png'\ndescription: 将博客框架Hexo部署到ECS服务器。\nabbrlink: ad28b4a\ndate: 2023-04-13 18:10:00\n---\n\n# 前言\n\n## 我为什么要从 Wordpress 换为 Hexo\n\n一个关键字：卡！Wordpress 太卡了，十分笨重和不方便。对于小小服务器来说简直是难以承受。况且对于内容为主的博客，Wordpress 显得过于臃肿，有大量插件可以用，也意味着你要看更多的广告和垃圾信息。此外，Wordpress 用户数量多，社区庞大，但社区内容鱼龙混杂，充斥大量商业化甚至无用的信息，不够纯粹，质量偏低\n\nWordpress 对于小白来说好上手，无脑后台管理。而拥有一点点编程经验的我完全可以凭一点点知识储备和动手能力砍掉多余的，无用的东西。Hexo 相较于 Wordpress，更轻，静态页面对 SEO 更友好，文章数据管理更方便、更让人贴心。\n\n## 实现思路和原理\n\n整个过程实现的原理可以用下图表示。\n\n![preview](https://cdn.gallery.uuanqin.top/img/view.jpg)\n\n可参照下文顺序进行配置。\n\n# 本地配置准备\n\n## Hexo\n\n本地启用 Hexo：按照官方文档搭建基本环境（Node.js，Git），在本地尝试部署并熟悉 hexo 的写作流程，了解配置文件结构，此处不再赘述。[官方文档 | Hexo](https://hexo.io/zh-cn/docs/)\n\n在本地 Hexo 站点目录下安装 hexo-deployer-git 插件：\n\n```sh\nnpm install hexo-deployer-git --save\n```\n\n## 配置 SSH 密匙\n\n为了使本地可以跟远程的 github 建立联系，需要在本地配置 SSH 密钥，这样我们就可以在本地直接提交代码到 GitHub 上或者远端 git 仓库。\n\n如果是第一次配置 SSH，则配置一下 git 的 username 和 email\n\n```sh\ngit config --global user.name \"你要设置的名字\"\ngit config --global user.email \"你要设置的邮箱\"\n```\n\n之后生成 SSH 密钥：\n\n```sh\nssh-keygen -t rsa -C \"你刚刚设置的邮箱\"\n```\n\n如果不需要设置密码的话，连续三个回车就好了。\n\n复制好公钥后面要用：\n\n![image-20230408233136534](https://cdn.gallery.uuanqin.top/img/image-20230408233136534.png)\n\n# 服务器端操作\n\n> 如果你刚刚重新初始化阿里服务器云盘，可能会连接报错。具体解决方法请看文末。\n## Nginx\n\n安装 Nginx 并配置好域名（如果有）。具体操作详见我的这篇文章。\n\n## Git\n\n### git 的安装与用户创建\n\n```sh\n# 安装git\nyum install git\n# 创建git账户\nadduser git\t\t\t\t\n# 添加Git账户权限\nchmod 740 /etc/sudoers\nvim /etc/sudoers\n```\n\n在 vim 编辑模式下，这个地方加上一行 `git     ALL=(ALL)     ALL`：\n\n```\n## Allow root to run any commands anywhere\nroot    ALL=(ALL)     ALL\ngit     ALL=(ALL)     ALL\n```\n\n执行：\n\n```sh\nchmod 400 /etc/sudoers  # 改回权限\nsudo passwd git\t\t\t# 设置 git 账户密码\n```\n\n输两次密码即可：\n\n```sh\nChanging password for user git.\nNew password:\t\t\t\t\t\t# 输的时候是看不到的\nRetype new password:\npasswd: all authentication tokens updated successfully.\n```\n\n执行：\n\n```sh\nsu git\t# 切换至 git 用户\n# 创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限\nmkdir ~/.ssh\nvim ~/.ssh/authorized_keys\n然后把本地公钥粘贴在authorized_keys里（详见上文）\nchmod 600 ~/.ssh/authorized_keys\nchmod 700 ~/.ssh\n```\n\n这里提一嘴，有时候切换不了 git 用户，即 `su git` 执行不了。其实也没事，就是知道 git 用户目录是 `/home/git/` 就行，即上面命令中的 `~` 指的是 `/home/git/`\n\n在本地电脑中，终端执行：\n\n```\nssh -v git@<你的服务器主机IP>\n```\n\n如果能**免密登录**，那就成了。\n\n### 仓库创建与钩子创建\n\n保证之前在 Nginx 配置里的网站根目录的权限：\n\n```sh\nchown -R git:git <网站根目录>\nchmod -R 755 <网站根目录>\n```\n\n创建仓库：\n\n```sh\nmkdir repo # 我选择在git的用户目录下创建\ncd repo\t   # 创建空白的git仓库\ngit init --bare hexo.git\t# 创建一个空白的 git 仓库\nchown -R git:git hexo.git\t# 注意保证权限\nvim ~/repo/hexo.git/hooks/post-receive\n```\n\n在 post-receive 里边输入：\n\n```bash\n#!/bin/bash\ngit --work-tree=/var/www/uuanqin.top --git-dir=/home/git/repo/hexo.git checkout -f\n```\n\n以上内容建议手打。可以看出第一个参数对应的是网站根目录，第二个参数是代码仓库目录。\n\n添加权限：\n\n```sh\nchown -R git:git hexo.git/hooks/post-receive\nchmod +x hexo.git/hooks/post-receive\n```\n\n# 本地上传到仓库\n\n## Hexo 配置\n\n进入本地电脑 hexo 博客的根目录，编辑 **站点配置文件 \\_config.yml** ，找到 deploy，修改成以下：\n\n```\ndeploy:\n  type: git\n  #repo改为repo: git@<服务器IP>:<服务器端的仓库>\n  repo: git@hjxlog.com:/var/repo/hexo.git\n  branch: master\n```\n\n最后在本地电脑 hexo 博客的根目录执行命令：\n\n```\nhexo clean\nhexo d -g\n```\n\n> deploy 不需要输入 git 账户密码。如果还提示需要输入，说明之前配公钥的步骤没有成功。\n\n出现错误记得检查服务器端权限问题：\n\n```sh\nchown -R git:git <你的仓库>\nchown -R git:git <网站根目录>\n```\n\n在浏览器输入网址即可。\n\n![image-20230409160319825](https://cdn.gallery.uuanqin.top/img/image-20230409160319825.png)\n\n嫌每次都输入两个命令麻烦，可以在 package.json 中添加 npm 脚本：\n\n```json\n\"scripts\": {\n  \"publish\": \"hexo clean && hexo g -d\",\n  \"start\": \"hexo clean && hexo g && hexo s\"\n}\n```\n\n下次执行时可以直接：\n\n```sh\nnpm run publish\n```\n\n\n\n# 其他问题\n\n## SSH 连接问题\n\n服务器云盘初始化后，再次使用 ssh 连接时会有 `WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!` 的提示。解决方法：\n\n```sh\nssh-keygen -R <之前连接时的网段IP>\n```\n\n再次 SSL 连接：\n\n```sh\nssh root@<服务器公网IP>\n```\n\n出现一句：\n\nAre you sure you want to continue connecting (yes/no)?\n\n输入：yes 回车\n\n参考：[问题解决——SSH时出现WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!_口袋里のInit的博客-CSDN博客](https://blog.csdn.net/wangguchao/article/details/85614914)\n\n## 钩子不起作用\n\n出现已经推送到服务器但是钩子不起作用，且出现 cannot run hooks/post-receive: No such file or directory 的提示：\n\n请重新创建并**手打**post-receive 文件，保证该文件有可执行权。\n\n```sh\nchmod +x post-receive\nchown -R git:git post-receive\n```\n\n参考：[ cannot run hooks/post-receive: No such file or directory_渣渣林的博客-CSDN博客](https://blog.csdn.net/qq_48736958/article/details/113444533)\n\n## hexo d 命令报错\n\nhexo d 命令报错 ERROR Deployer not found: git\n\n解决方案\n\n这是因为没安装 `hexo-deployer-git` 插件，在**站点目录**下输入下面的插件安装就好了：\n\n```\nnpm install hexo-deployer-git --save\n```\n\n然后在使用 `Hexo d` 命令就可以推送了。\n\n参考：[hexo d命令报错 ERROR Deployer not found: git_蓝蓝223的博客-CSDN博客](https://blog.csdn.net/qq_21808961/article/details/84476504)\n\n# 更多\n\n双线部署详看这篇文章：[[实现网站国内外分流（境外接入 Cloudflare）]]\n\n# 本文参考\n\n[将 Hexo 部署到阿里云轻量服务器_hexo部署到阿里云_小阳coding的博客-CSDN博客](https://blog.csdn.net/qq_44706030/article/details/112759634)","categories":[{"name":"博客站点维护","api":"api/categories/博客站点维护.json"},{"name":"Hexo","api":"api/categories/博客站点维护/Hexo.json"}],"tags":[{"name":"Linux","api":"api/tags/Linux.json"},{"name":"ECS","api":"api/tags/ECS.json"}]},"api":"api/posts/p/ad28b4a.json"}