{"data":{"title":"STM32 移植 FreeRTOS - 基于标准库","slug":"嵌入式/STM32 移植 FreeRTOS - 基于标准库","description":"标准库下FreeRTOS的移植。","date":"2024-04-02T05:44:07.000Z","updated":"2024-04-04T15:11:16.829Z","language":"zh-CN","comments":true,"url":"p/8111c784/","cover":"https://cdn.gallery.uuanqin.top/img/20240404231107.webp","images":[],"content":"<p>这篇文章介绍标准库下将 FreeRTOS 移植到 STM32 的过程。主要内容包括：</p>\n<ol>\n<li>源码下载与介绍</li>\n<li>基础工程从零创建</li>\n<li>移植步骤</li>\n<li>创建一个任务并点亮 LED 灯</li>\n</ol>\n<h1 id=\"freertos-源码下载\"><a class=\"markdownIt-Anchor\" href=\"#freertos-源码下载\"></a> FreeRTOS 源码下载</h1>\n<p>下载途径</p>\n<ol>\n<li>通过 FreeRTOS 官网下载：<a href=\"https://www.freertos.org/\">FreeRTOS - Market leading RTOS (Real Time Operating System) for embedded systems with Internet of Things extensions</a></li>\n<li>通过代码托管网站下载：<a href=\"https://sourceforge.net/projects/freertos/files/FreeRTOS/\">FreeRTOS Real Time Kernel (RTOS) - Browse /FreeRTOS at SourceForge.net</a></li>\n</ol>\n<p>这里我们打算下载 2018 年发布的版本：V9.0.0，因为它的内核稳定，且网上资料较多。我们使用第二种方式进行下载。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402140209.webp\" alt=\"image.png\" /></p>\n<p>选择 zip 格式进行源码下载：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402140406.webp\" alt=\"image.png\" /></p>\n<h1 id=\"freertos-源码结构介绍\"><a class=\"markdownIt-Anchor\" href=\"#freertos-源码结构介绍\"></a> FreeRTOS 源码结构介绍</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FreeRTOSv9.0.0</span><br><span class=\"line\">├─FreeRTOS</span><br><span class=\"line\">│  ├─Demo # 示例工程</span><br><span class=\"line\">│  │  ├─CORTEX_STM32F103_IAR</span><br><span class=\"line\">│  │  ├─CORTEX_STM32F103_Keil # 针对 Keil 的Demo</span><br><span class=\"line\">│  │  │      FreeRTOSConfig.h # 【Config】</span><br><span class=\"line\">│  │  └─CORTEX_STM32F103_Primer_GCC</span><br><span class=\"line\">│  ├─License # 许可信息</span><br><span class=\"line\">│  │      license.txt</span><br><span class=\"line\">│  └─Source  # 【A】源代码。此层目录下的c文件在不同内核下是通用的。</span><br><span class=\"line\">│      │  croutine.c      # 【Core】</span><br><span class=\"line\">│      │  event_groups.c  # 【Core】</span><br><span class=\"line\">│      │  list.c          # 【Core】</span><br><span class=\"line\">│      │  queue.c         # 【Core】</span><br><span class=\"line\">│      │  tasks.c         # 【Core】</span><br><span class=\"line\">│      │  timers.c        # 【Core】</span><br><span class=\"line\">│      │</span><br><span class=\"line\">│      ├─include</span><br><span class=\"line\">│      │      croutine.h</span><br><span class=\"line\">│      │      deprecated_definitions.h</span><br><span class=\"line\">│      │      event_groups.h</span><br><span class=\"line\">│      │      FreeRTOS.h</span><br><span class=\"line\">│      │      list.h</span><br><span class=\"line\">│      │      mpu_prototypes.h</span><br><span class=\"line\">│      │      mpu_wrappers.h</span><br><span class=\"line\">│      │      portable.h</span><br><span class=\"line\">│      │      projdefs.h</span><br><span class=\"line\">│      │      queue.h</span><br><span class=\"line\">│      │      semphr.h</span><br><span class=\"line\">│      │      StackMacros.h</span><br><span class=\"line\">│      │      stdint.readme</span><br><span class=\"line\">│      │      task.h</span><br><span class=\"line\">│      │      timers.h</span><br><span class=\"line\">│      │</span><br><span class=\"line\">│      └─portable # 【B】端口文件。针对不同的芯片。</span><br><span class=\"line\">│          ├─Keil # 【C】使用 Keil IDE，但它指引我们到 RVDS 中。</span><br><span class=\"line\">│          │      See-also-the-RVDS-directory.txt</span><br><span class=\"line\">│          │</span><br><span class=\"line\">│          ├─MemMang # 【C】内存管理相关文件。我们只需要使用一个方法。</span><br><span class=\"line\">│          │      heap_1.c</span><br><span class=\"line\">│          │      heap_2.c</span><br><span class=\"line\">│          │      heap_3.c</span><br><span class=\"line\">│          │      heap_4.c # 【Port】我们使用这个内存分配算法</span><br><span class=\"line\">│          │      heap_5.c</span><br><span class=\"line\">│          │      ReadMe.url</span><br><span class=\"line\">│          │</span><br><span class=\"line\">│          ├─RVDS # 【C】根据不同的内核进行选择。STM32F103属于CM3内核。</span><br><span class=\"line\">│          │  │</span><br><span class=\"line\">│          │  ├─ARM_CM3 # 与硬件密切相关</span><br><span class=\"line\">│          │  │      port.c # 【Port】由汇编语言编写而成</span><br><span class=\"line\">│          │  │      portmacro.h # 宏定义</span><br><span class=\"line\">......</span><br><span class=\"line\">└─FreeRTOS-Plus # 包含第三方产品。一般我们不需要使用。</span><br></pre></td></tr></table></figure>\n<h1 id=\"基础工程构建\"><a class=\"markdownIt-Anchor\" href=\"#基础工程构建\"></a> 基础工程构建</h1>\n<p>移植前我们需要有一个基础工程。首先构建一个最简单的 STM-32 基于标准库方式开发的工程（详见 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/6c1cd7d0/\"><span class=\"yukari\">站内文章</span>STM32 工程的创建 - 基于寄存器或标准库</a>）</p>\n<h2 id=\"移植-printf\"><a class=\"markdownIt-Anchor\" href=\"#移植-printf\"></a> 移植 printf</h2>\n<p>详看：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/5c1cda26/\"><span class=\"yukari\">站内文章</span>串口驱动程序之「发送数据」</a></p>\n<blockquote>\n<p>如果你已经移植好可以跳过这一步。这里主要是为了无缝衔接 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/6c1cd7d0/\"><span class=\"yukari\">站内文章</span>这篇文章</a>。</p>\n</blockquote>\n<h2 id=\"延时函数\"><a class=\"markdownIt-Anchor\" href=\"#延时函数\"></a> 延时函数</h2>\n<p>编写延时函数，将这两个文件放到合适的位置。记得引入到「组」中。这里直接使用 <a href=\"http://www.prechin.cn/index.html\">普中</a> 写好的代码。注意，以前在标准库中使用的延时函数建议成下面的函数。</p>\n<p>Systick.h：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _SysTick_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _SysTick_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span>                  <span class=\"comment\">// Device header</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SysTick_Init</span><span class=\"params\">(<span class=\"type\">uint8_t</span> SYSCLK)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_ms</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nms)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_us</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nus)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_xms</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nms)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Systick.c：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SysTick.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;FreeRTOS.h&quot;</span>\t<span class=\"comment\">//FreeRTOS使用\t\t  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;task.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">uint8_t</span>  fac_us=<span class=\"number\">0</span>;\t\t\t\t\t\t\t<span class=\"comment\">//us延时倍乘数\t\t\t   </span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">uint16_t</span> fac_ms=<span class=\"number\">0</span>;\t\t\t\t\t\t\t<span class=\"comment\">//ms延时倍乘数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化延迟函数</span></span><br><span class=\"line\"><span class=\"comment\">//SYSTICK的时钟固定为AHB时钟，基础例程里面SYSTICK时钟频率为AHB/8</span></span><br><span class=\"line\"><span class=\"comment\">//SYSCLK:系统时钟频率</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SysTick_Init</span><span class=\"params\">(<span class=\"type\">uint8_t</span> SYSCLK)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> reload;</span><br><span class=\"line\">\tSysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);<span class=\"comment\">//选择外部时钟  HCLK</span></span><br><span class=\"line\">\tfac_us=SystemCoreClock/<span class=\"number\">1000000</span>;\t\t\t\t<span class=\"comment\">//不论是否使用OS,fac_us都需要使用</span></span><br><span class=\"line\">\treload=SystemCoreClock/<span class=\"number\">1000000</span>;\t\t\t\t<span class=\"comment\">//每秒钟的计数次数 单位为M  </span></span><br><span class=\"line\">\treload*=<span class=\"number\">1000000</span>/configTICK_RATE_HZ;\t\t\t<span class=\"comment\">//根据configTICK_RATE_HZ设定溢出时间</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//reload为24位寄存器,最大值:16777216,在72M下,约合0.233s左右\t</span></span><br><span class=\"line\">\tfac_ms=<span class=\"number\">1000</span>/configTICK_RATE_HZ;\t\t\t\t<span class=\"comment\">//代表OS可以延时的最少单位\t   </span></span><br><span class=\"line\"></span><br><span class=\"line\">\tSysTick-&gt;CTRL|=SysTick_CTRL_TICKINT_Msk;   \t<span class=\"comment\">//开启SYSTICK中断</span></span><br><span class=\"line\">\tSysTick-&gt;LOAD=reload; \t\t\t\t\t\t<span class=\"comment\">//每1/configTICK_RATE_HZ秒中断一次\t</span></span><br><span class=\"line\">\tSysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk;   \t<span class=\"comment\">//开启SYSTICK\t\t\t\t   </span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//延时nus</span></span><br><span class=\"line\"><span class=\"comment\">//nus:要延时的us数.\t</span></span><br><span class=\"line\"><span class=\"comment\">//nus:0~204522252(最大值即2^32/fac_us@fac_us=168)\t    \t\t\t\t\t\t\t\t   </span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_us</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nus)</span></span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> ticks;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> told,tnow,tcnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> reload=SysTick-&gt;LOAD;\t\t\t\t<span class=\"comment\">//LOAD的值\t    \t </span></span><br><span class=\"line\">\tticks=nus*fac_us; \t\t\t\t\t\t<span class=\"comment\">//需要的节拍数 </span></span><br><span class=\"line\">\ttold=SysTick-&gt;VAL;        \t\t\t\t<span class=\"comment\">//刚进入时的计数器值</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttnow=SysTick-&gt;VAL;\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(tnow!=told)</span><br><span class=\"line\">\t\t&#123;\t    </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(tnow&lt;told)tcnt+=told-tnow;\t<span class=\"comment\">//这里注意一下SYSTICK是一个递减的计数器就可以了.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> tcnt+=reload-tnow+told;\t    </span><br><span class=\"line\">\t\t\ttold=tnow;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(tcnt&gt;=ticks)<span class=\"keyword\">break</span>;\t\t\t<span class=\"comment\">//时间超过/等于要延迟的时间,则退出.</span></span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t&#125;;\t\t\t\t\t\t\t\t\t\t    </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//延时nms</span></span><br><span class=\"line\"><span class=\"comment\">//nms:要延时的ms数</span></span><br><span class=\"line\"><span class=\"comment\">//nms:0~65535</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_ms</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nms)</span></span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED)<span class=\"comment\">//系统已经运行</span></span><br><span class=\"line\">\t&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(nms&gt;=fac_ms)\t\t\t\t\t\t<span class=\"comment\">//延时的时间大于OS的最少时间周期 </span></span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">   \t\t\tvTaskDelay(nms/fac_ms);\t \t\t<span class=\"comment\">//FreeRTOS延时</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnms%=fac_ms;\t\t\t\t\t\t<span class=\"comment\">//OS已经无法提供这么小的延时了,采用普通方式延时    </span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDelay_us((<span class=\"type\">uint32_t</span>)(nms*<span class=\"number\">1000</span>));\t\t\t\t<span class=\"comment\">//普通方式延时</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//延时nms,不会引起任务调度</span></span><br><span class=\"line\"><span class=\"comment\">//nms:要延时的ms数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_xms</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nms)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;nms;i++) Delay_us(<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>进行到这里还不能成功编译，因为 Systick 使用了 FreeRTOS 的函数。</p>\n<h1 id=\"移植-freertos\"><a class=\"markdownIt-Anchor\" href=\"#移植-freertos\"></a> 移植 FreeRTOS</h1>\n<p>在项目中新建名为 <code>FreeRTOS</code> 的文件夹。</p>\n<ul>\n<li>将从往上下载的 FreeRTOS 源码中，标识为【A】的目录下所有内容粘贴到我们新创建的名为 <code>FreeRTOS</code> 的文件夹中。</li>\n<li>删除【B】文件夹下，除了【C】之外的所有文件夹。也就是只保留 <code>Keil</code>、<code>MemMang</code> 和 <code>RVDS</code> 这三个文件夹。</li>\n</ul>\n<p>结果如下：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403000943.webp\" alt=\"image.png\" /></p>\n<p>回到 Keil 中（这里沿用 <a href=\"http://www.prechin.cn/index.html\">普中</a> 的风格）：</p>\n<ul>\n<li>新建组 <code>FreeRTOS_core</code>：\n<ul>\n<li>添加【Core】标记的 <code>.c</code> 文件，共 6 个。</li>\n</ul>\n</li>\n<li>新建组 <code>FreeRTOS_port</code>：\n<ul>\n<li>添加【Port】标记的 <code>.c</code> 文件，共 2 个。</li>\n</ul>\n</li>\n</ul>\n<p>添加头文件路径：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403000740.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<h1 id=\"编写配置文件及必要代码修改\"><a class=\"markdownIt-Anchor\" href=\"#编写配置文件及必要代码修改\"></a> 编写配置文件及必要代码修改</h1>\n<blockquote>\n<p>这部分属于 <a href=\"http://www.prechin.cn/index.html\">普中</a> 的风格。</p>\n</blockquote>\n<p>在 <code>FreeRTOS/include</code> 中新增一个名为 <code>FreeRTOSConfig.h</code> 的文件，文件内容过长，我放到文章尾。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403001032.webp\" alt=\"image.png\" /></p>\n<p>使用这个移植文件后，还不能编译成功，会提示两个重定义错误。这是由于 <code>FreeRTOSConfig.h</code> 配置文件中定义了两个冲突的宏。我们还需要进行以下操作。打开 <code>stm32f10x_it.c</code> 注释这两个函数：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403121402.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>解释：<code>SVC_Handler</code> 和 <code>PendSV_Handler</code> 这两个中断函数在 FreeRTOS 中已经定义，但 <code>stm32f10x_it.c</code> 这两个函数是空的。我们这里就使用 FreeRTOS 官方提供的函数。</p>\n<p>然后还是在 <code>stm32f10x_it.c</code> 顶上添加两个头文件：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403121713.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>编写 <code>SysTick_Handler</code> 函数：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403121731.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>解释：SysTick 是 FreeRTOS 的心跳时钟，我们这里需要实现它。</p>\n<p>编译一下，这时候就没有错误产生了。</p>\n<h1 id=\"创建任务点亮-led-灯\"><a class=\"markdownIt-Anchor\" href=\"#创建任务点亮-led-灯\"></a> 创建任务点亮 LED 灯</h1>\n<p>main.c：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span>                  <span class=\"comment\">// Device header</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;serial.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SysTick.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;FreeRTOS.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;task.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//任务优先级</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> START_TASK_PRIO\t\t1</span></span><br><span class=\"line\"><span class=\"comment\">//任务堆栈大小\t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> START_STK_SIZE \t\t128  </span></span><br><span class=\"line\"><span class=\"comment\">//任务句柄</span></span><br><span class=\"line\">TaskHandle_t StartTask_Handler;</span><br><span class=\"line\"><span class=\"comment\">//任务函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">start_task</span><span class=\"params\">(<span class=\"type\">void</span> *pvParameters)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//任务优先级</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED_TASK_PRIO\t\t2</span></span><br><span class=\"line\"><span class=\"comment\">//任务堆栈大小\t</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LED_STK_SIZE \t\t50  </span></span><br><span class=\"line\"><span class=\"comment\">//任务句柄</span></span><br><span class=\"line\">TaskHandle_t LEDTask_Handler;</span><br><span class=\"line\"><span class=\"comment\">//任务函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">led_task</span><span class=\"params\">(<span class=\"type\">void</span> *pvParameters)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">\tSysTick_Init(<span class=\"number\">72</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化 GPIO</span></span><br><span class=\"line\">\tRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE); </span><br><span class=\"line\">\tGPIO_InitTypeDef GPIO_InitStructure;</span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP; <span class=\"comment\">// 推挽</span></span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Pin=GPIO_Pin_13;</span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class=\"line\">\tGPIO_Init(GPIOC,&amp;GPIO_InitStructure);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建开始任务</span></span><br><span class=\"line\">    xTaskCreate((TaskFunction_t )start_task,            <span class=\"comment\">//任务函数</span></span><br><span class=\"line\">                (<span class=\"type\">const</span> <span class=\"type\">char</span>*    )<span class=\"string\">&quot;start_task&quot;</span>,          <span class=\"comment\">//任务名称</span></span><br><span class=\"line\">                (<span class=\"type\">uint16_t</span>       )START_STK_SIZE,        <span class=\"comment\">//任务堆栈大小</span></span><br><span class=\"line\">                (<span class=\"type\">void</span>*          )<span class=\"literal\">NULL</span>,                  <span class=\"comment\">//传递给任务函数的参数</span></span><br><span class=\"line\">                (UBaseType_t    )START_TASK_PRIO,       <span class=\"comment\">//任务优先级</span></span><br><span class=\"line\">                (TaskHandle_t*  )&amp;StartTask_Handler);   <span class=\"comment\">//任务句柄              </span></span><br><span class=\"line\">    vTaskStartScheduler();          <span class=\"comment\">//开启任务调度</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开始任务任务函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">start_task</span><span class=\"params\">(<span class=\"type\">void</span> *pvParameters)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    taskENTER_CRITICAL();           <span class=\"comment\">//进入临界区</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建任务指示灯任务</span></span><br><span class=\"line\">    xTaskCreate((TaskFunction_t )led_task,     </span><br><span class=\"line\">                (<span class=\"type\">const</span> <span class=\"type\">char</span>*    )<span class=\"string\">&quot;led_task&quot;</span>,   </span><br><span class=\"line\">                (<span class=\"type\">uint16_t</span>       )LED_STK_SIZE, </span><br><span class=\"line\">                (<span class=\"type\">void</span>*          )<span class=\"literal\">NULL</span>,</span><br><span class=\"line\">                (UBaseType_t    )LED_TASK_PRIO,</span><br><span class=\"line\">                (TaskHandle_t*  )&amp;LEDTask_Handler); </span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">    vTaskDelete(StartTask_Handler); <span class=\"comment\">//删除开始任务</span></span><br><span class=\"line\">    taskEXIT_CRITICAL();            <span class=\"comment\">//退出临界区</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">led_task</span><span class=\"params\">(<span class=\"type\">void</span> *pvParameters)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        GPIO_SetBits(GPIOC,GPIO_Pin_13);</span><br><span class=\"line\">        vTaskDelay(<span class=\"number\">200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        GPIO_ResetBits(GPIOC,GPIO_Pin_13);</span><br><span class=\"line\">        vTaskDelay(<span class=\"number\">800</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编译通过后下载即可。</p>\n<h1 id=\"附件\"><a class=\"markdownIt-Anchor\" href=\"#附件\"></a> 附件</h1>\n<h2 id=\"freertos-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#freertos-配置文件\"></a> FreeRTOS 配置文件</h2>\n<blockquote>\n<p>这个文件其实就是源码包中示例程序存在的文件（标记为【Config】），用户需要自己添加和编写以确定 FreeRTOS 激活或关闭某些功能，从而达到 FreeRTOS 可裁剪的目的。这个文件是我根据普中给的配置进行的改编，去掉不必要的头文件。</p>\n</blockquote>\n<p><code>FreeRTOSConfig.h</code> 文件内容为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.</span></span><br><span class=\"line\"><span class=\"comment\">    All rights reserved</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    This file is part of the FreeRTOS distribution.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    FreeRTOS is free software; you can redistribute it and/or modify it under</span></span><br><span class=\"line\"><span class=\"comment\">    the terms of the GNU General Public License (version 2) as published by the</span></span><br><span class=\"line\"><span class=\"comment\">    Free Software Foundation &gt;&gt;&gt;&gt; AND MODIFIED BY &lt;&lt;&lt;&lt; the FreeRTOS exception.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">    &gt;&gt;!   <span class=\"doctag\">NOTE:</span> The modification to the GPL is included to allow you to     !&lt;&lt;</span></span><br><span class=\"line\"><span class=\"comment\">    &gt;&gt;!   distribute a combined work that includes FreeRTOS without being   !&lt;&lt;</span></span><br><span class=\"line\"><span class=\"comment\">    &gt;&gt;!   obliged to provide the source code for proprietary components     !&lt;&lt;</span></span><br><span class=\"line\"><span class=\"comment\">    &gt;&gt;!   outside of the FreeRTOS kernel.                                   !&lt;&lt;</span></span><br><span class=\"line\"><span class=\"comment\">    ***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY</span></span><br><span class=\"line\"><span class=\"comment\">    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS</span></span><br><span class=\"line\"><span class=\"comment\">    FOR A PARTICULAR PURPOSE.  Full license text is available on the following</span></span><br><span class=\"line\"><span class=\"comment\">    link: http://www.freertos.org/a00114.html</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">     *                                                                       *</span></span><br><span class=\"line\"><span class=\"comment\">     *    FreeRTOS provides completely free yet professionally developed,    *</span></span><br><span class=\"line\"><span class=\"comment\">     *    robust, strictly quality controlled, supported, and cross          *</span></span><br><span class=\"line\"><span class=\"comment\">     *    platform software that is more than just the market leader, it     *</span></span><br><span class=\"line\"><span class=\"comment\">     *    is the industry&#x27;s de facto standard.                               *</span></span><br><span class=\"line\"><span class=\"comment\">     *                                                                       *</span></span><br><span class=\"line\"><span class=\"comment\">     *    Help yourself get started quickly while simultaneously helping     *</span></span><br><span class=\"line\"><span class=\"comment\">     *    to support the FreeRTOS project by purchasing a FreeRTOS           *</span></span><br><span class=\"line\"><span class=\"comment\">     *    tutorial book, reference manual, or both:                          *</span></span><br><span class=\"line\"><span class=\"comment\">     *    http://www.FreeRTOS.org/Documentation                              *</span></span><br><span class=\"line\"><span class=\"comment\">     *                                                                       *</span></span><br><span class=\"line\"><span class=\"comment\">    ***************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading</span></span><br><span class=\"line\"><span class=\"comment\">    the FAQ page &quot;My application does not run, what could be wrong?&quot;.  Have you</span></span><br><span class=\"line\"><span class=\"comment\">    defined configASSERT()?</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    http://www.FreeRTOS.org/support - In return for receiving this top quality</span></span><br><span class=\"line\"><span class=\"comment\">    embedded software for free we request you assist our global community by</span></span><br><span class=\"line\"><span class=\"comment\">    participating in the support forum.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    http://www.FreeRTOS.org/training - Investing in training allows your team to</span></span><br><span class=\"line\"><span class=\"comment\">    be as productive as possible as early as possible.  Now you can receive</span></span><br><span class=\"line\"><span class=\"comment\">    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers</span></span><br><span class=\"line\"><span class=\"comment\">    Ltd, and the world&#x27;s leading authority on the world&#x27;s leading RTOS.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,</span></span><br><span class=\"line\"><span class=\"comment\">    including FreeRTOS+Trace - an indispensable productivity tool, a DOS</span></span><br><span class=\"line\"><span class=\"comment\">    compatible FAT file system, and our tiny thread aware UDP/IP stack.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.</span></span><br><span class=\"line\"><span class=\"comment\">    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High</span></span><br><span class=\"line\"><span class=\"comment\">    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS</span></span><br><span class=\"line\"><span class=\"comment\">    licenses offer ticketed support, indemnification and commercial middleware.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    http://www.SafeRTOS.com - High Integrity Systems also provide a safety</span></span><br><span class=\"line\"><span class=\"comment\">    engineered and independently SIL3 certified version for use in safety and</span></span><br><span class=\"line\"><span class=\"comment\">    mission critical applications that require provable dependability.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> FREERTOS_CONFIG_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> FREERTOS_CONFIG_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;serial.h&quot;</span> # printf 所在</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//针对不同的编译器调用不同的stdint.h文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined(__ICCARM__) || defined(__CC_ARM) || defined(__GNUC__)</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">extern</span> <span class=\"type\">uint32_t</span> SystemCoreClock;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//断言</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> vAssertCalled(char,int) printf(<span class=\"string\">&quot;Error:%s,%d\\r\\n&quot;</span>,char,int)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configASSERT(x) <span class=\"keyword\">if</span>((x)==0) vAssertCalled(__FILE__,__LINE__)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************************************************************************</span></span><br><span class=\"line\"><span class=\"comment\"> *               FreeRTOS基础配置配置选项 </span></span><br><span class=\"line\"><span class=\"comment\"> *********************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/* 置1：RTOS使用抢占式调度器；置0：RTOS使用协作式调度器（时间片）</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 注：在多任务管理机制上，操作系统可以分为抢占式和协作式两种。</span></span><br><span class=\"line\"><span class=\"comment\"> * 协作式操作系统是任务主动释放CPU后，切换到下一个任务。</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务切换的时机完全取决于正在运行的任务。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_PREEMPTION\t\t\t\t\t  1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1使能时间片调度(默认式使能的)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_TIME_SLICING\t\t\t\t\t1\t\t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 某些运行FreeRTOS的硬件有两种方法选择下一个要执行的任务：</span></span><br><span class=\"line\"><span class=\"comment\"> * 通用方法和特定于硬件的方法（以下简称“特殊方法”）。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 通用方法：</span></span><br><span class=\"line\"><span class=\"comment\"> *      1.configUSE_PORT_OPTIMISED_TASK_SELECTION 为 0 或者硬件不支持这种特殊方法。</span></span><br><span class=\"line\"><span class=\"comment\"> *      2.可以用于所有FreeRTOS支持的硬件</span></span><br><span class=\"line\"><span class=\"comment\"> *      3.完全用C实现，效率略低于特殊方法。</span></span><br><span class=\"line\"><span class=\"comment\"> *      4.不强制要求限制最大可用优先级数目</span></span><br><span class=\"line\"><span class=\"comment\"> * 特殊方法：</span></span><br><span class=\"line\"><span class=\"comment\"> *      1.必须将configUSE_PORT_OPTIMISED_TASK_SELECTION设置为1。</span></span><br><span class=\"line\"><span class=\"comment\"> *      2.依赖一个或多个特定架构的汇编指令（一般是类似计算前导零[CLZ]指令）。</span></span><br><span class=\"line\"><span class=\"comment\"> *      3.比通用方法更高效</span></span><br><span class=\"line\"><span class=\"comment\"> *      4.一般强制限定最大可用优先级数目为32</span></span><br><span class=\"line\"><span class=\"comment\"> * 一般是硬件计算前导零指令，如果所使用的，MCU没有这些硬件指令的话此宏应该设置为0！</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_PORT_OPTIMISED_TASK_SELECTION\t        1                       </span></span><br><span class=\"line\">                                                                        </span><br><span class=\"line\"><span class=\"comment\">/* 置1：使能低功耗tickless模式；置0：保持系统节拍（tick）中断一直运行</span></span><br><span class=\"line\"><span class=\"comment\"> * 假设开启低功耗的话可能会导致下载出现问题，因为程序在睡眠中,可用以下办法解决</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 下载方法：</span></span><br><span class=\"line\"><span class=\"comment\"> *      1.将开发版正常连接好</span></span><br><span class=\"line\"><span class=\"comment\"> *      2.按住复位按键，点击下载瞬间松开复位按键</span></span><br><span class=\"line\"><span class=\"comment\"> *     </span></span><br><span class=\"line\"><span class=\"comment\"> *      1.通过跳线帽将 BOOT 0 接高电平(3.3V)</span></span><br><span class=\"line\"><span class=\"comment\"> *      2.重新上电，下载</span></span><br><span class=\"line\"><span class=\"comment\"> *    </span></span><br><span class=\"line\"><span class=\"comment\"> * \t\t\t1.使用FlyMcu擦除一下芯片，然后进行下载</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t\tSTMISP -&gt; 清除芯片(z)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_TICKLESS_IDLE\t\t0   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 写入实际的CPU内核时钟频率，也就是CPU指令执行频率，通常称为Fclk</span></span><br><span class=\"line\"><span class=\"comment\"> * Fclk为供给CPU内核的时钟信号，我们所说的cpu主频为 XX MHz，</span></span><br><span class=\"line\"><span class=\"comment\"> * 就是指的这个时钟信号，相应的，1/Fclk即为cpu时钟周期；</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configCPU_CLOCK_HZ\t\t\t\t\t\t  (SystemCoreClock)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//RTOS系统节拍中断的频率。即一秒中断的次数，每次中断RTOS都会进行任务调度</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configTICK_RATE_HZ\t\t\t\t\t\t  (( TickType_t )1000)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可使用的最大优先级</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configMAX_PRIORITIES\t\t\t\t\t  (32)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//空闲任务使用的堆栈大小</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configMINIMAL_STACK_SIZE\t\t\t\t((unsigned short)128)</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">//任务名字字符串长度</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configMAX_TASK_NAME_LEN\t\t\t\t\t(16)</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//系统节拍计数器变量数据类型，1表示为16位无符号整形，0表示为32位无符号整形</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_16_BIT_TICKS\t\t\t\t\t0                      </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//空闲任务放弃CPU使用权给其他同优先级的用户任务</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configIDLE_SHOULD_YIELD\t\t\t\t\t1           </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启用队列</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_QUEUE_SETS\t\t\t\t\t  0    </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//开启任务通知功能，默认开启</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_TASK_NOTIFICATIONS    1   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用互斥信号量</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_MUTEXES\t\t\t\t\t\t    1    </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用递归互斥信号量                                            </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_RECURSIVE_MUTEXES\t\t\t0   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为1时使用计数信号量</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_COUNTING_SEMAPHORES\t\t1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 设置可以注册的信号量和消息队列个数 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configQUEUE_REGISTRY_SIZE\t\t\t\t10                                 </span></span><br><span class=\"line\">                                                                       </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_APPLICATION_TASK_TAG\t\t  0                       </span></span><br><span class=\"line\">                      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*****************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">              FreeRTOS与内存申请有关配置选项                                               </span></span><br><span class=\"line\"><span class=\"comment\">*****************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">//支持动态内存申请</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configSUPPORT_DYNAMIC_ALLOCATION        1    </span></span><br><span class=\"line\"><span class=\"comment\">//支持静态内存</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configSUPPORT_STATIC_ALLOCATION\t\t\t\t\t0\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"comment\">//系统所有总的堆大小</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configTOTAL_HEAP_SIZE\t\t\t\t\t((size_t)(10*1024)) <span class=\"comment\">// ME:需要修改才能通过编译   </span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">             FreeRTOS与钩子函数有关的配置选项                                            </span></span><br><span class=\"line\"><span class=\"comment\">**************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/* 置1：使用空闲钩子（Idle Hook类似于回调函数）；置0：忽略空闲钩子</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 空闲任务钩子是一个函数，这个函数由用户来实现，</span></span><br><span class=\"line\"><span class=\"comment\"> * FreeRTOS规定了函数的名字和参数：void vApplicationIdleHook(void )，</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个函数在每个空闲任务周期都会被调用</span></span><br><span class=\"line\"><span class=\"comment\"> * 对于已经删除的RTOS任务，空闲任务可以释放分配给它们的堆栈内存。</span></span><br><span class=\"line\"><span class=\"comment\"> * 因此必须保证空闲任务可以被CPU执行</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用空闲钩子函数设置CPU进入省电模式是很常见的</span></span><br><span class=\"line\"><span class=\"comment\"> * 不可以调用会引起空闲任务阻塞的API函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_IDLE_HOOK\t\t\t\t\t\t0      </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 置1：使用时间片钩子（Tick Hook）；置0：忽略时间片钩子</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 时间片钩子是一个函数，这个函数由用户来实现，</span></span><br><span class=\"line\"><span class=\"comment\"> * FreeRTOS规定了函数的名字和参数：void vApplicationTickHook(void )</span></span><br><span class=\"line\"><span class=\"comment\"> * 时间片中断可以周期性的调用</span></span><br><span class=\"line\"><span class=\"comment\"> * 函数必须非常短小，不能大量使用堆栈，</span></span><br><span class=\"line\"><span class=\"comment\"> * 不能调用以”FromISR&quot; 或 &quot;FROM_ISR”结尾的API函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">/*xTaskIncrementTick函数是在xPortSysTickHandler中断函数中被调用的。因此，vApplicationTickHook()函数执行的时间必须很短才行*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_TICK_HOOK\t\t\t\t\t\t0           </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用内存申请失败钩子函数</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_MALLOC_FAILED_HOOK\t\t\t0 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 大于0时启用堆栈溢出检测功能，如果使用此功能 </span></span><br><span class=\"line\"><span class=\"comment\"> * 用户必须提供一个栈溢出钩子函数，如果使用的话</span></span><br><span class=\"line\"><span class=\"comment\"> * 此值可以为1或者2，因为有两种栈溢出检测方法 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configCHECK_FOR_STACK_OVERFLOW\t\t\t0   </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">          FreeRTOS与运行时间和任务状态收集有关的配置选项   </span></span><br><span class=\"line\"><span class=\"comment\">**********************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">//启用运行时间统计功能</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configGENERATE_RUN_TIME_STATS\t        0             </span></span><br><span class=\"line\"> <span class=\"comment\">//启用可视化跟踪调试</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_TRACE_FACILITY\t\t\t\t      0    </span></span><br><span class=\"line\"><span class=\"comment\">/* 与宏configUSE_TRACE_FACILITY同时为1时会编译下面3个函数</span></span><br><span class=\"line\"><span class=\"comment\"> * prvWriteNameToBuffer()</span></span><br><span class=\"line\"><span class=\"comment\"> * vTaskList(),</span></span><br><span class=\"line\"><span class=\"comment\"> * vTaskGetRunTimeStats()</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_STATS_FORMATTING_FUNCTIONS\t1                       </span></span><br><span class=\"line\">                                                                        </span><br><span class=\"line\"><span class=\"comment\">//extern volatile uint32_t CPU_RunTime;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()\t(CPU_RunTime=0ul)</span></span><br><span class=\"line\"><span class=\"comment\">//#define portGET_RUN_TIME_COUNTER_VALUE()\tCPU_RunTime</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">                FreeRTOS与协程有关的配置选项                                                </span></span><br><span class=\"line\"><span class=\"comment\">*********************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">//启用协程，启用协程以后必须添加文件croutine.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_CO_ROUTINES \t\t\t          0                 </span></span><br><span class=\"line\"><span class=\"comment\">//协程的有效优先级数目</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configMAX_CO_ROUTINE_PRIORITIES       ( 2 )                   </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">                FreeRTOS与软件定时器有关的配置选项      </span></span><br><span class=\"line\"><span class=\"comment\">**********************************************************************/</span></span><br><span class=\"line\"> <span class=\"comment\">//启用软件定时器</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configUSE_TIMERS\t\t\t\t            1                              </span></span><br><span class=\"line\"><span class=\"comment\">//软件定时器优先级</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configTIMER_TASK_PRIORITY\t\t        (configMAX_PRIORITIES-1)        </span></span><br><span class=\"line\"><span class=\"comment\">//软件定时器队列长度</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configTIMER_QUEUE_LENGTH\t\t        10                               </span></span><br><span class=\"line\"><span class=\"comment\">//软件定时器任务堆栈大小</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configTIMER_TASK_STACK_DEPTH\t      (configMINIMAL_STACK_SIZE*2)    </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">            FreeRTOS可选函数配置选项                                                     </span></span><br><span class=\"line\"><span class=\"comment\">************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_xTaskGetSchedulerState       1                       </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_vTaskPrioritySet\t\t         1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_uxTaskPriorityGet\t\t         1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_vTaskDelete\t\t\t\t           1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_vTaskCleanUpResources\t       1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_vTaskSuspend\t\t\t           1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_vTaskDelayUntil\t\t\t         1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_vTaskDelay\t\t\t\t           1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_eTaskGetState\t\t\t           1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_xTimerPendFunctionCall\t     0</span></span><br><span class=\"line\"><span class=\"comment\">//#define INCLUDE_xTaskGetCurrentTaskHandle       1</span></span><br><span class=\"line\"><span class=\"comment\">//#define INCLUDE_uxTaskGetStackHighWaterMark     0</span></span><br><span class=\"line\"><span class=\"comment\">//#define INCLUDE_xTaskGetIdleTaskHandle          0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">            FreeRTOS与中断有关的配置选项                                                 </span></span><br><span class=\"line\"><span class=\"comment\">******************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __NVIC_PRIO_BITS</span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> configPRIO_BITS       \t\t__NVIC_PRIO_BITS</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\">\t<span class=\"meta\">#<span class=\"keyword\">define</span> configPRIO_BITS       \t\t4                  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"comment\">//中断最低优先级</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configLIBRARY_LOWEST_INTERRUPT_PRIORITY\t\t\t15     </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//系统可管理的最高中断优先级</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY\t5 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configKERNEL_INTERRUPT_PRIORITY \t\t( configLIBRARY_LOWEST_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )\t<span class=\"comment\">/* 240 */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> configMAX_SYSCALL_INTERRUPT_PRIORITY \t( configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY &lt;&lt; (8 - configPRIO_BITS) )</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/****************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">            FreeRTOS与中断服务函数有关的配置选项                         </span></span><br><span class=\"line\"><span class=\"comment\">****************************************************************/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> xPortPendSVHandler \tPendSV_Handler</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> vPortSVCHandler \tSVC_Handler</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 以下为使用Percepio Tracealyzer需要的东西，不需要时将 configUSE_TRACE_FACILITY 定义为 0 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;trcRecorder.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> INCLUDE_xTaskGetCurrentTaskHandle               1   <span class=\"comment\">// 启用一个可选函数（该函数被 Trace源码使用，默认该值为0 表示不用）</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* FREERTOS_CONFIG_H */</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1GN4y157fy?p=7&amp;vd_source=e03d48176855fc5349b27aef691f9cdb\">2.1-FreeRTOS移植–FreeRTOS源码下载_哔哩哔哩_bilibili</a></li>\n</ul>\n","raw":"---\ntitle: STM32 移植 FreeRTOS - 基于标准库\ntags:\n  - STM32\n  - 移植\n  - FreeRTOS\n  - C\n  - Keil\ndescription: 标准库下FreeRTOS的移植。\ncategories:\n  - 嵌入式\nabbrlink: 8111c784\ndate: 2024-04-02 13:44:07\ncover: https://cdn.gallery.uuanqin.top/img/20240404231107.webp\ntop_img:\n---\n\n这篇文章介绍标准库下将 FreeRTOS 移植到 STM32 的过程。主要内容包括：\n\n1. 源码下载与介绍\n2. 基础工程从零创建\n3. 移植步骤\n4. 创建一个任务并点亮 LED 灯\n# FreeRTOS 源码下载\n\n下载途径\n\n1. 通过 FreeRTOS 官网下载：[FreeRTOS - Market leading RTOS (Real Time Operating System) for embedded systems with Internet of Things extensions](https://www.freertos.org/)\n2. 通过代码托管网站下载：[FreeRTOS Real Time Kernel (RTOS) - Browse /FreeRTOS at SourceForge.net](https://sourceforge.net/projects/freertos/files/FreeRTOS/)\n\n这里我们打算下载 2018 年发布的版本：V9.0.0，因为它的内核稳定，且网上资料较多。我们使用第二种方式进行下载。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402140209.webp)\n\n选择 zip 格式进行源码下载：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402140406.webp)\n\n# FreeRTOS 源码结构介绍\n\n```tree\nFreeRTOSv9.0.0\n├─FreeRTOS\n│  ├─Demo # 示例工程\n│  │  ├─CORTEX_STM32F103_IAR\n│  │  ├─CORTEX_STM32F103_Keil # 针对 Keil 的Demo\n│  │  │      FreeRTOSConfig.h # 【Config】\n│  │  └─CORTEX_STM32F103_Primer_GCC\n│  ├─License # 许可信息\n│  │      license.txt\n│  └─Source  # 【A】源代码。此层目录下的c文件在不同内核下是通用的。\n│      │  croutine.c      # 【Core】\n│      │  event_groups.c  # 【Core】\n│      │  list.c          # 【Core】\n│      │  queue.c         # 【Core】\n│      │  tasks.c         # 【Core】\n│      │  timers.c        # 【Core】\n│      │\n│      ├─include\n│      │      croutine.h\n│      │      deprecated_definitions.h\n│      │      event_groups.h\n│      │      FreeRTOS.h\n│      │      list.h\n│      │      mpu_prototypes.h\n│      │      mpu_wrappers.h\n│      │      portable.h\n│      │      projdefs.h\n│      │      queue.h\n│      │      semphr.h\n│      │      StackMacros.h\n│      │      stdint.readme\n│      │      task.h\n│      │      timers.h\n│      │\n│      └─portable # 【B】端口文件。针对不同的芯片。\n│          ├─Keil # 【C】使用 Keil IDE，但它指引我们到 RVDS 中。\n│          │      See-also-the-RVDS-directory.txt\n│          │\n│          ├─MemMang # 【C】内存管理相关文件。我们只需要使用一个方法。\n│          │      heap_1.c\n│          │      heap_2.c\n│          │      heap_3.c\n│          │      heap_4.c # 【Port】我们使用这个内存分配算法\n│          │      heap_5.c\n│          │      ReadMe.url\n│          │\n│          ├─RVDS # 【C】根据不同的内核进行选择。STM32F103属于CM3内核。\n│          │  │\n│          │  ├─ARM_CM3 # 与硬件密切相关\n│          │  │      port.c # 【Port】由汇编语言编写而成\n│          │  │      portmacro.h # 宏定义\n......\n└─FreeRTOS-Plus # 包含第三方产品。一般我们不需要使用。\n```\n\n# 基础工程构建\n\n移植前我们需要有一个基础工程。首先构建一个最简单的 STM-32 基于标准库方式开发的工程（详见 [[STM32 工程的创建 - 基于寄存器或标准库]]）\n\n## 移植 printf\n\n详看：[[串口驱动程序之「发送数据」]]\n\n> 如果你已经移植好可以跳过这一步。这里主要是为了无缝衔接 [[STM32 工程的创建 - 基于寄存器或标准库|这篇文章]]。\n\n## 延时函数\n\n编写延时函数，将这两个文件放到合适的位置。记得引入到「组」中。这里直接使用 [普中](http://www.prechin.cn/index.html) 写好的代码。注意，以前在标准库中使用的延时函数建议成下面的函数。\n\nSystick.h：\n\n```c\n#ifndef _SysTick_H\n#define _SysTick_H\n#include \"stm32f10x.h\"                  // Device header\n\nvoid SysTick_Init(uint8_t SYSCLK);\nvoid Delay_ms(uint32_t nms);\nvoid Delay_us(uint32_t nus);\nvoid Delay_xms(uint32_t nms);\n\n#endif\n\n```\n\nSystick.c：\n\n```c\n#include \"SysTick.h\"\n#include \"FreeRTOS.h\"\t//FreeRTOS使用\t\t  \n#include \"task.h\"\nstatic uint8_t  fac_us=0;\t\t\t\t\t\t\t//us延时倍乘数\t\t\t   \nstatic uint16_t fac_ms=0;\t\t\t\t\t\t\t//ms延时倍乘数\n\n\n//初始化延迟函数\n//SYSTICK的时钟固定为AHB时钟，基础例程里面SYSTICK时钟频率为AHB/8\n//SYSCLK:系统时钟频率\nvoid SysTick_Init(uint8_t SYSCLK)\n{\n\tuint32_t reload;\n\tSysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);//选择外部时钟  HCLK\n\tfac_us=SystemCoreClock/1000000;\t\t\t\t//不论是否使用OS,fac_us都需要使用\n\treload=SystemCoreClock/1000000;\t\t\t\t//每秒钟的计数次数 单位为M  \n\treload*=1000000/configTICK_RATE_HZ;\t\t\t//根据configTICK_RATE_HZ设定溢出时间\n\t\t\t\t\t\t\t\t\t\t\t\t//reload为24位寄存器,最大值:16777216,在72M下,约合0.233s左右\t\n\tfac_ms=1000/configTICK_RATE_HZ;\t\t\t\t//代表OS可以延时的最少单位\t   \n\n\tSysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   \t//开启SYSTICK中断\n\tSysTick->LOAD=reload; \t\t\t\t\t\t//每1/configTICK_RATE_HZ秒中断一次\t\n\tSysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;   \t//开启SYSTICK\t\t\t\t   \n}\t\t\t\t\t\t\t\t    \n\n\n//延时nus\n//nus:要延时的us数.\t\n//nus:0~204522252(最大值即2^32/fac_us@fac_us=168)\t    \t\t\t\t\t\t\t\t   \nvoid Delay_us(uint32_t nus)\n{\t\t\n\tuint32_t ticks;\n\tuint32_t told,tnow,tcnt=0;\n\tuint32_t reload=SysTick->LOAD;\t\t\t\t//LOAD的值\t    \t \n\tticks=nus*fac_us; \t\t\t\t\t\t//需要的节拍数 \n\ttold=SysTick->VAL;        \t\t\t\t//刚进入时的计数器值\n\twhile(1)\n\t{\n\t\ttnow=SysTick->VAL;\t\n\t\tif(tnow!=told)\n\t\t{\t    \n\t\t\tif(tnow<told)tcnt+=told-tnow;\t//这里注意一下SYSTICK是一个递减的计数器就可以了.\n\t\t\telse tcnt+=reload-tnow+told;\t    \n\t\t\ttold=tnow;\n\t\t\tif(tcnt>=ticks)break;\t\t\t//时间超过/等于要延迟的时间,则退出.\n\t\t}  \n\t};\t\t\t\t\t\t\t\t\t\t    \n}  \n//延时nms\n//nms:要延时的ms数\n//nms:0~65535\nvoid Delay_ms(uint32_t nms)\n{\t\n\tif(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED)//系统已经运行\n\t{\t\t\n\t\tif(nms>=fac_ms)\t\t\t\t\t\t//延时的时间大于OS的最少时间周期 \n\t\t{ \n   \t\t\tvTaskDelay(nms/fac_ms);\t \t\t//FreeRTOS延时\n\t\t}\n\t\tnms%=fac_ms;\t\t\t\t\t\t//OS已经无法提供这么小的延时了,采用普通方式延时    \n\t}\n\tDelay_us((uint32_t)(nms*1000));\t\t\t\t//普通方式延时\n}\n\n//延时nms,不会引起任务调度\n//nms:要延时的ms数\nvoid Delay_xms(uint32_t nms)\n{\n\tuint32_t i;\n\tfor(i=0;i<nms;i++) Delay_us(1000);\n}\n\n```\n\n进行到这里还不能成功编译，因为 Systick 使用了 FreeRTOS 的函数。\n\n# 移植 FreeRTOS\n\n在项目中新建名为 `FreeRTOS` 的文件夹。\n\n- 将从往上下载的 FreeRTOS 源码中，标识为【A】的目录下所有内容粘贴到我们新创建的名为 `FreeRTOS` 的文件夹中。\n- 删除【B】文件夹下，除了【C】之外的所有文件夹。也就是只保留 `Keil`、`MemMang` 和 `RVDS` 这三个文件夹。\n\n结果如下：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240403000943.webp)\n\n回到 Keil 中（这里沿用 [普中](http://www.prechin.cn/index.html) 的风格）：\n\n- 新建组 `FreeRTOS_core`：\n\t- 添加【Core】标记的 `.c` 文件，共 6 个。\n- 新建组 `FreeRTOS_port`：\n\t- 添加【Port】标记的 `.c` 文件，共 2 个。\n\n添加头文件路径：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240403000740.webp)\n\n# 编写配置文件及必要代码修改\n\n> 这部分属于 [普中](http://www.prechin.cn/index.html) 的风格。\n\n在 `FreeRTOS/include` 中新增一个名为 `FreeRTOSConfig.h` 的文件，文件内容过长，我放到文章尾。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240403001032.webp)\n\n使用这个移植文件后，还不能编译成功，会提示两个重定义错误。这是由于 `FreeRTOSConfig.h` 配置文件中定义了两个冲突的宏。我们还需要进行以下操作。打开 `stm32f10x_it.c` 注释这两个函数：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240403121402.webp)\n\n解释：`SVC_Handler` 和 `PendSV_Handler` 这两个中断函数在 FreeRTOS 中已经定义，但 `stm32f10x_it.c` 这两个函数是空的。我们这里就使用 FreeRTOS 官方提供的函数。\n\n然后还是在 `stm32f10x_it.c` 顶上添加两个头文件：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240403121713.webp)\n\n编写 `SysTick_Handler` 函数：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240403121731.webp)\n\n解释：SysTick 是 FreeRTOS 的心跳时钟，我们这里需要实现它。\n\n编译一下，这时候就没有错误产生了。\n\n# 创建任务点亮 LED 灯\n\nmain.c：\n\n```c\n#include \"stm32f10x.h\"                  // Device header\n#include \"serial.h\"\n#include \"SysTick.h\"\n#include \"FreeRTOS.h\"\n#include \"task.h\"\n\n//任务优先级\n#define START_TASK_PRIO\t\t1\n//任务堆栈大小\t\n#define START_STK_SIZE \t\t128  \n//任务句柄\nTaskHandle_t StartTask_Handler;\n//任务函数\nvoid start_task(void *pvParameters);\n\n//任务优先级\n#define LED_TASK_PRIO\t\t2\n//任务堆栈大小\t\n#define LED_STK_SIZE \t\t50  \n//任务句柄\nTaskHandle_t LEDTask_Handler;\n//任务函数\nvoid led_task(void *pvParameters);\n\nint main(void){\n\tSysTick_Init(72);\n\t\n\t// 初始化 GPIO\n\tRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE); \n\tGPIO_InitTypeDef GPIO_InitStructure;\n\tGPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP; // 推挽\n\tGPIO_InitStructure.GPIO_Pin=GPIO_Pin_13;\n\tGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;\n\tGPIO_Init(GPIOC,&GPIO_InitStructure);\n\t\n\t//创建开始任务\n    xTaskCreate((TaskFunction_t )start_task,            //任务函数\n                (const char*    )\"start_task\",          //任务名称\n                (uint16_t       )START_STK_SIZE,        //任务堆栈大小\n                (void*          )NULL,                  //传递给任务函数的参数\n                (UBaseType_t    )START_TASK_PRIO,       //任务优先级\n                (TaskHandle_t*  )&StartTask_Handler);   //任务句柄              \n    vTaskStartScheduler();          //开启任务调度\n}\n\n\n//开始任务任务函数\nvoid start_task(void *pvParameters)\n{\n    taskENTER_CRITICAL();           //进入临界区\n\n\t//创建任务指示灯任务\n    xTaskCreate((TaskFunction_t )led_task,     \n                (const char*    )\"led_task\",   \n                (uint16_t       )LED_STK_SIZE, \n                (void*          )NULL,\n                (UBaseType_t    )LED_TASK_PRIO,\n                (TaskHandle_t*  )&LEDTask_Handler); \n\t\t\t\t\n    vTaskDelete(StartTask_Handler); //删除开始任务\n    taskEXIT_CRITICAL();            //退出临界区\n} \n\nvoid led_task(void *pvParameters)\n{\n    while(1)\n    {\n        GPIO_SetBits(GPIOC,GPIO_Pin_13);\n        vTaskDelay(200);\n\n        GPIO_ResetBits(GPIOC,GPIO_Pin_13);\n        vTaskDelay(800);\n    }\n}\n\n```\n\n编译通过后下载即可。\n\n# 附件\n## FreeRTOS 配置文件\n\n> 这个文件其实就是源码包中示例程序存在的文件（标记为【Config】），用户需要自己添加和编写以确定 FreeRTOS 激活或关闭某些功能，从而达到 FreeRTOS 可裁剪的目的。这个文件是我根据普中给的配置进行的改编，去掉不必要的头文件。\n\n`FreeRTOSConfig.h` 文件内容为：\n\n```c\n/*\n    FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.\n    All rights reserved\n\n    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.\n\n    This file is part of the FreeRTOS distribution.\n\n    FreeRTOS is free software; you can redistribute it and/or modify it under\n    the terms of the GNU General Public License (version 2) as published by the\n    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.\n\n    ***************************************************************************\n    >>!   NOTE: The modification to the GPL is included to allow you to     !<<\n    >>!   distribute a combined work that includes FreeRTOS without being   !<<\n    >>!   obliged to provide the source code for proprietary components     !<<\n    >>!   outside of the FreeRTOS kernel.                                   !<<\n    ***************************************************************************\n\n    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY\n    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n    FOR A PARTICULAR PURPOSE.  Full license text is available on the following\n    link: http://www.freertos.org/a00114.html\n\n    ***************************************************************************\n     *                                                                       *\n     *    FreeRTOS provides completely free yet professionally developed,    *\n     *    robust, strictly quality controlled, supported, and cross          *\n     *    platform software that is more than just the market leader, it     *\n     *    is the industry's de facto standard.                               *\n     *                                                                       *\n     *    Help yourself get started quickly while simultaneously helping     *\n     *    to support the FreeRTOS project by purchasing a FreeRTOS           *\n     *    tutorial book, reference manual, or both:                          *\n     *    http://www.FreeRTOS.org/Documentation                              *\n     *                                                                       *\n    ***************************************************************************\n\n    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading\n    the FAQ page \"My application does not run, what could be wrong?\".  Have you\n    defined configASSERT()?\n\n    http://www.FreeRTOS.org/support - In return for receiving this top quality\n    embedded software for free we request you assist our global community by\n    participating in the support forum.\n\n    http://www.FreeRTOS.org/training - Investing in training allows your team to\n    be as productive as possible as early as possible.  Now you can receive\n    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers\n    Ltd, and the world's leading authority on the world's leading RTOS.\n\n    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,\n    including FreeRTOS+Trace - an indispensable productivity tool, a DOS\n    compatible FAT file system, and our tiny thread aware UDP/IP stack.\n\n    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.\n    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.\n\n    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High\n    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS\n    licenses offer ticketed support, indemnification and commercial middleware.\n\n    http://www.SafeRTOS.com - High Integrity Systems also provide a safety\n    engineered and independently SIL3 certified version for use in safety and\n    mission critical applications that require provable dependability.\n\n*/\n\n\n#ifndef FREERTOS_CONFIG_H\n#define FREERTOS_CONFIG_H\n\n#include \"serial.h\" # printf 所在\n\n\n//针对不同的编译器调用不同的stdint.h文件\n#if defined(__ICCARM__) || defined(__CC_ARM) || defined(__GNUC__)\n    #include <stdint.h>\n    extern uint32_t SystemCoreClock;\n#endif\n\n//断言\n#define vAssertCalled(char,int) printf(\"Error:%s,%d\\r\\n\",char,int)\n#define configASSERT(x) if((x)==0) vAssertCalled(__FILE__,__LINE__)\n\n/************************************************************************\n *               FreeRTOS基础配置配置选项 \n *********************************************************************/\n/* 置1：RTOS使用抢占式调度器；置0：RTOS使用协作式调度器（时间片）\n * \n * 注：在多任务管理机制上，操作系统可以分为抢占式和协作式两种。\n * 协作式操作系统是任务主动释放CPU后，切换到下一个任务。\n * 任务切换的时机完全取决于正在运行的任务。\n */\n#define configUSE_PREEMPTION\t\t\t\t\t  1\n\n//1使能时间片调度(默认式使能的)\n#define configUSE_TIME_SLICING\t\t\t\t\t1\t\t\n\n/* 某些运行FreeRTOS的硬件有两种方法选择下一个要执行的任务：\n * 通用方法和特定于硬件的方法（以下简称“特殊方法”）。\n * \n * 通用方法：\n *      1.configUSE_PORT_OPTIMISED_TASK_SELECTION 为 0 或者硬件不支持这种特殊方法。\n *      2.可以用于所有FreeRTOS支持的硬件\n *      3.完全用C实现，效率略低于特殊方法。\n *      4.不强制要求限制最大可用优先级数目\n * 特殊方法：\n *      1.必须将configUSE_PORT_OPTIMISED_TASK_SELECTION设置为1。\n *      2.依赖一个或多个特定架构的汇编指令（一般是类似计算前导零[CLZ]指令）。\n *      3.比通用方法更高效\n *      4.一般强制限定最大可用优先级数目为32\n * 一般是硬件计算前导零指令，如果所使用的，MCU没有这些硬件指令的话此宏应该设置为0！\n */\n#define configUSE_PORT_OPTIMISED_TASK_SELECTION\t        1                       \n                                                                        \n/* 置1：使能低功耗tickless模式；置0：保持系统节拍（tick）中断一直运行\n * 假设开启低功耗的话可能会导致下载出现问题，因为程序在睡眠中,可用以下办法解决\n * \n * 下载方法：\n *      1.将开发版正常连接好\n *      2.按住复位按键，点击下载瞬间松开复位按键\n *     \n *      1.通过跳线帽将 BOOT 0 接高电平(3.3V)\n *      2.重新上电，下载\n *    \n * \t\t\t1.使用FlyMcu擦除一下芯片，然后进行下载\n *\t\t\tSTMISP -> 清除芯片(z)\n */\n#define configUSE_TICKLESS_IDLE\t\t0   \n\n/*\n * 写入实际的CPU内核时钟频率，也就是CPU指令执行频率，通常称为Fclk\n * Fclk为供给CPU内核的时钟信号，我们所说的cpu主频为 XX MHz，\n * 就是指的这个时钟信号，相应的，1/Fclk即为cpu时钟周期；\n */\n#define configCPU_CLOCK_HZ\t\t\t\t\t\t  (SystemCoreClock)\n\n//RTOS系统节拍中断的频率。即一秒中断的次数，每次中断RTOS都会进行任务调度\n#define configTICK_RATE_HZ\t\t\t\t\t\t  (( TickType_t )1000)\n\n//可使用的最大优先级\n#define configMAX_PRIORITIES\t\t\t\t\t  (32)\n\n//空闲任务使用的堆栈大小\n#define configMINIMAL_STACK_SIZE\t\t\t\t((unsigned short)128)\n  \n//任务名字字符串长度\n#define configMAX_TASK_NAME_LEN\t\t\t\t\t(16)\n\n //系统节拍计数器变量数据类型，1表示为16位无符号整形，0表示为32位无符号整形\n#define configUSE_16_BIT_TICKS\t\t\t\t\t0                      \n\n//空闲任务放弃CPU使用权给其他同优先级的用户任务\n#define configIDLE_SHOULD_YIELD\t\t\t\t\t1           \n\n//启用队列\n#define configUSE_QUEUE_SETS\t\t\t\t\t  0    \n\n//开启任务通知功能，默认开启\n#define configUSE_TASK_NOTIFICATIONS    1   \n\n//使用互斥信号量\n#define configUSE_MUTEXES\t\t\t\t\t\t    1    \n\n//使用递归互斥信号量                                            \n#define configUSE_RECURSIVE_MUTEXES\t\t\t0   \n\n//为1时使用计数信号量\n#define configUSE_COUNTING_SEMAPHORES\t\t1\n\n/* 设置可以注册的信号量和消息队列个数 */\n#define configQUEUE_REGISTRY_SIZE\t\t\t\t10                                 \n                                                                       \n#define configUSE_APPLICATION_TASK_TAG\t\t  0                       \n                      \n\n/*****************************************************************\n              FreeRTOS与内存申请有关配置选项                                               \n*****************************************************************/\n//支持动态内存申请\n#define configSUPPORT_DYNAMIC_ALLOCATION        1    \n//支持静态内存\n#define configSUPPORT_STATIC_ALLOCATION\t\t\t\t\t0\t\t\t\t\t\n//系统所有总的堆大小\n#define configTOTAL_HEAP_SIZE\t\t\t\t\t((size_t)(10*1024)) // ME:需要修改才能通过编译   \n\n\n/***************************************************************\n             FreeRTOS与钩子函数有关的配置选项                                            \n**************************************************************/\n/* 置1：使用空闲钩子（Idle Hook类似于回调函数）；置0：忽略空闲钩子\n * \n * 空闲任务钩子是一个函数，这个函数由用户来实现，\n * FreeRTOS规定了函数的名字和参数：void vApplicationIdleHook(void )，\n * 这个函数在每个空闲任务周期都会被调用\n * 对于已经删除的RTOS任务，空闲任务可以释放分配给它们的堆栈内存。\n * 因此必须保证空闲任务可以被CPU执行\n * 使用空闲钩子函数设置CPU进入省电模式是很常见的\n * 不可以调用会引起空闲任务阻塞的API函数\n */\n#define configUSE_IDLE_HOOK\t\t\t\t\t\t0      \n\n/* 置1：使用时间片钩子（Tick Hook）；置0：忽略时间片钩子\n * \n * \n * 时间片钩子是一个函数，这个函数由用户来实现，\n * FreeRTOS规定了函数的名字和参数：void vApplicationTickHook(void )\n * 时间片中断可以周期性的调用\n * 函数必须非常短小，不能大量使用堆栈，\n * 不能调用以”FromISR\" 或 \"FROM_ISR”结尾的API函数\n */\n /*xTaskIncrementTick函数是在xPortSysTickHandler中断函数中被调用的。因此，vApplicationTickHook()函数执行的时间必须很短才行*/\n#define configUSE_TICK_HOOK\t\t\t\t\t\t0           \n\n//使用内存申请失败钩子函数\n#define configUSE_MALLOC_FAILED_HOOK\t\t\t0 \n\n/*\n * 大于0时启用堆栈溢出检测功能，如果使用此功能 \n * 用户必须提供一个栈溢出钩子函数，如果使用的话\n * 此值可以为1或者2，因为有两种栈溢出检测方法 */\n#define configCHECK_FOR_STACK_OVERFLOW\t\t\t0   \n\n\n/********************************************************************\n          FreeRTOS与运行时间和任务状态收集有关的配置选项   \n**********************************************************************/\n//启用运行时间统计功能\n#define configGENERATE_RUN_TIME_STATS\t        0             \n //启用可视化跟踪调试\n#define configUSE_TRACE_FACILITY\t\t\t\t      0    \n/* 与宏configUSE_TRACE_FACILITY同时为1时会编译下面3个函数\n * prvWriteNameToBuffer()\n * vTaskList(),\n * vTaskGetRunTimeStats()\n*/\n#define configUSE_STATS_FORMATTING_FUNCTIONS\t1                       \n                                                                        \n//extern volatile uint32_t CPU_RunTime;\n\n//#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()\t(CPU_RunTime=0ul)\n//#define portGET_RUN_TIME_COUNTER_VALUE()\tCPU_RunTime\n\n\n/********************************************************************\n                FreeRTOS与协程有关的配置选项                                                \n*********************************************************************/\n//启用协程，启用协程以后必须添加文件croutine.c\n#define configUSE_CO_ROUTINES \t\t\t          0                 \n//协程的有效优先级数目\n#define configMAX_CO_ROUTINE_PRIORITIES       ( 2 )                   \n\n\n/***********************************************************************\n                FreeRTOS与软件定时器有关的配置选项      \n**********************************************************************/\n //启用软件定时器\n#define configUSE_TIMERS\t\t\t\t            1                              \n//软件定时器优先级\n#define configTIMER_TASK_PRIORITY\t\t        (configMAX_PRIORITIES-1)        \n//软件定时器队列长度\n#define configTIMER_QUEUE_LENGTH\t\t        10                               \n//软件定时器任务堆栈大小\n#define configTIMER_TASK_STACK_DEPTH\t      (configMINIMAL_STACK_SIZE*2)    \n\n/************************************************************\n            FreeRTOS可选函数配置选项                                                     \n************************************************************/\n#define INCLUDE_xTaskGetSchedulerState       1                       \n#define INCLUDE_vTaskPrioritySet\t\t         1\n#define INCLUDE_uxTaskPriorityGet\t\t         1\n#define INCLUDE_vTaskDelete\t\t\t\t           1\n#define INCLUDE_vTaskCleanUpResources\t       1\n#define INCLUDE_vTaskSuspend\t\t\t           1\n#define INCLUDE_vTaskDelayUntil\t\t\t         1\n#define INCLUDE_vTaskDelay\t\t\t\t           1\n#define INCLUDE_eTaskGetState\t\t\t           1\n#define INCLUDE_xTimerPendFunctionCall\t     0\n//#define INCLUDE_xTaskGetCurrentTaskHandle       1\n//#define INCLUDE_uxTaskGetStackHighWaterMark     0\n//#define INCLUDE_xTaskGetIdleTaskHandle          0\n\n\n/******************************************************************\n            FreeRTOS与中断有关的配置选项                                                 \n******************************************************************/\n#ifdef __NVIC_PRIO_BITS\n\t#define configPRIO_BITS       \t\t__NVIC_PRIO_BITS\n#else\n\t#define configPRIO_BITS       \t\t4                  \n#endif\n//中断最低优先级\n#define configLIBRARY_LOWEST_INTERRUPT_PRIORITY\t\t\t15     \n\n//系统可管理的最高中断优先级\n#define configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY\t5 \n\n#define configKERNEL_INTERRUPT_PRIORITY \t\t( configLIBRARY_LOWEST_INTERRUPT_PRIORITY << (8 - configPRIO_BITS) )\t/* 240 */\n\n#define configMAX_SYSCALL_INTERRUPT_PRIORITY \t( configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY << (8 - configPRIO_BITS) )\n\n\n/****************************************************************\n            FreeRTOS与中断服务函数有关的配置选项                         \n****************************************************************/\n#define xPortPendSVHandler \tPendSV_Handler\n#define vPortSVCHandler \tSVC_Handler\n\n\n/* 以下为使用Percepio Tracealyzer需要的东西，不需要时将 configUSE_TRACE_FACILITY 定义为 0 */\n#if ( configUSE_TRACE_FACILITY == 1 )\n#include \"trcRecorder.h\"\n#define INCLUDE_xTaskGetCurrentTaskHandle               1   // 启用一个可选函数（该函数被 Trace源码使用，默认该值为0 表示不用）\n#endif\n\n#endif /* FREERTOS_CONFIG_H */\n\n```\n\n\n\n# 本文参考\n- [2.1-FreeRTOS移植--FreeRTOS源码下载_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1GN4y157fy?p=7&vd_source=e03d48176855fc5349b27aef691f9cdb)\n","categories":[{"name":"嵌入式","api":"api/categories/嵌入式.json"}],"tags":[{"name":"C","api":"api/tags/C.json"},{"name":"STM32","api":"api/tags/STM32.json"},{"name":"Keil","api":"api/tags/Keil.json"},{"name":"FreeRTOS","api":"api/tags/FreeRTOS.json"},{"name":"移植","api":"api/tags/移植.json"}]},"api":"api/posts/p/8111c784.json"}