{"title":"LogTrick 方法解决子数组最值或计数问题","tags":["LogTrick","二分查找","Java","LeetCode"],"cover":"https://cdn.gallery.uuanqin.top/img/202501232337583.webp","description":"降低内层循环的时间复杂度实现 Trick","categories":["算法与数据结构"],"abbrlink":"6aba4215","katex":true,"date":"2025-01-26T03:30:08.000Z","top_img":null,"summary":"Logtrick 是在时间复杂度为 $O(n^2)$ 计算子数组问题的基础上，利用 |,&,lcm,gcd 等性质优化的一种算法。 通常用于求 子数组 经过一些操作 (gcd,lcm,&,|) 后的 max、 min 或者计数问题。 本文将分为两大部分讲解 LogTrick 的理解： 子数组经过一些操作后的最值问题 子数组经过一些操作后的计数问题 本文题目难度标识：🟩简单，🟨中等，🟥困难。 最值问题 OR 运算 - 最值问题 > [!example] 🟥 3171. 找到按位或最接近 K 的子数组 - 力扣（LeetCode） > 给你一个数组 nums 和一个整数 k 。你需要找到 nums 的一个子数组，满足子数组中所有元素按位或运算 OR 的值与 k 的 绝对差 尽可能 小 。换言之，你需要选择一个子数组 `nums[l..r]` 满足 `|k - (nums[l] OR nums[l + 1] ... OR nums[r])|` 最小。 > > 请你返回 最小 的绝对差值。 > > 子数组 是数组中连续的 非空 元素序列。 > > 限制： > - `1 <= nums.length <= 10^5` > - `1 <= nums[i] <= 10^9` > - `1 <= k <= 10^9` 从暴力方法开始讲起 我们可以想到一个 $O(n^2)$ 的暴力算法： 方法的要点在于把子数组相或的结果存储在 `nums` 中。 复杂度分析： 时间复杂度： $O(n^2)$ 空间复杂度：$O(1)$。 Trick! 为了充分利用 OR 的性质，我们还可以对内层循环进行优化。 内层循环 `j` 在递减时，如果 `x` 和当前 `nums[j]` 相或不再发生变化，那么和 `nums[j-1]`、`nums[j-2]` ...... `nums[0]` 相或也不会发生变化。这时我们可以跳出循环了。 当 `j` 在递减时，x 能让当前 `nums[j]` 的一些比特位从 0 变为 1，如果不能就会退出内层循环。x 最大值限制为 `10^9`，即 x 最多有 29 个比特位，也就是说，x 最多能进行 29 次内部循环（第二重循环）。因此在本题中，内部循环的时间复杂度将是一个常数。..."}