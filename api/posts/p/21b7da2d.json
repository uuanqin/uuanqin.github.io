{"data":{"title":"SpringBoot 的原理以及写一个自定义 Starter","slug":"技术学习/SpringBoot 的原理以及写一个自定义 Starter","description":"记录开发简易 Starter 的基本步骤","date":"2024-07-16T13:25:56.000Z","updated":"2025-06-11T16:08:12.779Z","language":"zh-CN","comments":true,"url":"p/21b7da2d/","cover":"https://cdn.gallery.uuanqin.top/img/20240717190725.webp","images":[],"content":"<h1 id=\"spring-与-springboot\"><a class=\"markdownIt-Anchor\" href=\"#spring-与-springboot\"></a> Spring 与 SpringBoot</h1>\n<p>Spring 发展到今天已经形成了一种开发生态圈，Spring 提供了若干个子项目，每个项目用于完成特定的功能。</p>\n<p>Spring 和 SpringBoot：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240503235738.webp\" alt=\"image.png\" /></p>\n<p>Spring Boot 可以帮助我们非常快速的构建应用程序、<strong>简化开发</strong>、提高效率。SpringBoot 简化配置，本质还是 Spring，<strong>SpringBoot 不能替代 Spring</strong>。官方推荐的学习路径可以从 SpringBoot 开始。</p>\n<p>SpringBoot 使用简单快捷的原因是因为底层提供了：</p>\n<ul>\n<li>起步依赖：简化 <code>pom.xml</code> 的配置</li>\n<li>自动配置：简化 bean 的声明以及配置</li>\n</ul>\n<blockquote>\n<p>当我们提到 SpringBoot 的原理时，就指的是起步依赖和自动配置的原理。在面试中，如果问 SpringBoot 原理，就是在着重问你自动配置的原理（面试高频）。</p>\n</blockquote>\n<h1 id=\"springboot-的原理\"><a class=\"markdownIt-Anchor\" href=\"#springboot-的原理\"></a> SpringBoot 的原理</h1>\n<h2 id=\"起步依赖starters\"><a class=\"markdownIt-Anchor\" href=\"#起步依赖starters\"></a> 起步依赖（Starters）</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240716220724.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<p>利用 <strong>Maven 的依赖传递</strong>，我们可以直接简单引用起步依赖即可自动引用常见依赖：</p>\n<ul>\n<li><code>spring-boot-starter-web</code>：包含了 web 应用开发所需要的常见依赖。内嵌有 Tomcat。</li>\n<li><code>spring-boot-starter-test</code>：包含了单元测试所需要的常见依赖。</li>\n<li><code>spring-boot-starter-aop</code>：AOP 起步依赖</li>\n</ul>\n<p>起步依赖的版本号都在父工程中指定（在 <code>pom.xml</code> 中被 <code>&lt;parent&gt;</code> 标签括住的内容）。</p>\n<blockquote>\n<p>Maven 的依赖传递示意：<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240503232439.webp\" alt=\"image.png\" width=\"500px\" /></p>\n</blockquote>\n<h2 id=\"自动配置\"><a class=\"markdownIt-Anchor\" href=\"#自动配置\"></a> 自动配置</h2>\n<p>SpringBoot 的自动配置就是当 spring 容器启动后，一些配置类、bean 对象就自动存入到了 IoC 容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。</p>\n<p>IDEA 中查看所有 Bean 对象示例：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240716221306.webp\" alt=\"image.png\" /></p>\n<h3 id=\"自动配置方式示例\"><a class=\"markdownIt-Anchor\" href=\"#自动配置方式示例\"></a> 自动配置方式示例</h3>\n<ol>\n<li>在启动类前加上 <code>@ComponentScan</code> 指定扫描的范围</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一：在启动类前加上 @ComponentScan 指定扫描的范围</span></span><br><span class=\"line\"><span class=\"comment\">// 这样我们自己定义的 Bean 就能使用</span></span><br><span class=\"line\"><span class=\"comment\">// 缺点：按照这种方式的话，每使用一个第三方依赖，就要指定扫描的包。导致使用繁琐，大面积扫描导致性能低。</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan(&#123;&quot;com.example&quot;,&quot;top.uuanqin&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringbootWebConfig2Application</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>启动类前加上 <code>@Import</code> 导入</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式二：启动类前加上@Import导入。</span></span><br><span class=\"line\"><span class=\"comment\">// 使用 @Import 导入的类会被 Spring 加载到IoC容器中。</span></span><br><span class=\"line\"><span class=\"comment\">// 导入形式可以是普通类、配置类、ImportSelector的接口实现类</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;TokenParser.class, HeaderConfig.class&#125;)</span> <span class=\"comment\">// 或者 @Import(&#123;MyImportSelector.class&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringbootWebConfig2Application</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************** TokenParser.java *****************/</span></span><br><span class=\"line\"><span class=\"comment\">// 导入普通类：TokenParser.class，TokenParser定义时不需要加任何注解。</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span> <span class=\"comment\">// 此注解可有可无</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TokenParser</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parse</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;TokenParser ... parse ...&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************** HeaderConfig.java *****************/</span></span><br><span class=\"line\"><span class=\"comment\">// 导入配置类：HeaderConfig.class，相关注解：@Configuration @Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HeaderConfig</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> HeaderParser <span class=\"title function_\">headerParser</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HeaderParser</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> HeaderGenerator <span class=\"title function_\">headerGenerator</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HeaderGenerator</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************** MyImportSelector.java *****************/</span></span><br><span class=\"line\"><span class=\"comment\">// 导入ImportSelector的接口实现类：MyImportSelector.class，这个类 implements ImportSelector，并实现了其中的selectImports方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportSelector</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;com.example.HeaderConfig&quot;</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>启动类前使用 <code>@EnableXxxx</code> 注解，该注解封装了 <code>@Import</code>。这种方式更方便和优雅，是 SpringBoot 中所采用的方式。只有第三方依赖提供者最清楚应该导入什么类。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启动类前使用 @EnableXxxx 注解</span></span><br><span class=\"line\"><span class=\"meta\">@EnableHeaderConfig</span> <span class=\"comment\">// 我们只需要加上这个注解就行，就不用记指定的类了</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringbootWebConfig2Application</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************** EnableHeaderConfig.java *****************/</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span> <span class=\"comment\">// 元注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target</span> (ElementType.TYPE)      <span class=\"comment\">// 元注解</span></span><br><span class=\"line\"><span class=\"meta\">@Import(MyImportSelector.class)</span> <span class=\"comment\">// 指定导入的配置类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableHeaderConfig &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**************** MyImportSelector.java *****************/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyImportSelector</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportSelector</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;<span class=\"string\">&quot;com.example.HeaderConfig&quot;</span>&#125;; <span class=\"comment\">// 第三方依赖开发者自己写的</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"源码浅析自动装配原理\"><a class=\"markdownIt-Anchor\" href=\"#源码浅析自动装配原理\"></a> 源码浅析自动装配原理</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202410182135988.webp\" alt=\"image.png\" /></p>\n<p>启动类/引导类注解 <code>@SpringBootApplication</code> 是 SpringBoot 项目的基石。它封装了以下注解：</p>\n<ul>\n<li><code>@SpringBootConfiguration</code>：\n<ul>\n<li>封装了 <code>@Configuration</code>，用于表明该类是配置类，允许在 Spring 上下文中注册额外的 bean 或导入其他配置类。</li>\n</ul>\n</li>\n<li><code>@ComponentScan</code>：组件扫描注解，默认扫描当前包及其子包</li>\n<li><code>@EnableAutoConfiguration</code>：开启自动装配功能，是 SpringBoot 实现<strong>自动配置的核心</strong>。封装了：\n<ul>\n<li><code>@AutoConfigurationPackage</code>。指定了默认的包规则。指定了默认的包规则就是将主程序类所在包及所有子包下的组件扫描到 Spring 容器中。以前我们直接使用 Spring 的时候，需要在 xml 中的 <code>context:component-scan</code> 中定义好 base-package，那么 Spring 在启动的时候，就会扫描该包下及其子包下被 <code>@Controller</code>、<code>@Service</code> 与 <code>@Component</code> 标注的类，并将这些类注入到容器中。<code>@AutoConfigurationPackage</code> 则会将被注解标注的类，即主配置类，将主配置类所在的包当作 base-package，而不用我们自己去手动配置了。这也就是为什么我们需要将主配置类放在项目的最外层目录中的原因。</li>\n<li><code>@Import(AutoConfigurationImportSelector.class)</code>。<code>AutoConfigurationImportSelector</code> 类中读取以下文本文件。但是文本文件标识的类只会根据需要（条件装配 <code>@Conditional</code>）进行加载。\n<ul>\n<li><code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>（2.7.0 之后的版本）</li>\n<li><code>META-INF/spring.factories</code>（老版本，目前的存在只为兼容）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>我们发现，文本文件 <code>META-INF/spring/xxx.imports</code> 中定义了许多许多的 Bean，但并不是所有的 Bean 都会注册到 IoC 容器。声明 <code>@Bean</code> 对象前，可以添加注解 <code>@Conditional</code>。<code>@Conditional</code> 按照一定的条件进行判断，在满足给定条件后才会注册对应的 bean 对象到 Spring IoC 容器中。作用在方法或类中。</p>\n<p><code>@Conditional</code> 本身是一个父注解，派生出大量的子注解。常用的有：</p>\n<ul>\n<li><code>@ConditionalOnClass</code>：判断环境中是否有对应字节码文件，才注册 bean 到 IoC 容器</li>\n<li><code>@ConditionalOnMissingBean</code>：判断环境中如果<strong>没有</strong>对应的 bean（类型 或 名称），才注册 bean 到 IoC 容器。主要用于声明默认 Bean 对象。指定类型（value 属性）或名称（name 属性）。</li>\n<li><code>@ConditionalOnProperty</code>：判断配置文件中有对应属性和值，才注册 bean 到 IoC 容器。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(name =&quot;io.jsonwebtoken.Jwts&quot;)</span><span class=\"comment\">//当前环境存在指定的这个类时，才声明该bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> HeaderParser <span class=\"title function_\">headerParser</span><span class=\"params\">()</span>&#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span> <span class=\"comment\">//当不存在当前类型的bean时，才声明该bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> HeaderParser <span class=\"title function_\">headerParser</span><span class=\"params\">()</span>&#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name =&quot;name&quot;,havingValue =&quot;itheima&quot;)</span><span class=\"comment\">//配置文件中存在对应的属性和值，才注册bean到IoC容器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> HeaderParser <span class=\"title function_\">headerParser</span><span class=\"params\">()</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"自定义-starter-示例\"><a class=\"markdownIt-Anchor\" href=\"#自定义-starter-示例\"></a> 自定义 Starter 示例</h1>\n<h2 id=\"starter\"><a class=\"markdownIt-Anchor\" href=\"#starter\"></a> Starter</h2>\n<p>起步依赖 Starter 的应用场景：</p>\n<ul>\n<li>在实际开发中，经常会定义一些公共组件，提供给各个项目团队使用。而在 SpringBoot 的项目中，一般会将这些公共组件封装为 SpringBoot 的 starter。</li>\n<li>开发 SDK，方便他人调用功能。使用 SDK 的开发人员只需要关心调用接口的方式和传递的参数。可以在 application.yml 中进行配置。</li>\n</ul>\n<p>命名规范：</p>\n<ol>\n<li>SpringBoot 官方提供的起步依赖，它的命名基本上就是 <code>spring-boot-...</code>\n<ul>\n<li>自动配置功能：<code>spring-boot-autoconfigure</code></li>\n<li>依赖管理功能：<code>spring-boot-starter-xxx</code></li>\n</ul>\n</li>\n<li>第三方提供的起步依赖命名规范：<code>功能-spring-boot-...</code>\n<ul>\n<li>自动配置功能：<code>xxx-spring-boot-autoconfigure</code></li>\n<li>依赖管理功能：<code>xxx-spring-boot-starter</code></li>\n</ul>\n</li>\n</ol>\n<p>上面两个关键的模块：<code>starter</code> 和 <code>autoconfigure</code></p>\n<ul>\n<li><code>starter</code> 模块进行依赖管理功能，里面没有任何 Java 代码，它的作用在于配置好 <code>pom.xml</code>。会将 <code>autoconfigure</code> 自动配置模块引入进来。</li>\n</ul>\n<h2 id=\"案例介绍\"><a class=\"markdownIt-Anchor\" href=\"#案例介绍\"></a> 案例介绍</h2>\n<p>本文演示的案例：</p>\n<ul>\n<li>需求：自定义 myrandom-spring-boot-starter，完成返回随机数工具类 <code>MyRamdomUtils</code> 的自动配置。我们通过编写配置文件指定随机数字符串的长度。</li>\n<li>目标：引入起步依赖之后，要想使用自己的工具类时，直接注入 <code>MyRamdomUtils</code> 使用即可</li>\n</ul>\n<p>在使用自定义 Starter 之前，我们使用自己的工具类是需要完成以下工作：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- pom.xml --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 需要引入大量的依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>ramdom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/************************* 定义参数配置类 *************************/</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &#x27;myrandom&#x27;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRamdomProperties</span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************************* 自己写一个工具类 *************************/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRamdomUtils</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MyRamdomProperties myRamdomProperties;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># application.yml</span></span><br><span class=\"line\"><span class=\"comment\"># 配置随机数工具类</span></span><br><span class=\"line\"><span class=\"attr\">myrandom:</span></span><br><span class=\"line\">\t<span class=\"attr\">length:</span> <span class=\"number\">5</span></span><br><span class=\"line\">\t\t<span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n<p>我们需要自己引入大量的依赖，还要定义参数配置类，并实现工具类。创建完自定义 Starter 后，我们只需注入 Bean 并配置即可。</p>\n<p>自定义 Starter 基本步骤：</p>\n<ul>\n<li>创建 <code>myrandom-spring-boot-starter</code> 模块，进行依赖管理功能。</li>\n<li>创建 <code>myrandom-spring-boot-autoconfigure</code> 模块，在 starter 中引入该模块，进行自动配置。</li>\n<li>在 <code>myrandom-spring-boot-autoconfigure</code> 模块中的定义自动配置功能，并定义自动配置文件 <code>META-INF/spring/xxx.imports</code>（新版本 SpringBoot）</li>\n</ul>\n<h2 id=\"创建-starter-模块\"><a class=\"markdownIt-Anchor\" href=\"#创建-starter-模块\"></a> 创建 starter 模块</h2>\n<p>在 IDEA 中创建新项目 demo-starter 空的工程：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240717152923.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>项目里面创建 starter 模块：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240717153350.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<blockquote>\n<p>如果 IDEA 没有识别为 Spring 项目，可以右键 <code>pom.xml</code> 选择 Add as Maven Project 选项即可。</p>\n</blockquote>\n<p>后续我们可以在 <code>pom.xml</code> 根据需要改低一下 springboot 的版本。</p>\n<p><code>pom.xml</code> 删除以下多于的信息，比如：</p>\n<ul>\n<li>指定正确的 SpringBoot 版本</li>\n<li>删去描述性的内容标签，比如 <code>&lt;name&gt;</code> <code>&lt;description&gt;</code></li>\n<li>删去不必要的测试依赖，保留基础的 spring-boot-starter 就行。</li>\n<li>删去不使用的插件</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>top.uuanqin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>myrandom-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    描述类信息删掉--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    &lt;name&gt;myrandom-spring-boot-starter&lt;/name&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    &lt;description&gt;myrandom-spring-boot-starter&lt;/description&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">licenses</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">license</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">licenses</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">developers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">developer</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">developers</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scm</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">connection</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">developerConnection</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tag</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">scm</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        单元测试不需要，可以直接删掉--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    插件不需要，可以直接删掉--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    &lt;build&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        &lt;plugins&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--            &lt;plugin&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--            &lt;/plugin&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        &lt;/plugins&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    &lt;/build&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后刷新并重新加载依赖。</p>\n<p>因为 starter 模块仅仅进行依赖管理，我们需要对模块进行规整和清理：</p>\n<ul>\n<li>对 starter 模块文件夹下只要保留 <code>pom.xml</code> 文件即可，其余文件如 <code>.mvn</code>、<code>src</code>、<code>mvnw</code> 等全部删除。（如果有 <code>.iml</code> IDEA 配置文件文件可视情况保留）</li>\n</ul>\n<h2 id=\"创建-autoconfigure-模块\"><a class=\"markdownIt-Anchor\" href=\"#创建-autoconfigure-模块\"></a> 创建 autoconfigure 模块</h2>\n<p>创建过程同上。<code>pom.xml</code> 规整过程同上（即删除描述类信息、测试依赖以及插件）。</p>\n<p>对于 autoconfigure 模块我们进行以下规整：除了保留 <code>pom.xml</code> 文件和 <code>.iml</code> 文件外，保留 <code>src</code> 文件夹用于存放编写的 Java 代码。<code>src</code> 文件夹需要删掉以下内容：</p>\n<ul>\n<li>删除启动类 <code>XXXSpringBootAutoconfigApplication</code>。作为第三方模块，我们不需要启动类。</li>\n<li>删除配置文件 <code>application.properties</code></li>\n<li>如果有的话，删除测试文件夹 <code>test.java</code> （不含）下的所有文件。</li>\n</ul>\n<h2 id=\"starter-模块引入-autoconfigure-模块\"><a class=\"markdownIt-Anchor\" href=\"#starter-模块引入-autoconfigure-模块\"></a> starter 模块引入 autoconfigure 模块</h2>\n<p>在 starter 模块引入 autoconfigure 模块三要素。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>top.uuanqin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>myrandom-spring-boot-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>刷新 Maven。</p>\n<h2 id=\"编写-autoconfigure-模块\"><a class=\"markdownIt-Anchor\" href=\"#编写-autoconfigure-模块\"></a> 编写 autoconfigure 模块</h2>\n<p>autoconfigure 模块的 <code>pom.xml</code> 引入生成随机数所需要的依赖。比如，我们使用了 Hutool 提供的 <code>RandomUtil.randomNumbers</code> 生成一个指定长度的随机数字字符串。</p>\n<blockquote>\n<p><a href=\"https://plus.hutool.cn/\">Hutool</a> 是一个小而全的 Java 工具类库，通过静态方法封装，降低相关 API 的学习成本，提高工作效率，使 Java 拥有函数式语言般的优雅，让 Java 语言也可以“甜甜的”。</p>\n</blockquote>\n<p>在 IDEA 创建模块的向导中，可以提前勾选依赖以自动引入 <code>spring-boot-configuration-processor</code>。<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240717183928.webp\" alt=\"image.png\" width=\"475px\" />或者自行在 <code>pom.xml</code> 中添加。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- pom.xml --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 需要引入的依赖 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  hutool工具包 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.hutool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hutool-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.8.26<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--  必要的依赖，用于写配置文件的依赖 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>定义参数配置类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义参数配置类</span></span><br><span class=\"line\"><span class=\"comment\">// 可以使用 Lombok 的 @Data 注解免去手写Getter和Setter  </span></span><br><span class=\"line\"><span class=\"comment\">// 去掉 @Component。因为如果定义 @Component，使用这个starter的项目的人需要知道这个包的位置，并通过@ComponentScan扫描注入Bean，这显然是不合理的。</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;myrandom&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRandomProperties</span> &#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> length;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getLength</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> length;  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setLength</span><span class=\"params\">(<span class=\"type\">int</span> length)</span> &#123;  </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.length = length;  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\"><code>@ConfigurationProperties</code> 注解</div>\n</div>\n<div class=\"callout-content\"><p>和配置文件（比如 <code>application.yml</code>）进行绑定，将配置文件中对应的配置映射到对象的属性中。在这里是把配置文件 <code>myrandom.lenth</code> 中的值映射到 <code>MyRandomProperties</code> 对象的 <code>length</code> 中。详见：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/9441906f/\"><span class=\"bilink-pop-up\">站内文章</span>SpringBoot 中的配置</a>。</p>\n</div></div><p>写自己的工具类，也就是我们要提供的服务：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自己写一个工具类</span></span><br><span class=\"line\"><span class=\"comment\">// 这里不需要 @Component。理由同上。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRandomUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyRandomProperties myRandomProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MyRandomProperties <span class=\"title function_\">getMyRandomProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myRandomProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMyRandomProperties</span><span class=\"params\">(MyRandomProperties myRandomProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.myRandomProperties = myRandomProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供给外部的函数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getRamdomNumber</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> RandomUtil.randomNumbers(myRandomProperties.getLength());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新增一个自动配置类：<code>MyRamdomAutoConfiguration</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">// 配置类</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(MyRandomProperties.class)</span> <span class=\"comment\">// 回忆，上面在MyRandomProperties类的定义中，它并不是一个Bean，此时通过本注解使其变为一个Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRamdomAutoConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回对象类型为MyRandomUtils。方法名随便定义。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> myRandomProperties</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     <span class=\"comment\">// 回忆：在第三方 bean 需要依赖其它 bean 对象，直接在 bean 定义方法中设置形参即可，容器会根据类型自动装配。</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"comment\">// 把MyRandomUtils声明为Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MyRandomUtils <span class=\"title function_\">myRandomUtils</span><span class=\"params\">(MyRandomProperties myRandomProperties)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">MyRandomUtils</span> <span class=\"variable\">myRandomUtils</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyRandomUtils</span>();</span><br><span class=\"line\">        myRandomUtils.setMyRandomProperties(myRandomProperties);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myRandomUtils;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\"><code>@Configuration</code> 注解</div>\n</div>\n<div class=\"callout-content\"><p>告诉 Spring Boot 这是一个配置类，可以在该类中创建 Bean。更多声明第三方 Bean 细节详看：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/66216cb4/\"><span class=\"bilink-pop-up\">站内文章</span>SpringBoot 中的 IoC &amp; DI 入门</a></p>\n</div></div><p>在 <code>resources</code> 目录下新建文件 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> ，文件中编写内容使得自动配置类 <code>MyRamdomAutoConfiguration</code> 能被 SpringBoot 加载。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top.uuanqin.MyRamdomAutoConfiguration</span><br></pre></td></tr></table></figure>\n<p>按顺序依次执行 Maven install 命令，将其安装为本地的依赖：</p>\n<ul>\n<li>Maven 中对 <code>myrandom-spring-boot-autoconfigure</code> 执行 install 命令</li>\n<li>Maven 中对 <code>myrandom-spring-boot-starter</code> 执行 install 命令</li>\n</ul>\n<h2 id=\"使用自定义-starter\"><a class=\"markdownIt-Anchor\" href=\"#使用自定义-starter\"></a> 使用自定义 Starter</h2>\n<p>在任何需要使用自己编写的 SDK 项目中引入一个 starter 依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>top.uuanqin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>myrandom-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># application.yml</span></span><br><span class=\"line\"><span class=\"attr\">myrandom:</span></span><br><span class=\"line\">  <span class=\"attr\">length:</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<p>Java 测试类中使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DemoInterfaceApplicationTests</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyRandomUtils myRandomUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UseUtils</span> <span class=\"variable\">useUtils</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UseUtils</span>();</span><br><span class=\"line\">        System.out.println(myRandomUtils.getRamdomNumber());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完成。</p>\n<h1 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h1>\n<p>上面介绍案例的步骤可能比较多，分的模块比较细。但开发 starter 可以很灵活，不一定非得建立两个模块，也不一定非得全部建立案例中三个类，可以杂合在一起，跑通就行。</p>\n<p>后续任务：</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\"> 完成将自己的模块发布到 Maven 仓库</li>\n</ul>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1m84y1w7Tb?p=187\">Day14-05. SpringBoot原理-起步依赖_哔哩哔哩_bilibili</a></li>\n<li><a href=\"https://yuyuanweb.feishu.cn/wiki/T4XgwM2Ynib71TkeGS5cXA0pn4e\">知识星球·编程导航 - API 开放平台</a></li>\n<li><a href=\"https://blog.csdn.net/Yang_Cpp/article/details/113486392\">Maven：IDEA 将普通模块转换为maven模块_maven项目子模块怎么标为maven-CSDN博客</a></li>\n<li><a href=\"https://doc.hutool.cn/pages/index/\">简介 | Hutool</a></li>\n<li><a href=\"https://docs.spring.io/spring-boot/docs/2.7.5/reference/html/configuration-metadata.html#appendix.configuration-metadata.annotation-processor\">Configuration Metadata (spring.io)</a></li>\n<li><a href=\"https://blog.csdn.net/qq_44887733/article/details/117450788\">Autowired must be defined in Spring bean @Component/@Service_autowired members must be defined in valid spring -CSDN博客</a></li>\n<li><a href=\"https://javaguide.cn/system-design/framework/spring/spring-common-annotations.html#_1-springbootapplication\">Spring&amp;SpringBoot常用注解总结 | JavaGuide</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&amp;mid=2247530836&amp;idx=1&amp;sn=2ed9f251e8ff211d7e1c2455e636d1ae&amp;chksm=e9c29ea3deb517b58bd0643ce5c1da63516a1a5de60b4cd2448cce4c41d67d281f4c85d1a67e&amp;token=720877586&amp;lang=zh_CN#rd\">老弟竟然写了个库，牛x轰轰朝我炫耀！ (qq.com)</a></li>\n</ul>\n","raw":"---\ntitle: SpringBoot 的原理以及写一个自定义 Starter\ntags:\n  - Java\n  - SpringBoot\n  - Spring\n  - starter\n  - SDK\n  - maven\n  - Hutool\ncover: 'https://cdn.gallery.uuanqin.top/img/20240717190725.webp'\ndescription: 记录开发简易 Starter 的基本步骤\nabbrlink: 21b7da2d\ncategories:\n  - 技术学习\ndate: 2024-07-16 21:25:56\ntop_img:\n---\n\n# Spring 与 SpringBoot\n\nSpring 发展到今天已经形成了一种开发生态圈，Spring 提供了若干个子项目，每个项目用于完成特定的功能。\n\nSpring 和 SpringBoot：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240503235738.webp)\n\nSpring Boot 可以帮助我们非常快速的构建应用程序、**简化开发**、提高效率。SpringBoot 简化配置，本质还是 Spring，**SpringBoot 不能替代 Spring**。官方推荐的学习路径可以从 SpringBoot 开始。\n\nSpringBoot 使用简单快捷的原因是因为底层提供了：\n\n- 起步依赖：简化 `pom.xml` 的配置\n- 自动配置：简化 bean 的声明以及配置\n\n> 当我们提到 SpringBoot 的原理时，就指的是起步依赖和自动配置的原理。在面试中，如果问 SpringBoot 原理，就是在着重问你自动配置的原理（面试高频）。\n\n# SpringBoot 的原理\n\n## 起步依赖（Starters）\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/20240716220724.webp)\n\n利用 **Maven 的依赖传递**，我们可以直接简单引用起步依赖即可自动引用常见依赖：\n\n- `spring-boot-starter-web`：包含了 web 应用开发所需要的常见依赖。内嵌有 Tomcat。\n- `spring-boot-starter-test`：包含了单元测试所需要的常见依赖。\n- `spring-boot-starter-aop`：AOP 起步依赖\n\n起步依赖的版本号都在父工程中指定（在 `pom.xml` 中被 `<parent>` 标签括住的内容）。\n\n> Maven 的依赖传递示意：![image.png|500](https://cdn.gallery.uuanqin.top/img/20240503232439.webp)\n\n## 自动配置\n\nSpringBoot 的自动配置就是当 spring 容器启动后，一些配置类、bean 对象就自动存入到了 IoC 容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。\n\nIDEA 中查看所有 Bean 对象示例：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240716221306.webp)\n\n### 自动配置方式示例\n\n1. 在启动类前加上 `@ComponentScan` 指定扫描的范围\n```java\n// 方式一：在启动类前加上 @ComponentScan 指定扫描的范围\n// 这样我们自己定义的 Bean 就能使用\n// 缺点：按照这种方式的话，每使用一个第三方依赖，就要指定扫描的包。导致使用繁琐，大面积扫描导致性能低。\n@ComponentScan({\"com.example\",\"top.uuanqin\"})\n@SpringBootApplication\npublic class SpringbootWebConfig2Application {}\n```\n2. 启动类前加上 `@Import` 导入\n```java\n// 方式二：启动类前加上@Import导入。\n// 使用 @Import 导入的类会被 Spring 加载到IoC容器中。\n// 导入形式可以是普通类、配置类、ImportSelector的接口实现类\n@Import({TokenParser.class, HeaderConfig.class}) // 或者 @Import({MyImportSelector.class})\n@SpringBootApplication\npublic class SpringbootWebConfig2Application {}\n\n/**************** TokenParser.java *****************/\n// 导入普通类：TokenParser.class，TokenParser定义时不需要加任何注解。\n@Component // 此注解可有可无\npublic class TokenParser {\n\tpublic void parse(){\n\t\tSystem.out.println(\"TokenParser ... parse ...\");\n\t}\n}\n\n/**************** HeaderConfig.java *****************/\n// 导入配置类：HeaderConfig.class，相关注解：@Configuration @Bean\n@Configuration\npublic class HeaderConfig{\n\t@Bean\n\tpublic HeaderParser headerParser(){\n\t\treturn new HeaderParser();\n\t}\n\t\n\t@Bean\n\tpublic HeaderGenerator headerGenerator(){\n\t\treturn new HeaderGenerator();\n\t}\n}\n\n/**************** MyImportSelector.java *****************/\n// 导入ImportSelector的接口实现类：MyImportSelector.class，这个类 implements ImportSelector，并实现了其中的selectImports方法\npublic class MyImportSelector implements ImportSelector{\n\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata){\n\treturn new String[]{\"com.example.HeaderConfig\"};\n}\n```\n3. 启动类前使用 `@EnableXxxx` 注解，该注解封装了 `@Import`。这种方式更方便和优雅，是 SpringBoot 中所采用的方式。只有第三方依赖提供者最清楚应该导入什么类。\n```java\n// 启动类前使用 @EnableXxxx 注解\n@EnableHeaderConfig // 我们只需要加上这个注解就行，就不用记指定的类了\n@SpringBootApplication\npublic class SpringbootWebConfig2Application {}\n\n/**************** EnableHeaderConfig.java *****************/\n@Retention(RetentionPolicy.RUNTIME) // 元注解\n@Target (ElementType.TYPE)      // 元注解\n@Import(MyImportSelector.class) // 指定导入的配置类\npublic @interface EnableHeaderConfig {}\n\n\n/**************** MyImportSelector.java *****************/\npublic class MyImportSelector implements ImportSelector{\n\tpublic String[] selectImports(AnnotationMetadata importingClassMetadata){\n\treturn new String[]{\"com.example.HeaderConfig\"}; // 第三方依赖开发者自己写的\n}\n```\n\n### 源码浅析自动装配原理\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202410182135988.webp)\n\n启动类/引导类注解 `@SpringBootApplication` 是 SpringBoot 项目的基石。它封装了以下注解：\n\n- `@SpringBootConfiguration`：\n\t- 封装了 `@Configuration`，用于表明该类是配置类，允许在 Spring 上下文中注册额外的 bean 或导入其他配置类。\n- `@ComponentScan`：组件扫描注解，默认扫描当前包及其子包\n- `@EnableAutoConfiguration`：开启自动装配功能，是 SpringBoot 实现**自动配置的核心**。封装了：\n\t- `@AutoConfigurationPackage`。指定了默认的包规则。指定了默认的包规则就是将主程序类所在包及所有子包下的组件扫描到 Spring 容器中。以前我们直接使用 Spring 的时候，需要在 xml 中的 `context:component-scan` 中定义好 base-package，那么 Spring 在启动的时候，就会扫描该包下及其子包下被 `@Controller`、`@Service` 与 `@Component` 标注的类，并将这些类注入到容器中。`@AutoConfigurationPackage` 则会将被注解标注的类，即主配置类，将主配置类所在的包当作 base-package，而不用我们自己去手动配置了。这也就是为什么我们需要将主配置类放在项目的最外层目录中的原因。\n\t- `@Import(AutoConfigurationImportSelector.class)`。`AutoConfigurationImportSelector` 类中读取以下文本文件。但是文本文件标识的类只会根据需要（条件装配 `@Conditional`）进行加载。\n\t\t- `META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports`（2.7.0 之后的版本）\n\t\t- `META-INF/spring.factories`（老版本，目前的存在只为兼容）\n\n我们发现，文本文件 `META-INF/spring/xxx.imports` 中定义了许多许多的 Bean，但并不是所有的 Bean 都会注册到 IoC 容器。声明 `@Bean` 对象前，可以添加注解 `@Conditional`。`@Conditional` 按照一定的条件进行判断，在满足给定条件后才会注册对应的 bean 对象到 Spring IoC 容器中。作用在方法或类中。\n\n`@Conditional` 本身是一个父注解，派生出大量的子注解。常用的有：\n\n- `@ConditionalOnClass`：判断环境中是否有对应字节码文件，才注册 bean 到 IoC 容器\n- `@ConditionalOnMissingBean`：判断环境中如果**没有**对应的 bean（类型 或 名称），才注册 bean 到 IoC 容器。主要用于声明默认 Bean 对象。指定类型（value 属性）或名称（name 属性）。\n- `@ConditionalOnProperty`：判断配置文件中有对应属性和值，才注册 bean 到 IoC 容器。\n\n```java\n@Bean\n@ConditionalOnClass(name =\"io.jsonwebtoken.Jwts\")//当前环境存在指定的这个类时，才声明该bean\npublic HeaderParser headerParser(){...}\n\n@Bean\n@ConditionalOnMissingBean //当不存在当前类型的bean时，才声明该bean\npublic HeaderParser headerParser(){...}\n\n@Bean\n@ConditionalOnProperty(name =\"name\",havingValue =\"itheima\")//配置文件中存在对应的属性和值，才注册bean到IoC容器\npublic HeaderParser headerParser(){...}\n```\n\n\n# 自定义 Starter 示例\n\n## Starter\n\n起步依赖 Starter 的应用场景：\n\n- 在实际开发中，经常会定义一些公共组件，提供给各个项目团队使用。而在 SpringBoot 的项目中，一般会将这些公共组件封装为 SpringBoot 的 starter。\n- 开发 SDK，方便他人调用功能。使用 SDK 的开发人员只需要关心调用接口的方式和传递的参数。可以在 application.yml 中进行配置。\n\n命名规范：\n\n1. SpringBoot 官方提供的起步依赖，它的命名基本上就是 `spring-boot-...`\n\t- 自动配置功能：`spring-boot-autoconfigure`\n\t- 依赖管理功能：`spring-boot-starter-xxx`\n2. 第三方提供的起步依赖命名规范：`功能-spring-boot-...`\n\t- 自动配置功能：`xxx-spring-boot-autoconfigure`\n\t- 依赖管理功能：`xxx-spring-boot-starter`\n\n上面两个关键的模块：`starter` 和 `autoconfigure`\n\n- `starter` 模块进行依赖管理功能，里面没有任何 Java 代码，它的作用在于配置好 `pom.xml`。会将 `autoconfigure` 自动配置模块引入进来。\n\n## 案例介绍\n\n本文演示的案例：\n\n- 需求：自定义 myrandom-spring-boot-starter，完成返回随机数工具类 `MyRamdomUtils` 的自动配置。我们通过编写配置文件指定随机数字符串的长度。\n- 目标：引入起步依赖之后，要想使用自己的工具类时，直接注入 `MyRamdomUtils` 使用即可\n\n在使用自定义 Starter 之前，我们使用自己的工具类是需要完成以下工作：\n\n```xml\n<!-- pom.xml -->\n<!-- 需要引入大量的依赖 -->\n<dependency>\n\t<groupId>com.example</groupId>\n\t<artifactId>ramdom</artifactId>\n\t<version>1.0.0</version>\n</dependency>\n...\n<dependency>\n\t...\n</dependency>\n```\n```java\n/************************* 定义参数配置类 *************************/\n@Data\n@Component\n@ConfigurationProperties(prefix = 'myrandom')\npublic class MyRamdomProperties{\n\t...\n}\n\n/************************* 自己写一个工具类 *************************/\n@Component\npublic class MyRamdomUtils{\n\t@Autowired\n\tprivate MyRamdomProperties myRamdomProperties;\n\t...\n}\n```\n```yaml\n# application.yml\n# 配置随机数工具类\nmyrandom:\n\tlength: 5\n\t\t...\n```\n\n我们需要自己引入大量的依赖，还要定义参数配置类，并实现工具类。创建完自定义 Starter 后，我们只需注入 Bean 并配置即可。\n\n自定义 Starter 基本步骤：\n\n- 创建 `myrandom-spring-boot-starter` 模块，进行依赖管理功能。\n- 创建 `myrandom-spring-boot-autoconfigure` 模块，在 starter 中引入该模块，进行自动配置。\n- 在 `myrandom-spring-boot-autoconfigure` 模块中的定义自动配置功能，并定义自动配置文件 `META-INF/spring/xxx.imports`（新版本 SpringBoot）\n\n## 创建 starter 模块\n\n在 IDEA 中创建新项目 demo-starter 空的工程：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240717152923.webp)\n\n项目里面创建 starter 模块：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240717153350.webp)\n\n> 如果 IDEA 没有识别为 Spring 项目，可以右键 `pom.xml` 选择 Add as Maven Project 选项即可。\n\n后续我们可以在 `pom.xml` 根据需要改低一下 springboot 的版本。\n\n`pom.xml` 删除以下多于的信息，比如：\n\n- 指定正确的 SpringBoot 版本\n- 删去描述性的内容标签，比如 `<name>` `<description>`\n- 删去不必要的测试依赖，保留基础的 spring-boot-starter 就行。\n- 删去不使用的插件\n\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.7.5</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>top.uuanqin</groupId>\n    <artifactId>myrandom-spring-boot-starter</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n<!--    描述类信息删掉-->\n<!--    <name>myrandom-spring-boot-starter</name>-->\n<!--    <description>myrandom-spring-boot-starter</description>-->\n    <url/>\n    <licenses>\n        <license/>\n    </licenses>\n    <developers>\n        <developer/>\n    </developers>\n    <scm>\n        <connection/>\n        <developerConnection/>\n        <tag/>\n        <url/>\n    </scm>\n    <properties>\n        <java.version>17</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n<!--        单元测试不需要，可以直接删掉-->\n<!--        <dependency>-->\n<!--            <groupId>org.springframework.boot</groupId>-->\n<!--            <artifactId>spring-boot-starter-test</artifactId>-->\n<!--            <scope>test</scope>-->\n<!--        </dependency>-->\n    </dependencies>\n<!--    插件不需要，可以直接删掉-->\n<!--    <build>-->\n<!--        <plugins>-->\n<!--            <plugin>-->\n<!--                <groupId>org.springframework.boot</groupId>-->\n<!--                <artifactId>spring-boot-maven-plugin</artifactId>-->\n<!--            </plugin>-->\n<!--        </plugins>-->\n<!--    </build>-->\n\n</project>\n```\n\n然后刷新并重新加载依赖。\n\n因为 starter 模块仅仅进行依赖管理，我们需要对模块进行规整和清理：\n\n- 对 starter 模块文件夹下只要保留 `pom.xml` 文件即可，其余文件如 `.mvn`、`src`、`mvnw` 等全部删除。（如果有 `.iml` IDEA 配置文件文件可视情况保留）\n\n## 创建 autoconfigure 模块\n\n创建过程同上。`pom.xml` 规整过程同上（即删除描述类信息、测试依赖以及插件）。\n\n对于 autoconfigure 模块我们进行以下规整：除了保留 `pom.xml` 文件和 `.iml` 文件外，保留 `src` 文件夹用于存放编写的 Java 代码。`src` 文件夹需要删掉以下内容：\n\n- 删除启动类 `XXXSpringBootAutoconfigApplication`。作为第三方模块，我们不需要启动类。\n- 删除配置文件 `application.properties`\n- 如果有的话，删除测试文件夹 `test.java` （不含）下的所有文件。\n\n## starter 模块引入 autoconfigure 模块\n\n在 starter 模块引入 autoconfigure 模块三要素。\n\n```xml\n<dependency>\n\t<groupId>top.uuanqin</groupId>\n\t<artifactId>myrandom-spring-boot-autoconfigure</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n</dependency>\n```\n\n刷新 Maven。\n\n## 编写 autoconfigure 模块\n\nautoconfigure 模块的 `pom.xml` 引入生成随机数所需要的依赖。比如，我们使用了 Hutool 提供的 `RandomUtil.randomNumbers` 生成一个指定长度的随机数字字符串。\n\n> [Hutool](https://plus.hutool.cn/) 是一个小而全的 Java 工具类库，通过静态方法封装，降低相关 API 的学习成本，提高工作效率，使 Java 拥有函数式语言般的优雅，让 Java 语言也可以“甜甜的”。\n\n在 IDEA 创建模块的向导中，可以提前勾选依赖以自动引入 `spring-boot-configuration-processor`。![image.png|475](https://cdn.gallery.uuanqin.top/img/20240717183928.webp)或者自行在 `pom.xml` 中添加。\n\n```xml\n<!-- pom.xml -->\n<!-- 需要引入的依赖 -->\n\n<!--  hutool工具包 -->\n<dependency>\n    <groupId>cn.hutool</groupId>\n    <artifactId>hutool-all</artifactId>\n    <version>5.8.26</version>\n</dependency>\n\n<!--  必要的依赖，用于写配置文件的依赖 -->\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-configuration-processor</artifactId>\n\t<optional>true</optional>\n</dependency>\n...\n<dependency>\n\t...\n</dependency>\n```\n\n定义参数配置类：\n\n```java\n// 定义参数配置类\n// 可以使用 Lombok 的 @Data 注解免去手写Getter和Setter  \n// 去掉 @Component。因为如果定义 @Component，使用这个starter的项目的人需要知道这个包的位置，并通过@ComponentScan扫描注入Bean，这显然是不合理的。\n@ConfigurationProperties(prefix = \"myrandom\")  \npublic class MyRandomProperties {  \n\tprivate int length;  \n\t  \n\tpublic int getLength() {  \n\t\treturn length;  \n\t}  \n\t  \n\tpublic void setLength(int length) {  \n\t\tthis.length = length;  \n\t}  \n}\n\n```\n\n> [!hint] `@ConfigurationProperties` 注解\n> 和配置文件（比如 `application.yml`）进行绑定，将配置文件中对应的配置映射到对象的属性中。在这里是把配置文件 `myrandom.lenth` 中的值映射到 `MyRandomProperties` 对象的 `length` 中。详见：[[SpringBoot 中的配置]]。\n\n写自己的工具类，也就是我们要提供的服务：\n\n```java\n// 自己写一个工具类\n// 这里不需要 @Component。理由同上。\npublic class MyRandomUtils {\n\n    private MyRandomProperties myRandomProperties;\n\n    public MyRandomProperties getMyRandomProperties() {\n        return myRandomProperties;\n    }\n\n    public void setMyRandomProperties(MyRandomProperties myRandomProperties) {\n        this.myRandomProperties = myRandomProperties;\n    }\n\n\n    /**\n     * 提供给外部的函数\n     * @return\n     */\n    public String getRamdomNumber(){\n        return RandomUtil.randomNumbers(myRandomProperties.getLength());\n    }\n\n}\n```\n\n新增一个自动配置类：`MyRamdomAutoConfiguration`\n\n```java\n@Configuration // 配置类\n@EnableConfigurationProperties(MyRandomProperties.class) // 回忆，上面在MyRandomProperties类的定义中，它并不是一个Bean，此时通过本注解使其变为一个Bean\npublic class MyRamdomAutoConfiguration {\n\n    /**\n     * 返回对象类型为MyRandomUtils。方法名随便定义。\n     * @param myRandomProperties\n     * @return\n     */\n     // 回忆：在第三方 bean 需要依赖其它 bean 对象，直接在 bean 定义方法中设置形参即可，容器会根据类型自动装配。\n    @Bean // 把MyRandomUtils声明为Bean\n    public MyRandomUtils myRandomUtils(MyRandomProperties myRandomProperties){\n        MyRandomUtils myRandomUtils = new MyRandomUtils();\n        myRandomUtils.setMyRandomProperties(myRandomProperties);\n        return myRandomUtils;\n    }\n}\n```\n\n> [!hint] `@Configuration` 注解\n> 告诉 Spring Boot 这是一个配置类，可以在该类中创建 Bean。更多声明第三方 Bean 细节详看：[[SpringBoot 中的 IoC & DI 入门]]\n\n在 `resources` 目录下新建文件 `META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports` ，文件中编写内容使得自动配置类 `MyRamdomAutoConfiguration` 能被 SpringBoot 加载。\n\n```text\ntop.uuanqin.MyRamdomAutoConfiguration\n```\n\n按顺序依次执行 Maven install 命令，将其安装为本地的依赖：\n\n- Maven 中对 `myrandom-spring-boot-autoconfigure` 执行 install 命令\n- Maven 中对 `myrandom-spring-boot-starter` 执行 install 命令\n\n## 使用自定义 Starter\n\n在任何需要使用自己编写的 SDK 项目中引入一个 starter 依赖：\n\n```xml\n<dependency>\n\t<groupId>top.uuanqin</groupId>\n\t<artifactId>myrandom-spring-boot-starter</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n</dependency>\n```\n\n配置文件：\n\n```yaml\n# application.yml\nmyrandom:\n  length: 5\n```\n\nJava 测试类中使用：\n\n```java\n@SpringBootTest\nclass DemoInterfaceApplicationTests {\n    @Resource\n    private MyRandomUtils myRandomUtils;\n\n    @Test\n    void contextLoads() {\n        UseUtils useUtils = new UseUtils();\n        System.out.println(myRandomUtils.getRamdomNumber());\n    }\n}\n```\n\n完成。\n\n# 后记\n\n上面介绍案例的步骤可能比较多，分的模块比较细。但开发 starter 可以很灵活，不一定非得建立两个模块，也不一定非得全部建立案例中三个类，可以杂合在一起，跑通就行。\n\n后续任务：\n\n- [ ] 完成将自己的模块发布到 Maven 仓库\n\n\n# 本文参考\n- [Day14-05. SpringBoot原理-起步依赖_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1m84y1w7Tb?p=187)\n- [知识星球·编程导航 - API 开放平台](https://yuyuanweb.feishu.cn/wiki/T4XgwM2Ynib71TkeGS5cXA0pn4e)\n- [Maven：IDEA 将普通模块转换为maven模块_maven项目子模块怎么标为maven-CSDN博客](https://blog.csdn.net/Yang_Cpp/article/details/113486392)\n- [简介 | Hutool](https://doc.hutool.cn/pages/index/)\n- [Configuration Metadata (spring.io)](https://docs.spring.io/spring-boot/docs/2.7.5/reference/html/configuration-metadata.html#appendix.configuration-metadata.annotation-processor)\n- [Autowired must be defined in Spring bean @Component/@Service_autowired members must be defined in valid spring -CSDN博客](https://blog.csdn.net/qq_44887733/article/details/117450788)\n- [Spring&SpringBoot常用注解总结 | JavaGuide](https://javaguide.cn/system-design/framework/spring/spring-common-annotations.html#_1-springbootapplication)\n- [老弟竟然写了个库，牛x轰轰朝我炫耀！ (qq.com)](https://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&mid=2247530836&idx=1&sn=2ed9f251e8ff211d7e1c2455e636d1ae&chksm=e9c29ea3deb517b58bd0643ce5c1da63516a1a5de60b4cd2448cce4c41d67d281f4c85d1a67e&token=720877586&lang=zh_CN#rd)\n","categories":[{"name":"技术学习","api":"api/categories/技术学习.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"SpringBoot","api":"api/tags/SpringBoot.json"},{"name":"Spring","api":"api/tags/Spring.json"},{"name":"starter","api":"api/tags/starter.json"},{"name":"SDK","api":"api/tags/SDK.json"},{"name":"maven","api":"api/tags/maven.json"},{"name":"Hutool","api":"api/tags/Hutool.json"}]},"api":"api/posts/p/21b7da2d.json"}