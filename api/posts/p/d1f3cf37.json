{"data":{"title":"CSAPP LAB-2 二进制炸弹实验","slug":"CSAPP LABS/CSAPP LAB-2 二进制炸弹实验","description":"该补的地方还是得补","date":"2024-05-22T12:00:46.000Z","updated":"2024-09-04T15:47:29.722Z","language":"zh-CN","comments":true,"url":"p/d1f3cf37/","cover":"https://cdn.gallery.uuanqin.top/img/20240522192911.webp","images":[],"content":"<blockquote>\n<p>死去的炸弹又来攻击我！！😅😅😅</p>\n</blockquote>\n<p>Computer Systems. A Programmer’s Perspective，CS: APP——中文译名《深入理解计算机系统》，是本科时候的必选课，研究生阶段选修了这门课，相当于重新再学一遍。本科学这门课时正值疫情，在加里敦~~（家里蹲）~~大学上了一个学期，当时太迷茫了，啥也不会，整个课上得懵懵懂懂。估计那时的炸弹也是看着网上的教程东抄抄西补补勉强弄出来的。</p>\n<p>现在研究生了，该补的地方还是得补。不管有多忙，我决定沉下心来重看《CSAPP》，炸弹客实验也打算亲自做做。最终还是做出来了😎，耗时 2 天。难度怎么说——还算适中吧，如果你仔细看过课本就不难。</p>\n<p>目前基本的 6 层炸弹已经拆除，还有一层隐藏层有时间再研究。由于每个人收到的炸弹是不同的（你的老师会说根据你的学号选择相应的炸弹），所以文章仅提供基本思路供参考。</p>\n\n<div class=\"callout\" data-callout=\"notice\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">CSAPP LAB 实验</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ul>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/c5970284/\"><span class=\"yukari\">站内文章</span>CSAPP LAB-1 位操作</a></li>\n<li>CSAPP LAB-2 二进制炸弹实验（本文）</li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/67787353/\"><span class=\"yukari\">站内文章</span>CSAPP LAB-3 缓冲区溢出炸弹</a></li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/9d6b717/\"><span class=\"yukari\">站内文章</span>CSAPP LAB-4 代码优化</a></li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/3eb1abc7/\"><span class=\"yukari\">站内文章</span>CSAPP LAB-5 手写动态存储分配器</a></li>\n</ul>\n</div></div><h1 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\"></a> 实验介绍</h1>\n<p>二进制炸弹包含若干个阶段，每个阶段需要输入特定的字符串，所有输入正确则炸弹被排除，否则……</p>\n<p>我们的任务是找出这些字符串字符串记录到文件中，可输入命令验证 <code>./bomb  solution.txt</code> 用换行区别不同阶段的字符串。</p>\n<p>下载压缩包 bombs，压缩包包含多个 <code>bomb</code> 代码包，根据学号领取自己的代码包。</p>\n<p>查看 <code>bomb.c</code> 可知程序利用 <code>phase_*</code> 函数（<code>*</code> 为 1~6） 检查输入字符串是否合法，不合法就引爆炸弹。我们的任务就是逆向出每个 phase 的检查规则，构造出合法字符串。当然，<code>bomb.c</code> 没有给出 <code>phase_*</code> 的源码</p>\n<p>逆向方法：</p>\n<ul>\n<li>GDB</li>\n<li>直接反汇编</li>\n</ul>\n<p>课本参考：</p>\n<ul>\n<li>CSAPP 第三章：GDB 的使用</li>\n<li>CSAPP 第三章：过程</li>\n</ul>\n<p>链接参考（喜报：全是 English）：</p>\n<ul>\n<li>GDB：\n<ul>\n<li><a href=\"https://heather.cs.ucdavis.edu/matloff/public_html/UnixAndC/CLanguage/Debug.html\">Guide to Faster, Less Frustrating Debugging (ucdavis.edu)</a></li>\n<li><a href=\"https://www.gnu.org/software/gdb/\">GDB: The GNU Project Debugger</a></li>\n</ul>\n</li>\n<li>X86 指令手册：<a href=\"http://csapp.cs.cmu.edu/public/students.html\">CS:APP2e, Bryant and O’Hallaron (cmu.edu)</a></li>\n<li>GNU 汇编语法参考：\n<ul>\n<li>Wiki 简明介绍：<a href=\"https://en.wikibooks.org/wiki/X86_Assembly/GNU_assembly_syntax\">x86 Assembly/GNU assembly syntax - Wikibooks</a></li>\n<li>手册：<a href=\"https://sourceware.org/binutils/docs/as/\">Top (Using as) (sourceware.org)</a></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>汇编语法看课本就行，GDB 命令看本文后续章节就行。以上链接你可以一个都不用点开。</p>\n</blockquote>\n<h1 id=\"gdb-工具的使用\"><a class=\"markdownIt-Anchor\" href=\"#gdb-工具的使用\"></a> GDB 工具的使用</h1>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install gdb <span class=\"comment\"># 安装 GDB</span></span><br><span class=\"line\">gdb --version   <span class=\"comment\"># 检查是否安装成功</span></span><br></pre></td></tr></table></figure>\n<p>GDB 不需要了解过多，想干什么直接查就行。现用现学。</p>\n<p>你可能用到的命令只有这些：</p>\n<ul>\n<li><code>run</code>：运行 GDB</li>\n<li><code>continue</code>：继续运行，可简写为 <code>c</code>。</li>\n<li><code>break &lt;addr&gt;</code>：在指定地址处设置断点。<code>break</code> 可简写为 <code>b</code>。</li>\n<li><code>print $eax</code>：打印某个寄存器的值。<code>print</code> 可简写为 <code>p</code>。</li>\n<li><code>p /x ($esp-0x8)</code>：打印某个寄存器的值的运算结果</li>\n<li><code>print (char *) &lt;addr&gt;</code> ：将直接打印该地址 <code>addr</code> 下的字符串</li>\n<li><code>print /x * &lt;addr&gt;</code> ：以十六进制的形式打印指定地址 <code>addr</code> 的值</li>\n<li><code>print ((int*) &lt;addr&gt;)[&lt;index&gt;]</code> ：打印指定位置 <code>addr</code> 数组下标为 <code>index</code> 的元素</li>\n<li><code>print ((int*) &lt;addr&gt;)[&lt;index&gt;]@&lt;num&gt;</code> ：打印指定位置数组的元素，起始坐标为 <code>index</code>，输出 <code>num</code> 个元素</li>\n</ul>\n<p>截一张课本的图供更多参考：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240519124236.webp\" alt=\"image.png\" /></p>\n<h1 id=\"开始拆弹\"><a class=\"markdownIt-Anchor\" href=\"#开始拆弹\"></a> 开始拆弹！</h1>\n<h2 id=\"拆弹准备\"><a class=\"markdownIt-Anchor\" href=\"#拆弹准备\"></a> 拆弹准备</h2>\n<p>在 Linux 环境下解压 bomb 压缩文件。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf bomb7.tar</span><br></pre></td></tr></table></figure>\n<p>得到如下文件：</p>\n<ul>\n<li><code>bomb</code>：二进制可执行文件，任务目标文件</li>\n<li><code>bomb.c</code>：<code>bomb</code> 的源文件，辅助理解 <code>bomb</code> 代码</li>\n</ul>\n<p>首先使用 <code>objdump</code> 反汇编工具对 <code>bomb</code> 进行反汇编，输出的汇编文件名为 <code>dump.s</code>：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objdump -d bomb &gt; dump.s</span><br></pre></td></tr></table></figure>\n<p><code>bomb.c</code> 是 <code>bomb</code> 的部分源文件，包含主函数 <code>main</code>。通读 <code>main</code> 函数以及注释，我们知道：</p>\n<ol>\n<li>运行 <code>bomb</code> 时如果不带参数，我们将在标准输入中输入拆弹的字符串。</li>\n<li>运行 <code>bomb</code> 时如果携带一个参数，则先从指定的文件中读取字符串</li>\n<li>运行 <code>bomb</code> 时如果携带多于一个参数，则输出提示：<code>bomb [&lt;input_file&gt;]</code></li>\n<li>一共有 6 层炸弹，每一层通过输入一行字符串以进行拆弹</li>\n<li>炸弹爆炸后不会有任何人受到伤害</li>\n<li>可能存在隐藏关卡</li>\n</ol>\n<p>此外，我们可以在炸弹运行时 <kbd>Ctrl</kbd>+<kbd>C</kbd> 中止拆弹，邪恶博士😈（Dr. Evil）最终还是会放我们走的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^CSo you think you can stop the bomb with ctrl-c, do you?</span><br><span class=\"line\">Well...OK. :-)</span><br></pre></td></tr></table></figure>\n<p>新建文件 <code>solution.txt</code>，之后我们可以直接在里面写字符串答案（每行按序写上各层答案），从而不用手动输入字符串。</p>\n<p><code>bomb.c</code> 看完后，它的作用基本结束了。后面我们的时间将会花在人工解读 <code>dump.s</code> 文件以及使用 gdb 调试工具的过程中。</p>\n<p><code>dump.s</code> 文件阅读要点：</p>\n<ol>\n<li>不需要看懂所有汇编代码（实际上也不可能），只需看懂关键函数部分的代码。</li>\n<li>关键函数：各层炸弹函数 <code>&lt;phase_X&gt;</code>，中间穿插的函数 <code>&lt;funcX&gt;</code>。为了便于自己的理解，有时候你也可以看一些工具类的函数，比如 <code>&lt;read_six_numbers&gt;</code> <code>&lt;strings_not_equal&gt;</code> 等，但这些函数看名字就知道其作用。</li>\n<li>当运行到 <code>&lt;explode_bomb&gt;</code> 时炸弹爆炸，当该层函数安全结束返回到 main 运行 <code>&lt;phase_defused&gt;</code> 时该层炸弹安全破解。</li>\n<li>多注释和分行便于阅读</li>\n</ol>\n<p>在破解某一层炸弹是，我们可以先随便输几个数，通过 GDB 工具推测我们的输入存放在栈中的哪个位置，这样也能方便推理。</p>\n<h2 id=\"phase-1-寻找字符串\"><a class=\"markdownIt-Anchor\" href=\"#phase-1-寻找字符串\"></a> Phase 1 - 寻找字符串</h2>\n<blockquote>\n<p>asm 代码阅读提示：左侧为程序地址与指令字节码，右侧为反汇编后得到的汇编代码。注释使用 <code>;</code> 以及 <code>#</code>。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08048b80 &lt;phase_1&gt;:</span><br><span class=\"line\"> 8048b80:\t55                   \tpush   %ebp</span><br><span class=\"line\"> 8048b81:\t89 e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> 8048b83:\t83 ec 08             \tsub    $0x8,%esp\t\t\t# 栈指针 -8 </span><br><span class=\"line\"> 8048b86:\tc7 44 24 04 d8 99 04 \tmovl   $0x80499d8,0x4(%esp) # 栈+4 取 0x80499d8 存储的字符串</span><br><span class=\"line\"> 8048b8d:\t08 </span><br><span class=\"line\"> 8048b8e:\t8b 45 08             \tmov    0x8(%ebp),%eax       # 原先的栈指针 + 8 给 eax</span><br><span class=\"line\"> 8048b91:\t89 04 24             \tmov    %eax,(%esp)          # eax 放到 栈当前指向的位置</span><br><span class=\"line\"> 8048b94:\te8 86 05 00 00       \tcall   804911f &lt;strings_not_equal&gt; # 返回 0 表示字符串相等</span><br><span class=\"line\"> 8048b99:\t85 c0                \ttest   %eax,%eax            # test 执行的是 AND 操作。 eax为0才成功</span><br><span class=\"line\"> 8048b9b:\t74 05                \tje     8048ba2 &lt;phase_1+0x22&gt; # 破解成功 je 是判断标志位ZF是否为1</span><br><span class=\"line\"> 8048b9d:\te8 44 0b 00 00       \tcall   80496e6 &lt;explode_bomb&gt; # 破解失败</span><br><span class=\"line\"> 8048ba2:\tc9                   \tleave  </span><br><span class=\"line\"> 8048ba3:\tc3                   \tret   </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 GDB 调试前记得打断点，比如：<code>b *0x8048b94</code></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) p (char*)  0x80499d8</span><br><span class=\"line\">$2 = 0x80499d8 &quot;I am not part of the problem. I am a Republican.&quot;</span><br></pre></td></tr></table></figure>\n<p>解析及要点：</p>\n<ul>\n<li>本层通过判断输入的字符串是否与指定字符串相等。</li>\n<li>此层只需使用 GDB 指令找出地址 <code>$0x80499d8</code> 存储的字符串，该字符串就是本层答案。</li>\n</ul>\n<p>点评与提示：</p>\n<ul>\n<li>拆弹入门。</li>\n<li>像遇到这种存在「魔数」的指令要多留心，常使用 GDB 打印该位置的内容，有可能存储关键字符串或数组。</li>\n<li>%eax 多用于存储函数返回结果</li>\n<li><code>test   %eax,%eax</code> ：<code>test</code> 相当于 <code>and</code> 指令，用于测试 <code>%eax</code> 是否为 0。<code>je</code> 指令会判断 <code>ZF</code> 标志位，当 ZF 为 1 时说明 <code>%eax</code> 为 0，程序执行跳转。</li>\n</ul>\n<h2 id=\"phase-2-有序数组\"><a class=\"markdownIt-Anchor\" href=\"#phase-2-有序数组\"></a> Phase 2 - 有序数组</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08048ba4 &lt;phase_2&gt;:</span><br><span class=\"line\"> 8048ba4:\t55                   \tpush   %ebp</span><br><span class=\"line\"> 8048ba5:\t89 e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> 8048ba7:\t83 ec 28             \tsub    $0x28,%esp              # 栈指针 - 0x28 = 40 ；栈分配 40 字节</span><br><span class=\"line\"> 8048baa:\t8d 45 e4             \tlea    -0x1c(%ebp),%eax        # 原先栈 - 0x1c = 28</span><br><span class=\"line\"> 8048bad:\t89 44 24 04          \tmov    %eax,0x4(%esp)\t\t# 栈+4 &lt;- 原先栈-28</span><br><span class=\"line\"> 8048bb1:\t8b 45 08             \tmov    0x8(%ebp),%eax</span><br><span class=\"line\"> 8048bb4:\t89 04 24             \tmov    %eax,(%esp)\t\t\t# 栈 &lt;- 原先栈+8</span><br><span class=\"line\"> 8048bb7:\te8 d0 04 00 00       \tcall   804908c &lt;read_six_numbers&gt;</span><br><span class=\"line\"> 8048bbc:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%ebp)      # i = 1</span><br><span class=\"line\"> 8048bc3:\teb 1e                \tjmp    8048be3 &lt;phase_2+0x3f&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> # 循环开始（比较前后两个数是否相差5）</span><br><span class=\"line\"> 8048bc5:\t8b 45 fc             \tmov    -0x4(%ebp),%eax          # 取 i</span><br><span class=\"line\"> 8048bc8:\t8b 54 85 e4          \tmov    -0x1c(%ebp,%eax,4),%edx  # arr[i]</span><br><span class=\"line\"> 8048bcc:\t8b 45 fc             \tmov    -0x4(%ebp),%eax          </span><br><span class=\"line\"> 8048bcf:\t48                   \tdec    %eax                     # 取 i-1 </span><br><span class=\"line\"> 8048bd0:\t8b 44 85 e4          \tmov    -0x1c(%ebp,%eax,4),%eax  # arr[i-1]</span><br><span class=\"line\"> 8048bd4:\t83 c0 05             \tadd    $0x5,%eax\t\t\t\t</span><br><span class=\"line\"> 8048bd7:\t39 c2                \tcmp    %eax,%edx</span><br><span class=\"line\"> 8048bd9:\t74 05                \tje     8048be0 &lt;phase_2+0x3c&gt;   # arr[i-1]+5 == arr[i] 必须相等</span><br><span class=\"line\"> 8048bdb:\te8 06 0b 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048be0:\tff 45 fc             \tincl   -0x4(%ebp)               # i+=1</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048be3:\t83 7d fc 05          \tcmpl   $0x5,-0x4(%ebp)      </span><br><span class=\"line\"> 8048be7:\t7e dc                \tjle    8048bc5 &lt;phase_2+0x21&gt; # i &lt;= 5 继续循环(i从1开始)</span><br><span class=\"line\"> 8048be9:\tc9                   \tleave  </span><br><span class=\"line\"> 8048bea:\tc3                   \tret    </span><br></pre></td></tr></table></figure>\n<p>断点打到 <code>&lt;read_six_numbers&gt;</code> 之后，比如 <code>0x8048bbc</code>。我们随便输入 5 个数字，比如 <code>1 6 11 16 21 26</code>，通过 GDB 可以判断其存储位置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下面展示了输入的 6 个数字的存储位置（示例数据）</span><br><span class=\"line\">(gdb) p *(int*) 0xffffcc6c    $6 = 1</span><br><span class=\"line\">(gdb) p *(int*) 0xffffcc70    $8 = 6</span><br><span class=\"line\">(gdb) p *(int*) 0xffffcc74    $9 = 11</span><br><span class=\"line\">(gdb) p *(int*) 0xffffcc78    $10 = 16</span><br><span class=\"line\">(gdb) p *(int*) 0xffffcc7c    $11 = 21</span><br><span class=\"line\">(gdb) p *(int*) 0xffffcc80    $12 = 26</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为啥会知道查 6 个地址。我们根据这个原则就行：汇编中用到哪里，GDB 就查哪里。</p>\n</blockquote>\n<p>这里的汇编代码中存在一个典型的 <code>for</code> 循环结构，使用了「跳转到中间」策略（具体请看教材）。for 循环的通用形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(init-expr;test-expr;update-expr)</span><br><span class=\"line\">\tbody-statement;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 行为与下面的while循环代码一样</span></span><br><span class=\"line\">init-expr;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(test-expr)&#123;</span><br><span class=\"line\">\tbody-statement</span><br><span class=\"line\">\tupdate-expr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该部分汇编代码结构翻译为 C 语言的大致结构如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\tinit-expr;</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> test;</span><br><span class=\"line\">loop:</span><br><span class=\"line\">\tbody-statement;</span><br><span class=\"line\">\tupdate-expr;</span><br><span class=\"line\">test:</span><br><span class=\"line\">\tt=test-expr;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(t)</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> loop;</span><br></pre></td></tr></table></figure>\n<p>解析及要点：</p>\n<ul>\n<li>本层需输入 6 个数字，每个数字需构成升序的等差数列（公差为 5）</li>\n</ul>\n<p>点评与提示：</p>\n<ul>\n<li>识别 <code>for</code> 循环</li>\n<li>知道输入的 6 个数字的存储位置</li>\n</ul>\n<h2 id=\"phase-3-跳转表\"><a class=\"markdownIt-Anchor\" href=\"#phase-3-跳转表\"></a> Phase 3 - 跳转表</h2>\n<blockquote>\n<p>相信你通过了前面汇编的洗礼后，汇编代码的阅读能力提高了不少。本层开始就不会啰嗦太多哦，看注释即可。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08048beb &lt;phase_3&gt;:</span><br><span class=\"line\"> 8048beb:\t55                   \tpush   %ebp</span><br><span class=\"line\"> 8048bec:\t89 e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> 8048bee:\t83 ec 38             \tsub    $0x38,%esp</span><br><span class=\"line\"> 8048bf1:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%ebp)</span><br><span class=\"line\"> 8048bf8:\t8d 45 f0             \tlea    -0x10(%ebp),%eax</span><br><span class=\"line\"> 8048bfb:\t89 44 24 10          \tmov    %eax,0x10(%esp)</span><br><span class=\"line\"> 8048bff:\t8d 45 ef             \tlea    -0x11(%ebp),%eax</span><br><span class=\"line\"> 8048c02:\t89 44 24 0c          \tmov    %eax,0xc(%esp)</span><br><span class=\"line\"> 8048c06:\t8d 45 f4             \tlea    -0xc(%ebp),%eax</span><br><span class=\"line\"> 8048c09:\t89 44 24 08          \tmov    %eax,0x8(%esp)</span><br><span class=\"line\"> 8048c0d:\tc7 44 24 04 09 9a 04 \tmovl   $0x8049a09,0x4(%esp)</span><br></pre></td></tr></table></figure>\n<p>查看魔数信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) p (char*) 0x8049a09</span><br><span class=\"line\">$13 = 0x8049a09 &quot;%d %c %d&quot;</span><br></pre></td></tr></table></figure>\n<p>这个字符串是不是很眼熟，这可能提示我们输入 3 个数据：1 个数字、1 个字符以及 1 个数字。我们可以像上一层那样随便输入 3 个数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8048c14:\t08 </span><br><span class=\"line\">8048c15:\t8b 45 08             \tmov    0x8(%ebp),%eax</span><br><span class=\"line\">8048c18:\t89 04 24             \tmov    %eax,(%esp)</span><br><span class=\"line\">8048c1b:\te8 48 fc ff ff       \tcall   8048868 &lt;sscanf@plt&gt;</span><br><span class=\"line\">8048c20:\t89 45 f8             \tmov    %eax,-0x8(%ebp)          # 返回输入的个数</span><br><span class=\"line\">8048c23:\t83 7d f8 02          \tcmpl   $0x2,-0x8(%ebp)</span><br><span class=\"line\">8048c27:\t7f 05                \tjg     8048c2e &lt;phase_3+0x43&gt; \t# 输入（长度）必须大于2</span><br><span class=\"line\">8048c29:\te8 b8 0a 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\">8048c2e:\t8b 45 f4             \tmov    -0xc(%ebp),%eax          # -0xc(%ebp)携带输入的首地址</span><br><span class=\"line\">8048c31:\t89 45 dc             \tmov    %eax,-0x24(%ebp)         # 经过GDB调试，-0x24(%ebp) 表示第一个输入的数字</span><br><span class=\"line\">8048c34:\t83 7d dc 07          \tcmpl   $0x7,-0x24(%ebp)         # 输入的数字必须小于等于7</span><br><span class=\"line\">8048c38:\t0f 87 c0 00 00 00    \tja     8048cfe &lt;phase_3+0x113&gt; \t# 无符号大于7 - 则爆炸</span><br><span class=\"line\">8048c3e:\t8b 55 dc             \tmov    -0x24(%ebp),%edx\t\t\t# %edx = 第一个输入的数字</span><br><span class=\"line\">8048c41:\t8b 04 95 14 9a 04 08 \tmov    0x8049a14(,%edx,4),%eax \t</span><br><span class=\"line\">8048c48:\tff e0                \tjmp    *%eax \t\t\t\t\t# 例如第一个输入的数字是6 则 eax=0x8048cd4</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>汇编中用到哪里，GDB 就查哪里。<code>-0x24(%ebp)</code> 指向我们第一个输入的数字。</p>\n</blockquote>\n<p>像 <code>jmp    *%eax</code> 这种语法很眼熟，像是课本中提到的 <code>switch</code> 语句的汇编。我们可以尝试找出其跳转表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) print /x ((int*) 0x8049a14)[0]@8</span><br><span class=\"line\">$25 = &#123;0x8048c4a, 0x8048c66, 0x8048c82, 0x8048c97, 0x8048cac, 0x8048cbf, 0x8048cd4, 0x8048ce9&#125;</span><br></pre></td></tr></table></figure>\n<p>我们就随便选一个，比如 6。接下来我们看 6 的代码就行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> # 0</span><br><span class=\"line\"> 8048c4a:\tc6 45 ff 67          \tmovb   $0x67,-0x1(%ebp)</span><br><span class=\"line\"> 8048c4e:\t8b 45 f0             \tmov    -0x10(%ebp),%eax</span><br><span class=\"line\"> 8048c51:\t3d c8 00 00 00       \tcmp    $0xc8,%eax</span><br><span class=\"line\"> 8048c56:\t0f 84 ab 00 00 00    \tje     8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"> 8048c5c:\te8 85 0a 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048c61:\te9 a1 00 00 00       \tjmp    8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> # 1</span><br><span class=\"line\"> 8048c66:\tc6 45 ff 6c          \tmovb   $0x6c,-0x1(%ebp)</span><br><span class=\"line\"> 8048c6a:\t8b 45 f0             \tmov    -0x10(%ebp),%eax</span><br><span class=\"line\"> 8048c6d:\t3d c7 03 00 00       \tcmp    $0x3c7,%eax</span><br><span class=\"line\"> 8048c72:\t0f 84 8f 00 00 00    \tje     8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"> 8048c78:\te8 69 0a 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048c7d:\te9 85 00 00 00       \tjmp    8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> # 2</span><br><span class=\"line\"> 8048c82:\tc6 45 ff 69          \tmovb   $0x69,-0x1(%ebp)</span><br><span class=\"line\"> 8048c86:\t8b 45 f0             \tmov    -0x10(%ebp),%eax</span><br><span class=\"line\"> 8048c89:\t3d 1e 02 00 00       \tcmp    $0x21e,%eax</span><br><span class=\"line\"> 8048c8e:\t74 77                \tje     8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"> 8048c90:\te8 51 0a 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048c95:\teb 70                \tjmp    8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 3</span><br><span class=\"line\"> 8048c97:\tc6 45 ff 6e          \tmovb   $0x6e,-0x1(%ebp)</span><br><span class=\"line\"> 8048c9b:\t8b 45 f0             \tmov    -0x10(%ebp),%eax</span><br><span class=\"line\"> 8048c9e:\t3d 6a 03 00 00       \tcmp    $0x36a,%eax</span><br><span class=\"line\"> 8048ca3:\t74 62                \tje     8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"> 8048ca5:\te8 3c 0a 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048caa:\teb 5b                \tjmp    8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"> 8048cac:\tc6 45 ff 6f          \tmovb   $0x6f,-0x1(%ebp)</span><br><span class=\"line\"></span><br><span class=\"line\"> # 4</span><br><span class=\"line\"> 8048cb0:\t8b 45 f0             \tmov    -0x10(%ebp),%eax</span><br><span class=\"line\"> 8048cb3:\t83 f8 3f             \tcmp    $0x3f,%eax</span><br><span class=\"line\"> 8048cb6:\t74 4f                \tje     8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"> 8048cb8:\te8 29 0a 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048cbd:\teb 48                \tjmp    8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> # 5</span><br><span class=\"line\"> 8048cbf:\tc6 45 ff 69          \tmovb   $0x69,-0x1(%ebp)</span><br><span class=\"line\"> 8048cc3:\t8b 45 f0             \tmov    -0x10(%ebp),%eax</span><br><span class=\"line\"> 8048cc6:\t3d 8f 00 00 00       \tcmp    $0x8f,%eax</span><br><span class=\"line\"> 8048ccb:\t74 3a                \tje     8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"> 8048ccd:\te8 14 0a 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048cd2:\teb 33                \tjmp    8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 6</span><br><span class=\"line\"> 8048cd4:\tc6 45 ff 77          \tmovb   $0x77,-0x1(%ebp)\t\t\t# 77 对应字符 w 为后文埋下伏笔</span><br><span class=\"line\"> 8048cd8:\t8b 45 f0             \tmov    -0x10(%ebp),%eax         # ebp - 0x10 是第三个输入的数字</span><br><span class=\"line\">;  (gdb) p /x *0xffffcc78</span><br><span class=\"line\">; $31 = 0x1b1</span><br><span class=\"line\"> 8048cdb:\t3d b1 01 00 00       \tcmp    $0x1b1,%eax              # $0x1b1 = 433 第三个数字和 0x1b1 比较</span><br><span class=\"line\"> 8048ce0:\t74 25                \tje     8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"> 8048ce2:\te8 ff 09 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048ce7:\teb 1e                \tjmp    8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> # 7</span><br><span class=\"line\"> 8048ce9:\tc6 45 ff 76          \tmovb   $0x76,-0x1(%ebp)</span><br><span class=\"line\"> 8048ced:\t8b 45 f0             \tmov    -0x10(%ebp),%eax         </span><br><span class=\"line\"> 8048cf0:\t3d 9f 03 00 00       \tcmp    $0x39f,%eax</span><br><span class=\"line\"> 8048cf5:\t74 10                \tje     8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"> 8048cf7:\te8 ea 09 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048cfc:\teb 09                \tjmp    8048d07 &lt;phase_3+0x11c&gt;</span><br><span class=\"line\"> 8048cfe:\tc6 45 ff 65          \tmovb   $0x65,-0x1(%ebp)        # 爆炸</span><br><span class=\"line\"> 8048d02:\te8 df 09 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>汇编中用到哪里，GDB 就查哪里。<code>-0x10(%ebp)</code> 指向我们第三个输入的数字。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 返回</span><br><span class=\"line\"> 8048d07:\t0f b6 45 ef          \tmovzbl -0x11(%ebp),%eax        # 零扩展传送到eax</span><br><span class=\"line\">;  (gdb) p *(char*) 0xffffcc77</span><br><span class=\"line\">; $37 = 119 &#x27;w&#x27;</span><br><span class=\"line\"> 8048d0b:\t38 45 ff             \tcmp    %al,-0x1(%ebp)          # al是rax的低字节 上文的伏笔</span><br><span class=\"line\"> 8048d0e:\t74 05                \tje     8048d15 &lt;phase_3+0x12a&gt; # 等于才成功，否则爆炸</span><br><span class=\"line\"> 8048d10:\te8 d1 09 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048d15:\tc9                   \tleave  </span><br><span class=\"line\"> 8048d16:\tc3                   \tret  </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>汇编中用到哪里，GDB 就查哪里。<code>-0x11(%ebp)</code> 指向我们第二个输入的字符。</p>\n</blockquote>\n<p>解析及要点：</p>\n<ul>\n<li>本层需输入 3 个数据。根据跳转表内容输入符合要求的数字。比如：<code>6 w 433</code>。</li>\n</ul>\n<p>点评与提示：</p>\n<ul>\n<li>识别 <code>switch</code></li>\n<li>善用 <code>GDB</code></li>\n</ul>\n<h2 id=\"phase-4-递归函数\"><a class=\"markdownIt-Anchor\" href=\"#phase-4-递归函数\"></a> Phase 4 - 递归函数</h2>\n<p>第四层使用到了一个函数，我们先解读这个函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08048d17 &lt;func4&gt;:</span><br><span class=\"line\"> 8048d17:\t55                   \tpush   %ebp</span><br><span class=\"line\"> 8048d18:\t89 e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> 8048d1a:\t53                   \tpush   %ebx</span><br><span class=\"line\"> 8048d1b:\t83 ec 08             \tsub    $0x8,%esp</span><br><span class=\"line\"> 8048d1e:\t83 7d 08 01          \tcmpl   $0x1,0x8(%ebp)            </span><br><span class=\"line\"> 8048d22:\t7f 09                \tjg     8048d2d &lt;func4+0x16&gt;  # if x&gt;1</span><br><span class=\"line\"> 8048d24:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%ebp)       # else</span><br><span class=\"line\"> 8048d2b:\teb 21                \tjmp    8048d4e &lt;func4+0x37&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048d2d:\t8b 45 08             \tmov    0x8(%ebp),%eax        # if x&gt;1</span><br><span class=\"line\"> 8048d30:\t48                   \tdec    %eax              </span><br><span class=\"line\"> 8048d31:\t89 04 24             \tmov    %eax,(%esp)           # x-1 作为参数递归</span><br><span class=\"line\"> 8048d34:\te8 de ff ff ff       \tcall   8048d17 &lt;func4&gt;</span><br><span class=\"line\"> 8048d39:\t89 c3                \tmov    %eax,%ebx             # f(x-1) 的结果暂存</span><br><span class=\"line\"> 8048d3b:\t8b 45 08             \tmov    0x8(%ebp),%eax</span><br><span class=\"line\"> 8048d3e:\t83 e8 02             \tsub    $0x2,%eax      </span><br><span class=\"line\"> 8048d41:\t89 04 24             \tmov    %eax,(%esp)           # x-2 作为参数递归</span><br><span class=\"line\"> 8048d44:\te8 ce ff ff ff       \tcall   8048d17 &lt;func4&gt;</span><br><span class=\"line\"> 8048d49:\t01 c3                \tadd    %eax,%ebx             # f(x-1) 的结果+f(x-1)</span><br><span class=\"line\"> 8048d4b:\t89 5d f8             \tmov    %ebx,-0x8(%ebp)       # 作为返回结果</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048d4e:\t8b 45 f8             \tmov    -0x8(%ebp),%eax # 1 返回1</span><br><span class=\"line\"> 8048d51:\t83 c4 08             \tadd    $0x8,%esp</span><br><span class=\"line\"> 8048d54:\t5b                   \tpop    %ebx</span><br><span class=\"line\"> 8048d55:\t5d                   \tpop    %ebp</span><br><span class=\"line\"> 8048d56:\tc3                   \tret   </span><br></pre></td></tr></table></figure>\n<p>不难看出是个递归求斐波那契数列的函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func4(x)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x&gt;<span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> func4(x<span class=\"number\">-1</span>)+func4(x<span class=\"number\">-2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输入：0 1 2 3 4 5 ... 13</span></span><br><span class=\"line\"><span class=\"comment\">// 输出：1 1 2 3 5 8 ... 377</span></span><br></pre></td></tr></table></figure>\n<p>第四层的逻辑更加简单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08048d57 &lt;phase_4&gt;:</span><br><span class=\"line\"> 8048d57:\t55                   \tpush   %ebp</span><br><span class=\"line\"> 8048d58:\t89 e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> 8048d5a:\t83 ec 28             \tsub    $0x28,%esp</span><br><span class=\"line\"> 8048d5d:\t8d 45 f4             \tlea    -0xc(%ebp),%eax</span><br><span class=\"line\"> 8048d60:\t89 44 24 08          \tmov    %eax,0x8(%esp)</span><br><span class=\"line\"> 8048d64:\tc7 44 24 04 34 9a 04 \tmovl   $0x8049a34,0x4(%esp) #  0x8049a34 -&gt; &quot;%d&quot;</span><br><span class=\"line\"> 8048d6b:\t08 </span><br><span class=\"line\"> 8048d6c:\t8b 45 08             \tmov    0x8(%ebp),%eax</span><br><span class=\"line\"> 8048d6f:\t89 04 24             \tmov    %eax,(%esp)</span><br><span class=\"line\"> 8048d72:\te8 f1 fa ff ff       \tcall   8048868 &lt;sscanf@plt&gt;</span><br><span class=\"line\"> 8048d77:\t89 45 fc             \tmov    %eax,-0x4(%ebp)      </span><br><span class=\"line\"> 8048d7a:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%ebp)      # 只能输入一个数i，否则爆炸</span><br><span class=\"line\"> 8048d7e:\t75 07                \tjne    8048d87 &lt;phase_4+0x30&gt; # 跳转到爆炸</span><br><span class=\"line\"> 8048d80:\t8b 45 f4             \tmov    -0xc(%ebp),%eax  #   -0xc(%ebp)存放我们第一个输入的数i   </span><br><span class=\"line\">;  (gdb) p  *0xffffcc7c</span><br><span class=\"line\">; $42 = 13</span><br><span class=\"line\"> 8048d83:\t85 c0                \ttest   %eax,%eax            # -0xc(%ebp) 不能为零</span><br><span class=\"line\"> 8048d85:\t7f 05                \tjg     8048d8c &lt;phase_4+0x35&gt; # 大于才成功，否则爆炸</span><br><span class=\"line\"> 8048d87:\te8 5a 09 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048d8c:\t8b 45 f4             \tmov    -0xc(%ebp),%eax</span><br><span class=\"line\"> 8048d8f:\t89 04 24             \tmov    %eax,(%esp)          # 将数字传参</span><br><span class=\"line\"> 8048d92:\te8 80 ff ff ff       \tcall   8048d17 &lt;func4&gt;      # i 进入函数func4</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048d97:\t89 45 f8             \tmov    %eax,-0x8(%ebp)</span><br><span class=\"line\"> 8048d9a:\t81 7d f8 79 01 00 00 \tcmpl   $0x179,-0x8(%ebp)    # 结果必须为 0x179 = 377 (斐波那契数列第13项)</span><br><span class=\"line\"> 8048da1:\t74 05                \tje     8048da8 &lt;phase_4+0x51&gt; # 等于才成功，否则爆炸</span><br><span class=\"line\"> 8048da3:\te8 3e 09 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048da8:\tc9                   \tleave  </span><br><span class=\"line\"> 8048da9:\tc3                   \tret  </span><br></pre></td></tr></table></figure>\n<p>解析及要点：</p>\n<ul>\n<li>本层需输入 1 个数据。使得函数的输出结果与给定数字相等。在这里为 <code>13</code></li>\n</ul>\n<p>点评与提示：</p>\n<ul>\n<li>会读递归函数</li>\n</ul>\n<h2 id=\"phase-5-算数\"><a class=\"markdownIt-Anchor\" href=\"#phase-5-算数\"></a> Phase 5 - 算数</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08048daa &lt;phase_5&gt;:</span><br><span class=\"line\"> 8048daa:\t55                   \tpush   %ebp</span><br><span class=\"line\"> 8048dab:\t89 e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> 8048dad:\t83 ec 18             \tsub    $0x18,%esp</span><br><span class=\"line\"> 8048db0:\t8b 45 08             \tmov    0x8(%ebp),%eax</span><br><span class=\"line\"> 8048db3:\t89 04 24             \tmov    %eax,(%esp)</span><br><span class=\"line\"> 8048db6:\te8 3a 03 00 00       \tcall   80490f5 &lt;string_length&gt;</span><br><span class=\"line\"> 8048dbb:\t89 45 fc             \tmov    %eax,-0x4(%ebp)</span><br><span class=\"line\"> 8048dbe:\t83 7d fc 06          \tcmpl   $0x6,-0x4(%ebp)</span><br><span class=\"line\"> 8048dc2:\t74 05                \tje     8048dc9 &lt;phase_5+0x1f&gt; # 输入的字符串长度必须为 6 </span><br><span class=\"line\"> 8048dc4:\te8 1d 09 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048dc9:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%ebp)        # result = 0</span><br><span class=\"line\"> 8048dd0:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%ebp)\t\t  # i = 0</span><br><span class=\"line\"> 8048dd7:\teb 1c                \tjmp    8048df5 &lt;phase_5+0x4b&gt;</span><br></pre></td></tr></table></figure>\n<p>我们看到后文老是出现 <code>-0x8(%ebp)</code>，<code>-0xc(%ebp)</code>。又看到熟悉的循环结构，干脆分别定义变量 <code>result</code>，<code>i</code> 辅助我们进行分析。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 循环开始</span><br><span class=\"line\"> 8048dd9:\t8b 45 f4             \tmov    -0xc(%ebp),%eax</span><br><span class=\"line\"> 8048ddc:\t03 45 08             \tadd    0x8(%ebp),%eax  # 0x804a9a0 + i 就是遍历输入的字符串</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048ddf:\t0f b6 00             \tmovzbl (%eax),%eax</span><br><span class=\"line\"> 8048de2:\t0f be c0             \tmovsbl %al,%eax</span><br><span class=\"line\"> 8048de5:\t83 e0 0f             \tand    $0xf,%eax       # 对每一个字符串取低位字节 得到 k</span><br><span class=\"line\"> 8048de8:\t8b 04 85 c0 a5 04 08 \tmov    0x804a5c0(,%eax,4),%eax # 取 arr[k]</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048def:\t01 45 f8             \tadd    %eax,-0x8(%ebp)          # result += arr[k]</span><br><span class=\"line\"> 8048df2:\tff 45 f4             \tincl   -0xc(%ebp)\t\t\t\t# i++</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048df5:\t83 7d f4 05          \tcmpl   $0x5,-0xc(%ebp)</span><br><span class=\"line\"> 8048df9:\t7e de                \tjle    8048dd9 &lt;phase_5+0x2f&gt;  # i &lt;= 5 继续循环</span><br><span class=\"line\"> 8048dfb:\t83 7d f8 24          \tcmpl   $0x24,-0x8(%ebp)\t\t\t# result == 36</span><br><span class=\"line\"> 8048dff:\t74 05                \tje     8048e06 &lt;phase_5+0x5c&gt;   # 必须相等</span><br><span class=\"line\"> 8048e01:\te8 e0 08 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048e06:\tc9                   \tleave  </span><br><span class=\"line\"> 8048e07:\tc3                   \tret    </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) p  (char*) 0x804a9a0</span><br><span class=\"line\">$56 = 0x804a9a0 &lt;input_strings+320&gt; &quot;@@BBAA&quot;  # 假设输入的字符串为 `@@BBAA`</span><br><span class=\"line\"># 0x804a5c0: &#123;2, 10, 6, 1, 12, 16, 9, 3, 4, 7, 14, 5, 11, 8, 15, 13,     ...&#125;</span><br></pre></td></tr></table></figure>\n<p><code>0x804a9a0</code> 是一个数组 arr 的地址，我们需要输入包含 6 个字符的字符串：</p>\n<ul>\n<li>每个字符的低 4 位作为数组 arr 的索引 i。</li>\n<li>本例中，需要使得 <code>arr[0]</code>+<code>arr[1]</code>+…+<code>arr[5]</code> 的总和为 36 即可通关。</li>\n</ul>\n<p>例如：</p>\n<ul>\n<li>36 = 2+2+6+6+10+10</li>\n<li>各加数对应数组的序号为 0 0 2 2 1 1</li>\n<li>ASCII 中，<code>@</code>：0x40   <code>B</code>：0x42  <code>A</code>：0x41，也就是对应序号 0, 2, 1</li>\n<li>答案即为 <code>@@BBAA</code></li>\n</ul>\n<p>解析及要点：</p>\n<ul>\n<li>本层需输入合适字符串指示数组的下标，使得下标对应数组数字之和等于指定值即可。</li>\n<li>知道输入字符串的存储位置</li>\n</ul>\n<p>点评与提示：</p>\n<ul>\n<li>汇编的融会贯通</li>\n</ul>\n<h2 id=\"phase-6-链表排序\"><a class=\"markdownIt-Anchor\" href=\"#phase-6-链表排序\"></a> Phase 6 - 链表排序</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08048e08 &lt;phase_6&gt;:</span><br><span class=\"line\"> 8048e08:\t55                   \tpush   %ebp</span><br><span class=\"line\"> 8048e09:\t89 e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> 8048e0b:\t83 ec 48             \tsub    $0x48,%esp</span><br><span class=\"line\"> 8048e0e:\tc7 45 f0 3c a6 04 08 \tmovl   $0x804a63c,-0x10(%ebp) # $0x804a63c-&gt; 0x329</span><br><span class=\"line\"> 8048e15:\t8d 45 d8             \tlea    -0x28(%ebp),%eax</span><br><span class=\"line\"> 8048e18:\t89 44 24 04          \tmov    %eax,0x4(%esp)</span><br><span class=\"line\"> 8048e1c:\t8b 45 08             \tmov    0x8(%ebp),%eax</span><br><span class=\"line\"> 8048e1f:\t89 04 24             \tmov    %eax,(%esp)</span><br><span class=\"line\"> 8048e22:\te8 65 02 00 00       \tcall   804908c &lt;read_six_numbers&gt;</span><br><span class=\"line\"> 8048e27:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%ebp)        # i=0</span><br><span class=\"line\"> 8048e2e:\teb 48                \tjmp    8048e78 &lt;phase_6+0x70&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 循环A ------- 开始 用于判断：每个元素不相等，且每个元素不为0</span><br><span class=\"line\"> 8048e30:\t8b 45 f8             \tmov    -0x8(%ebp),%eax</span><br><span class=\"line\"> 8048e33:\t8b 44 85 d8          \tmov    -0x28(%ebp,%eax,4),%eax  # -0x28(%ebp) 的位置是输入数组的第一个元素</span><br><span class=\"line\"> 8048e37:\t85 c0                \ttest   %eax,%eax   </span><br><span class=\"line\"> 8048e39:\t7e 0c                \tjle    8048e47 &lt;phase_6+0x3f&gt;  # arr[i] == 0 跳转爆炸</span><br><span class=\"line\"> 8048e3b:\t8b 45 f8             \tmov    -0x8(%ebp),%eax         # arr[i] != 0</span><br><span class=\"line\"> 8048e3e:\t8b 44 85 d8          \tmov    -0x28(%ebp,%eax,4),%eax</span><br><span class=\"line\"> 8048e42:\t83 f8 06             \tcmp    $0x6,%eax               </span><br><span class=\"line\"> 8048e45:\t7e 05                \tjle    8048e4c &lt;phase_6+0x44&gt;  # arr[i]&lt;= 6 否则爆炸</span><br><span class=\"line\"> 8048e47:\te8 9a 08 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048e4c:\t8b 45 f8             \tmov    -0x8(%ebp),%eax</span><br><span class=\"line\"> 8048e4f:\t40                   \tinc    %eax\t\t\t\t\t# i++</span><br><span class=\"line\"> 8048e50:\t89 45 fc             \tmov    %eax,-0x4(%ebp)      # 存储ti = i+1</span><br><span class=\"line\"> 8048e53:\teb 1a                \tjmp    8048e6f &lt;phase_6+0x67&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048e55:\t8b 45 f8             \tmov    -0x8(%ebp),%eax</span><br><span class=\"line\"> 8048e58:\t8b 54 85 d8          \tmov    -0x28(%ebp,%eax,4),%edx  # edx = arr[i]</span><br><span class=\"line\"> 8048e5c:\t8b 45 fc             \tmov    -0x4(%ebp),%eax</span><br><span class=\"line\"> 8048e5f:\t8b 44 85 d8          \tmov    -0x28(%ebp,%eax,4),%eax  # eax = arr[i+1]</span><br><span class=\"line\"> 8048e63:\t39 c2                \tcmp    %eax,%edx</span><br><span class=\"line\"> 8048e65:\t75 05                \tjne    8048e6c &lt;phase_6+0x64&gt;   # 必须 arr[i] != arr[i+1] 否则爆炸</span><br><span class=\"line\"> 8048e67:\te8 7a 08 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048e6c:\tff 45 fc             \tincl   -0x4(%ebp)               # ti++</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048e6f:\t83 7d fc 05          \tcmpl   $0x5,-0x4(%ebp)\t\t</span><br><span class=\"line\"> 8048e73:\t7e e0                \tjle    8048e55 &lt;phase_6+0x4d&gt; # ti&lt;=5 则跳转</span><br><span class=\"line\"> 8048e75:\tff 45 f8             \tincl   -0x8(%ebp)             # i+1==5 ,i++ , i=6  即将退出循环</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048e78:\t83 7d f8 05          \tcmpl   $0x5,-0x8(%ebp)</span><br><span class=\"line\"> 8048e7c:\t7e b2                \tjle    8048e30 &lt;phase_6+0x28&gt;  # i&lt;=5 循环（遍历6个元素）</span><br><span class=\"line\"> # 循环A ---- ------ 结束</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> 8048e7e:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%ebp)\t\t# j=0</span><br><span class=\"line\"> 8048e85:\teb 34                \tjmp    8048ebb &lt;phase_6+0xb3&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> # 循环B 开始 ---- 将数组平移到内存中的特定的位置$0x804a63c 开始的位置，8位隔开</span><br><span class=\"line\"> # 这是个链表</span><br><span class=\"line\"> 8048e87:\t8b 45 f0             \tmov    -0x10(%ebp),%eax     # 是个地址$0x804a63c，提前存有 0x329 = 809</span><br><span class=\"line\"> 8048e8a:\t89 45 f4             \tmov    %eax,-0xc(%ebp)      # t[1] 表示上一次的计算结果 = $0x804a63c</span><br><span class=\"line\"> 8048e8d:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%ebp)      # tj = 1</span><br><span class=\"line\"> 8048e94:\teb 0c                \tjmp    8048ea2 &lt;phase_6+0x9a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048e96:\t8b 45 f4             \tmov    -0xc(%ebp),%eax      # t[0]地址$0x804a63c</span><br><span class=\"line\"> 8048e99:\t8b 40 08             \tmov    0x8(%eax),%eax\t\t# 0x8(%eax) =$0x804a644 -&gt; $0x804a630</span><br><span class=\"line\"> 8048e9c:\t89 45 f4             \tmov    %eax,-0xc(%ebp)      # 链表结点下移</span><br><span class=\"line\"> 8048e9f:\tff 45 fc             \tincl   -0x4(%ebp)           # tj++</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048ea2:\t8b 45 f8             \tmov    -0x8(%ebp),%eax</span><br><span class=\"line\"> 8048ea5:\t8b 44 85 d8          \tmov    -0x28(%ebp,%eax,4),%eax # arr[j]</span><br><span class=\"line\"> 8048ea9:\t3b 45 fc             \tcmp    -0x4(%ebp),%eax         # tj</span><br><span class=\"line\"> 8048eac:\t7f e8                \tjg     8048e96 &lt;phase_6+0x8e&gt;  # arr[j]&gt;tj 大于</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048eae:\t8b 55 f8             \tmov    -0x8(%ebp),%edx         # edx = j</span><br><span class=\"line\"> 8048eb1:\t8b 45 f4             \tmov    -0xc(%ebp),%eax\t\t   # eax = t[0]</span><br><span class=\"line\"> 8048eb4:\t89 44 95 c0          \tmov    %eax,-0x40(%ebp,%edx,4) # 存储统计结果</span><br><span class=\"line\"> 8048eb8:\tff 45 f8             \tincl   -0x8(%ebp)              # j++</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048ebb:\t83 7d f8 05          \tcmpl   $0x5,-0x8(%ebp)</span><br><span class=\"line\"> 8048ebf:\t7e c6                \tjle    8048e87 &lt;phase_6+0x7f&gt; # j&lt;=5 循环（遍历6个元素）</span><br><span class=\"line\"># 循环B ------------------------ 结束</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048ec1:\t8b 45 c0             \tmov    -0x40(%ebp),%eax   # arr8[0]</span><br><span class=\"line\"> 8048ec4:\t89 45 f0             \tmov    %eax,-0x10(%ebp)   #  </span><br><span class=\"line\"> 8048ec7:\t8b 45 f0             \tmov    -0x10(%ebp),%eax</span><br><span class=\"line\"> 8048eca:\t89 45 f4             \tmov    %eax,-0xc(%ebp)    # t[1] 存储上一次运算结果 = arr8[0]</span><br><span class=\"line\"> 8048ecd:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%ebp)    # k = 1</span><br><span class=\"line\"> 8048ed4:\teb 19                \tjmp    8048eef &lt;phase_6+0xe7&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 循环C ------------------------- 开始 调整链表内的顺序</span><br><span class=\"line\"> 8048ed6:\t8b 45 f8             \tmov    -0x8(%ebp),%eax    # k</span><br><span class=\"line\"> 8048ed9:\t8b 54 85 c0          \tmov    -0x40(%ebp,%eax,4),%edx # edx = arr8[k]</span><br><span class=\"line\"> 8048edd:\t8b 45 f4             \tmov    -0xc(%ebp),%eax         # eax = $0x804a63c</span><br><span class=\"line\"> 8048ee0:\t89 50 08             \tmov    %edx,0x8(%eax)          # $0x804a63c+8 = arr8[k]</span><br><span class=\"line\"> 8048ee3:\t8b 45 f4             \tmov    -0xc(%ebp),%eax</span><br><span class=\"line\"> 8048ee6:\t8b 40 08             \tmov    0x8(%eax),%eax          # $0x804a63c+8</span><br><span class=\"line\"> 8048ee9:\t89 45 f4             \tmov    %eax,-0xc(%ebp)         # 基地址上移8</span><br><span class=\"line\"> 8048eec:\tff 45 f8             \tincl   -0x8(%ebp)          # k++</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048eef:\t83 7d f8 05          \tcmpl   $0x5,-0x8(%ebp)  </span><br><span class=\"line\"> 8048ef3:\t7e e1                \tjle    8048ed6 &lt;phase_6+0xce&gt;  # k&lt;=5 循环（遍历5个元素，因为k从1开始的）</span><br><span class=\"line\"># 循环C -------------------------- 结束</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048ef5:\t8b 45 f4             \tmov    -0xc(%ebp),%eax</span><br><span class=\"line\"> 8048ef8:\tc7 40 08 00 00 00 00 \tmovl   $0x0,0x8(%eax)   # 基址设置为0</span><br><span class=\"line\"> 8048eff:\t8b 45 f0             \tmov    -0x10(%ebp),%eax # 重新获取$0x804a63c</span><br><span class=\"line\"> 8048f02:\t89 45 f4             \tmov    %eax,-0xc(%ebp)</span><br><span class=\"line\"> 8048f05:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%ebp) # l = 0</span><br><span class=\"line\"> 8048f0c:\teb 22                \tjmp    8048f30 &lt;phase_6+0x128&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 循环 D -------- 开始：左边的数大于右边的数</span><br><span class=\"line\"> 8048f0e:\t8b 45 f4             \tmov    -0xc(%ebp),%eax # $0x804a63c</span><br><span class=\"line\"> 8048f11:\t8b 10                \tmov    (%eax),%edx</span><br><span class=\"line\"> 8048f13:\t8b 45 f4             \tmov    -0xc(%ebp),%eax</span><br><span class=\"line\"> 8048f16:\t8b 40 08             \tmov    0x8(%eax),%eax</span><br><span class=\"line\"> 8048f19:\t8b 00                \tmov    (%eax),%eax</span><br><span class=\"line\"> 8048f1b:\t39 c2                \tcmp    %eax,%edx       # 相隔 8  的两个基址</span><br><span class=\"line\"> 8048f1d:\t7d 05                \tjge    8048f24 &lt;phase_6+0x11c&gt; #必须： 左基址 &gt;= 右基址 </span><br><span class=\"line\"> 8048f1f:\te8 c2 07 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048f24:\t8b 45 f4             \tmov    -0xc(%ebp),%eax</span><br><span class=\"line\"> 8048f27:\t8b 40 08             \tmov    0x8(%eax),%eax # 基址+8</span><br><span class=\"line\"> 8048f2a:\t89 45 f4             \tmov    %eax,-0xc(%ebp) # 基址更新</span><br><span class=\"line\"> 8048f2d:\tff 45 f8             \tincl   -0x8(%ebp)     # l++</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048f30:\t83 7d f8 04          \tcmpl   $0x4,-0x8(%ebp) # l&lt;=4 5 次</span><br><span class=\"line\"> 8048f34:\t7e d8                \tjle    8048f0e &lt;phase_6+0x106&gt;</span><br><span class=\"line\"># 循环D结束</span><br><span class=\"line\"></span><br><span class=\"line\"> 8048f36:\tc9                   \tleave  </span><br><span class=\"line\"> 8048f37:\tc3                   \tret   </span><br></pre></td></tr></table></figure>\n<p>本例中出现的魔数 <code>0x804a63c</code> 为链表头结点地址，通过 GDB 我们可以得知链表结点地址以及存储的值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; 0x804a63c 0x329</span><br><span class=\"line\">; 0x804a630 0x124</span><br><span class=\"line\">; 0x804a638 0x325</span><br><span class=\"line\">; 0x804a62c 0x178</span><br><span class=\"line\">; 0x804a620 0x207</span><br><span class=\"line\">; 0x804a614 0x92</span><br><span class=\"line\">; 0x804a608 0x00 NULL</span><br></pre></td></tr></table></figure>\n<p>输入的数组要求：</p>\n<ol>\n<li>6 个数字互不相同，范围 1~6</li>\n<li>第 n 个数字值 v，代表第 n 个结点排序后的位置为 v</li>\n<li>结点排序后的结果为：结点代表的值降序排序</li>\n</ol>\n<p>解析及要点：</p>\n<ul>\n<li>本层需输入 6 个数字对链表进行排序，使得排序结果满足目标要求</li>\n<li>必须识别出这是个链表</li>\n<li>逐个循环阅读</li>\n</ul>\n<p>点评与提示：</p>\n<ul>\n<li>耐心耐心耐心</li>\n</ul>\n<h2 id=\"secret-phase\"><a class=\"markdownIt-Anchor\" href=\"#secret-phase\"></a> Secret Phase</h2>\n<p>拆除炸弹各层的提示语如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class=\"line\">which to blow yourself up. Have a nice day!</span><br><span class=\"line\">Phase 1 defused. How about the next one?</span><br><span class=\"line\">That&#x27;s number 2.  Keep going!</span><br><span class=\"line\">Halfway there!</span><br><span class=\"line\">So you got that one.  Try this one.</span><br><span class=\"line\">Good work!  On to the next...</span><br><span class=\"line\">Congratulations! You&#x27;ve defused the bomb!</span><br></pre></td></tr></table></figure>\n<p>但这并不意味着炸弹已经拆除完成，注意到 <code>bomb.c</code> 文件中有邪恶博士😈在最后一层炸弹拆除时留下的注释：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Wow, they got it!  But isn&#x27;t something... missing?  Perhaps</span></span><br><span class=\"line\"><span class=\"comment\">* something they overlooked?  Mua ha ha ha ha! */</span></span><br></pre></td></tr></table></figure>\n<p>反汇编得到的汇编代码中还存在一些隐藏内容：<code>&lt;func7&gt;</code> 以及 <code>&lt;secret_phase&gt;</code> 函数。</p>\n<p>这部分就留给读者自己解决啦~~ 反正助教通过我的实验了，为了「完美主义」，我有时间在弄吧。</p>\n<blockquote>\n<p>看起来不多呢。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">08048f38 &lt;fun7&gt;:</span><br><span class=\"line\"> 8048f38:\t55                   \tpush   %ebp</span><br><span class=\"line\"> 8048f39:\t89 e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> 8048f3b:\t83 ec 0c             \tsub    $0xc,%esp</span><br><span class=\"line\"> 8048f3e:\t83 7d 08 00          \tcmpl   $0x0,0x8(%ebp)</span><br><span class=\"line\"> 8048f42:\t75 09                \tjne    8048f4d &lt;fun7+0x15&gt;</span><br><span class=\"line\"> 8048f44:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%ebp)</span><br><span class=\"line\"> 8048f4b:\teb 54                \tjmp    8048fa1 &lt;fun7+0x69&gt;</span><br><span class=\"line\"> 8048f4d:\t8b 45 08             \tmov    0x8(%ebp),%eax</span><br><span class=\"line\"> 8048f50:\t8b 00                \tmov    (%eax),%eax</span><br><span class=\"line\"> 8048f52:\t3b 45 0c             \tcmp    0xc(%ebp),%eax</span><br><span class=\"line\"> 8048f55:\t7e 1c                \tjle    8048f73 &lt;fun7+0x3b&gt;</span><br><span class=\"line\"> 8048f57:\t8b 45 08             \tmov    0x8(%ebp),%eax</span><br><span class=\"line\"> 8048f5a:\t8b 50 04             \tmov    0x4(%eax),%edx</span><br><span class=\"line\"> 8048f5d:\t8b 45 0c             \tmov    0xc(%ebp),%eax</span><br><span class=\"line\"> 8048f60:\t89 44 24 04          \tmov    %eax,0x4(%esp)</span><br><span class=\"line\"> 8048f64:\t89 14 24             \tmov    %edx,(%esp)</span><br><span class=\"line\"> 8048f67:\te8 cc ff ff ff       \tcall   8048f38 &lt;fun7&gt;</span><br><span class=\"line\"> 8048f6c:\t01 c0                \tadd    %eax,%eax</span><br><span class=\"line\"> 8048f6e:\t89 45 fc             \tmov    %eax,-0x4(%ebp)</span><br><span class=\"line\"> 8048f71:\teb 2e                \tjmp    8048fa1 &lt;fun7+0x69&gt;</span><br><span class=\"line\"> 8048f73:\t8b 45 08             \tmov    0x8(%ebp),%eax</span><br><span class=\"line\"> 8048f76:\t8b 00                \tmov    (%eax),%eax</span><br><span class=\"line\"> 8048f78:\t3b 45 0c             \tcmp    0xc(%ebp),%eax</span><br><span class=\"line\"> 8048f7b:\t75 09                \tjne    8048f86 &lt;fun7+0x4e&gt;</span><br><span class=\"line\"> 8048f7d:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%ebp)</span><br><span class=\"line\"> 8048f84:\teb 1b                \tjmp    8048fa1 &lt;fun7+0x69&gt;</span><br><span class=\"line\"> 8048f86:\t8b 45 08             \tmov    0x8(%ebp),%eax</span><br><span class=\"line\"> 8048f89:\t8b 50 08             \tmov    0x8(%eax),%edx</span><br><span class=\"line\"> 8048f8c:\t8b 45 0c             \tmov    0xc(%ebp),%eax</span><br><span class=\"line\"> 8048f8f:\t89 44 24 04          \tmov    %eax,0x4(%esp)</span><br><span class=\"line\"> 8048f93:\t89 14 24             \tmov    %edx,(%esp)</span><br><span class=\"line\"> 8048f96:\te8 9d ff ff ff       \tcall   8048f38 &lt;fun7&gt;</span><br><span class=\"line\"> 8048f9b:\t01 c0                \tadd    %eax,%eax</span><br><span class=\"line\"> 8048f9d:\t40                   \tinc    %eax</span><br><span class=\"line\"> 8048f9e:\t89 45 fc             \tmov    %eax,-0x4(%ebp)</span><br><span class=\"line\"> 8048fa1:\t8b 45 fc             \tmov    -0x4(%ebp),%eax</span><br><span class=\"line\"> 8048fa4:\tc9                   \tleave  </span><br><span class=\"line\"> 8048fa5:\tc3                   \tret    </span><br><span class=\"line\"></span><br><span class=\"line\">08048fa6 &lt;secret_phase&gt;:</span><br><span class=\"line\"> 8048fa6:\t55                   \tpush   %ebp</span><br><span class=\"line\"> 8048fa7:\t89 e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> 8048fa9:\t83 ec 18             \tsub    $0x18,%esp</span><br><span class=\"line\"> 8048fac:\te8 a9 03 00 00       \tcall   804935a &lt;read_line&gt;</span><br><span class=\"line\"> 8048fb1:\t89 45 f4             \tmov    %eax,-0xc(%ebp)</span><br><span class=\"line\"> 8048fb4:\t8b 45 f4             \tmov    -0xc(%ebp),%eax</span><br><span class=\"line\"> 8048fb7:\t89 04 24             \tmov    %eax,(%esp)</span><br><span class=\"line\"> 8048fba:\te8 99 f8 ff ff       \tcall   8048858 &lt;atoi@plt&gt;</span><br><span class=\"line\"> 8048fbf:\t89 45 f8             \tmov    %eax,-0x8(%ebp)</span><br><span class=\"line\"> 8048fc2:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%ebp)</span><br><span class=\"line\"> 8048fc6:\t7e 09                \tjle    8048fd1 &lt;secret_phase+0x2b&gt;</span><br><span class=\"line\"> 8048fc8:\t81 7d f8 e9 03 00 00 \tcmpl   $0x3e9,-0x8(%ebp)</span><br><span class=\"line\"> 8048fcf:\t7e 05                \tjle    8048fd6 &lt;secret_phase+0x30&gt;</span><br><span class=\"line\"> 8048fd1:\te8 10 07 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048fd6:\t8b 45 f8             \tmov    -0x8(%ebp),%eax</span><br><span class=\"line\"> 8048fd9:\t89 44 24 04          \tmov    %eax,0x4(%esp)</span><br><span class=\"line\"> 8048fdd:\tc7 04 24 f0 a6 04 08 \tmovl   $0x804a6f0,(%esp)</span><br><span class=\"line\"> 8048fe4:\te8 4f ff ff ff       \tcall   8048f38 &lt;fun7&gt;</span><br><span class=\"line\"> 8048fe9:\t89 45 fc             \tmov    %eax,-0x4(%ebp)</span><br><span class=\"line\"> 8048fec:\t83 7d fc 06          \tcmpl   $0x6,-0x4(%ebp)</span><br><span class=\"line\"> 8048ff0:\t74 05                \tje     8048ff7 &lt;secret_phase+0x51&gt;</span><br><span class=\"line\"> 8048ff2:\te8 ef 06 00 00       \tcall   80496e6 &lt;explode_bomb&gt;</span><br><span class=\"line\"> 8048ff7:\tc7 04 24 38 9a 04 08 \tmovl   $0x8049a38,(%esp)</span><br><span class=\"line\"> 8048ffe:\te8 c5 f7 ff ff       \tcall   80487c8 &lt;puts@plt&gt;</span><br><span class=\"line\"> 8049003:\te8 08 07 00 00       \tcall   8049710 &lt;phase_defused&gt;</span><br><span class=\"line\"> 8049008:\tc9                   \tleave  </span><br><span class=\"line\"> 8049009:\tc3                   \tret    </span><br><span class=\"line\"> 804900a:\t90                   \tnop</span><br><span class=\"line\"> 804900b:\t90                   \tnop</span><br></pre></td></tr></table></figure>\n<h1 id=\"后续任务\"><a class=\"markdownIt-Anchor\" href=\"#后续任务\"></a> 后续任务</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\"> 有时间再完善隐藏层部分的内容</li>\n</ul>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/472178808\">CSAPP | Lab2-Bomb Lab 深入解析 - 知乎 (zhihu.com)</a> 文章提示了我第六层那个数据结构是个链表😅</li>\n</ul>\n","raw":"---\ntitle: CSAPP LAB-2 二进制炸弹实验\ntags:\n  - CSAPP\n  - ASM\n  - C\n  - 实验\n  - GDB\n  - objdump\ncover: 'https://cdn.gallery.uuanqin.top/img/20240522192911.webp'\ndescription: 该补的地方还是得补\ncategories:\n  - CSAPP LABS\nabbrlink: d1f3cf37\ndate: 2024-05-22 20:00:46\ntop_img:\n---\n\n> 死去的炸弹又来攻击我！！😅😅😅\n\nComputer Systems. A Programmer’s Perspective，CS: APP——中文译名《深入理解计算机系统》，是本科时候的必选课，研究生阶段选修了这门课，相当于重新再学一遍。本科学这门课时正值疫情，在加里敦~~（家里蹲）~~大学上了一个学期，当时太迷茫了，啥也不会，整个课上得懵懵懂懂。估计那时的炸弹也是看着网上的教程东抄抄西补补勉强弄出来的。\n\n现在研究生了，该补的地方还是得补。不管有多忙，我决定沉下心来重看《CSAPP》，炸弹客实验也打算亲自做做。最终还是做出来了😎，耗时 2 天。难度怎么说——还算适中吧，如果你仔细看过课本就不难。\n\n目前基本的 6 层炸弹已经拆除，还有一层隐藏层有时间再研究。由于每个人收到的炸弹是不同的（你的老师会说根据你的学号选择相应的炸弹），所以文章仅提供基本思路供参考。\n\n> [!notice] CSAPP LAB 实验\n>\n> - [[CSAPP LAB-1 位操作]]\n> - CSAPP LAB-2 二进制炸弹实验（本文）\n> - [[CSAPP LAB-3 缓冲区溢出炸弹]]\n> - [[CSAPP LAB-4 代码优化]]\n> - [[CSAPP LAB-5 手写动态存储分配器]]\n\n\n# 实验介绍\n\n二进制炸弹包含若干个阶段，每个阶段需要输入特定的字符串，所有输入正确则炸弹被排除，否则…..\n\n我们的任务是找出这些字符串字符串记录到文件中，可输入命令验证 `./bomb  solution.txt` 用换行区别不同阶段的字符串。\n\n下载压缩包 bombs，压缩包包含多个 `bomb` 代码包，根据学号领取自己的代码包。\n\n查看 `bomb.c` 可知程序利用 `phase_*` 函数（`*` 为 1~6） 检查输入字符串是否合法，不合法就引爆炸弹。我们的任务就是逆向出每个 phase 的检查规则，构造出合法字符串。当然，`bomb.c` 没有给出 `phase_*` 的源码\n\n逆向方法：\n\n- GDB\n- 直接反汇编\n\n课本参考：\n\n- CSAPP 第三章：GDB 的使用\n- CSAPP 第三章：过程\n\n链接参考（喜报：全是 English）：\n\n- GDB：\n\t- [Guide to Faster, Less Frustrating Debugging (ucdavis.edu)](https://heather.cs.ucdavis.edu/matloff/public_html/UnixAndC/CLanguage/Debug.html)\n\t- [GDB: The GNU Project Debugger](https://www.gnu.org/software/gdb/)\n- X86 指令手册：[CS:APP2e, Bryant and O'Hallaron (cmu.edu)](http://csapp.cs.cmu.edu/public/students.html)\n- GNU 汇编语法参考：\n\t- Wiki 简明介绍：[x86 Assembly/GNU assembly syntax - Wikibooks](https://en.wikibooks.org/wiki/X86_Assembly/GNU_assembly_syntax)\n\t- 手册：[Top (Using as) (sourceware.org)](https://sourceware.org/binutils/docs/as/)\n\n> 汇编语法看课本就行，GDB 命令看本文后续章节就行。以上链接你可以一个都不用点开。\n\n# GDB 工具的使用\n\n```sh\napt install gdb # 安装 GDB\ngdb --version   # 检查是否安装成功\n```\n\nGDB 不需要了解过多，想干什么直接查就行。现用现学。\n\n你可能用到的命令只有这些：\n\n- `run`：运行 GDB\n- `continue`：继续运行，可简写为 `c`。\n- `break <addr>`：在指定地址处设置断点。`break` 可简写为 `b`。\n- `print $eax`：打印某个寄存器的值。`print` 可简写为 `p`。\n- `p /x ($esp-0x8)`：打印某个寄存器的值的运算结果\n- `print (char *) <addr>` ：将直接打印该地址 `addr` 下的字符串\n- `print /x * <addr>` ：以十六进制的形式打印指定地址 `addr` 的值\n- `print ((int*) <addr>)[<index>]` ：打印指定位置 `addr` 数组下标为 `index` 的元素\n- `print ((int*) <addr>)[<index>]@<num>` ：打印指定位置数组的元素，起始坐标为 `index`，输出 `num` 个元素\n\n截一张课本的图供更多参考：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240519124236.webp)\n\n# 开始拆弹！\n\n## 拆弹准备\n\n在 Linux 环境下解压 bomb 压缩文件。\n\n```sh\ntar -xvf bomb7.tar\n```\n\n得到如下文件：\n\n- `bomb`：二进制可执行文件，任务目标文件\n- `bomb.c`：`bomb` 的源文件，辅助理解 `bomb` 代码\n\n首先使用 `objdump` 反汇编工具对 `bomb` 进行反汇编，输出的汇编文件名为 `dump.s`：\n\n```sh\nobjdump -d bomb > dump.s\n```\n\n`bomb.c` 是 `bomb` 的部分源文件，包含主函数 `main`。通读 `main` 函数以及注释，我们知道：\n\n1. 运行 `bomb` 时如果不带参数，我们将在标准输入中输入拆弹的字符串。\n2. 运行 `bomb` 时如果携带一个参数，则先从指定的文件中读取字符串\n3. 运行 `bomb` 时如果携带多于一个参数，则输出提示：`bomb [<input_file>]`\n4. 一共有 6 层炸弹，每一层通过输入一行字符串以进行拆弹\n5. 炸弹爆炸后不会有任何人受到伤害\n6. 可能存在隐藏关卡\n\n此外，我们可以在炸弹运行时 <kbd>Ctrl</kbd>+<kbd>C</kbd> 中止拆弹，邪恶博士😈（Dr. Evil）最终还是会放我们走的：\n\n```stdout\n^CSo you think you can stop the bomb with ctrl-c, do you?\nWell...OK. :-)\n```\n\n新建文件 `solution.txt`，之后我们可以直接在里面写字符串答案（每行按序写上各层答案），从而不用手动输入字符串。\n\n`bomb.c` 看完后，它的作用基本结束了。后面我们的时间将会花在人工解读 `dump.s` 文件以及使用 gdb 调试工具的过程中。\n\n`dump.s` 文件阅读要点：\n\n1. 不需要看懂所有汇编代码（实际上也不可能），只需看懂关键函数部分的代码。\n2. 关键函数：各层炸弹函数 `<phase_X>`，中间穿插的函数 `<funcX>`。为了便于自己的理解，有时候你也可以看一些工具类的函数，比如 `<read_six_numbers>` `<strings_not_equal>` 等，但这些函数看名字就知道其作用。\n3. 当运行到 `<explode_bomb>` 时炸弹爆炸，当该层函数安全结束返回到 main 运行 `<phase_defused>` 时该层炸弹安全破解。\n4. 多注释和分行便于阅读\n\n在破解某一层炸弹是，我们可以先随便输几个数，通过 GDB 工具推测我们的输入存放在栈中的哪个位置，这样也能方便推理。\n\n## Phase 1 - 寻找字符串\n\n> asm 代码阅读提示：左侧为程序地址与指令字节码，右侧为反汇编后得到的汇编代码。注释使用 `;` 以及 `#`。\n\n```asm\n08048b80 <phase_1>:\n 8048b80:\t55                   \tpush   %ebp\n 8048b81:\t89 e5                \tmov    %esp,%ebp\n 8048b83:\t83 ec 08             \tsub    $0x8,%esp\t\t\t# 栈指针 -8 \n 8048b86:\tc7 44 24 04 d8 99 04 \tmovl   $0x80499d8,0x4(%esp) # 栈+4 取 0x80499d8 存储的字符串\n 8048b8d:\t08 \n 8048b8e:\t8b 45 08             \tmov    0x8(%ebp),%eax       # 原先的栈指针 + 8 给 eax\n 8048b91:\t89 04 24             \tmov    %eax,(%esp)          # eax 放到 栈当前指向的位置\n 8048b94:\te8 86 05 00 00       \tcall   804911f <strings_not_equal> # 返回 0 表示字符串相等\n 8048b99:\t85 c0                \ttest   %eax,%eax            # test 执行的是 AND 操作。 eax为0才成功\n 8048b9b:\t74 05                \tje     8048ba2 <phase_1+0x22> # 破解成功 je 是判断标志位ZF是否为1\n 8048b9d:\te8 44 0b 00 00       \tcall   80496e6 <explode_bomb> # 破解失败\n 8048ba2:\tc9                   \tleave  \n 8048ba3:\tc3                   \tret   \n```\n\n> 使用 GDB 调试前记得打断点，比如：`b *0x8048b94`\n\n```gdb\n(gdb) p (char*)  0x80499d8\n$2 = 0x80499d8 \"I am not part of the problem. I am a Republican.\"\n```\n\n解析及要点：\n\n- 本层通过判断输入的字符串是否与指定字符串相等。\n- 此层只需使用 GDB 指令找出地址 `$0x80499d8` 存储的字符串，该字符串就是本层答案。\n\n点评与提示：\n\n- 拆弹入门。\n- 像遇到这种存在「魔数」的指令要多留心，常使用 GDB 打印该位置的内容，有可能存储关键字符串或数组。\n- %eax 多用于存储函数返回结果\n- `test   %eax,%eax` ：`test` 相当于 `and` 指令，用于测试 `%eax` 是否为 0。`je` 指令会判断 `ZF` 标志位，当 ZF 为 1 时说明 `%eax` 为 0，程序执行跳转。\n\n## Phase 2 - 有序数组\n\n```asm\n08048ba4 <phase_2>:\n 8048ba4:\t55                   \tpush   %ebp\n 8048ba5:\t89 e5                \tmov    %esp,%ebp\n 8048ba7:\t83 ec 28             \tsub    $0x28,%esp              # 栈指针 - 0x28 = 40 ；栈分配 40 字节\n 8048baa:\t8d 45 e4             \tlea    -0x1c(%ebp),%eax        # 原先栈 - 0x1c = 28\n 8048bad:\t89 44 24 04          \tmov    %eax,0x4(%esp)\t\t# 栈+4 <- 原先栈-28\n 8048bb1:\t8b 45 08             \tmov    0x8(%ebp),%eax\n 8048bb4:\t89 04 24             \tmov    %eax,(%esp)\t\t\t# 栈 <- 原先栈+8\n 8048bb7:\te8 d0 04 00 00       \tcall   804908c <read_six_numbers>\n 8048bbc:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%ebp)      # i = 1\n 8048bc3:\teb 1e                \tjmp    8048be3 <phase_2+0x3f>\n\n # 循环开始（比较前后两个数是否相差5）\n 8048bc5:\t8b 45 fc             \tmov    -0x4(%ebp),%eax          # 取 i\n 8048bc8:\t8b 54 85 e4          \tmov    -0x1c(%ebp,%eax,4),%edx  # arr[i]\n 8048bcc:\t8b 45 fc             \tmov    -0x4(%ebp),%eax          \n 8048bcf:\t48                   \tdec    %eax                     # 取 i-1 \n 8048bd0:\t8b 44 85 e4          \tmov    -0x1c(%ebp,%eax,4),%eax  # arr[i-1]\n 8048bd4:\t83 c0 05             \tadd    $0x5,%eax\t\t\t\t\n 8048bd7:\t39 c2                \tcmp    %eax,%edx\n 8048bd9:\t74 05                \tje     8048be0 <phase_2+0x3c>   # arr[i-1]+5 == arr[i] 必须相等\n 8048bdb:\te8 06 0b 00 00       \tcall   80496e6 <explode_bomb>\n 8048be0:\tff 45 fc             \tincl   -0x4(%ebp)               # i+=1\n\n 8048be3:\t83 7d fc 05          \tcmpl   $0x5,-0x4(%ebp)      \n 8048be7:\t7e dc                \tjle    8048bc5 <phase_2+0x21> # i <= 5 继续循环(i从1开始)\n 8048be9:\tc9                   \tleave  \n 8048bea:\tc3                   \tret    \n```\n\n断点打到 `<read_six_numbers>` 之后，比如 `0x8048bbc`。我们随便输入 5 个数字，比如 `1 6 11 16 21 26`，通过 GDB 可以判断其存储位置：\n\n```gdb\n# 下面展示了输入的 6 个数字的存储位置（示例数据）\n(gdb) p *(int*) 0xffffcc6c    $6 = 1\n(gdb) p *(int*) 0xffffcc70    $8 = 6\n(gdb) p *(int*) 0xffffcc74    $9 = 11\n(gdb) p *(int*) 0xffffcc78    $10 = 16\n(gdb) p *(int*) 0xffffcc7c    $11 = 21\n(gdb) p *(int*) 0xffffcc80    $12 = 26\n```\n\n> 为啥会知道查 6 个地址。我们根据这个原则就行：汇编中用到哪里，GDB 就查哪里。\n\n这里的汇编代码中存在一个典型的 `for` 循环结构，使用了「跳转到中间」策略（具体请看教材）。for 循环的通用形式：\n\n```c\nfor(init-expr;test-expr;update-expr)\n\tbody-statement;\n\n// 行为与下面的while循环代码一样\ninit-expr;\nwhile(test-expr){\n\tbody-statement\n\tupdate-expr;\n}\n```\n\n该部分汇编代码结构翻译为 C 语言的大致结构如下：\n\n```c\n\tinit-expr;\n\tgoto test;\nloop:\n\tbody-statement;\n\tupdate-expr;\ntest:\n\tt=test-expr;\n\tif(t)\n\t\tgoto loop;\n```\n\n解析及要点：\n\n- 本层需输入 6 个数字，每个数字需构成升序的等差数列（公差为 5）\n\n点评与提示：\n\n- 识别 `for` 循环\n- 知道输入的 6 个数字的存储位置\n## Phase 3 - 跳转表\n\n> 相信你通过了前面汇编的洗礼后，汇编代码的阅读能力提高了不少。本层开始就不会啰嗦太多哦，看注释即可。\n\n```asm\n08048beb <phase_3>:\n 8048beb:\t55                   \tpush   %ebp\n 8048bec:\t89 e5                \tmov    %esp,%ebp\n 8048bee:\t83 ec 38             \tsub    $0x38,%esp\n 8048bf1:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%ebp)\n 8048bf8:\t8d 45 f0             \tlea    -0x10(%ebp),%eax\n 8048bfb:\t89 44 24 10          \tmov    %eax,0x10(%esp)\n 8048bff:\t8d 45 ef             \tlea    -0x11(%ebp),%eax\n 8048c02:\t89 44 24 0c          \tmov    %eax,0xc(%esp)\n 8048c06:\t8d 45 f4             \tlea    -0xc(%ebp),%eax\n 8048c09:\t89 44 24 08          \tmov    %eax,0x8(%esp)\n 8048c0d:\tc7 44 24 04 09 9a 04 \tmovl   $0x8049a09,0x4(%esp)\n```\n\n查看魔数信息：\n\n```gdb\n(gdb) p (char*) 0x8049a09\n$13 = 0x8049a09 \"%d %c %d\"\n```\n\n这个字符串是不是很眼熟，这可能提示我们输入 3 个数据：1 个数字、1 个字符以及 1 个数字。我们可以像上一层那样随便输入 3 个数据。\n\n```asm\n 8048c14:\t08 \n 8048c15:\t8b 45 08             \tmov    0x8(%ebp),%eax\n 8048c18:\t89 04 24             \tmov    %eax,(%esp)\n 8048c1b:\te8 48 fc ff ff       \tcall   8048868 <sscanf@plt>\n 8048c20:\t89 45 f8             \tmov    %eax,-0x8(%ebp)          # 返回输入的个数\n 8048c23:\t83 7d f8 02          \tcmpl   $0x2,-0x8(%ebp)\n 8048c27:\t7f 05                \tjg     8048c2e <phase_3+0x43> \t# 输入（长度）必须大于2\n 8048c29:\te8 b8 0a 00 00       \tcall   80496e6 <explode_bomb>\n 8048c2e:\t8b 45 f4             \tmov    -0xc(%ebp),%eax          # -0xc(%ebp)携带输入的首地址\n 8048c31:\t89 45 dc             \tmov    %eax,-0x24(%ebp)         # 经过GDB调试，-0x24(%ebp) 表示第一个输入的数字\n 8048c34:\t83 7d dc 07          \tcmpl   $0x7,-0x24(%ebp)         # 输入的数字必须小于等于7\n 8048c38:\t0f 87 c0 00 00 00    \tja     8048cfe <phase_3+0x113> \t# 无符号大于7 - 则爆炸\n 8048c3e:\t8b 55 dc             \tmov    -0x24(%ebp),%edx\t\t\t# %edx = 第一个输入的数字\n 8048c41:\t8b 04 95 14 9a 04 08 \tmov    0x8049a14(,%edx,4),%eax \t\n 8048c48:\tff e0                \tjmp    *%eax \t\t\t\t\t# 例如第一个输入的数字是6 则 eax=0x8048cd4\n```\n\n> 汇编中用到哪里，GDB 就查哪里。`-0x24(%ebp)` 指向我们第一个输入的数字。\n\n像 `jmp    *%eax` 这种语法很眼熟，像是课本中提到的 `switch` 语句的汇编。我们可以尝试找出其跳转表：\n\n```gdb\n(gdb) print /x ((int*) 0x8049a14)[0]@8\n$25 = {0x8048c4a, 0x8048c66, 0x8048c82, 0x8048c97, 0x8048cac, 0x8048cbf, 0x8048cd4, 0x8048ce9}\n```\n\n我们就随便选一个，比如 6。接下来我们看 6 的代码就行。\n\n```asm\n # 0\n 8048c4a:\tc6 45 ff 67          \tmovb   $0x67,-0x1(%ebp)\n 8048c4e:\t8b 45 f0             \tmov    -0x10(%ebp),%eax\n 8048c51:\t3d c8 00 00 00       \tcmp    $0xc8,%eax\n 8048c56:\t0f 84 ab 00 00 00    \tje     8048d07 <phase_3+0x11c>\n 8048c5c:\te8 85 0a 00 00       \tcall   80496e6 <explode_bomb>\n 8048c61:\te9 a1 00 00 00       \tjmp    8048d07 <phase_3+0x11c>\n\n # 1\n 8048c66:\tc6 45 ff 6c          \tmovb   $0x6c,-0x1(%ebp)\n 8048c6a:\t8b 45 f0             \tmov    -0x10(%ebp),%eax\n 8048c6d:\t3d c7 03 00 00       \tcmp    $0x3c7,%eax\n 8048c72:\t0f 84 8f 00 00 00    \tje     8048d07 <phase_3+0x11c>\n 8048c78:\te8 69 0a 00 00       \tcall   80496e6 <explode_bomb>\n 8048c7d:\te9 85 00 00 00       \tjmp    8048d07 <phase_3+0x11c>\n\n # 2\n 8048c82:\tc6 45 ff 69          \tmovb   $0x69,-0x1(%ebp)\n 8048c86:\t8b 45 f0             \tmov    -0x10(%ebp),%eax\n 8048c89:\t3d 1e 02 00 00       \tcmp    $0x21e,%eax\n 8048c8e:\t74 77                \tje     8048d07 <phase_3+0x11c>\n 8048c90:\te8 51 0a 00 00       \tcall   80496e6 <explode_bomb>\n 8048c95:\teb 70                \tjmp    8048d07 <phase_3+0x11c>\n\n# 3\n 8048c97:\tc6 45 ff 6e          \tmovb   $0x6e,-0x1(%ebp)\n 8048c9b:\t8b 45 f0             \tmov    -0x10(%ebp),%eax\n 8048c9e:\t3d 6a 03 00 00       \tcmp    $0x36a,%eax\n 8048ca3:\t74 62                \tje     8048d07 <phase_3+0x11c>\n 8048ca5:\te8 3c 0a 00 00       \tcall   80496e6 <explode_bomb>\n 8048caa:\teb 5b                \tjmp    8048d07 <phase_3+0x11c>\n 8048cac:\tc6 45 ff 6f          \tmovb   $0x6f,-0x1(%ebp)\n\n # 4\n 8048cb0:\t8b 45 f0             \tmov    -0x10(%ebp),%eax\n 8048cb3:\t83 f8 3f             \tcmp    $0x3f,%eax\n 8048cb6:\t74 4f                \tje     8048d07 <phase_3+0x11c>\n 8048cb8:\te8 29 0a 00 00       \tcall   80496e6 <explode_bomb>\n 8048cbd:\teb 48                \tjmp    8048d07 <phase_3+0x11c>\n\n # 5\n 8048cbf:\tc6 45 ff 69          \tmovb   $0x69,-0x1(%ebp)\n 8048cc3:\t8b 45 f0             \tmov    -0x10(%ebp),%eax\n 8048cc6:\t3d 8f 00 00 00       \tcmp    $0x8f,%eax\n 8048ccb:\t74 3a                \tje     8048d07 <phase_3+0x11c>\n 8048ccd:\te8 14 0a 00 00       \tcall   80496e6 <explode_bomb>\n 8048cd2:\teb 33                \tjmp    8048d07 <phase_3+0x11c>\n\n# 6\n 8048cd4:\tc6 45 ff 77          \tmovb   $0x77,-0x1(%ebp)\t\t\t# 77 对应字符 w 为后文埋下伏笔\n 8048cd8:\t8b 45 f0             \tmov    -0x10(%ebp),%eax         # ebp - 0x10 是第三个输入的数字\n;  (gdb) p /x *0xffffcc78\n; $31 = 0x1b1\n 8048cdb:\t3d b1 01 00 00       \tcmp    $0x1b1,%eax              # $0x1b1 = 433 第三个数字和 0x1b1 比较\n 8048ce0:\t74 25                \tje     8048d07 <phase_3+0x11c>\n 8048ce2:\te8 ff 09 00 00       \tcall   80496e6 <explode_bomb>\n 8048ce7:\teb 1e                \tjmp    8048d07 <phase_3+0x11c>\n\n # 7\n 8048ce9:\tc6 45 ff 76          \tmovb   $0x76,-0x1(%ebp)\n 8048ced:\t8b 45 f0             \tmov    -0x10(%ebp),%eax         \n 8048cf0:\t3d 9f 03 00 00       \tcmp    $0x39f,%eax\n 8048cf5:\t74 10                \tje     8048d07 <phase_3+0x11c>\n 8048cf7:\te8 ea 09 00 00       \tcall   80496e6 <explode_bomb>\n\n 8048cfc:\teb 09                \tjmp    8048d07 <phase_3+0x11c>\n 8048cfe:\tc6 45 ff 65          \tmovb   $0x65,-0x1(%ebp)        # 爆炸\n 8048d02:\te8 df 09 00 00       \tcall   80496e6 <explode_bomb>\n  \n```\n\n> 汇编中用到哪里，GDB 就查哪里。`-0x10(%ebp)` 指向我们第三个输入的数字。\n\n```asm\n# 返回\n 8048d07:\t0f b6 45 ef          \tmovzbl -0x11(%ebp),%eax        # 零扩展传送到eax\n;  (gdb) p *(char*) 0xffffcc77\n; $37 = 119 'w'\n 8048d0b:\t38 45 ff             \tcmp    %al,-0x1(%ebp)          # al是rax的低字节 上文的伏笔\n 8048d0e:\t74 05                \tje     8048d15 <phase_3+0x12a> # 等于才成功，否则爆炸\n 8048d10:\te8 d1 09 00 00       \tcall   80496e6 <explode_bomb>\n 8048d15:\tc9                   \tleave  \n 8048d16:\tc3                   \tret  \n```\n\n> 汇编中用到哪里，GDB 就查哪里。`-0x11(%ebp)` 指向我们第二个输入的字符。\n\n解析及要点：\n\n- 本层需输入 3 个数据。根据跳转表内容输入符合要求的数字。比如：`6 w 433`。\n\n点评与提示：\n\n- 识别 `switch`\n- 善用 `GDB`\n\n## Phase 4 - 递归函数\n\n第四层使用到了一个函数，我们先解读这个函数：\n\n```asm\n08048d17 <func4>:\n 8048d17:\t55                   \tpush   %ebp\n 8048d18:\t89 e5                \tmov    %esp,%ebp\n 8048d1a:\t53                   \tpush   %ebx\n 8048d1b:\t83 ec 08             \tsub    $0x8,%esp\n 8048d1e:\t83 7d 08 01          \tcmpl   $0x1,0x8(%ebp)            \n 8048d22:\t7f 09                \tjg     8048d2d <func4+0x16>  # if x>1\n 8048d24:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%ebp)       # else\n 8048d2b:\teb 21                \tjmp    8048d4e <func4+0x37>\n\n 8048d2d:\t8b 45 08             \tmov    0x8(%ebp),%eax        # if x>1\n 8048d30:\t48                   \tdec    %eax              \n 8048d31:\t89 04 24             \tmov    %eax,(%esp)           # x-1 作为参数递归\n 8048d34:\te8 de ff ff ff       \tcall   8048d17 <func4>\n 8048d39:\t89 c3                \tmov    %eax,%ebx             # f(x-1) 的结果暂存\n 8048d3b:\t8b 45 08             \tmov    0x8(%ebp),%eax\n 8048d3e:\t83 e8 02             \tsub    $0x2,%eax      \n 8048d41:\t89 04 24             \tmov    %eax,(%esp)           # x-2 作为参数递归\n 8048d44:\te8 ce ff ff ff       \tcall   8048d17 <func4>\n 8048d49:\t01 c3                \tadd    %eax,%ebx             # f(x-1) 的结果+f(x-1)\n 8048d4b:\t89 5d f8             \tmov    %ebx,-0x8(%ebp)       # 作为返回结果\n\n 8048d4e:\t8b 45 f8             \tmov    -0x8(%ebp),%eax # 1 返回1\n 8048d51:\t83 c4 08             \tadd    $0x8,%esp\n 8048d54:\t5b                   \tpop    %ebx\n 8048d55:\t5d                   \tpop    %ebp\n 8048d56:\tc3                   \tret   \n```\n\n不难看出是个递归求斐波那契数列的函数：\n\n```c\nfunc4(x){\n\tif x>1:\n\t\treturn func4(x-1)+func4(x-2)\n\telse:\n\t\treturn 1;\n}\n// 输入：0 1 2 3 4 5 ... 13\n// 输出：1 1 2 3 5 8 ... 377\n```\n\n第四层的逻辑更加简单：\n\n```asm\n08048d57 <phase_4>:\n 8048d57:\t55                   \tpush   %ebp\n 8048d58:\t89 e5                \tmov    %esp,%ebp\n 8048d5a:\t83 ec 28             \tsub    $0x28,%esp\n 8048d5d:\t8d 45 f4             \tlea    -0xc(%ebp),%eax\n 8048d60:\t89 44 24 08          \tmov    %eax,0x8(%esp)\n 8048d64:\tc7 44 24 04 34 9a 04 \tmovl   $0x8049a34,0x4(%esp) #  0x8049a34 -> \"%d\"\n 8048d6b:\t08 \n 8048d6c:\t8b 45 08             \tmov    0x8(%ebp),%eax\n 8048d6f:\t89 04 24             \tmov    %eax,(%esp)\n 8048d72:\te8 f1 fa ff ff       \tcall   8048868 <sscanf@plt>\n 8048d77:\t89 45 fc             \tmov    %eax,-0x4(%ebp)      \n 8048d7a:\t83 7d fc 01          \tcmpl   $0x1,-0x4(%ebp)      # 只能输入一个数i，否则爆炸\n 8048d7e:\t75 07                \tjne    8048d87 <phase_4+0x30> # 跳转到爆炸\n 8048d80:\t8b 45 f4             \tmov    -0xc(%ebp),%eax  #   -0xc(%ebp)存放我们第一个输入的数i   \n;  (gdb) p  *0xffffcc7c\n; $42 = 13\n 8048d83:\t85 c0                \ttest   %eax,%eax            # -0xc(%ebp) 不能为零\n 8048d85:\t7f 05                \tjg     8048d8c <phase_4+0x35> # 大于才成功，否则爆炸\n 8048d87:\te8 5a 09 00 00       \tcall   80496e6 <explode_bomb>\n 8048d8c:\t8b 45 f4             \tmov    -0xc(%ebp),%eax\n 8048d8f:\t89 04 24             \tmov    %eax,(%esp)          # 将数字传参\n 8048d92:\te8 80 ff ff ff       \tcall   8048d17 <func4>      # i 进入函数func4\n\n 8048d97:\t89 45 f8             \tmov    %eax,-0x8(%ebp)\n 8048d9a:\t81 7d f8 79 01 00 00 \tcmpl   $0x179,-0x8(%ebp)    # 结果必须为 0x179 = 377 (斐波那契数列第13项)\n 8048da1:\t74 05                \tje     8048da8 <phase_4+0x51> # 等于才成功，否则爆炸\n 8048da3:\te8 3e 09 00 00       \tcall   80496e6 <explode_bomb>\n 8048da8:\tc9                   \tleave  \n 8048da9:\tc3                   \tret  \n```\n\n解析及要点：\n\n- 本层需输入 1 个数据。使得函数的输出结果与给定数字相等。在这里为 `13`\n\n点评与提示：\n\n- 会读递归函数\n\n\n## Phase 5 - 算数\n\n```asm\n08048daa <phase_5>:\n 8048daa:\t55                   \tpush   %ebp\n 8048dab:\t89 e5                \tmov    %esp,%ebp\n 8048dad:\t83 ec 18             \tsub    $0x18,%esp\n 8048db0:\t8b 45 08             \tmov    0x8(%ebp),%eax\n 8048db3:\t89 04 24             \tmov    %eax,(%esp)\n 8048db6:\te8 3a 03 00 00       \tcall   80490f5 <string_length>\n 8048dbb:\t89 45 fc             \tmov    %eax,-0x4(%ebp)\n 8048dbe:\t83 7d fc 06          \tcmpl   $0x6,-0x4(%ebp)\n 8048dc2:\t74 05                \tje     8048dc9 <phase_5+0x1f> # 输入的字符串长度必须为 6 \n 8048dc4:\te8 1d 09 00 00       \tcall   80496e6 <explode_bomb>\n 8048dc9:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%ebp)        # result = 0\n 8048dd0:\tc7 45 f4 00 00 00 00 \tmovl   $0x0,-0xc(%ebp)\t\t  # i = 0\n 8048dd7:\teb 1c                \tjmp    8048df5 <phase_5+0x4b>\n```\n\n我们看到后文老是出现 `-0x8(%ebp)`，`-0xc(%ebp)`。又看到熟悉的循环结构，干脆分别定义变量 `result`，`i` 辅助我们进行分析。\n\n```asm\n# 循环开始\n 8048dd9:\t8b 45 f4             \tmov    -0xc(%ebp),%eax\n 8048ddc:\t03 45 08             \tadd    0x8(%ebp),%eax  # 0x804a9a0 + i 就是遍历输入的字符串\n\n 8048ddf:\t0f b6 00             \tmovzbl (%eax),%eax\n 8048de2:\t0f be c0             \tmovsbl %al,%eax\n 8048de5:\t83 e0 0f             \tand    $0xf,%eax       # 对每一个字符串取低位字节 得到 k\n 8048de8:\t8b 04 85 c0 a5 04 08 \tmov    0x804a5c0(,%eax,4),%eax # 取 arr[k]\n\n 8048def:\t01 45 f8             \tadd    %eax,-0x8(%ebp)          # result += arr[k]\n 8048df2:\tff 45 f4             \tincl   -0xc(%ebp)\t\t\t\t# i++\n\n 8048df5:\t83 7d f4 05          \tcmpl   $0x5,-0xc(%ebp)\n 8048df9:\t7e de                \tjle    8048dd9 <phase_5+0x2f>  # i <= 5 继续循环\n 8048dfb:\t83 7d f8 24          \tcmpl   $0x24,-0x8(%ebp)\t\t\t# result == 36\n 8048dff:\t74 05                \tje     8048e06 <phase_5+0x5c>   # 必须相等\n 8048e01:\te8 e0 08 00 00       \tcall   80496e6 <explode_bomb>\n 8048e06:\tc9                   \tleave  \n 8048e07:\tc3                   \tret    \n```\n\n\n```gdb\n(gdb) p  (char*) 0x804a9a0\n$56 = 0x804a9a0 <input_strings+320> \"@@BBAA\"  # 假设输入的字符串为 `@@BBAA`\n# 0x804a5c0: {2, 10, 6, 1, 12, 16, 9, 3, 4, 7, 14, 5, 11, 8, 15, 13,     ...}\n```\n\n`0x804a9a0` 是一个数组 arr 的地址，我们需要输入包含 6 个字符的字符串：\n\n- 每个字符的低 4 位作为数组 arr 的索引 i。\n- 本例中，需要使得 `arr[0]`+`arr[1]`+...+`arr[5]` 的总和为 36 即可通关。\n\n例如：\n\n- 36 = 2+2+6+6+10+10\n- 各加数对应数组的序号为 0 0 2 2 1 1\n- ASCII 中，`@`：0x40   `B`：0x42  `A`：0x41，也就是对应序号 0, 2, 1\n- 答案即为 `@@BBAA`\n\n解析及要点：\n\n- 本层需输入合适字符串指示数组的下标，使得下标对应数组数字之和等于指定值即可。\n- 知道输入字符串的存储位置\n\n点评与提示：\n\n- 汇编的融会贯通\n\n## Phase 6 - 链表排序\n\n```asm\n08048e08 <phase_6>:\n 8048e08:\t55                   \tpush   %ebp\n 8048e09:\t89 e5                \tmov    %esp,%ebp\n 8048e0b:\t83 ec 48             \tsub    $0x48,%esp\n 8048e0e:\tc7 45 f0 3c a6 04 08 \tmovl   $0x804a63c,-0x10(%ebp) # $0x804a63c-> 0x329\n 8048e15:\t8d 45 d8             \tlea    -0x28(%ebp),%eax\n 8048e18:\t89 44 24 04          \tmov    %eax,0x4(%esp)\n 8048e1c:\t8b 45 08             \tmov    0x8(%ebp),%eax\n 8048e1f:\t89 04 24             \tmov    %eax,(%esp)\n 8048e22:\te8 65 02 00 00       \tcall   804908c <read_six_numbers>\n 8048e27:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%ebp)        # i=0\n 8048e2e:\teb 48                \tjmp    8048e78 <phase_6+0x70>\n\n# 循环A ------- 开始 用于判断：每个元素不相等，且每个元素不为0\n 8048e30:\t8b 45 f8             \tmov    -0x8(%ebp),%eax\n 8048e33:\t8b 44 85 d8          \tmov    -0x28(%ebp,%eax,4),%eax  # -0x28(%ebp) 的位置是输入数组的第一个元素\n 8048e37:\t85 c0                \ttest   %eax,%eax   \n 8048e39:\t7e 0c                \tjle    8048e47 <phase_6+0x3f>  # arr[i] == 0 跳转爆炸\n 8048e3b:\t8b 45 f8             \tmov    -0x8(%ebp),%eax         # arr[i] != 0\n 8048e3e:\t8b 44 85 d8          \tmov    -0x28(%ebp,%eax,4),%eax\n 8048e42:\t83 f8 06             \tcmp    $0x6,%eax               \n 8048e45:\t7e 05                \tjle    8048e4c <phase_6+0x44>  # arr[i]<= 6 否则爆炸\n 8048e47:\te8 9a 08 00 00       \tcall   80496e6 <explode_bomb>\n\n 8048e4c:\t8b 45 f8             \tmov    -0x8(%ebp),%eax\n 8048e4f:\t40                   \tinc    %eax\t\t\t\t\t# i++\n 8048e50:\t89 45 fc             \tmov    %eax,-0x4(%ebp)      # 存储ti = i+1\n 8048e53:\teb 1a                \tjmp    8048e6f <phase_6+0x67>\n\n 8048e55:\t8b 45 f8             \tmov    -0x8(%ebp),%eax\n 8048e58:\t8b 54 85 d8          \tmov    -0x28(%ebp,%eax,4),%edx  # edx = arr[i]\n 8048e5c:\t8b 45 fc             \tmov    -0x4(%ebp),%eax\n 8048e5f:\t8b 44 85 d8          \tmov    -0x28(%ebp,%eax,4),%eax  # eax = arr[i+1]\n 8048e63:\t39 c2                \tcmp    %eax,%edx\n 8048e65:\t75 05                \tjne    8048e6c <phase_6+0x64>   # 必须 arr[i] != arr[i+1] 否则爆炸\n 8048e67:\te8 7a 08 00 00       \tcall   80496e6 <explode_bomb>\n 8048e6c:\tff 45 fc             \tincl   -0x4(%ebp)               # ti++\n\n 8048e6f:\t83 7d fc 05          \tcmpl   $0x5,-0x4(%ebp)\t\t\n 8048e73:\t7e e0                \tjle    8048e55 <phase_6+0x4d> # ti<=5 则跳转\n 8048e75:\tff 45 f8             \tincl   -0x8(%ebp)             # i+1==5 ,i++ , i=6  即将退出循环\n\n 8048e78:\t83 7d f8 05          \tcmpl   $0x5,-0x8(%ebp)\n 8048e7c:\t7e b2                \tjle    8048e30 <phase_6+0x28>  # i<=5 循环（遍历6个元素）\n # 循环A ---- ------ 结束\n\n\n 8048e7e:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%ebp)\t\t# j=0\n 8048e85:\teb 34                \tjmp    8048ebb <phase_6+0xb3>\n\n\n # 循环B 开始 ---- 将数组平移到内存中的特定的位置$0x804a63c 开始的位置，8位隔开\n # 这是个链表\n 8048e87:\t8b 45 f0             \tmov    -0x10(%ebp),%eax     # 是个地址$0x804a63c，提前存有 0x329 = 809\n 8048e8a:\t89 45 f4             \tmov    %eax,-0xc(%ebp)      # t[1] 表示上一次的计算结果 = $0x804a63c\n 8048e8d:\tc7 45 fc 01 00 00 00 \tmovl   $0x1,-0x4(%ebp)      # tj = 1\n 8048e94:\teb 0c                \tjmp    8048ea2 <phase_6+0x9a>\n\n 8048e96:\t8b 45 f4             \tmov    -0xc(%ebp),%eax      # t[0]地址$0x804a63c\n 8048e99:\t8b 40 08             \tmov    0x8(%eax),%eax\t\t# 0x8(%eax) =$0x804a644 -> $0x804a630\n 8048e9c:\t89 45 f4             \tmov    %eax,-0xc(%ebp)      # 链表结点下移\n 8048e9f:\tff 45 fc             \tincl   -0x4(%ebp)           # tj++\n\n 8048ea2:\t8b 45 f8             \tmov    -0x8(%ebp),%eax\n 8048ea5:\t8b 44 85 d8          \tmov    -0x28(%ebp,%eax,4),%eax # arr[j]\n 8048ea9:\t3b 45 fc             \tcmp    -0x4(%ebp),%eax         # tj\n 8048eac:\t7f e8                \tjg     8048e96 <phase_6+0x8e>  # arr[j]>tj 大于\n\n 8048eae:\t8b 55 f8             \tmov    -0x8(%ebp),%edx         # edx = j\n 8048eb1:\t8b 45 f4             \tmov    -0xc(%ebp),%eax\t\t   # eax = t[0]\n 8048eb4:\t89 44 95 c0          \tmov    %eax,-0x40(%ebp,%edx,4) # 存储统计结果\n 8048eb8:\tff 45 f8             \tincl   -0x8(%ebp)              # j++\n\n 8048ebb:\t83 7d f8 05          \tcmpl   $0x5,-0x8(%ebp)\n 8048ebf:\t7e c6                \tjle    8048e87 <phase_6+0x7f> # j<=5 循环（遍历6个元素）\n# 循环B ------------------------ 结束\n\n 8048ec1:\t8b 45 c0             \tmov    -0x40(%ebp),%eax   # arr8[0]\n 8048ec4:\t89 45 f0             \tmov    %eax,-0x10(%ebp)   #  \n 8048ec7:\t8b 45 f0             \tmov    -0x10(%ebp),%eax\n 8048eca:\t89 45 f4             \tmov    %eax,-0xc(%ebp)    # t[1] 存储上一次运算结果 = arr8[0]\n 8048ecd:\tc7 45 f8 01 00 00 00 \tmovl   $0x1,-0x8(%ebp)    # k = 1\n 8048ed4:\teb 19                \tjmp    8048eef <phase_6+0xe7>\n\n# 循环C ------------------------- 开始 调整链表内的顺序\n 8048ed6:\t8b 45 f8             \tmov    -0x8(%ebp),%eax    # k\n 8048ed9:\t8b 54 85 c0          \tmov    -0x40(%ebp,%eax,4),%edx # edx = arr8[k]\n 8048edd:\t8b 45 f4             \tmov    -0xc(%ebp),%eax         # eax = $0x804a63c\n 8048ee0:\t89 50 08             \tmov    %edx,0x8(%eax)          # $0x804a63c+8 = arr8[k]\n 8048ee3:\t8b 45 f4             \tmov    -0xc(%ebp),%eax\n 8048ee6:\t8b 40 08             \tmov    0x8(%eax),%eax          # $0x804a63c+8\n 8048ee9:\t89 45 f4             \tmov    %eax,-0xc(%ebp)         # 基地址上移8\n 8048eec:\tff 45 f8             \tincl   -0x8(%ebp)          # k++\n\n 8048eef:\t83 7d f8 05          \tcmpl   $0x5,-0x8(%ebp)  \n 8048ef3:\t7e e1                \tjle    8048ed6 <phase_6+0xce>  # k<=5 循环（遍历5个元素，因为k从1开始的）\n# 循环C -------------------------- 结束\n\n 8048ef5:\t8b 45 f4             \tmov    -0xc(%ebp),%eax\n 8048ef8:\tc7 40 08 00 00 00 00 \tmovl   $0x0,0x8(%eax)   # 基址设置为0\n 8048eff:\t8b 45 f0             \tmov    -0x10(%ebp),%eax # 重新获取$0x804a63c\n 8048f02:\t89 45 f4             \tmov    %eax,-0xc(%ebp)\n 8048f05:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%ebp) # l = 0\n 8048f0c:\teb 22                \tjmp    8048f30 <phase_6+0x128>\n\n# 循环 D -------- 开始：左边的数大于右边的数\n 8048f0e:\t8b 45 f4             \tmov    -0xc(%ebp),%eax # $0x804a63c\n 8048f11:\t8b 10                \tmov    (%eax),%edx\n 8048f13:\t8b 45 f4             \tmov    -0xc(%ebp),%eax\n 8048f16:\t8b 40 08             \tmov    0x8(%eax),%eax\n 8048f19:\t8b 00                \tmov    (%eax),%eax\n 8048f1b:\t39 c2                \tcmp    %eax,%edx       # 相隔 8  的两个基址\n 8048f1d:\t7d 05                \tjge    8048f24 <phase_6+0x11c> #必须： 左基址 >= 右基址 \n 8048f1f:\te8 c2 07 00 00       \tcall   80496e6 <explode_bomb>\n 8048f24:\t8b 45 f4             \tmov    -0xc(%ebp),%eax\n 8048f27:\t8b 40 08             \tmov    0x8(%eax),%eax # 基址+8\n 8048f2a:\t89 45 f4             \tmov    %eax,-0xc(%ebp) # 基址更新\n 8048f2d:\tff 45 f8             \tincl   -0x8(%ebp)     # l++\n\n 8048f30:\t83 7d f8 04          \tcmpl   $0x4,-0x8(%ebp) # l<=4 5 次\n 8048f34:\t7e d8                \tjle    8048f0e <phase_6+0x106>\n# 循环D结束\n\n 8048f36:\tc9                   \tleave  \n 8048f37:\tc3                   \tret   \n```\n\n本例中出现的魔数 `0x804a63c` 为链表头结点地址，通过 GDB 我们可以得知链表结点地址以及存储的值：\n\n```gdb\n; 0x804a63c 0x329\n; 0x804a630 0x124\n; 0x804a638 0x325\n; 0x804a62c 0x178\n; 0x804a620 0x207\n; 0x804a614 0x92\n; 0x804a608 0x00 NULL\n```\n\n输入的数组要求：\n\n1. 6 个数字互不相同，范围 1~6\n2. 第 n 个数字值 v，代表第 n 个结点排序后的位置为 v\n3. 结点排序后的结果为：结点代表的值降序排序\n\n解析及要点：\n\n- 本层需输入 6 个数字对链表进行排序，使得排序结果满足目标要求\n- 必须识别出这是个链表\n- 逐个循环阅读\n\n点评与提示：\n\n- 耐心耐心耐心\n\n## Secret Phase\n\n拆除炸弹各层的提示语如下：\n\n```text\nWelcome to my fiendish little bomb. You have 6 phases with\nwhich to blow yourself up. Have a nice day!\nPhase 1 defused. How about the next one?\nThat's number 2.  Keep going!\nHalfway there!\nSo you got that one.  Try this one.\nGood work!  On to the next...\nCongratulations! You've defused the bomb!\n```\n\n但这并不意味着炸弹已经拆除完成，注意到 `bomb.c` 文件中有邪恶博士😈在最后一层炸弹拆除时留下的注释：\n\n```c\n/* Wow, they got it!  But isn't something... missing?  Perhaps\n* something they overlooked?  Mua ha ha ha ha! */\n```\n\n反汇编得到的汇编代码中还存在一些隐藏内容：`<func7>` 以及 `<secret_phase>` 函数。\n\n这部分就留给读者自己解决啦~~ 反正助教通过我的实验了，为了「完美主义」，我有时间在弄吧。\n\n> 看起来不多呢。\n\n```asm\n08048f38 <fun7>:\n 8048f38:\t55                   \tpush   %ebp\n 8048f39:\t89 e5                \tmov    %esp,%ebp\n 8048f3b:\t83 ec 0c             \tsub    $0xc,%esp\n 8048f3e:\t83 7d 08 00          \tcmpl   $0x0,0x8(%ebp)\n 8048f42:\t75 09                \tjne    8048f4d <fun7+0x15>\n 8048f44:\tc7 45 fc ff ff ff ff \tmovl   $0xffffffff,-0x4(%ebp)\n 8048f4b:\teb 54                \tjmp    8048fa1 <fun7+0x69>\n 8048f4d:\t8b 45 08             \tmov    0x8(%ebp),%eax\n 8048f50:\t8b 00                \tmov    (%eax),%eax\n 8048f52:\t3b 45 0c             \tcmp    0xc(%ebp),%eax\n 8048f55:\t7e 1c                \tjle    8048f73 <fun7+0x3b>\n 8048f57:\t8b 45 08             \tmov    0x8(%ebp),%eax\n 8048f5a:\t8b 50 04             \tmov    0x4(%eax),%edx\n 8048f5d:\t8b 45 0c             \tmov    0xc(%ebp),%eax\n 8048f60:\t89 44 24 04          \tmov    %eax,0x4(%esp)\n 8048f64:\t89 14 24             \tmov    %edx,(%esp)\n 8048f67:\te8 cc ff ff ff       \tcall   8048f38 <fun7>\n 8048f6c:\t01 c0                \tadd    %eax,%eax\n 8048f6e:\t89 45 fc             \tmov    %eax,-0x4(%ebp)\n 8048f71:\teb 2e                \tjmp    8048fa1 <fun7+0x69>\n 8048f73:\t8b 45 08             \tmov    0x8(%ebp),%eax\n 8048f76:\t8b 00                \tmov    (%eax),%eax\n 8048f78:\t3b 45 0c             \tcmp    0xc(%ebp),%eax\n 8048f7b:\t75 09                \tjne    8048f86 <fun7+0x4e>\n 8048f7d:\tc7 45 fc 00 00 00 00 \tmovl   $0x0,-0x4(%ebp)\n 8048f84:\teb 1b                \tjmp    8048fa1 <fun7+0x69>\n 8048f86:\t8b 45 08             \tmov    0x8(%ebp),%eax\n 8048f89:\t8b 50 08             \tmov    0x8(%eax),%edx\n 8048f8c:\t8b 45 0c             \tmov    0xc(%ebp),%eax\n 8048f8f:\t89 44 24 04          \tmov    %eax,0x4(%esp)\n 8048f93:\t89 14 24             \tmov    %edx,(%esp)\n 8048f96:\te8 9d ff ff ff       \tcall   8048f38 <fun7>\n 8048f9b:\t01 c0                \tadd    %eax,%eax\n 8048f9d:\t40                   \tinc    %eax\n 8048f9e:\t89 45 fc             \tmov    %eax,-0x4(%ebp)\n 8048fa1:\t8b 45 fc             \tmov    -0x4(%ebp),%eax\n 8048fa4:\tc9                   \tleave  \n 8048fa5:\tc3                   \tret    \n\n08048fa6 <secret_phase>:\n 8048fa6:\t55                   \tpush   %ebp\n 8048fa7:\t89 e5                \tmov    %esp,%ebp\n 8048fa9:\t83 ec 18             \tsub    $0x18,%esp\n 8048fac:\te8 a9 03 00 00       \tcall   804935a <read_line>\n 8048fb1:\t89 45 f4             \tmov    %eax,-0xc(%ebp)\n 8048fb4:\t8b 45 f4             \tmov    -0xc(%ebp),%eax\n 8048fb7:\t89 04 24             \tmov    %eax,(%esp)\n 8048fba:\te8 99 f8 ff ff       \tcall   8048858 <atoi@plt>\n 8048fbf:\t89 45 f8             \tmov    %eax,-0x8(%ebp)\n 8048fc2:\t83 7d f8 00          \tcmpl   $0x0,-0x8(%ebp)\n 8048fc6:\t7e 09                \tjle    8048fd1 <secret_phase+0x2b>\n 8048fc8:\t81 7d f8 e9 03 00 00 \tcmpl   $0x3e9,-0x8(%ebp)\n 8048fcf:\t7e 05                \tjle    8048fd6 <secret_phase+0x30>\n 8048fd1:\te8 10 07 00 00       \tcall   80496e6 <explode_bomb>\n 8048fd6:\t8b 45 f8             \tmov    -0x8(%ebp),%eax\n 8048fd9:\t89 44 24 04          \tmov    %eax,0x4(%esp)\n 8048fdd:\tc7 04 24 f0 a6 04 08 \tmovl   $0x804a6f0,(%esp)\n 8048fe4:\te8 4f ff ff ff       \tcall   8048f38 <fun7>\n 8048fe9:\t89 45 fc             \tmov    %eax,-0x4(%ebp)\n 8048fec:\t83 7d fc 06          \tcmpl   $0x6,-0x4(%ebp)\n 8048ff0:\t74 05                \tje     8048ff7 <secret_phase+0x51>\n 8048ff2:\te8 ef 06 00 00       \tcall   80496e6 <explode_bomb>\n 8048ff7:\tc7 04 24 38 9a 04 08 \tmovl   $0x8049a38,(%esp)\n 8048ffe:\te8 c5 f7 ff ff       \tcall   80487c8 <puts@plt>\n 8049003:\te8 08 07 00 00       \tcall   8049710 <phase_defused>\n 8049008:\tc9                   \tleave  \n 8049009:\tc3                   \tret    \n 804900a:\t90                   \tnop\n 804900b:\t90                   \tnop\n```\n\n# 后续任务\n\n- [ ] 有时间再完善隐藏层部分的内容\n\n# 本文参考\n- [CSAPP | Lab2-Bomb Lab 深入解析 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/472178808) 文章提示了我第六层那个数据结构是个链表😅\n","categories":[{"name":"CSAPP LABS","api":"api/categories/CSAPP-LABS.json"}],"tags":[{"name":"CSAPP","api":"api/tags/CSAPP.json"},{"name":"C","api":"api/tags/C.json"},{"name":"实验","api":"api/tags/实验.json"},{"name":"ASM","api":"api/tags/ASM.json"},{"name":"GDB","api":"api/tags/GDB.json"},{"name":"objdump","api":"api/tags/objdump.json"}]},"api":"api/posts/p/d1f3cf37.json"}