{"title":"CSAPP LAB-1 位操作","tags":["CSAPP","C","实验","离散数学"],"cover":"https://cdn.gallery.uuanqin.top/img/20240522202049.webp","description":"位级理解我们的代码","categories":["CSAPP LABS"],"abbrlink":"c5970284","date":"2024-05-22T19:30:43.000Z","top_img":null,"summary":"写完 Lab2 拆炸弹的实验解析后，打算补一下实验 1 的内容。因为感觉自己把时间投入进去了，除了有无形的成果外还要有有形的成果。再说，实验课上没要求我们写报告，没点内容沉淀感觉不自在。 > [!notice] CSAPP LAB 实验 > > - CSAPP LAB-1 位操作（本文） > - [[CSAPP LAB-2 二进制炸弹实验]] > - [[CSAPP LAB-3 缓冲区溢出炸弹]] > - [[CSAPP LAB-4 代码优化]] > - [[CSAPP LAB-5 手写动态存储分配器]] 实验介绍 本实验主要包括一些有关位操作的编程题，我们的目标是实现这些编程题。所有要实现的代码都在 `bits.c` 文件中。 `tar xvf datalab-handout.tar` 解压代码，包含如下文件 `bits.c`：唯一需要修改的文件 `btest.c`：该文件的作用是对我们实现的 bits.c 功能的正确性行评估， `README`：关于 btest 的一些说明。 `dlc`：语法检查 完成后用 `./dlc bits.c` 检查 `bits.c` 的语法是否正确，就是是否按照要求使用规定数量的操作符。如果语法检查无误，那么使用 `make btest`，生成 `btest` 可执行文件，该文件检查 `bits.c` 中实现的函数功能是否与要求的一致，具体用法如下 `./btest` 如果还需要修改 `bits.c` 那么需要 `make clean`。`make btest` 重新生成 `btest` 文件 `./btest -fisPositive` 单独测试某一个函数 `rating` 代表困难等级；`max ops` 代表最多可使用的操作符。 正确的测试结果为： 代码编写要求 实验内容 所有问题的答案均不唯一。因为我也在同时学习《离散数学》所以里面用到了不少命题表达。 异或的实现（难度：⭐） 如果你读过《离散数学》就会知道，任意的命题公式都可以仅包含 $\\{ \\neg,\\vee \\}$ 或 $\\{ \\neg,\\wedge \\}$ 的命题公式等价代换。因为： 由 $P\\leftrightarrow Q \\iff(P\\to Q)\\wedge(Q\\to P)$。..."}