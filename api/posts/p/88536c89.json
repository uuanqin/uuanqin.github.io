{"data":{"title":"Linux 使用 Cron 创建定时任务","slug":"核心协同/自动化/Linux 使用 Cron 创建定时任务","description":"快速上手 Linux 定时任务的创建。","date":"2023-12-06T12:27:40.000Z","updated":"2024-11-01T18:30:21.751Z","language":"zh-CN","comments":true,"url":"p/88536c89/","cover":"https://cdn.gallery.uuanqin.top/img/20231206205902.webp","images":[],"content":"<h1 id=\"什么是-cron\"><a class=\"markdownIt-Anchor\" href=\"#什么是-cron\"></a> 什么是 Cron？</h1>\n<h2 id=\"cron-的简介\"><a class=\"markdownIt-Anchor\" href=\"#cron-的简介\"></a> Cron 的简介</h2>\n<p>Cron 是类 Unix 操作系统（包括 Linux 和 macOS）中基于时间的作业调度器。它允许用户调度作业 (命令或脚本) 在固定的时间、日期或间隔内定期运行。它最常用于自动化系统维护或管理任务，但也可以用于任何需要定期、计划执行命令的情景。</p>\n<h2 id=\"关于-cron-的概念\"><a class=\"markdownIt-Anchor\" href=\"#关于-cron-的概念\"></a> 关于 Cron 的概念</h2>\n<p>cron 有 crond 和 crontab 两个概念。</p>\n<ul>\n<li>crond （cron daemon）：Cron 的核心，即后台守护进程。用来实际执行脚本，它在系统中是一直运行的，与 windows 的计划任务类似。它每分钟都会检查 crontab 文件或目录中的工作。</li>\n<li>crontab（cron table）：一个工具，它包含所有需要定时执行命令的列表。用来管理定时任务列表，比如添加作业、编辑作业、删除作业、查看作业。作为管理工具，不会后台运行，需要手动调用，执行完自动退出。</li>\n</ul>\n<p>crond 默认没有开启，需要手动启动一次服务。服务启动后，会一直运行，即便是重启系统，也会自动运行。相关命令使用 <code>systemctl</code> 执行：</p>\n<ul>\n<li>启动服务：<code>systemctl start crond</code></li>\n<li>关闭服务：<code>systemctl stop crond</code></li>\n<li>重启服务：<code>systemctl restart crond</code></li>\n</ul>\n<h1 id=\"cron-表达式\"><a class=\"markdownIt-Anchor\" href=\"#cron-表达式\"></a> Cron 表达式</h1>\n<p>cron 表达式是广义的，它包括了狭义的 cron 表达式和 crontab 表达式。这里介绍 crontab 表达式。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231206205307.webp\" alt=\"image.png\" /></p>\n<p>cron 的定时任务需要在作业文件中设定执行时间，包括时分秒、天数等，一共 7 个部分，格式如下：</p>\n<p><code>分 时 日 月 星期 [年] 命令</code></p>\n<ul>\n<li>分：必须，可选 0-59，可设置 <code>,-*/</code> 特殊字符</li>\n<li>时：必须，可选 0-23，可设置 <code>,-*/</code> 特殊字符</li>\n<li>日：必须，可选 1-31，可设置 <code>,-*?/LW</code> 特殊字符</li>\n<li>月：必须，可选 1-12 或 jan-dec，可设置 <code>,-*/</code> 特殊字符</li>\n<li>星期：必须，可选 0-7 或 sun-sta，可设置 <code>,-*?/L#</code> 特殊字符</li>\n<li>年：非必须，可留空，可设置 1970-2099，可设置 <code>,-*/</code> 特殊字符</li>\n</ul>\n<p>特殊字符的含义：</p>\n<ul>\n<li><code>*</code> 全部。意思是在该时间的任意点都应当执行</li>\n<li><code>?</code> 不指定，任意。仅用于 日（月）和日（周）。<code>0 0 5 * ?</code> 代表每个月的第 5 天零点，不论星期几。</li>\n<li><code>,</code> 多个值的分隔符</li>\n<li><code>-</code> 代表连续值，例如 <code>1-20</code></li>\n<li><code>/</code> 步长。</li>\n<li><code>L</code> 最后一天。可以是每月最后一天或者每周最后一天。如果用在 天 (周) 字段，并且前面加数字，则表示最后一个周 N。</li>\n<li><code>W</code> 工作日，指周一到周五的任意一天</li>\n<li><code>#</code> 表示第几个的意思，例如 <code>6#3</code>，表示当月第 3 个星期六</li>\n</ul>\n<p>你可以自行搜索在线工具进行解析含义：比如 <a href=\"https://tool.lu/crontab/\">crontab执行时间计算 - 在线工具 (tool.lu)</a></p>\n<p>关于 POSIX Cron 语法详见：<a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07\">crontab</a></p>\n<h1 id=\"简单实操\"><a class=\"markdownIt-Anchor\" href=\"#简单实操\"></a> 简单实操</h1>\n<p>例如，我们打算使用 Python 执行一个非常简单脚本，每分钟执行一次。</p>\n<p>内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<p>我们可以现在命令行测试我们要执行的命令是否成功：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/python /var/www/push_script/hello/hello.py &gt;&gt; /var/www/push_script/hello/hello.log</span><br></pre></td></tr></table></figure>\n<p>测试无误后，编写一个 cron 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * /usr/bin/python /var/www/push_script/hello/hello.py &gt;&gt; /var/www/push_script/hello/hello.log</span><br></pre></td></tr></table></figure>\n<p>注意命令的路径请使用绝对路径。可以使用 <code>#</code> 进行注释。</p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">为避免潜在的风险与歧义，建议总是使用绝对路径执行命令。</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>添加定时任务：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab hello.cron  <span class=\"comment\"># 添加一个定时任务</span></span><br><span class=\"line\">crontab -l          <span class=\"comment\"># 查看定时任务是否已加入系统中</span></span><br><span class=\"line\">crontab -e          <span class=\"comment\"># 编辑任务</span></span><br><span class=\"line\">crontab -r          <span class=\"comment\"># 删除所有作业。如果只删除部分，需要通过编辑来实现。</span></span><br></pre></td></tr></table></figure>\n<p>查看 linux 定时任务日志查看是否已执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> -f /var/log/cron</span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231206201940.webp\" alt=\"image.png\" /></p>\n<p>查看 log 的写入情况：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231206202037.webp\" alt=\"image.png\" /></p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://blog.csdn.net/wqc19920906/article/details/119764643\">关于linux定时任务crontab运行PYTHON脚本不生效，但是手动执行却正常的问题_crontab 执行多个py文件不生效_jcpp9527的博客-CSDN博客</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/353029881\">Linux Cron 定时任务 - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://www.cnblogs.com/GarrettWale/p/16256688.html\">crontab和cron表达式详解 - Garrett_Wale - 博客园 (cnblogs.com)</a></li>\n<li><a href=\"https://blog.csdn.net/wd2011063437/article/details/78960668\">linux命令——crontab的使用方法_crontab 用法-CSDN博客</a></li>\n<li><a href=\"https://linuxiac.com/how-to-use-cron-and-crontab-on-linux/\">How to Use Cron on Linux: Tips, Tricks, and Examples (linuxiac.com)</a></li>\n</ul>\n","raw":"---\ntitle: Linux 使用 Cron 创建定时任务\ntags:\n  - Cron\n  - crontab\n  - linux\n  - Python\ncover: 'https://cdn.gallery.uuanqin.top/img/20231206205902.webp'\ndescription: 快速上手 Linux 定时任务的创建。\nabbrlink: 88536c89\ncategories:\n  - 核心协同\n  - 自动化\ndate: 2023-12-06 20:27:40\ntop_img:\n---\n\n# 什么是 Cron？\n\n## Cron 的简介\n\nCron 是类 Unix 操作系统（包括 Linux 和 macOS）中基于时间的作业调度器。它允许用户调度作业 (命令或脚本) 在固定的时间、日期或间隔内定期运行。它最常用于自动化系统维护或管理任务，但也可以用于任何需要定期、计划执行命令的情景。\n\n## 关于 Cron 的概念\n\ncron 有 crond 和 crontab 两个概念。\n\n- crond （cron daemon）：Cron 的核心，即后台守护进程。用来实际执行脚本，它在系统中是一直运行的，与 windows 的计划任务类似。它每分钟都会检查 crontab 文件或目录中的工作。\n- crontab（cron table）：一个工具，它包含所有需要定时执行命令的列表。用来管理定时任务列表，比如添加作业、编辑作业、删除作业、查看作业。作为管理工具，不会后台运行，需要手动调用，执行完自动退出。\n\ncrond 默认没有开启，需要手动启动一次服务。服务启动后，会一直运行，即便是重启系统，也会自动运行。相关命令使用 `systemctl` 执行：\n\n- 启动服务：`systemctl start crond`\n- 关闭服务：`systemctl stop crond`\n- 重启服务：`systemctl restart crond`\n\n# Cron 表达式\n\ncron 表达式是广义的，它包括了狭义的 cron 表达式和 crontab 表达式。这里介绍 crontab 表达式。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231206205307.webp)\n\ncron 的定时任务需要在作业文件中设定执行时间，包括时分秒、天数等，一共 7 个部分，格式如下：\n\n`分 时 日 月 星期 [年] 命令`\n\n- 分：必须，可选 0-59，可设置 `,-*/` 特殊字符\n- 时：必须，可选 0-23，可设置 `,-*/` 特殊字符\n- 日：必须，可选 1-31，可设置 `,-*?/LW` 特殊字符\n- 月：必须，可选 1-12 或 jan-dec，可设置 `,-*/` 特殊字符\n- 星期：必须，可选 0-7 或 sun-sta，可设置 `,-*?/L#` 特殊字符\n- 年：非必须，可留空，可设置 1970-2099，可设置 `,-*/` 特殊字符\n\n特殊字符的含义：\n\n* `*` 全部。意思是在该时间的任意点都应当执行\n* `?` 不指定，任意。仅用于 日（月）和日（周）。`0 0 5 * ?` 代表每个月的第 5 天零点，不论星期几。\n* `,` 多个值的分隔符\n* `-` 代表连续值，例如 `1-20`\n* `/` 步长。\n* `L` 最后一天。可以是每月最后一天或者每周最后一天。如果用在 天 (周) 字段，并且前面加数字，则表示最后一个周 N。\n* `W` 工作日，指周一到周五的任意一天\n* `#` 表示第几个的意思，例如 `6#3`，表示当月第 3 个星期六\n\n你可以自行搜索在线工具进行解析含义：比如 [crontab执行时间计算 - 在线工具 (tool.lu)](https://tool.lu/crontab/)\n\n关于 POSIX Cron 语法详见：[crontab](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07)\n\n# 简单实操\n\n例如，我们打算使用 Python 执行一个非常简单脚本，每分钟执行一次。\n\n内容如下：\n\n```python\ndef main():\n    print(\"Hello World\")\nif __name__ == '__main__':\n    main()\n```\n\n我们可以现在命令行测试我们要执行的命令是否成功：\n\n```sh\n/usr/bin/python /var/www/push_script/hello/hello.py >> /var/www/push_script/hello/hello.log\n```\n\n测试无误后，编写一个 cron 文件：\n\n```cron\n* * * * * /usr/bin/python /var/www/push_script/hello/hello.py >> /var/www/push_script/hello/hello.log\n```\n\n注意命令的路径请使用绝对路径。可以使用 `#` 进行注释。\n\n> [!hint] 为避免潜在的风险与歧义，建议总是使用绝对路径执行命令。\n\n添加定时任务：\n\n```sh\ncrontab hello.cron  # 添加一个定时任务\ncrontab -l          # 查看定时任务是否已加入系统中\ncrontab -e          # 编辑任务\ncrontab -r          # 删除所有作业。如果只删除部分，需要通过编辑来实现。\n```\n\n查看 linux 定时任务日志查看是否已执行：\n\n```sh\ntail -f /var/log/cron\n```\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231206201940.webp)\n\n查看 log 的写入情况：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231206202037.webp)\n\n# 本文参考\n\n* [关于linux定时任务crontab运行PYTHON脚本不生效，但是手动执行却正常的问题_crontab 执行多个py文件不生效_jcpp9527的博客-CSDN博客](https://blog.csdn.net/wqc19920906/article/details/119764643)\n* [Linux Cron 定时任务 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/353029881)\n* [crontab和cron表达式详解 - Garrett_Wale - 博客园 (cnblogs.com)](https://www.cnblogs.com/GarrettWale/p/16256688.html)\n* [linux命令——crontab的使用方法_crontab 用法-CSDN博客](https://blog.csdn.net/wd2011063437/article/details/78960668)\n* [How to Use Cron on Linux: Tips, Tricks, and Examples (linuxiac.com)](https://linuxiac.com/how-to-use-cron-and-crontab-on-linux/)","categories":[{"name":"核心协同","api":"api/categories/核心协同.json"},{"name":"自动化","api":"api/categories/核心协同/自动化.json"}],"tags":[{"name":"Python","api":"api/tags/Python.json"},{"name":"Cron","api":"api/tags/Cron.json"},{"name":"crontab","api":"api/tags/crontab.json"},{"name":"linux","api":"api/tags/linux.json"}]},"api":"api/posts/p/88536c89.json"}