{"title":"CSAPP LAB-5 手写动态存储分配器","tags":["CSAPP","C","malloc","内存分配"],"cover":"https://cdn.gallery.uuanqin.top/img/20240617204205.webp","categories":["CSAPP LABS"],"abbrlink":"3eb1abc7","date":"2024-06-13T12:01:31.000Z","description":"课本案例实践","top_img":null,"summary":"我也大概察觉到我们课程的实验是挑着 CSAPP 中原版实验去做的，并进行了简化，所以和网上的实验顺序不太一样，但内容是大致相同的。 > [!notice] CSAPP LAB 实验 > > - [[CSAPP LAB-1 位操作]] > - [[CSAPP LAB-2 二进制炸弹实验]] > - [[CSAPP LAB-3 缓冲区溢出炸弹]] > - [[CSAPP LAB-4 代码优化]] > - CSAPP LAB-5 手写动态存储分配器（本文） 这次的实验建议先看课本的第九章的 9.9 部分（《CSAPP》第三版），理解其中的内容后进行实现。而且大部分代码课本上都有。不管你现在《CSAPP》学到哪一个部分，都可以直接看 9.9 章，不用担心没有铺垫内容。 本文将介绍一个动态存储分配器的简单实现：隐式空闲链表 + 立即边界标记合并方式 + 首次匹配/下次匹配算法。更高级的实现可以看文末参考文章。 > 这是我 CSAPP 课程的最后一个实验了，每次专挑👩助教验收，温柔贴心给分高😍！ 实验介绍和要求 本实验需要用 c 语言实现一个动态的存储分配器，也就是你自己版本的 `malloc`，`free`，`realloc` 函数。 解压文件： 我们需要修改的唯一文件是 `mm.c`，包含如下几个需要实现的函数： 记住哦，本次实验的任务要求之一是指针是 8 字节对齐的。 我们可以调用实验提供给我们的函数，这些函数定义在 `memory.c` 中： `void *mem_sbrk(int incr)`: Expands the heap by incr bytes, where incr is a positive non-zero integer and returns a generic pointer to the first byte of the newly allocated heap area. `void *mem_heap_lo(void)`: Returns a generic pointer to the first byte in the heap. `void *mem_heap_hi(void)`: Returns a generic pointer to the last byte in the heap. ..."}