{"data":{"title":"CSAPP LAB-1 位操作","slug":"CSAPP LABS/CSAPP LAB-1 位操作","description":"位级理解我们的代码","date":"2024-05-22T11:30:43.000Z","updated":"2025-10-12T15:40:27.763Z","language":"zh-CN","comments":true,"url":"p/c5970284/","cover":"https://cdn.gallery.uuanqin.top/img/20240522202049.webp","images":[],"content":"<p>写完 Lab2 拆炸弹的实验解析后，打算补一下实验 1 的内容。因为感觉自己把时间投入进去了，除了有无形的成果外还要有有形的成果。再说，实验课上没要求我们写报告，没点内容沉淀感觉不自在。</p>\n\n<div class=\"callout\" data-callout=\"notice\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">CSAPP LAB 实验系列</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ul>\n<li>CSAPP LAB-1 位操作（本文）</li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/d1f3cf37/\"><span class=\"bilink-pop-up\">站内文章</span>CSAPP LAB-2 二进制炸弹实验</a></li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/67787353/\"><span class=\"bilink-pop-up\">站内文章</span>CSAPP LAB-3 缓冲区溢出炸弹</a></li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/9d6b717/\"><span class=\"bilink-pop-up\">站内文章</span>CSAPP LAB-4 代码优化</a></li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/3eb1abc7/\"><span class=\"bilink-pop-up\">站内文章</span>CSAPP LAB-5 手写动态存储分配器</a></li>\n</ul>\n</div></div><h1 id=\"实验介绍\"><a class=\"markdownIt-Anchor\" href=\"#实验介绍\"></a> 实验介绍</h1>\n<p>本实验主要包括一些有关位操作的编程题，我们的目标是实现这些编程题。所有要实现的代码都在 <code>bits.c</code> 文件中。</p>\n<p><code>tar xvf datalab-handout.tar</code> 解压代码，包含如下文件</p>\n<ul>\n<li><code>bits.c</code>：唯一需要修改的文件</li>\n<li><code>btest.c</code>：该文件的作用是对我们实现的 <code>bits.c</code> 功能的正确性行评估，</li>\n<li><code>README</code>：关于 <code>btest.c</code> 的一些说明。</li>\n<li><code>dlc</code>：语法检查</li>\n</ul>\n<p>完成后用 <code>./dlc bits.c</code> 检查 <code>bits.c</code> 的语法是否正确，就是是否按照要求使用规定数量的操作符。如果语法检查无误，那么使用 <code>make btest</code>，生成 <code>btest</code> 可执行文件，该文件检查 <code>bits.c</code> 中实现的函数功能是否与要求的一致，具体用法如下 <code>./btest</code></p>\n<p>如果还需要修改 <code>bits.c</code> 那么需要 <code>make clean</code>。<code>make btest</code> 重新生成 <code>btest</code> 文件</p>\n<p><code>./btest -fisPositive</code> 单独测试某一个函数</p>\n<p><code>rating</code> 代表困难等级；<code>max ops</code> 代表最多可使用的操作符。</p>\n<p>正确的测试结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Score   Rating  Errors  Function</span><br><span class=\"line\"> 1      1       0       bitXor</span><br><span class=\"line\"> 1      1       0       tmin</span><br><span class=\"line\"> 1      1       0       isTmax</span><br><span class=\"line\"> 2      2       0       allOddBits</span><br><span class=\"line\"> 2      2       0       negate</span><br><span class=\"line\"> 3      3       0       isAsciiDigit</span><br><span class=\"line\"> 3      3       0       conditional</span><br><span class=\"line\"> 3      3       0       isLessOrEqual</span><br><span class=\"line\"> 4      4       0       logicalNeg</span><br><span class=\"line\"> 4      4       0       howManyBits</span><br><span class=\"line\"> 4      4       0       floatScale2</span><br><span class=\"line\"> 4      4       0       floatFloat2Int</span><br><span class=\"line\"> 4      4       0       floatPower2</span><br><span class=\"line\">Total points: 36/36</span><br></pre></td></tr></table></figure>\n<h1 id=\"代码编写要求\"><a class=\"markdownIt-Anchor\" href=\"#代码编写要求\"></a> 代码编写要求</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> 0</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Instructions to Students:</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * STEP 1: Read the following instructions carefully.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">You will provide your solution to the Data Lab by</span><br><span class=\"line\">editing the collection of functions in this source file.</span><br><span class=\"line\"></span><br><span class=\"line\">INTEGER CODING RULES:</span><br><span class=\"line\"> </span><br><span class=\"line\">  Replace the <span class=\"string\">&quot;return&quot;</span> statement in each function with one</span><br><span class=\"line\">  or more lines of C code that implements the function. Your code </span><br><span class=\"line\">  must conform to the following style:</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">Funct</span><span class=\"params\">(arg1, arg2, ...)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* brief description of how your implementation works */</span></span><br><span class=\"line\">      <span class=\"type\">int</span> var1 = Expr1;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      <span class=\"type\">int</span> varM = ExprM;</span><br><span class=\"line\"></span><br><span class=\"line\">      varJ = ExprJ;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      varN = ExprN;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ExprR;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Each <span class=\"string\">&quot;Expr&quot;</span> is an expression using ONLY the following:</span><br><span class=\"line\">  <span class=\"number\">1.</span> Integer constants <span class=\"number\">0</span> through <span class=\"number\">255</span> (<span class=\"number\">0xFF</span>), inclusive. You are</span><br><span class=\"line\">      not allowed to use big constants such as <span class=\"number\">0xffffffff</span>.</span><br><span class=\"line\">  <span class=\"number\">2.</span> Function arguments and local <span class=\"title function_\">variables</span> <span class=\"params\">(no global variables)</span>.</span><br><span class=\"line\">  3. Unary integer operations ! ~</span><br><span class=\"line\">  4. Binary integer operations &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">  Some of the problems <span class=\"keyword\">restrict</span> the <span class=\"built_in\">set</span> of allowed operators even further.</span><br><span class=\"line\">  Each &quot;Expr&quot; may consist of multiple operators. You are not restricted to</span><br><span class=\"line\">  one operator per line.</span><br><span class=\"line\"></span><br><span class=\"line\">  You are expressly forbidden to:</span><br><span class=\"line\">  1. Use any control constructs such as <span class=\"keyword\">if</span>, <span class=\"keyword\">do</span>, <span class=\"keyword\">while</span>, <span class=\"keyword\">for</span>, <span class=\"keyword\">switch</span>, etc.</span><br><span class=\"line\">  2. Define or use any macros.</span><br><span class=\"line\">  3. Define any additional functions in this file.</span><br><span class=\"line\">  4. Call any functions.</span><br><span class=\"line\">  5. Use any other operations, such as &amp;&amp;, ||, -, or ?:</span><br><span class=\"line\">  6. Use any form of casting.</span><br><span class=\"line\">  7. Use any data type other than <span class=\"type\">int</span>.  This implies that you</span><br><span class=\"line\">     cannot use arrays, structs, or unions.</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">  You may assume that your machine:</span><br><span class=\"line\">  1. Uses 2s complement, 32-bit representations of integers.</span><br><span class=\"line\">  2. Performs right shifts arithmetically.</span><br><span class=\"line\">  3. Has unpredictable behavior when shifting <span class=\"keyword\">if</span> the shift amount</span><br><span class=\"line\">     is less than 0 or greater than 31.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">EXAMPLES OF ACCEPTABLE CODING STYLE:</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * pow2plus1 - returns 2^x + 1, where 0 &lt;= x &lt;= 31</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">pow2plus1</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/* exploit ability of shifts to compute powers of 2 */</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> (<span class=\"number\">1</span> &lt;&lt; x) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   * pow2plus4 - returns 2^x + 4, where 0 &lt;= x &lt;= 31</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">pow2plus4</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/* exploit ability of shifts to compute powers of 2 */</span></span><br><span class=\"line\">     <span class=\"type\">int</span> result = (<span class=\"number\">1</span> &lt;&lt; x);</span><br><span class=\"line\">     result += <span class=\"number\">4</span>;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FLOATING POINT CODING RULES</span><br><span class=\"line\"></span><br><span class=\"line\">For the problems that require you to implement floating-point operations,</span><br><span class=\"line\">the coding rules are less strict.  You are allowed to use looping and</span><br><span class=\"line\">conditional control.  You are allowed to use both ints and unsigneds.</span><br><span class=\"line\">You can use arbitrary integer and <span class=\"type\">unsigned</span> constants. You can use any arithmetic,</span><br><span class=\"line\">logical, or comparison operations on <span class=\"type\">int</span> or <span class=\"type\">unsigned</span> data.</span><br><span class=\"line\"></span><br><span class=\"line\">You are expressly forbidden to:</span><br><span class=\"line\">  <span class=\"number\">1.</span> Define or use any macros.</span><br><span class=\"line\">  <span class=\"number\">2.</span> Define any additional functions in this file.</span><br><span class=\"line\">  <span class=\"number\">3.</span> Call any functions.</span><br><span class=\"line\">  <span class=\"number\">4.</span> Use any form of casting.</span><br><span class=\"line\">  <span class=\"number\">5.</span> Use any data type other than <span class=\"type\">int</span> or <span class=\"type\">unsigned</span>.  This means that you</span><br><span class=\"line\">     cannot use arrays, structs, or unions.</span><br><span class=\"line\">  <span class=\"number\">6.</span> Use any floating point data types, operations, or constants.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">NOTES:</span><br><span class=\"line\">  <span class=\"number\">1.</span> Use the <span class=\"title function_\">dlc</span> <span class=\"params\">(data lab checker)</span> <span class=\"title function_\">compiler</span> <span class=\"params\">(described in the handout)</span> to </span><br><span class=\"line\">     check the legality of your solutions.</span><br><span class=\"line\">  2. Each function has a maximum number of <span class=\"title function_\">operations</span> <span class=\"params\">(integer, logical,</span></span><br><span class=\"line\"><span class=\"params\">     or comparison)</span> that you are allowed to use <span class=\"keyword\">for</span> your implementation</span><br><span class=\"line\">     of the function.  The max operator count is checked by dlc.</span><br><span class=\"line\">     Note that <span class=\"title function_\">assignment</span> <span class=\"params\">(<span class=\"string\">&#x27;=&#x27;</span>)</span> is not counted; you may use as many of</span><br><span class=\"line\">     these as you want without penalty.</span><br><span class=\"line\">  <span class=\"number\">3.</span> Use the btest test harness to check your functions <span class=\"keyword\">for</span> correctness.</span><br><span class=\"line\">  <span class=\"number\">4.</span> Use the BDD checker to formally verify your functions</span><br><span class=\"line\">  <span class=\"number\">5.</span> The maximum number of ops <span class=\"keyword\">for</span> each function is given in the</span><br><span class=\"line\">     header comment <span class=\"keyword\">for</span> each function. If there are any inconsistencies </span><br><span class=\"line\">     between the maximum ops in the writeup and in this file, consider</span><br><span class=\"line\">     this file the authoritative source.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * STEP 2: Modify the following functions according the coding rules.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> *   IMPORTANT. TO AVOID GRADING SURPRISES:</span></span><br><span class=\"line\"><span class=\"comment\"> *   1. Use the dlc compiler to check that your solutions conform</span></span><br><span class=\"line\"><span class=\"comment\"> *      to the coding rules.</span></span><br><span class=\"line\"><span class=\"comment\"> *   2. Use the BDD checker to formally verify that your solutions produce </span></span><br><span class=\"line\"><span class=\"comment\"> *      the correct answers.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"实验内容\"><a class=\"markdownIt-Anchor\" href=\"#实验内容\"></a> 实验内容</h1>\n<p>所有问题的答案均不唯一。因为我也在同时学习《离散数学》所以里面用到了不少命题表达。</p>\n<h2 id=\"异或的实现难度\"><a class=\"markdownIt-Anchor\" href=\"#异或的实现难度\"></a> 异或的实现（难度：⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: bitXor(4, 5) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ~ &amp;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 14</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">bitXor</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// A 异或 B</span></span><br><span class=\"line\">  <span class=\"type\">int</span> a = x &amp; (~y);  <span class=\"comment\">//10</span></span><br><span class=\"line\">  <span class=\"type\">int</span> b = (~x) &amp; y;  <span class=\"comment\">//01</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ~((~a)&amp;(~b));  <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你读过《离散数学》就会知道，任意的命题公式都可以仅包含 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">¬</mi><mo separator=\"true\">,</mo><mo>∨</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{ \\neg,\\vee \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">¬</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∨</span><span class=\"mclose\">}</span></span></span></span> 或 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">¬</mi><mo separator=\"true\">,</mo><mo>∧</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{ \\neg,\\wedge \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">¬</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∧</span><span class=\"mclose\">}</span></span></span></span> 的命题公式等价代换。因为：</p>\n<ol>\n<li>由 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>↔</mo><mi>Q</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi>P</mi><mo>→</mo><mi>Q</mi><mo stretchy=\"false\">)</mo><mo>∧</mo><mo stretchy=\"false\">(</mo><mi>Q</mi><mo>→</mo><mi>P</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P\\leftrightarrow Q \\iff(P\\to Q)\\wedge(Q\\to P)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↔</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mclose\">)</span></span></span></span>。故我们可以把 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↔</mo></mrow><annotation encoding=\"application/x-tex\">\\leftrightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">↔</span></span></span></span> 替换为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo><mo separator=\"true\">,</mo><mo>∧</mo></mrow><annotation encoding=\"application/x-tex\">\\to,\\wedge</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.75em;vertical-align:-0.19444em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∧</span></span></span></span></li>\n<li>由 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>→</mo><mi>Q</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant=\"normal\">¬</mi><mi>P</mi><mo>∨</mo><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">P\\to Q\\iff \\neg P\\vee Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span>。故我们可以把 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 替换为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mo separator=\"true\">,</mo><mo>∨</mo></mrow><annotation encoding=\"application/x-tex\">\\neg,\\vee</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.75em;vertical-align:-0.19444em;\"></span><span class=\"mord\">¬</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∨</span></span></span></span></li>\n<li>由 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>∧</mo><mi>Q</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant=\"normal\">¬</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">¬</mi><mi>P</mi><mo>∨</mo><mi mathvariant=\"normal\">¬</mi><mi>Q</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>P</mi><mo>∨</mo><mi>Q</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant=\"normal\">¬</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">¬</mi><mi>P</mi><mo>∧</mo><mi mathvariant=\"normal\">¬</mi><mi>Q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P\\wedge Q\\iff \\neg(\\neg P \\vee  \\neg Q),P\\vee Q \\iff \\neg(\\neg P\\wedge \\neg Q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">¬</span><span class=\"mopen\">(</span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">¬</span><span class=\"mopen\">(</span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span></span></span></span>，说明 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∨</mo><mo separator=\"true\">,</mo><mo>∧</mo></mrow><annotation encoding=\"application/x-tex\">\\vee,\\wedge</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.75em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∨</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∧</span></span></span></span> 可以互相转换。</li>\n</ol>\n<blockquote>\n<p>如果定义了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↑</mo></mrow><annotation encoding=\"application/x-tex\">\\uparrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mrel\">↑</span></span></span></span>（与非）、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>↓</mo></mrow><annotation encoding=\"application/x-tex\">\\downarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mrel\">↓</span></span></span></span>（或非），那么最小的联结词组亦可为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo>↑</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{ \\uparrow \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mrel\">↑</span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mclose\">}</span></span></span></span> 或 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo>↓</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{ \\downarrow \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mrel\">↓</span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mclose\">}</span></span></span></span>。</p>\n</blockquote>\n<p>那么上面的编程题就变为求只用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">¬</mi><mo separator=\"true\">,</mo><mo>∧</mo></mrow><annotation encoding=\"application/x-tex\">\\neg,\\wedge</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.75em;vertical-align:-0.19444em;\"></span><span class=\"mord\">¬</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∧</span></span></span></span> 表示异或：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>P</mi><mo>⊕</mo><mi>Q</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mo stretchy=\"false\">(</mo><mi>P</mi><mo>∧</mo><mi mathvariant=\"normal\">¬</mi><mi>Q</mi><mo stretchy=\"false\">)</mo><mo>∨</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">¬</mi><mi>P</mi><mo>∧</mo><mi>Q</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi mathvariant=\"normal\">¬</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">¬</mi><mo stretchy=\"false\">(</mo><mi>P</mi><mo>∧</mo><mi mathvariant=\"normal\">¬</mi><mi>Q</mi><mo stretchy=\"false\">)</mo><mo>∧</mo><mi mathvariant=\"normal\">¬</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">¬</mi><mi>P</mi><mo>∧</mo><mi>Q</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\nP \\oplus Q &amp;  \\implies (P\\wedge \\neg Q)\\vee (\\neg P \\wedge Q) \\\\\n &amp; \\implies \\neg(\\neg (P\\wedge \\neg Q)\\wedge \\neg (\\neg P \\wedge Q))\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.0000000000000004em;vertical-align:-1.2500000000000002em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.7500000000000002em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">Q</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2500000000000002em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.7500000000000002em;\"><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">¬</span><span class=\"mopen\">(</span><span class=\"mord\">¬</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">¬</span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">¬</span><span class=\"mopen\">(</span><span class=\"mord\">¬</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2500000000000002em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h2 id=\"补码的最小值难度\"><a class=\"markdownIt-Anchor\" href=\"#补码的最小值难度\"></a> 补码的最小值（难度：⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * tmin - return minimum two&#x27;s complement integer </span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 4</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">tmin</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">31</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多翻翻书看看定义。</p>\n<h2 id=\"补码的最大值难度\"><a class=\"markdownIt-Anchor\" href=\"#补码的最大值难度\"></a> 补码的最大值（难度：⭐⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class=\"line\"><span class=\"comment\"> *     and 0 otherwise </span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 10</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 1</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">isTmax</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> res = x+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 测res是不是0x80000000;</span></span><br><span class=\"line\">  <span class=\"type\">int</span> is_not_zero =!!((res^<span class=\"number\">0x00</span>)); <span class=\"comment\">// res不是0</span></span><br><span class=\"line\">  <span class=\"type\">int</span> is_neg_self_equals = !(((~res)+<span class=\"number\">1</span>)^res); <span class=\"comment\">// res 的负数等于自身</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> is_neg_self_equals&amp;is_not_zero;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>补码的最大值为：<code>0x7fffffff</code>，我们可以换个思路，变成判断该数是否为补码的最小值 <code>0x80000000</code>。</p>\n<p>关于补码的最小值 <code>INT_MIN</code> 有以下特点：</p>\n<ul>\n<li><code>INT_MIN == - INT_MIN</code></li>\n<li>一个补码取反加 1 等于自身的数只有两个：<code>INT_MIN</code> 和 <code>0</code>。</li>\n</ul>\n<p>根据以上两点构造命题逻辑即可。</p>\n<h2 id=\"所有的奇数位是否为-1难度\"><a class=\"markdownIt-Anchor\" href=\"#所有的奇数位是否为-1难度\"></a> 所有的奇数位是否为 1（难度：⭐⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class=\"line\"><span class=\"comment\"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 12</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">allOddBits</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> mask = <span class=\"number\">0xAA</span>; <span class=\"comment\">// 10101010.......</span></span><br><span class=\"line\">  mask |= mask&lt;&lt;<span class=\"number\">8</span>;</span><br><span class=\"line\">  mask |= mask&lt;&lt;<span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  x&amp;=mask;</span><br><span class=\"line\">  x|=x&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">  x=~x;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>巧用移位和掩码。</p>\n<h2 id=\"补码的非难度\"><a class=\"markdownIt-Anchor\" href=\"#补码的非难度\"></a> 补码的非（难度：⭐⭐）</h2>\n<blockquote>\n<p>看过书的都知道，这也是最简单的了。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * negate - return -x </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: negate(1) = -1.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 5</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">negate</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (~x)+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>附一张理解补码「取反加一」的图：<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240318234102.webp\" alt=\"image.png\" width=\"500px\" /></p>\n</blockquote>\n<h2 id=\"是否为-ascii-数字难度\"><a class=\"markdownIt-Anchor\" href=\"#是否为-ascii-数字难度\"></a> 是否为 ASCII 数字（难度：⭐⭐⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class=\"line\"><span class=\"comment\"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class=\"line\"><span class=\"comment\"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 15</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">isAsciiDigit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 0x30:  ...00110000</span></span><br><span class=\"line\">  <span class=\"comment\">// 0x39:  ...00111001</span></span><br><span class=\"line\">  <span class=\"type\">int</span> high_check = !((x&gt;&gt;<span class=\"number\">4</span>)^<span class=\"number\">0x03</span>); <span class=\"comment\">// 1 则正确</span></span><br><span class=\"line\">  <span class=\"type\">int</span> p3 = x&amp;<span class=\"number\">0x08</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> p2 = x&amp;<span class=\"number\">0x04</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> p1 = x&amp;<span class=\"number\">0x02</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> low_check = (!p3)|(!(p2|p1));  <span class=\"comment\">// p3 -&gt; !(p2|p1)</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> high_check&amp;low_check;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>观察 ASCII 数字的十六进制代码可以发现，0x30 到 0x39 的特点：</p>\n<ul>\n<li>高 28 位一定是 0x0000003。对应上面代码的 <code>high_check</code></li>\n<li>低 4 位的特点，从右往左，0 位开始计数：\n<ul>\n<li>如果第 3 位为 <code>0</code>，则这个数满足要求</li>\n<li>如果第 3 为为 <code>1</code>，第 2 位或者第 1 位不能为 <code>1</code></li>\n</ul>\n</li>\n</ul>\n<p>代码中 <code>p3</code>-<code>p1</code> 对应命题这些位是否为 1。很容易构造出命题：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>P</mi><mn>3</mn></msub><mo>→</mo><mi mathvariant=\"normal\">¬</mi><mo stretchy=\"false\">(</mo><msub><mi>P</mi><mn>2</mn></msub><mo>∨</mo><msub><mi>P</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant=\"normal\">¬</mi><msub><mi>P</mi><mn>3</mn></msub><mo>∨</mo><mi mathvariant=\"normal\">¬</mi><mo stretchy=\"false\">(</mo><msub><mi>P</mi><mn>2</mn></msub><mo>∨</mo><msub><mi>P</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P_3 \\to \\neg(P_2 \\vee P_1) \\iff \\neg P_3 \\vee \\neg(P_2 \\vee P_1) \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">¬</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\">¬</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">¬</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∨</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<h2 id=\"三元运算符难度\"><a class=\"markdownIt-Anchor\" href=\"#三元运算符难度\"></a> 三元运算符（难度：⭐⭐⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * conditional - same as x ? y : z </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: conditional(2,4,5) = 4</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 16</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">conditional</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> z)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> mix = y^z;</span><br><span class=\"line\">  <span class=\"type\">int</span> signal = !!x;</span><br><span class=\"line\">  signal = (signal&lt;&lt;<span class=\"number\">31</span>)&gt;&gt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((signal&amp;z)|((~signal)&amp;y))^mix; <span class=\"comment\">// y^z^y =z; z^y^z = y</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个非 <code>!</code> 操作压缩位，很容易理解，仔细想想这个操作还是挺骚气的（后面会让你使用位运算实现这个 <code>!</code> ）。</p>\n<p>利用了异或的运算律：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>a</mi><mo>⊕</mo><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>a</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>a</mi><mo>⊕</mo><mi>a</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi>a</mi><mo>⊕</mo><mi>b</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>b</mi><mo>⊕</mo><mi>a</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⊕</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>c</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi>a</mi><mo>⊕</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mo>⊕</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\na\\oplus 0&amp;=a \\\\\na\\oplus a &amp;= 0 \\\\\na\\oplus b &amp;= b\\oplus a \\\\\n(a \\oplus b) \\oplus c &amp;= a \\oplus( b \\oplus c)\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6em;vertical-align:-2.7500000000000004em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.25em;\"><span style=\"top:-5.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-2.4099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">b</span></span></span><span style=\"top:-0.9099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.25em;\"><span style=\"top:-5.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-3.91em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">0</span></span></span><span style=\"top:-2.4099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">a</span></span></span><span style=\"top:-0.9099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h2 id=\"小于等于难度\"><a class=\"markdownIt-Anchor\" href=\"#小于等于难度\"></a> 小于等于（难度：⭐⭐⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class=\"line\"><span class=\"comment\"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 24</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 3</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">isLessOrEqual</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> y_x = y  + ((~x)+<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"type\">int</span> sx = (x&gt;&gt;<span class=\"number\">31</span>);<span class=\"comment\">//&amp;0x01;</span></span><br><span class=\"line\">  <span class=\"type\">int</span> sy = (y&gt;&gt;<span class=\"number\">31</span>);<span class=\"comment\">//&amp;0x01;</span></span><br><span class=\"line\">  <span class=\"type\">int</span> s_y_x = (y_x&gt;&gt;<span class=\"number\">31</span>);<span class=\"comment\">//&amp;0x01;</span></span><br><span class=\"line\">  <span class=\"type\">int</span> condition1= (!sy)&amp;(sx);</span><br><span class=\"line\">  <span class=\"type\">int</span> condition2 = (!s_y_x)&amp;!((!sx)&amp;sy); <span class=\"comment\">// x为正 y为负</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> condition1|condition2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"取非难度\"><a class=\"markdownIt-Anchor\" href=\"#取非难度\"></a> 取非（难度：⭐⭐⭐⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class=\"line\"><span class=\"comment\"> *              the legal operators except !</span></span><br><span class=\"line\"><span class=\"comment\"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 12</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">logicalNeg</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> res=x;</span><br><span class=\"line\">  <span class=\"comment\">// 相当于把x折半压缩</span></span><br><span class=\"line\">  res |=  res&gt;&gt;<span class=\"number\">16</span>;</span><br><span class=\"line\">  res |=  res&gt;&gt;<span class=\"number\">8</span>;</span><br><span class=\"line\">  res |=  res&gt;&gt;<span class=\"number\">4</span>;</span><br><span class=\"line\">  res |=  res&gt;&gt;<span class=\"number\">2</span>;</span><br><span class=\"line\">  res |=  res&gt;&gt;<span class=\"number\">1</span>;  <span class=\"comment\">// 只要原来x任何一位存在1，当前res[0]结果就为1</span></span><br><span class=\"line\">  res = ~res;      <span class=\"comment\">// 模拟取反（我们只关心res[0]）</span></span><br><span class=\"line\">  res &amp;= <span class=\"number\">0x01</span>;     <span class=\"comment\">// 将不关心的位清除</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实挺简单的，使用了折半压缩的思想。</p>\n<h2 id=\"需要的-bit-的个数难度\"><a class=\"markdownIt-Anchor\" href=\"#需要的-bit-的个数难度\"></a> 需要的 bit 的个数（难度：⭐⭐⭐⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class=\"line\"><span class=\"comment\"> *             two&#x27;s complement</span></span><br><span class=\"line\"><span class=\"comment\"> *  Examples: howManyBits(12) = 5  01100</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(298) = 10</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(-5) = 4  1011;0100</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(0)  = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(-1) = 1</span></span><br><span class=\"line\"><span class=\"comment\"> *            howManyBits(0x80000000) = 32</span></span><br><span class=\"line\"><span class=\"comment\"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *  Max ops: 90</span></span><br><span class=\"line\"><span class=\"comment\"> *  Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">howManyBits</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> sign = x&gt;&gt;<span class=\"number\">31</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> high16,high8,high4,high2,high1,high0;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// sign ? -x : x;</span></span><br><span class=\"line\">  <span class=\"type\">int</span> mix = x^(~x);</span><br><span class=\"line\">  x = ((sign&amp;(x))|((~sign)&amp;(~x)))^mix;</span><br><span class=\"line\">  </span><br><span class=\"line\">  high16 = !!(x&gt;&gt;<span class=\"number\">16</span>);</span><br><span class=\"line\">  x &gt;&gt;= (high16&lt;&lt;<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  high8 = !!(x&gt;&gt;<span class=\"number\">8</span>);</span><br><span class=\"line\">  x &gt;&gt;= (high8&lt;&lt;<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  high4 = !!(x&gt;&gt;<span class=\"number\">4</span>);</span><br><span class=\"line\">  x &gt;&gt;= high4&lt;&lt;<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  high2 = !!(x&gt;&gt;<span class=\"number\">2</span>);</span><br><span class=\"line\">  x &gt;&gt;= high2&lt;&lt;<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  high1 = !!(x&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">  x &gt;&gt;= high1;</span><br><span class=\"line\"></span><br><span class=\"line\">  high0 = x; <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (high16&lt;&lt;<span class=\"number\">4</span>) + (high8&lt;&lt;<span class=\"number\">3</span>) + (high4&lt;&lt;<span class=\"number\">2</span>) + (high2&lt;&lt;<span class=\"number\">1</span>) + high1 + high0 + <span class=\"number\">1</span> ; <span class=\"comment\">// WHY</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浮点数翻倍难度\"><a class=\"markdownIt-Anchor\" href=\"#浮点数翻倍难度\"></a> 浮点数翻倍（难度：⭐⭐⭐⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//float</span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class=\"line\"><span class=\"comment\"> *   floating point argument f.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span></span><br><span class=\"line\"><span class=\"comment\"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class=\"line\"><span class=\"comment\"> *   single-precision floating point values.</span></span><br><span class=\"line\"><span class=\"comment\"> *   When argument is NaN, return argument</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 30</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"title function_\">floatScale2</span><span class=\"params\">(<span class=\"type\">unsigned</span> uf)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> M = <span class=\"number\">0x7FFFFF</span>&amp;uf;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> E = (uf&gt;&gt;<span class=\"number\">23</span>)&amp;<span class=\"number\">0xFF</span>;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> S = (uf&gt;&gt;<span class=\"number\">31</span>)&amp;<span class=\"number\">0x01</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(E==<span class=\"number\">0xFF</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uf;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(E==<span class=\"number\">0x00</span>)&#123;</span><br><span class=\"line\">    M&lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (S&lt;&lt;<span class=\"number\">31</span>)|(E&lt;&lt;<span class=\"number\">23</span>)|M;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  E+=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// M&lt;&lt;=1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (S&lt;&lt;<span class=\"number\">31</span>)|(E&lt;&lt;<span class=\"number\">23</span>)|M;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浮点数转换为整数难度\"><a class=\"markdownIt-Anchor\" href=\"#浮点数转换为整数难度\"></a> 浮点数转换为整数（难度：⭐⭐⭐⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class=\"line\"><span class=\"comment\"> *   for floating point argument f.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Argument is passed as unsigned int, but</span></span><br><span class=\"line\"><span class=\"comment\"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class=\"line\"><span class=\"comment\"> *   single-precision floating point value.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class=\"line\"><span class=\"comment\"> *   0x80000000u.</span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 30</span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">floatFloat2Int</span><span class=\"params\">(<span class=\"type\">unsigned</span> uf)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> M = <span class=\"number\">0x7FFFFF</span>&amp;uf;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> E = (uf&gt;&gt;<span class=\"number\">23</span>)&amp;<span class=\"number\">0xFF</span>;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> S = (uf&gt;&gt;<span class=\"number\">31</span>)&amp;<span class=\"number\">0x01</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"built_in\">exp</span> = E<span class=\"number\">-127</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span>&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span>&gt;=<span class=\"number\">31</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0x80000000</span>u;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 不会有非规格化数的参与</span></span><br><span class=\"line\">  res = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">23</span>; <span class=\"comment\">// 隐含位</span></span><br><span class=\"line\">  res |= M;</span><br><span class=\"line\">  <span class=\"comment\">// 确定小数点的位置</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">exp</span>&lt;<span class=\"number\">23</span>)&#123;</span><br><span class=\"line\">    res &gt;&gt;= (<span class=\"number\">23</span> - <span class=\"built_in\">exp</span>);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    res &lt;&lt;= (<span class=\"built_in\">exp</span> - <span class=\"number\">23</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 符号位计算</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (S)</span><br><span class=\"line\">    res = -res;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"浮点数表示-2-的幂难度\"><a class=\"markdownIt-Anchor\" href=\"#浮点数表示-2-的幂难度\"></a> 浮点数表示 2 的幂（难度：⭐⭐⭐⭐）</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class=\"line\"><span class=\"comment\"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class=\"line\"><span class=\"comment\"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class=\"line\"><span class=\"comment\"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class=\"line\"><span class=\"comment\"> *   0. If too large, return +INF.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class=\"line\"><span class=\"comment\"> *   Max ops: 30 </span></span><br><span class=\"line\"><span class=\"comment\"> *   Rating: 4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"title function_\">floatPower2</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 无穷大</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">127</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0xFF</span>&lt;&lt;<span class=\"number\">23</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 无法表示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&lt;<span class=\"number\">-148</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// exp的指数范围：-126~127</span></span><br><span class=\"line\">\t<span class=\"comment\">// 规格化数2^-126</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">-126</span>) </span><br><span class=\"line\">      <span class=\"keyword\">return</span> (x+<span class=\"number\">127</span>)&lt;&lt;<span class=\"number\">23</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 大于等于-148，小于-126</span></span><br><span class=\"line\">    <span class=\"comment\">// 非规格化数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">1</span>&lt;&lt;(<span class=\"number\">148</span>+x));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"后续任务\"><a class=\"markdownIt-Anchor\" href=\"#后续任务\"></a> 后续任务</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\"> 详细理解并完善后续几个函数。</li>\n</ul>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/339047608\">CSAPP:Lab1 -DataLab 超详解 - 知乎 (zhihu.com)</a></li>\n</ul>\n","raw":"---\ntitle: CSAPP LAB-1 位操作\ntags:\n  - CSAPP\n  - C\n  - 实验\n  - 离散数学\ncover: 'https://cdn.gallery.uuanqin.top/img/20240522202049.webp'\ndescription: 位级理解我们的代码\ncategories:\n  - CSAPP LABS\nabbrlink: c5970284\ndate: 2024-05-22 19:30:43\ntop_img:\n---\n\n写完 Lab2 拆炸弹的实验解析后，打算补一下实验 1 的内容。因为感觉自己把时间投入进去了，除了有无形的成果外还要有有形的成果。再说，实验课上没要求我们写报告，没点内容沉淀感觉不自在。\n\n> [!notice] CSAPP LAB 实验系列\n>\n> - CSAPP LAB-1 位操作（本文）\n> - [[CSAPP LAB-2 二进制炸弹实验]]\n> - [[CSAPP LAB-3 缓冲区溢出炸弹]]\n> - [[CSAPP LAB-4 代码优化]]\n> - [[CSAPP LAB-5 手写动态存储分配器]]\n\n# 实验介绍\n\n本实验主要包括一些有关位操作的编程题，我们的目标是实现这些编程题。所有要实现的代码都在 `bits.c` 文件中。\n\n`tar xvf datalab-handout.tar` 解压代码，包含如下文件\n\n- `bits.c`：唯一需要修改的文件\n- `btest.c`：该文件的作用是对我们实现的 `bits.c` 功能的正确性行评估，\n- `README`：关于 `btest.c` 的一些说明。\n- `dlc`：语法检查\n\n完成后用 `./dlc bits.c` 检查 `bits.c` 的语法是否正确，就是是否按照要求使用规定数量的操作符。如果语法检查无误，那么使用 `make btest`，生成 `btest` 可执行文件，该文件检查 `bits.c` 中实现的函数功能是否与要求的一致，具体用法如下 `./btest`\n\n如果还需要修改 `bits.c` 那么需要 `make clean`。`make btest` 重新生成 `btest` 文件\n\n`./btest -fisPositive` 单独测试某一个函数\n\n`rating` 代表困难等级；`max ops` 代表最多可使用的操作符。\n\n正确的测试结果为：\n\n```test\nScore   Rating  Errors  Function\n 1      1       0       bitXor\n 1      1       0       tmin\n 1      1       0       isTmax\n 2      2       0       allOddBits\n 2      2       0       negate\n 3      3       0       isAsciiDigit\n 3      3       0       conditional\n 3      3       0       isLessOrEqual\n 4      4       0       logicalNeg\n 4      4       0       howManyBits\n 4      4       0       floatScale2\n 4      4       0       floatFloat2Int\n 4      4       0       floatPower2\nTotal points: 36/36\n```\n\n# 代码编写要求\n\n```c\n#if 0\n/*\n * Instructions to Students:\n *\n * STEP 1: Read the following instructions carefully.\n */\n\nYou will provide your solution to the Data Lab by\nediting the collection of functions in this source file.\n\nINTEGER CODING RULES:\n \n  Replace the \"return\" statement in each function with one\n  or more lines of C code that implements the function. Your code \n  must conform to the following style:\n \n  int Funct(arg1, arg2, ...) {\n      /* brief description of how your implementation works */\n      int var1 = Expr1;\n      ...\n      int varM = ExprM;\n\n      varJ = ExprJ;\n      ...\n      varN = ExprN;\n      return ExprR;\n  }\n\n  Each \"Expr\" is an expression using ONLY the following:\n  1. Integer constants 0 through 255 (0xFF), inclusive. You are\n      not allowed to use big constants such as 0xffffffff.\n  2. Function arguments and local variables (no global variables).\n  3. Unary integer operations ! ~\n  4. Binary integer operations & ^ | + << >>\n    \n  Some of the problems restrict the set of allowed operators even further.\n  Each \"Expr\" may consist of multiple operators. You are not restricted to\n  one operator per line.\n\n  You are expressly forbidden to:\n  1. Use any control constructs such as if, do, while, for, switch, etc.\n  2. Define or use any macros.\n  3. Define any additional functions in this file.\n  4. Call any functions.\n  5. Use any other operations, such as &&, ||, -, or ?:\n  6. Use any form of casting.\n  7. Use any data type other than int.  This implies that you\n     cannot use arrays, structs, or unions.\n\n \n  You may assume that your machine:\n  1. Uses 2s complement, 32-bit representations of integers.\n  2. Performs right shifts arithmetically.\n  3. Has unpredictable behavior when shifting if the shift amount\n     is less than 0 or greater than 31.\n\n\nEXAMPLES OF ACCEPTABLE CODING STYLE:\n  /*\n   * pow2plus1 - returns 2^x + 1, where 0 <= x <= 31\n   */\n  int pow2plus1(int x) {\n     /* exploit ability of shifts to compute powers of 2 */\n     return (1 << x) + 1;\n  }\n\n  /*\n   * pow2plus4 - returns 2^x + 4, where 0 <= x <= 31\n   */\n  int pow2plus4(int x) {\n     /* exploit ability of shifts to compute powers of 2 */\n     int result = (1 << x);\n     result += 4;\n     return result;\n  }\n\nFLOATING POINT CODING RULES\n\nFor the problems that require you to implement floating-point operations,\nthe coding rules are less strict.  You are allowed to use looping and\nconditional control.  You are allowed to use both ints and unsigneds.\nYou can use arbitrary integer and unsigned constants. You can use any arithmetic,\nlogical, or comparison operations on int or unsigned data.\n\nYou are expressly forbidden to:\n  1. Define or use any macros.\n  2. Define any additional functions in this file.\n  3. Call any functions.\n  4. Use any form of casting.\n  5. Use any data type other than int or unsigned.  This means that you\n     cannot use arrays, structs, or unions.\n  6. Use any floating point data types, operations, or constants.\n\n\nNOTES:\n  1. Use the dlc (data lab checker) compiler (described in the handout) to \n     check the legality of your solutions.\n  2. Each function has a maximum number of operations (integer, logical,\n     or comparison) that you are allowed to use for your implementation\n     of the function.  The max operator count is checked by dlc.\n     Note that assignment ('=') is not counted; you may use as many of\n     these as you want without penalty.\n  3. Use the btest test harness to check your functions for correctness.\n  4. Use the BDD checker to formally verify your functions\n  5. The maximum number of ops for each function is given in the\n     header comment for each function. If there are any inconsistencies \n     between the maximum ops in the writeup and in this file, consider\n     this file the authoritative source.\n\n/*\n * STEP 2: Modify the following functions according the coding rules.\n * \n *   IMPORTANT. TO AVOID GRADING SURPRISES:\n *   1. Use the dlc compiler to check that your solutions conform\n *      to the coding rules.\n *   2. Use the BDD checker to formally verify that your solutions produce \n *      the correct answers.\n */\n\n\n#endif\n```\n\n# 实验内容\n\n所有问题的答案均不唯一。因为我也在同时学习《离散数学》所以里面用到了不少命题表达。\n\n## 异或的实现（难度：⭐）\n\n```c\n/* \n * bitXor - x^y using only ~ and & \n *   Example: bitXor(4, 5) = 1\n *   Legal ops: ~ &\n *   Max ops: 14\n *   Rating: 1\n */\nint bitXor(int x, int y) {\n  // A 异或 B\n  int a = x & (~y);  //10\n  int b = (~x) & y;  //01\n  return ~((~a)&(~b));  //\n}\n```\n\n如果你读过《离散数学》就会知道，任意的命题公式都可以仅包含 $\\{ \\neg,\\vee \\}$ 或 $\\{ \\neg,\\wedge \\}$ 的命题公式等价代换。因为：\n\n1. 由 $P\\leftrightarrow Q \\iff(P\\to Q)\\wedge(Q\\to P)$。故我们可以把 $\\leftrightarrow$ 替换为 $\\to,\\wedge$\n2. 由 $P\\to Q\\iff \\neg P\\vee Q$。故我们可以把 $\\to$ 替换为 $\\neg,\\vee$\n3. 由 $P\\wedge Q\\iff \\neg(\\neg P \\vee  \\neg Q),P\\vee Q \\iff \\neg(\\neg P\\wedge \\neg Q)$，说明 $\\vee,\\wedge$ 可以互相转换。\n\n> 如果定义了 $\\uparrow$（与非）、$\\downarrow$（或非），那么最小的联结词组亦可为 $\\{ \\uparrow \\}$ 或 $\\{ \\downarrow \\}$。\n\n那么上面的编程题就变为求只用 $\\neg,\\wedge$ 表示异或：\n\n$$\n\\begin{aligned}\nP \\oplus Q &  \\implies (P\\wedge \\neg Q)\\vee (\\neg P \\wedge Q) \\\\\n & \\implies \\neg(\\neg (P\\wedge \\neg Q)\\wedge \\neg (\\neg P \\wedge Q))\n\\end{aligned}\n$$\n\n## 补码的最小值（难度：⭐）\n\n```c\n/* \n * tmin - return minimum two's complement integer \n *   Legal ops: ! ~ & ^ | + << >>\n *   Max ops: 4\n *   Rating: 1\n */\nint tmin(void) {\n  return 1<<31;\n}\n```\n\n多翻翻书看看定义。\n\n## 补码的最大值（难度：⭐⭐）\n\n```c\n/*\n * isTmax - returns 1 if x is the maximum, two's complement number,\n *     and 0 otherwise \n *   Legal ops: ! ~ & ^ | +\n *   Max ops: 10\n *   Rating: 1\n */\nint isTmax(int x) {\n  int res = x+1;\n  // 测res是不是0x80000000;\n  int is_not_zero =!!((res^0x00)); // res不是0\n  int is_neg_self_equals = !(((~res)+1)^res); // res 的负数等于自身\n  return is_neg_self_equals&is_not_zero;\n}\n```\n\n补码的最大值为：`0x7fffffff`，我们可以换个思路，变成判断该数是否为补码的最小值 `0x80000000`。\n\n关于补码的最小值 `INT_MIN` 有以下特点：\n\n- `INT_MIN == - INT_MIN`\n- 一个补码取反加 1 等于自身的数只有两个：`INT_MIN` 和 `0`。\n\n根据以上两点构造命题逻辑即可。\n\n## 所有的奇数位是否为 1（难度：⭐⭐）\n\n```c\n/* \n * allOddBits - return 1 if all odd-numbered bits in word set to 1\n *   where bits are numbered from 0 (least significant) to 31 (most significant)\n *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1\n *   Legal ops: ! ~ & ^ | + << >>\n *   Max ops: 12\n *   Rating: 2\n */\nint allOddBits(int x) {\n  int mask = 0xAA; // 10101010.......\n  mask |= mask<<8;\n  mask |= mask<<16;\n\n  x&=mask;\n  x|=x>>1;\n  x=~x;\n  return !x;\n}\n```\n\n巧用移位和掩码。\n\n## 补码的非（难度：⭐⭐）\n\n> 看过书的都知道，这也是最简单的了。\n\n```c\n/* \n * negate - return -x \n *   Example: negate(1) = -1.\n *   Legal ops: ! ~ & ^ | + << >>\n *   Max ops: 5\n *   Rating: 2\n */\nint negate(int x) {\n  return (~x)+1;\n}\n```\n\n> 附一张理解补码「取反加一」的图：![image.png|500](https://cdn.gallery.uuanqin.top/img/20240318234102.webp)\n\n## 是否为 ASCII 数字（难度：⭐⭐⭐）\n\n```c\n/* \n * isAsciiDigit - return 1 if 0x30 <= x <= 0x39 (ASCII codes for characters '0' to '9')\n *   Example: isAsciiDigit(0x35) = 1.\n *            isAsciiDigit(0x3a) = 0.\n *            isAsciiDigit(0x05) = 0.\n *   Legal ops: ! ~ & ^ | + << >>\n *   Max ops: 15\n *   Rating: 3\n */\nint isAsciiDigit(int x) {\n  // 0x30:  ...00110000\n  // 0x39:  ...00111001\n  int high_check = !((x>>4)^0x03); // 1 则正确\n  int p3 = x&0x08;\n  int p2 = x&0x04;\n  int p1 = x&0x02;\n  int low_check = (!p3)|(!(p2|p1));  // p3 -> !(p2|p1)\n  return high_check&low_check;\n}\n```\n\n观察 ASCII 数字的十六进制代码可以发现，0x30 到 0x39 的特点：\n\n- 高 28 位一定是 0x0000003。对应上面代码的 `high_check`\n- 低 4 位的特点，从右往左，0 位开始计数：\n\t- 如果第 3 位为 `0`，则这个数满足要求\n\t- 如果第 3 为为 `1`，第 2 位或者第 1 位不能为 `1`\n\n代码中 `p3`-`p1` 对应命题这些位是否为 1。很容易构造出命题：\n\n$$\nP_3 \\to \\neg(P_2 \\vee P_1) \\iff \\neg P_3 \\vee \\neg(P_2 \\vee P_1) \n$$\n\n## 三元运算符（难度：⭐⭐⭐）\n\n```c\n/* \n * conditional - same as x ? y : z \n *   Example: conditional(2,4,5) = 4\n *   Legal ops: ! ~ & ^ | + << >>\n *   Max ops: 16\n *   Rating: 3\n */\nint conditional(int x, int y, int z) {\n  int mix = y^z;\n  int signal = !!x;\n  signal = (signal<<31)>>31;\n  return ((signal&z)|((~signal)&y))^mix; // y^z^y =z; z^y^z = y\n}\n```\n\n两个非 `!` 操作压缩位，很容易理解，仔细想想这个操作还是挺骚气的（后面会让你使用位运算实现这个 `!` ）。\n\n利用了异或的运算律：\n\n$$\n\\begin{aligned}\na\\oplus 0&=a \\\\\na\\oplus a &= 0 \\\\\na\\oplus b &= b\\oplus a \\\\\n(a \\oplus b) \\oplus c &= a \\oplus( b \\oplus c)\n\\end{aligned}\n$$\n\n## 小于等于（难度：⭐⭐⭐）\n\n```c\n/* \n * isLessOrEqual - if x <= y  then return 1, else return 0 \n *   Example: isLessOrEqual(4,5) = 1.\n *   Legal ops: ! ~ & ^ | + << >>\n *   Max ops: 24\n *   Rating: 3\n */\nint isLessOrEqual(int x, int y) {\n  int y_x = y  + ((~x)+1);\n  int sx = (x>>31);//&0x01;\n  int sy = (y>>31);//&0x01;\n  int s_y_x = (y_x>>31);//&0x01;\n  int condition1= (!sy)&(sx);\n  int condition2 = (!s_y_x)&!((!sx)&sy); // x为正 y为负\n\n  return condition1|condition2;\n}\n```\n\n## 取非（难度：⭐⭐⭐⭐）\n\n```c\n/* \n * logicalNeg - implement the ! operator, using all of \n *              the legal operators except !\n *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1\n *   Legal ops: ~ & ^ | + << >>\n *   Max ops: 12\n *   Rating: 4 \n */\nint logicalNeg(int x) {\n  int res=x;\n  // 相当于把x折半压缩\n  res |=  res>>16;\n  res |=  res>>8;\n  res |=  res>>4;\n  res |=  res>>2;\n  res |=  res>>1;  // 只要原来x任何一位存在1，当前res[0]结果就为1\n  res = ~res;      // 模拟取反（我们只关心res[0]）\n  res &= 0x01;     // 将不关心的位清除\n  return res;\n}\n```\n\n其实挺简单的，使用了折半压缩的思想。\n\n## 需要的 bit 的个数（难度：⭐⭐⭐⭐）\n\n```c\n/* howManyBits - return the minimum number of bits required to represent x in\n *             two's complement\n *  Examples: howManyBits(12) = 5  01100\n *            howManyBits(298) = 10\n *            howManyBits(-5) = 4  1011;0100\n *            howManyBits(0)  = 1\n *            howManyBits(-1) = 1\n *            howManyBits(0x80000000) = 32\n *  Legal ops: ! ~ & ^ | + << >>\n *  Max ops: 90\n *  Rating: 4\n */\nint howManyBits(int x) {\n  int sign = x>>31;\n  int high16,high8,high4,high2,high1,high0;\n\n  // sign ? -x : x;\n  int mix = x^(~x);\n  x = ((sign&(x))|((~sign)&(~x)))^mix;\n  \n  high16 = !!(x>>16);\n  x >>= (high16<<4);\n\n  high8 = !!(x>>8);\n  x >>= (high8<<3);\n\n  high4 = !!(x>>4);\n  x >>= high4<<2;\n\n  high2 = !!(x>>2);\n  x >>= high2<<1;\n\n  high1 = !!(x>>1);\n  x >>= high1;\n\n  high0 = x; //\n\n  return (high16<<4) + (high8<<3) + (high4<<2) + (high2<<1) + high1 + high0 + 1 ; // WHY\n}\n```\n\n## 浮点数翻倍（难度：⭐⭐⭐⭐）\n\n```c\n//float\n/* \n * floatScale2 - Return bit-level equivalent of expression 2*f for\n *   floating point argument f.\n *   Both the argument and result are passed as unsigned int's, but\n *   they are to be interpreted as the bit-level representation of\n *   single-precision floating point values.\n *   When argument is NaN, return argument\n *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while\n *   Max ops: 30\n *   Rating: 4\n */\nunsigned floatScale2(unsigned uf) {\n  unsigned M = 0x7FFFFF&uf;\n  unsigned E = (uf>>23)&0xFF;\n  unsigned S = (uf>>31)&0x01;\n\n  if(E==0xFF){\n    return uf;\n  }\n  if(E==0x00){\n    M<<=1;\n    return (S<<31)|(E<<23)|M;\n  }\n  E+=1;\n  // M<<=1;\n\n  return (S<<31)|(E<<23)|M;\n}\n```\n\n## 浮点数转换为整数（难度：⭐⭐⭐⭐）\n\n```c\n/* \n * floatFloat2Int - Return bit-level equivalent of expression (int) f\n *   for floating point argument f.\n *   Argument is passed as unsigned int, but\n *   it is to be interpreted as the bit-level representation of a\n *   single-precision floating point value.\n *   Anything out of range (including NaN and infinity) should return\n *   0x80000000u.\n *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while\n *   Max ops: 30\n *   Rating: 4\n */\nint floatFloat2Int(unsigned uf) {\n  unsigned M = 0x7FFFFF&uf;\n  unsigned E = (uf>>23)&0xFF;\n  unsigned S = (uf>>31)&0x01;\n\n  int exp = E-127;\n  int res;\n\n  if(exp<0)\n    return 0;\n\n  if(exp>=31)\n    return 0x80000000u;\n\n  // 不会有非规格化数的参与\n  res = 1<<23; // 隐含位\n  res |= M;\n  // 确定小数点的位置\n  if(exp<23){\n    res >>= (23 - exp);\n  }else{\n    res <<= (exp - 23);\n  }\n  // 符号位计算\n  if (S)\n    res = -res;\n  return res;\n}\n```\n\n## 浮点数表示 2 的幂（难度：⭐⭐⭐⭐）\n\n```c\n/* \n * floatPower2 - Return bit-level equivalent of the expression 2.0^x\n *   (2.0 raised to the power x) for any 32-bit integer x.\n *\n *   The unsigned value that is returned should have the identical bit\n *   representation as the single-precision floating-point number 2.0^x.\n *   If the result is too small to be represented as a denorm, return\n *   0. If too large, return +INF.\n * \n *   Legal ops: Any integer/unsigned operations incl. ||, &&. Also if, while \n *   Max ops: 30 \n *   Rating: 4\n */\nunsigned floatPower2(int x) {\n  \n    // 无穷大\n    if(x>127){\n      return 0xFF<<23;\n    }\n\n\t// 无法表示\n    if(x<-148)\n      return 0;\n\n\t// exp的指数范围：-126~127\n\t// 规格化数2^-126\n    if(x>=-126) \n      return (x+127)<<23;\n\n    // 大于等于-148，小于-126\n    // 非规格化数\n    return (1<<(148+x));\n}\n```\n\n# 后续任务\n\n- [ ] 详细理解并完善后续几个函数。\n\n# 本文参考\n\n- [CSAPP:Lab1 -DataLab 超详解 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/339047608)\n","categories":[{"name":"CSAPP LABS","api":"api/categories/CSAPP-LABS.json"}],"tags":[{"name":"CSAPP","api":"api/tags/CSAPP.json"},{"name":"C","api":"api/tags/C.json"},{"name":"实验","api":"api/tags/实验.json"},{"name":"离散数学","api":"api/tags/离散数学.json"}]},"api":"api/posts/p/c5970284.json"}