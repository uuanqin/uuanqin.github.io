{"data":{"title":"STM32 移植 FreeRTOS - 基于 HAL 库","slug":"嵌入式/STM32 移植 FreeRTOS - 基于 HAL 库","description":"STM32CubeMX 可以以更快速的方式移植 FreeRTOS","date":"2024-04-03T14:31:51.000Z","updated":"2024-04-05T07:44:58.530Z","language":"zh-CN","comments":true,"url":"p/7e13c80c/","cover":"https://cdn.gallery.uuanqin.top/img/20240404231132.webp","images":[],"content":"<p>本文介绍使用 STM32CubeMX 创建一个包含 FreeRTOS 的工程。关于 STM32CubeMX 的安装另见：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/53832aef/\"><span class=\"bilink-pop-up\">站内文章</span>STM32 工程的创建 - 基于 HAL 库</a>。此外，这篇文章将在 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/53832aef/\"><span class=\"bilink-pop-up\">站内文章</span>基础工程</a> 之上直接实现利用 FreeRTOS 进行点灯操作。</p>\n<h1 id=\"freertos-的配置\"><a class=\"markdownIt-Anchor\" href=\"#freertos-的配置\"></a> FreeRTOS 的配置</h1>\n<p>打开 STM32CubeMX 配置界面：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403224057.webp\" alt=\"image.png\" width=\"420px\" /></p>\n<p>使用 FreeRTOS 时，必须为 HAL 设置一个非 SysTick 定时器作为 HAL 的基础时钟，SysTick 将自动作为 FreeRTOS 的基础时钟。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403224334.webp\" alt=\"image.png\" /></p>\n<p>这里我们选择 V2 接口。V1 和 V2 版本主要的区别在于，V2 兼容支持的硬件更多，内存耗费更多。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403224427.webp\" alt=\"image.png\" /></p>\n<p>配置内核参数：</p>\n<ul>\n<li>Task and Quenes： 任务与队列的创建。</li>\n<li>Timers and Semaphores： 定时器和信号量的创建。</li>\n<li>Mutexes： 互斥量的创建。</li>\n<li>FreeRTOS Heap Usage： 用于查看堆使用情况。</li>\n<li>config parameters： 内核参数设置，用户根据自己的实际应用来裁剪定制 FreeRTOS 内核。</li>\n<li>Include parameters： FreeRTOS 部分函数的使能。</li>\n<li>User Constants： 相关宏的定义，可以自建一些常量在工程中使用。</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403224643.webp\" alt=\"image.png\" /></p>\n<p>点击 GENERATE 生成代码。然后编译一遍确保无误。</p>\n<h1 id=\"编写任务\"><a class=\"markdownIt-Anchor\" href=\"#编写任务\"></a> 编写任务</h1>\n<p>首先保证 main.c 的循环中没有内容。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END WHILE */</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN 3 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>找到 <code>freertos.c</code>：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403230136.webp\" alt=\"image.png\" /></p>\n<p>找到我们刚刚指定的任务函数：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240403230204.webp\" alt=\"image.png\" /></p>\n<p>写上翻转灯的逻辑：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">led_task_func</span><span class=\"params\">(<span class=\"type\">void</span> *argument)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* USER CODE BEGIN led_task_func */</span></span><br><span class=\"line\">  <span class=\"comment\">/* Infinite loop */</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(;;)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">\tHAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);</span><br><span class=\"line\">\tosDelay(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* USER CODE END led_task_func */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译成功后下载即可。</p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://blog.csdn.net/weixin_44793491/article/details/107577711\">FreeRTOS+CubeMX系列第一篇——初识FreeRTOS_cubemx freertos-CSDN博客</a></li>\n<li><a href=\"https://www.bilibili.com/read/cv21832686/\">STMCubeMX FreeRtos CMSIS_V2创建任务 - 哔哩哔哩 (bilibili.com)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/646423978\">STM32CubeMx+freeRTOS - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://blog.csdn.net/qq_45396672/article/details/120877303\">CubeMX使用FreeRTOS编程指南_cubemx freertos-CSDN博客</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1vd4y197vB/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=e03d48176855fc5349b27aef691f9cdb\">STM32HAL库纯使用向教学，STM32HAL库学习（三）外部中断（GPIO函数讲解）_哔哩哔哩_bilibili</a></li>\n</ul>\n","raw":"---\ntitle: STM32 移植 FreeRTOS - 基于 HAL 库\ntags:\n  - FreeRTOS\n  - STM32CubeMX\n  - STM32\n  - HAL\n  - C\ncategories:\n  - 嵌入式\nabbrlink: 7e13c80c\ndate: 2024-04-03 22:31:51\ncover: https://cdn.gallery.uuanqin.top/img/20240404231132.webp\ndescription: STM32CubeMX 可以以更快速的方式移植 FreeRTOS\ntop_img:\n---\n\n本文介绍使用 STM32CubeMX 创建一个包含 FreeRTOS 的工程。关于 STM32CubeMX 的安装另见：[[STM32 工程的创建 - 基于 HAL 库]]。此外，这篇文章将在 [[STM32 工程的创建 - 基于 HAL 库|基础工程]] 之上直接实现利用 FreeRTOS 进行点灯操作。\n\n# FreeRTOS 的配置\n\n打开 STM32CubeMX 配置界面：\n\n![image.png|420](https://cdn.gallery.uuanqin.top/img/20240403224057.webp)\n\n使用 FreeRTOS 时，必须为 HAL 设置一个非 SysTick 定时器作为 HAL 的基础时钟，SysTick 将自动作为 FreeRTOS 的基础时钟。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240403224334.webp)\n\n这里我们选择 V2 接口。V1 和 V2 版本主要的区别在于，V2 兼容支持的硬件更多，内存耗费更多。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240403224427.webp)\n\n配置内核参数：\n\n- Task and Quenes： 任务与队列的创建。\n- Timers and Semaphores： 定时器和信号量的创建。\n- Mutexes： 互斥量的创建。\n- FreeRTOS Heap Usage： 用于查看堆使用情况。\n- config parameters： 内核参数设置，用户根据自己的实际应用来裁剪定制 FreeRTOS 内核。\n- Include parameters： FreeRTOS 部分函数的使能。\n- User Constants： 相关宏的定义，可以自建一些常量在工程中使用。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240403224643.webp)\n\n点击 GENERATE 生成代码。然后编译一遍确保无误。\n\n# 编写任务\n\n首先保证 main.c 的循环中没有内容。\n\n```c\nwhile (1)\n{\n/* USER CODE END WHILE */\n/* USER CODE BEGIN 3 */\n}\n```\n\n找到 `freertos.c`：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240403230136.webp)\n\n找到我们刚刚指定的任务函数：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240403230204.webp)\n\n写上翻转灯的逻辑：\n\n```c\nvoid led_task_func(void *argument)\n{\n  /* USER CODE BEGIN led_task_func */\n  /* Infinite loop */\n  for(;;)\n  {\n\tHAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);\n\tosDelay(100);\n  }\n  /* USER CODE END led_task_func */\n}\n```\n\n编译成功后下载即可。\n\n# 本文参考\n- [FreeRTOS+CubeMX系列第一篇——初识FreeRTOS_cubemx freertos-CSDN博客](https://blog.csdn.net/weixin_44793491/article/details/107577711)\n- [STMCubeMX FreeRtos CMSIS_V2创建任务 - 哔哩哔哩 (bilibili.com)](https://www.bilibili.com/read/cv21832686/)\n- [STM32CubeMx+freeRTOS - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/646423978)\n- [CubeMX使用FreeRTOS编程指南_cubemx freertos-CSDN博客](https://blog.csdn.net/qq_45396672/article/details/120877303)\n- [STM32HAL库纯使用向教学，STM32HAL库学习（三）外部中断（GPIO函数讲解）_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1vd4y197vB/?spm_id_from=333.788.recommend_more_video.-1&vd_source=e03d48176855fc5349b27aef691f9cdb)\n","categories":[{"name":"嵌入式","api":"api/categories/嵌入式.json"}],"tags":[{"name":"C","api":"api/tags/C.json"},{"name":"STM32","api":"api/tags/STM32.json"},{"name":"HAL","api":"api/tags/HAL.json"},{"name":"STM32CubeMX","api":"api/tags/STM32CubeMX.json"},{"name":"FreeRTOS","api":"api/tags/FreeRTOS.json"}]},"api":"api/posts/p/7e13c80c.json"}