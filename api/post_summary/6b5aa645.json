{"title":"Java List 的 toArray 方法","tags":["Java","源码阅读"],"cover":"https://cdn.gallery.uuanqin.top/img/202501070005899.webp","description":"从源码上进行理解","categories":["计算机语言"],"abbrlink":"6b5aa645","date":"2025-01-07T00:06:51.000Z","top_img":null,"summary":"本文目的是从源码层面分清楚 `List` 中这两个函数的区别： `Object[] toArray()` `<T> T[] toArray(T[] a)`。参数 `a` 由用户传递，用于指定新数组生成的位置。 快速感知 两个函数的作用都是将 `ArrayList` 对象转换为数组，都返回新数组，多次运行 `toArray` 方法会获得不同的数组对象，但是这些数组对象中内容一样的。 区别在于是否携带参数。具体区别： `Object[] toArray()` 中 - 如果 `ArrayList` 中的内容是基本类型，你可以简单的认为新数组之间没有任何关联。 - 如果 `ArrayList` 中的内容是自定义类型，那么即使 `toArray` 返回不同的新数组，但是在不同的新数组中，对应下标元素均引用同一个对象。 `<T> T[] toArray(T[] a)`，`a` 指的是用户可以指定的新数组的存储位置，返回类型为 `T[]`。如果用户给的 `a` 足够大，代码就会把元素复制到 `a` 中，如果还有富余，则结尾设置 `null`；如果不够大，则代码自己生成一个大小刚好符合要求的新的数组，再复制返回。 - `ls.toArray(new Object[0])` 等同于 `ls.toArray()` > [!note] 阿里巴巴 Java 开发手册对集合使用的相关要求 > 一、（六）9.【强制】 使用集合转数组的方法， 必须使用集合的 `toArray(T[] array)`， 传入的是类型完全一致、 长度为 0 的空数组。 原因： 直接使用 `toArray` 无参方法存在问题， 此方法返回值只能是 `Object[]` 类， 若强转其它类型数组将出现 `ClassCastException` 错误。 使用 toArray 带参方法， 数组空间大小的 `length` 的选择： - 等于 0， 动态创建与 `size` 相同的数组， 性能最好。 - 大于 0 但小于 `size`， 重新创建大小等于 `size` 的数组， 增加 GC 负担。也就是说，作为参数传入的那个数组没用上。 - 等于 `size`， 在高并发情况下， 数组创建完成之后， `size` 正在变大的情况下， 负面影响与第 2 种情况相同。但实际上，并发场景本就不建议使用 `ArrayList`。..."}