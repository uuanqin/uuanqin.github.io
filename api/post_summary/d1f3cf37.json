{"title":"CSAPP LAB-2 二进制炸弹实验","tags":["CSAPP","ASM","C","实验","GDB","objdump"],"cover":"https://cdn.gallery.uuanqin.top/img/20240522192911.webp","description":"该补的地方还是得补","categories":["CSAPP LABS"],"abbrlink":"d1f3cf37","date":"2024-05-22T20:00:46.000Z","top_img":null,"summary":"> 死去的炸弹又来攻击我！！😅😅😅 Computer Systems. A Programmer’s Perspective，CS: APP——中文译名《深入理解计算机系统》，是本科时候的必选课，研究生阶段选修了这门课，相当于重新再学一遍。本科学这门课时正值疫情，在加里敦~~（家里蹲）~~大学上了一个学期，当时太迷茫了，啥也不会，整个课上得懵懵懂懂。估计那时的炸弹也是看着网上的教程东抄抄西补补勉强弄出来的。 现在研究生了，该补的地方还是得补。不管有多忙，我决定沉下心来重看《CSAPP》，炸弹客实验也打算亲自做做。最终还是做出来了😎，耗时 2 天。难度怎么说——还算适中吧，如果你仔细看过课本就不难。 目前基本的 6 层炸弹已经拆除，还有一层隐藏层有时间再研究。由于每个人收到的炸弹是不同的（你的老师会说根据你的学号选择相应的炸弹），所以文章仅提供基本思路供参考。 > [!notice] CSAPP LAB 实验 > > - [[CSAPP LAB-1 位操作]] > - CSAPP LAB-2 二进制炸弹实验（本文） > - [[CSAPP LAB-3 缓冲区溢出炸弹]] > - [[CSAPP LAB-4 代码优化]] > - [[CSAPP LAB-5 手写动态存储分配器]] 实验介绍 二进制炸弹包含若干个阶段，每个阶段需要输入特定的字符串，所有输入正确则炸弹被排除，否则….. 我们的任务是找出这些字符串字符串记录到文件中，可输入命令验证 `./bomb solution.txt` 用换行区别不同阶段的字符串。 下载压缩包 bombs，压缩包包含多个 `bomb` 代码包，根据学号领取自己的代码包。 查看 `bomb.c` 可知程序利用 `phase_` 函数（`` 为 1~6） 检查输入字符串是否合法，不合法就引爆炸弹。我们的任务就是逆向出每个 phase 的检查规则，构造出合法字符串。当然，`bomb.c` 没有给出 `phase_*` 的源码 逆向方法： GDB 直接反汇编 课本参考： CSAPP 第三章：GDB 的使用 CSAPP 第三章：过程 链接参考（喜报：全是 English）： GDB： - Guide to Faster, Less Frustrating Debugging (ucdavis.e..."}