{"title":"STM32 工程的创建 - 基于 HAL 库","tags":["STM32","Keil","C","HAL","STM32CubeMX"],"description":"介绍STM32CubeMX的使用。","categories":["嵌入式"],"abbrlink":"53832aef","date":"2024-04-02T19:53:06.000Z","cover":"https://cdn.gallery.uuanqin.top/img/20240404230833.webp","top_img":null,"summary":"目前 STM32 的开发方式有 3 个层次： 基于寄存器方式。极少的人使用这种形式。这种方式最底层、最直接、效率更高，但 STM32 寄存器十分复杂，一般不建议采取这种方式。 基于标准库（库函数）方式。使用 ST 官方提供封装好的函数，通过调用函数间接配置寄存器。这种方式对开发人员比较友好，有利于提高开发效率。 基于 HAL 库方式。HAL 库是 ST 公司目前主力推的开发方式，全称就是 Hardware Abstraction Layer（抽象印象层）。可以使用图形化界面快速配置 STM32，隐藏底层的逻辑。 HAL 库的出现比标准库要晚，但其实和标准库一样，都是为了节省程序开发的时期。如果说标准库把实现功能需要配置的寄存器集成了，那么 HAL 库的一些函数甚至可以做到某些特定功能的集成。 HAL 库很好的解决了程序移植的问题，不同型号的 stm32 芯片它的标准库是不一样的，例如在 F4 上开发的程序移植到 F3 上是不能通用的，而使用 HAL 库，只要使用的是相通的外设，程序基本可以完全复制粘贴。 ST 公司研发的 STMcube 软件可以通过图形化的配置功能，直接生成整个使用 HAL 库的工程文件。但它同时也存在执行效率的低下的问题。 > 更多区别可参阅：STM32中HAL库与标准库的区别_stm32标准库和hal库有什么区别-CSDN博客 本篇文章介绍使用 STM32CubeMX 创建 STM32 工程的文章，并实现一个 LED 点灯的案例。如果打算使用寄存器或标准库方式创建项目，可移步这篇文章：[[STM32 工程的创建 - 基于寄存器或标准库]]。关于 Keil 的更多使用技巧可详看这篇文章：[[Keil 的使用技巧与问题解决]]。 本文使用的工具材料有： ST-Link STM32（这里以 STM32F103C8T6 最小核心板为例） 杜邦线若干 软件安装 安装 JRE（Java 运行环境）。选择 64 位的安装。官网：Download Java for Windows。以前装过就不用装。 安装 STM32CubeMX。官网安装：STM32CubeMX: Graphical tool - STMicroelectronics - STMicroelectronics。如果没有账号请提前注册 ST 公司的账号。 安装 Keil5 MDK。..."}