{"title":"买卖股票的最佳时机","tags":["动态规划","贪心算法","LeetCode","Java","前缀和","状态机"],"cover":"https://cdn.gallery.uuanqin.top/img/202409030402919.webp","description":"掌握一次遍历与动态规划。","categories":["算法与数据结构"],"abbrlink":"41280b89","katex":true,"date":"2024-09-12T01:35:51.000Z","top_img":null,"summary":"今天带来的是 LeetCode 的所有买卖股票最佳时机的系列题，这些题目也是「状态机动态规划」的经典题目。 在这篇文章中，可以熟练一次遍历思想以及单维、多维动态规划。 本文题目难度标识：🟩简单，🟨中等，🟥困难。 > [!example] 基本题干：买卖股票的最佳时机 > 给定一个数组 `prices` ，它的第 i 个元素 `prices[i]` 表示一支给定股票第 i 天的价格。 > > 1 次股票买卖定义为：选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。 > > 你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。 > > 设计一个算法来计算你所能获取的最大利润。返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。 > > 提示：`prices.length>=1` 下文中出现的买卖股票的问题都是基于此题干进行条件设置。 允许 0-1 次买卖 > [!example] 🟩 121. 买卖股票的最佳时机 - 力扣（LeetCode） > 要求：至多允许 1 次买卖。求最大利润。 我们需要找出给定数组中两个数字之间的最大差值（即最大利润）。此外，第二个数字（卖出价格）必须大于第一个数字（买入价格）。 形式上，对于每组 $i$ 和 $j$（其中 $j>i$）我们需要找出 `max(prices[j]-prices[i])`。 暴力方法 > [!error] 此方法时间复杂度过高，将导致超时。 复杂度分析： 时间复杂度：$O(n^2)$。循环运行 $n(n-1)/2$​ 次。 空间复杂度：$O(1)$。只使用了常数个变量。 一次遍历 思考：假设我们要在第 `i` 卖股票，那么我们能赚多少钱呢？最好的愿望就是，我们是在在第 i 天之前的历史最低点买入的股票！ 我们只要用一个变量记录一个历史最低价格 `minprice`，我们就可以假设自己的股票是在那天买的。那么我们在第 `i` 天卖出股票能得到的利润就是 `prices[i] - minprice`。 因此，我们只需要遍历价格数组一遍，记录历史最低点，然后在每一天考虑这么一个问题：如果我是在历史最低点买进的，那么我今天卖出能赚多少钱？当考虑完所有天数之时，我们就得到了最好的答案。 复杂度分析： 时间复杂度：$O(n)$，只需要遍历一次。..."}