{"data":{"title":"LogTrick 方法解决子数组最值或计数问题","slug":"算法与数据结构/LogTrick 方法解决子数组最值或计数问题","description":"降低内层循环的时间复杂度实现 Trick","date":"2025-01-25T19:30:08.000Z","updated":"2025-06-09T17:19:45.848Z","language":"zh-CN","comments":true,"url":"p/6aba4215/","cover":"https://cdn.gallery.uuanqin.top/img/202501232337583.webp","images":[],"content":"<p>Logtrick 是在时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 计算子数组问题的基础上，利用 |,&amp;,lcm,gcd 等性质优化的一种算法。 通常用于求 <strong>子数组</strong> 经过一些操作 (gcd,lcm,&amp;,|) 后的 max、 min 或者计数问题。</p>\n<p>本文将分为两大部分讲解 LogTrick 的理解：</p>\n<ul>\n<li>子数组经过一些操作后的最值问题</li>\n<li>子数组经过一些操作后的计数问题</li>\n</ul>\n<p>本文题目难度标识：🟩简单，🟨中等，🟥困难。</p>\n<h1 id=\"最值问题\"><a class=\"markdownIt-Anchor\" href=\"#最值问题\"></a> 最值问题</h1>\n<h2 id=\"or-运算-最值问题\"><a class=\"markdownIt-Anchor\" href=\"#or-运算-最值问题\"></a> OR 运算 - 最值问题</h2>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">🟥 <a href=\"https://leetcode.cn/problems/find-subarray-with-bitwise-or-closest-to-k/description/\">3171. 找到按位或最接近 K 的子数组 - 力扣（LeetCode）</a></div>\n</div>\n<div class=\"callout-content\"><p>给你一个数组 nums 和一个整数 k 。你需要找到 nums 的一个子数组，满足子数组中所有元素按位或运算 OR 的值与 k 的 <strong>绝对差</strong> 尽可能 小 。换言之，你需要选择一个子数组 <code>nums[l..r]</code> 满足 <code>|k - (nums[l] OR nums[l + 1] ... OR nums[r])|</code> 最小。</p>\n<p>请你返回 <strong>最小</strong> 的绝对差值。</p>\n<p><strong>子数组</strong> 是数组中连续的 <strong>非空</strong> 元素序列。</p>\n<p>限制：</p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 10^9</code></li>\n<li><code>1 &lt;= k &lt;= 10^9</code></li>\n</ul>\n</div></div><h3 id=\"从暴力方法开始讲起\"><a class=\"markdownIt-Anchor\" href=\"#从暴力方法开始讲起\"></a> 从暴力方法开始讲起</h3>\n<p>我们可以想到一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> 的暴力算法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暴力算法，会超时</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minimumDifference</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">            ans = Math.min(ans, Math.abs(x - k)); <span class=\"comment\">// 单个元素也算子数组</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">                nums[j] |= x; <span class=\"comment\">// 现在 nums[j] = 原数组 nums[j] 到 nums[i] 的 OR</span></span><br><span class=\"line\">                ans = Math.min(ans, Math.abs(nums[j] - k));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法的要点在于把子数组相或的结果存储在 <code>nums</code> 中。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202501182235719.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<h3 id=\"trick\"><a class=\"markdownIt-Anchor\" href=\"#trick\"></a> Trick!</h3>\n<p>为了充分利用 OR 的性质，我们还可以对内层循环进行优化。</p>\n<p>内层循环 <code>j</code> 在递减时，如果 <code>x</code> 和当前 <code>nums[j]</code> 相或不再发生变化，那么和 <code>nums[j-1]</code>、<code>nums[j-2]</code> … <code>nums[0]</code> 相或也不会发生变化。这时我们可以跳出循环了。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202501182238691.webp\" alt=\"image.png\" width=\"425px\" /></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minimumDifference</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">            ans = Math.min(ans, Math.abs(x - k));</span><br><span class=\"line\">            <span class=\"comment\">// 变化点：增加循环的约束条件</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; (nums[j] | x) != nums[j]; j--) &#123;</span><br><span class=\"line\">                nums[j] |= x;</span><br><span class=\"line\">                ans = Math.min(ans, Math.abs(nums[j] - k));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当 <code>j</code> 在递减时，x 能让当前 <code>nums[j]</code> 的一些比特位从 0 变为 1，如果不能就会退出内层循环。x 最大值限制为 <code>10^9</code>，即 x 最多有 29 个比特位，也就是说，x 最多能进行 29 次内部循环（第二重循环）。因此在本题中，内部循环的时间复杂度将是一个常数。</p>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>，其中 n 是 nums 的长度，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">U=\\max(nums)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<p>这种方法之所以被称为 LogTrick ，是因为它巧妙地利用了 OR 运算的性质，并且其时间复杂度与数字的位数（logarithm of the number）相关。</p>\n<blockquote>\n<p>相关题目：</p>\n<ul>\n<li>🟨 <a href=\"https://leetcode.cn/problems/shortest-subarray-with-or-at-least-k-ii/description/\">3097. 或值至少为 K 的最短子数组 II - 力扣（LeetCode）</a></li>\n<li>🟨 <a href=\"https://leetcode.cn/problems/smallest-subarrays-with-maximum-bitwise-or/description/\">2411. 按位或最大的最小子数组长度 - 力扣（LeetCode）</a> 需要维护答案数组</li>\n<li>🟨 <a href=\"https://leetcode.cn/problems/bitwise-ors-of-subarrays/description/\">898. 子数组按位或操作 - 力扣（LeetCode）</a> 变种题。某种程度上可以理解为最值问题。</li>\n</ul>\n</blockquote>\n<h2 id=\"and-运算最值问题\"><a class=\"markdownIt-Anchor\" href=\"#and-运算最值问题\"></a> AND 运算最值问题</h2>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">🟥 <a href=\"https://leetcode.cn/problems/find-a-value-of-a-mysterious-function-closest-to-target/\">1521. 找到最接近目标值的函数值 - 力扣（LeetCode）</a></div>\n</div>\n<div class=\"callout-content\"><p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202501201654970.webp\" alt=\"image.png\" width=\"375px\" /><br />\nWinston 构造了一个如上所示的函数 <code>func</code> 。他有一个整数数组 <code>arr</code> 和一个整数 <code>target</code> ，他想找到让 <code>|func(arr, l, r) - target|</code> 最小的 <code>l</code> 和 <code>r</code> 。</p>\n<p>请你返回 <code>|func(arr, l, r) - target|</code> 的最小值。</p>\n<p>请注意， <code>func</code> 的输入参数 <code>l</code> 和 <code>r</code> 需要满足 <code>0 &lt;= l, r &lt; arr.length</code> 。</p>\n</div></div><p>参考答案：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">closestToTarget</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">            min = Math.min(Math.abs(x-target),min);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>&amp;&amp;(arr[j]&amp;x)!=arr[j];j--)&#123;</span><br><span class=\"line\">                arr[j]&amp;=x;</span><br><span class=\"line\">                min = Math.min(Math.abs(arr[j]-target),min);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>内层循环 <code>j</code> 在递减时，如果 <code>x</code> 和当前 <code>nums[j]</code> 相与不再发生变化，说明 <code>x</code> 不足以让当前位置 <code>nums[j]</code> 变小，即 <code>x</code> 以及不能去掉 <code>nums[j]</code> 表示的集合中的比特位 1。而 <code>nums[j-1]</code>、<code>nums[j-2]</code> … <code>nums[0]</code> 都和 <code>nums[j]</code> 相与过，能被去掉的比特位 1 早就被 <code>nums[j]</code> 所表示的集合去掉了，因此 <code>x</code> 与 <code>nums[j-1]</code>、<code>nums[j-2]</code> … <code>nums[0]</code> 进行与运算也不会发生变化。</p>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>，其中 <code>n</code> 是 <code>arr</code> 的长度，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">U=\\max(arr)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span>。由于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>2</mn></msup><mn>9</mn><mtext>−</mtext><mn>1</mn><mo>&lt;</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>&lt;</mo><msup><mn>2</mn><mn>30</mn></msup><mtext>−</mtext><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^29 −1&lt;10^9 &lt;2^{30} −1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\">9</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.853208em;vertical-align:-0.0391em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span>，二进制数对应集合的大小不会超过 29，因此在 AND 运算下，每个数字至多可以减少 29 次。总体上看，二重循环的总循环次数等于每个数字可以减少的次数之和，即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<h1 id=\"计数问题\"><a class=\"markdownIt-Anchor\" href=\"#计数问题\"></a> 计数问题</h1>\n<h2 id=\"and-运算的计数问题\"><a class=\"markdownIt-Anchor\" href=\"#and-运算的计数问题\"></a> AND 运算的计数问题</h2>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">🟥 <a href=\"https://leetcode.cn/problems/number-of-subarrays-with-and-value-of-k/description/\">3209. 子数组按位与值为 K 的数目 - 力扣（LeetCode）</a></div>\n</div>\n<div class=\"callout-content\"><p>给你一个整数数组 nums 和一个整数 k ，请你返回 nums 中有多少个 <strong>子数组</strong> 满足：子数组中所有元素按位 AND 的结果为 k 。</p>\n</div></div><h3 id=\"list-原地去重法\"><a class=\"markdownIt-Anchor\" href=\"#list-原地去重法\"></a> <code>List</code> + 原地去重法</h3>\n<p>在上一节的 OR/AND 运算中，求的是答案的最值。内层循环遇到 <code>(nums[j] | x) == nums[j]</code> 就可以提前终止了，从而达到降低内层时间复杂度的效果。而本题中要求统计子数组运算后与给定 k 相等的个数，如果 <code>(nums[j] | x) == nums[j]</code> 就跳出内层循环，当 <code>k==nums[j]</code>，答案 <code>ans</code> 就不能得到正确累计从而出现遗漏状况。</p>\n<p>一个解决方法是另外维护一个 <code>List</code>，存储<strong>子数组运算结果</strong>以及<strong>该结果对应的数量</strong>。并且不时去重合并，从而达到降低时间复杂度的效果。</p>\n<blockquote>\n<p>数组原地去重请复习此题：🟩 <a href=\"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/\">26. 删除有序数组中的重复项 - 力扣（LeetCode）</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">countSubarrays</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        List&lt;<span class=\"type\">int</span>[]&gt; ls = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();<span class=\"comment\">// 位与结果，子数组的数量</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">            </span><br><span class=\"line\">            ls.add(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;x,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;ls.size();j++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span>[] e = ls.get(j);</span><br><span class=\"line\">                e[<span class=\"number\">0</span>]&amp;=x;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(e[<span class=\"number\">0</span>]==k)ans+=e[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 原地去重合并</span></span><br><span class=\"line\">            <span class=\"type\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;ls.size();j++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span>[] e = ls.get(j);</span><br><span class=\"line\">                <span class=\"type\">int</span>[] last_e = ls.get(l);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(e[<span class=\"number\">0</span>]==last_e[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">                    last_e[<span class=\"number\">1</span>] += e[<span class=\"number\">1</span>];</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ls.set(l+<span class=\"number\">1</span>,e);</span><br><span class=\"line\">                l++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ls.subList(l+<span class=\"number\">1</span>,ls.size()).clear(); <span class=\"comment\">// 维持 O(log U)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>内部循环中，<code>ls</code> 大小保持在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">U=\\max(nums)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>，其中 <code>n</code> 是 <code>nums</code> 的长度，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">U=\\max(nums)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<p>这个方法改写自 <a href=\"https://leetcode.cn/problems/smallest-subarrays-with-maximum-bitwise-or/solutions/1830911/by-endlesscheng-zai1/\">@灵茶山艾府</a> 的模板方法，为了方便理解，我把原地去重的逻辑抽离出来。你可以试图将同级的两个内部循环合在一起写，就得到灵神的模板。</p>\n<h3 id=\"二分查找方法\"><a class=\"markdownIt-Anchor\" href=\"#二分查找方法\"></a> 二分查找方法</h3>\n<p>注意到，每次外层迭代后，集合 <code>nums[j]</code> 值是非递减的。这时我们可以考虑 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/817735b/\"><span class=\"yukari\">站内文章</span>二分查找</a>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">countSubarrays</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; (nums[j] &amp; x) != nums[j]; j--) &#123;</span><br><span class=\"line\">\t\t\tnums[j] &amp;= x;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans += lowerBound(nums, i, k + <span class=\"number\">1</span>) - lowerBound(nums, i, k);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此二分查找方法交给读者实现</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">lowerBound</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> right, <span class=\"type\">int</span> target)</span>; </span><br></pre></td></tr></table></figure>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>U</mi><mo>+</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log U+n\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，其中 n 是 <code>nums</code> 的长度，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">U=\\max(nums)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span>。由于二进制数对应集合的大小不会超过 29，因此在 AND 运算下，每个数字至多可以减小 29 次。总体上看（除去二分），二重循环的总循环次数等于每个数字可以减小的次数之和，即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<h3 id=\"个数维护方法\"><a class=\"markdownIt-Anchor\" href=\"#个数维护方法\"></a> 个数维护方法</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">countSubarrays</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cnt</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">            cnt += x == k ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span> &amp;&amp; (nums[j] &amp; x) != nums[j]; j--) &#123;</span><br><span class=\"line\">                cnt -= nums[j] == k ? <span class=\"number\">1</span> : <span class=\"number\">0</span>; <span class=\"comment\">// 去除上一轮统计时留下的标记</span></span><br><span class=\"line\">                nums[j] &amp;= x;</span><br><span class=\"line\">                cnt += nums[j] == k ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans += cnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码中，<code>cnt</code> 表示当层 <code>i</code> 中符合要求的答案数量。</p>\n<p>复杂度分析：</p>\n<ul>\n<li>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span>，其中 <code>n</code> 是 <code>nums</code> 的长度，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>U</mi><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">U=\\max(nums)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ul>\n<h2 id=\"gcd-最大公约数的计数问题\"><a class=\"markdownIt-Anchor\" href=\"#gcd-最大公约数的计数问题\"></a> GCD 最大公约数的计数问题</h2>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">🟨 <a href=\"https://codeforces.com/problemset/problem/475/D\">Problem - 475D - CGCDSSQ - Codeforces</a></div>\n</div>\n<div class=\"callout-content\"><p></p>\n<p>Given a sequence of integers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_1, ..., a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and q queries <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>x</mi><mi>q</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_1, ..., x_q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> on it. For each query <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> you have to count the number of pairs (l, r) such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mtext> </mtext><mo>≤</mo><mtext> </mtext><mi>l</mi><mtext> </mtext><mo>≤</mo><mtext> </mtext><mi>r</mi><mtext> </mtext><mo>≤</mo><mtext> </mtext><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 ≤ l ≤ r ≤ n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\"> </span><span class=\"mord mathnormal\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>l</mi></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>a</mi><mrow><mi>l</mi><mtext> </mtext><mo>+</mo><mtext> </mtext><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><mtext> </mtext><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>a</mi><mi>r</mi></msub><mo stretchy=\"false\">)</mo><mtext> </mtext><mo>=</mo><mtext> </mtext><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">gcd(a_l, a_{l + 1}, ..., a_r) = x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mtight\"> </span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\"> </span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy=\"false\">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>v</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>v</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">gcd(v_1, v_2, ..., v_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a greatest common divisor of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>v</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>v</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_1, v_2, ..., v_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, that is equal to a largest positive integer that divides all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p><strong>Input</strong><br />\nThe first line of the input contains integer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mtext> </mtext><mo>≤</mo><mtext> </mtext><mi>n</mi><mtext> </mtext><mo>≤</mo><mtext> </mtext><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n, (1 ≤ n ≤ 10^5)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"> </span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, denoting the length of the sequence. The next line contains n space separated integers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>a</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mtext> </mtext><mo>≤</mo><mtext> </mtext><msub><mi>a</mi><mi>i</mi></msub><mtext> </mtext><mo>≤</mo><mtext> </mtext><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a_1, ..., a_n, (1 ≤ a_i ≤ 10^9)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7859700000000001em;vertical-align:-0.15em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"> </span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>The third line of the input contains integer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mtext> </mtext><mo>≤</mo><mtext> </mtext><mi>q</mi><mtext> </mtext><mo>≤</mo><mtext> </mtext><mn>3</mn><mtext> </mtext><mo>×</mo><mtext> </mtext><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q, (1 ≤ q ≤ 3 × 10^5)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\"> </span><span class=\"mord\">3</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"> </span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, denoting the number of queries. Then follows q lines, each contain an integer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mtext> </mtext><mo>≤</mo><mtext> </mtext><msub><mi>x</mi><mi>i</mi></msub><mtext> </mtext><mo>≤</mo><mtext> </mtext><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x_i, (1 ≤ x_i ≤ 10^9)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7859700000000001em;vertical-align:-0.15em;\"></span><span class=\"mord\"> </span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"> </span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"> </span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p><strong>Output</strong><br />\nFor each query print the result in a separate line.</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202501201619045.webp\" alt=\"image.png\" /></p>\n</div></div><p>此题中，GCD 的运算性质和与运算类似。</p>\n<p>此题与前面题目不同的是，它会有 <code>q</code> 组询问；而前面题目只有 1 组询问，这时就需要 <code>Map</code> 来存储不同询问的答案。</p>\n<p>以下是输入输出代码结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    \t<span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">    \t<span class=\"comment\">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class=\"line\">    \t<span class=\"type\">int</span> <span class=\"variable\">T</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\">    \t<span class=\"type\">int</span>[] nums = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[T];</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;T;i++)&#123;</span><br><span class=\"line\">    \t    <span class=\"type\">int</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\">    \t    nums[i] = e;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \tMap&lt;Integer,Long&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    \tsolution(nums,map);</span><br><span class=\"line\">    \t<span class=\"type\">int</span> <span class=\"variable\">Q</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span> (Q--!=<span class=\"number\">0</span>) &#123; <span class=\"comment\">// 注意 while 处理多个 case</span></span><br><span class=\"line\">    \t\t<span class=\"type\">int</span> <span class=\"variable\">q</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\">    \t\tSystem.out.println(map.getOrDefault(q,<span class=\"number\">0L</span>));</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">solution</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,Map&lt;Integer,Long&gt; map)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span>&#123; <span class=\"comment\">// 原理是辗转相除法（迭代版本）</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(b!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            a%=b;</span><br><span class=\"line\">            a^=b;</span><br><span class=\"line\">            b^=a;</span><br><span class=\"line\">            a^=b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们所需要做的是填充 <code>solution</code> 这个核心代码。</p>\n<h2 id=\"个数维护方法-2\"><a class=\"markdownIt-Anchor\" href=\"#个数维护方法-2\"></a> 个数维护方法</h2>\n<p>此题是上面提到的 🟥 <a href=\"https://leetcode.cn/problems/number-of-subarrays-with-and-value-of-k/description/\">3209. 子数组按位与值为 K 的数目 - 力扣（LeetCode）</a> 个数维护方法 Map 版。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">solution</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,Map&lt;Integer,Long&gt; map)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">\tMap&lt;Integer,Long&gt; cntMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">\t\t<span class=\"comment\">// cnt+= x==k? 1:0;</span></span><br><span class=\"line\">\t\tcntMap.put(x,cntMap.getOrDefault(x,<span class=\"number\">0L</span>)+<span class=\"number\">1L</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>&amp;&amp;gcd(nums[j],x)!=nums[j];j--)&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tcntMap.put(nums[j],cntMap.getOrDefault(nums[j],<span class=\"number\">0L</span>)-<span class=\"number\">1L</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(cntMap.get(nums[j])==<span class=\"number\">0</span>)cntMap.remove(nums[j]); <span class=\"comment\">// 这是必要的，它能降低时间复杂度 维持 O(log U)</span></span><br><span class=\"line\">\t\t\tnums[j] = gcd(nums[j],x);</span><br><span class=\"line\">\t\t\tcntMap.put(nums[j],cntMap.getOrDefault(nums[j],<span class=\"number\">0L</span>)+<span class=\"number\">1L</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k:cntMap.keySet())&#123;</span><br><span class=\"line\">\t\t\tmap.put(k,map.getOrDefault(k,<span class=\"number\">0L</span>)+cntMap.get(k));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"list-原地去重法-2\"><a class=\"markdownIt-Anchor\" href=\"#list-原地去重法-2\"></a> <code>List</code> + 原地去重法</h2>\n<p>这里只给出 <code>solution</code> 方法的实现，将此函数替换上一节代码中相应函数即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">solution</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,Map&lt;Integer,Long&gt; map)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">\tList&lt;<span class=\"type\">int</span>[]&gt; ls = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(); <span class=\"comment\">// gcd cnt</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">\t\t<span class=\"comment\">// cnt+= x==k? 1:0;</span></span><br><span class=\"line\">\t\tmap.put(x,map.getOrDefault(x,<span class=\"number\">0L</span>)+<span class=\"number\">1L</span>);</span><br><span class=\"line\">\t\tls.add(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;x,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;ls.size()-<span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span>[] e = ls.get(j);</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> <span class=\"variable\">newgcd</span> <span class=\"operator\">=</span> gcd(e[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">\t\t\tmap.put(newgcd,map.getOrDefault(newgcd,<span class=\"number\">0L</span>)+Long.valueOf(e[<span class=\"number\">1</span>]));</span><br><span class=\"line\">\t\t\te[<span class=\"number\">0</span>] = newgcd;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 原地去重</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;ls.size();j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(ls.get(j)[<span class=\"number\">0</span>]==ls.get(k)[<span class=\"number\">0</span>])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// int[] e = ls.get(k);</span></span><br><span class=\"line\">\t\t\t\tls.get(k)[<span class=\"number\">1</span>]+= ls.get(j)[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tls.set(k+<span class=\"number\">1</span>,ls.get(j));</span><br><span class=\"line\">\t\t\tk++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tls.subList(k+<span class=\"number\">1</span>,ls.size()).clear();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>相关题目：</p>\n<ul>\n<li>🟥 <a href=\"https://codeforces.com/problemset/problem/1632/D\">Problem - 1632D - New Year Concert - Codeforces</a></li>\n<li>🟨 <a href=\"https://www.dotcpp.com/oj/problem2622.html\">蓝桥杯2021年第十二届国赛真题-和与乘积 - C语言网</a></li>\n</ul>\n</blockquote>\n<h1 id=\"后续计划\"><a class=\"markdownIt-Anchor\" href=\"#后续计划\"></a> 后续计划</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\"> 补充 CF1632D、蓝桥杯真题相关题解</li>\n</ul>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://leetcode.cn/u/endlesscheng/\">@灵茶山艾府</a> 的相关 <a href=\"https://leetcode.cn/circle/discuss/dHn9Vk/\">题单</a> 与题解</li>\n<li><a href=\"https://www.cnblogs.com/bananawolf/p/18325334\">Logtrick - GsGXT - 博客园</a></li>\n<li><a href=\"https://gdst.dev/posts/LC-3171/\">LeetCode 🔴 3171. Find Subarray With Bitwise OR Closest to K | 十六個天亮</a></li>\n</ul>\n","raw":"---\ntitle: LogTrick 方法解决子数组最值或计数问题\ntags:\n  - LogTrick\n  - 二分查找\n  - Java\n  - LeetCode\ncover: 'https://cdn.gallery.uuanqin.top/img/202501232337583.webp'\ndescription: 降低内层循环的时间复杂度实现 Trick\ncategories:\n  - 算法与数据结构\nabbrlink: 6aba4215\nkatex: true\ndate: 2025-01-26 03:30:08\ntop_img:\n---\n\nLogtrick 是在时间复杂度为 $O(n^2)$ 计算子数组问题的基础上，利用 |,&,lcm,gcd 等性质优化的一种算法。 通常用于求 **子数组** 经过一些操作 (gcd,lcm,&,|) 后的 max、 min 或者计数问题。\n\n本文将分为两大部分讲解 LogTrick 的理解：\n\n- 子数组经过一些操作后的最值问题\n- 子数组经过一些操作后的计数问题\n\n本文题目难度标识：🟩简单，🟨中等，🟥困难。\n\n# 最值问题\n\n## OR 运算 - 最值问题\n\n> [!example] 🟥 [3171. 找到按位或最接近 K 的子数组 - 力扣（LeetCode）](https://leetcode.cn/problems/find-subarray-with-bitwise-or-closest-to-k/description/)\n> 给你一个数组 nums 和一个整数 k 。你需要找到 nums 的一个子数组，满足子数组中所有元素按位或运算 OR 的值与 k 的 **绝对差** 尽可能 小 。换言之，你需要选择一个子数组 `nums[l..r]` 满足 `|k - (nums[l] OR nums[l + 1] ... OR nums[r])|` 最小。\n>\n> 请你返回 **最小** 的绝对差值。\n>\n> **子数组** 是数组中连续的 **非空** 元素序列。\n>\n> 限制：\n> - `1 <= nums.length <= 10^5`\n> - `1 <= nums[i] <= 10^9`\n> - `1 <= k <= 10^9`\n\n### 从暴力方法开始讲起\n\n我们可以想到一个 $O(n^2)$ 的暴力算法：\n\n```java\n// 暴力算法，会超时\nclass Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.length; i++) {\n            int x = nums[i];\n            ans = Math.min(ans, Math.abs(x - k)); // 单个元素也算子数组\n            for (int j = i - 1; j >= 0; j--) {\n                nums[j] |= x; // 现在 nums[j] = 原数组 nums[j] 到 nums[i] 的 OR\n                ans = Math.min(ans, Math.abs(nums[j] - k));\n            }\n        }\n        return ans;\n    }\n}\n```\n\n方法的要点在于把子数组相或的结果存储在 `nums` 中。\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/202501182235719.webp)\n\n复杂度分析：\n\n- 时间复杂度： $O(n^2)$\n- 空间复杂度：$O(1)$。\n\n### Trick!\n\n为了充分利用 OR 的性质，我们还可以对内层循环进行优化。\n\n内层循环 `j` 在递减时，如果 `x` 和当前 `nums[j]` 相或不再发生变化，那么和 `nums[j-1]`、`nums[j-2]` ...... `nums[0]` 相或也不会发生变化。这时我们可以跳出循环了。\n\n![image.png|425](https://cdn.gallery.uuanqin.top/img/202501182238691.webp)\n\n```java\nclass Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.length; i++) {\n            int x = nums[i];\n            ans = Math.min(ans, Math.abs(x - k));\n            // 变化点：增加循环的约束条件\n            for (int j = i - 1; j >= 0 && (nums[j] | x) != nums[j]; j--) {\n                nums[j] |= x;\n                ans = Math.min(ans, Math.abs(nums[j] - k));\n            }\n        }\n        return ans;\n    }\n}\n```\n\n当 `j` 在递减时，x 能让当前 `nums[j]` 的一些比特位从 0 变为 1，如果不能就会退出内层循环。x 最大值限制为 `10^9`，即 x 最多有 29 个比特位，也就是说，x 最多能进行 29 次内部循环（第二重循环）。因此在本题中，内部循环的时间复杂度将是一个常数。\n\n复杂度分析：\n\n- 时间复杂度：$O(n\\log U)$，其中 n 是 nums 的长度，$U=\\max(nums)$。\n- 空间复杂度：$O(1)$。\n\n这种方法之所以被称为 LogTrick ，是因为它巧妙地利用了 OR 运算的性质，并且其时间复杂度与数字的位数（logarithm of the number）相关。\n\n> 相关题目：\n> - 🟨 [3097. 或值至少为 K 的最短子数组 II - 力扣（LeetCode）](https://leetcode.cn/problems/shortest-subarray-with-or-at-least-k-ii/description/)\n> - 🟨 [2411. 按位或最大的最小子数组长度 - 力扣（LeetCode）](https://leetcode.cn/problems/smallest-subarrays-with-maximum-bitwise-or/description/) 需要维护答案数组\n> - 🟨 [898. 子数组按位或操作 - 力扣（LeetCode）](https://leetcode.cn/problems/bitwise-ors-of-subarrays/description/) 变种题。某种程度上可以理解为最值问题。\n\n## AND 运算最值问题\n\n> [!example] 🟥 [1521. 找到最接近目标值的函数值 - 力扣（LeetCode）](https://leetcode.cn/problems/find-a-value-of-a-mysterious-function-closest-to-target/)\n> ![image.png|375](https://cdn.gallery.uuanqin.top/img/202501201654970.webp)\nWinston 构造了一个如上所示的函数 `func` 。他有一个整数数组 `arr` 和一个整数 `target` ，他想找到让 `|func(arr, l, r) - target|` 最小的 `l` 和 `r` 。\n>\n> 请你返回 `|func(arr, l, r) - target|` 的最小值。\n>\n> 请注意， `func` 的输入参数 `l` 和 `r` 需要满足 `0 <= l, r < arr.length` 。\n\n参考答案：\n\n```java\nclass Solution {\n    public int closestToTarget(int[] arr, int target) {\n        int len = arr.length;\n        int min = Integer.MAX_VALUE;\n        for(int i=0;i<len;i++){\n            int x = arr[i];\n            min = Math.min(Math.abs(x-target),min);\n            for(int j=i-1;j>=0&&(arr[j]&x)!=arr[j];j--){\n                arr[j]&=x;\n                min = Math.min(Math.abs(arr[j]-target),min);\n            }\n        }\n        return min;\n    }\n}\n```\n\n内层循环 `j` 在递减时，如果 `x` 和当前 `nums[j]` 相与不再发生变化，说明 `x` 不足以让当前位置 `nums[j]` 变小，即 `x` 以及不能去掉 `nums[j]` 表示的集合中的比特位 1。而 `nums[j-1]`、`nums[j-2]` ...... `nums[0]` 都和 `nums[j]` 相与过，能被去掉的比特位 1 早就被 `nums[j]` 所表示的集合去掉了，因此 `x` 与 `nums[j-1]`、`nums[j-2]` ...... `nums[0]` 进行与运算也不会发生变化。\n\n复杂度分析：\n\n- 时间复杂度：$O(n\\log U)$，其中 `n` 是 `arr` 的长度，$U=\\max(arr)$。由于 $2^29 −1<10^9 <2^{30} −1$，二进制数对应集合的大小不会超过 29，因此在 AND 运算下，每个数字至多可以减少 29 次。总体上看，二重循环的总循环次数等于每个数字可以减少的次数之和，即 $O(n\\log U)$。\n- 空间复杂度：$O(1)$。\n\n# 计数问题\n\n## AND 运算的计数问题\n\n> [!example] 🟥 [3209. 子数组按位与值为 K 的数目 - 力扣（LeetCode）](https://leetcode.cn/problems/number-of-subarrays-with-and-value-of-k/description/)\n> 给你一个整数数组 nums 和一个整数 k ，请你返回 nums 中有多少个 **子数组** 满足：子数组中所有元素按位 AND 的结果为 k 。\n\n\n### `List` + 原地去重法\n\n在上一节的 OR/AND 运算中，求的是答案的最值。内层循环遇到 `(nums[j] | x) == nums[j]` 就可以提前终止了，从而达到降低内层时间复杂度的效果。而本题中要求统计子数组运算后与给定 k 相等的个数，如果 `(nums[j] | x) == nums[j]` 就跳出内层循环，当 `k==nums[j]`，答案 `ans` 就不能得到正确累计从而出现遗漏状况。\n\n一个解决方法是另外维护一个 `List`，存储**子数组运算结果**以及**该结果对应的数量**。并且不时去重合并，从而达到降低时间复杂度的效果。\n\n> 数组原地去重请复习此题：🟩 [26. 删除有序数组中的重复项 - 力扣（LeetCode）](https://leetcode.cn/problems/remove-duplicates-from-sorted-array/description/)\n\n```java\nclass Solution {\n    public long countSubarrays(int[] nums, int k) {\n        long ans = 0;\n        int len = nums.length;\n        List<int[]> ls = new ArrayList<>();// 位与结果，子数组的数量\n        for(int i=0;i<len;i++){\n            int x = nums[i];\n            \n            ls.add(new int[]{x,1});\n            for(int j=0;j<ls.size();j++){\n                int[] e = ls.get(j);\n                e[0]&=x;\n                if(e[0]==k)ans+=e[1];\n            }\n\n            // 原地去重合并\n            int l=0;\n            for(int j=1;j<ls.size();j++){\n                int[] e = ls.get(j);\n                int[] last_e = ls.get(l);\n                if(e[0]==last_e[0]){\n                    last_e[1] += e[1];\n                    continue;\n                }\n                ls.set(l+1,e);\n                l++;\n            }\n            ls.subList(l+1,ls.size()).clear(); // 维持 O(log U)\n        }\n        return ans;\n    }\n}\n```\n\n内部循环中，`ls` 大小保持在 $O(\\log U)$，$U=\\max(nums)$。\n\n复杂度分析：\n\n- 时间复杂度：$O(n\\log U)$，其中 `n` 是 `nums` 的长度，$U=\\max(nums)$。\n- 空间复杂度：$O(1)$。\n\n这个方法改写自 [@灵茶山艾府](https://leetcode.cn/problems/smallest-subarrays-with-maximum-bitwise-or/solutions/1830911/by-endlesscheng-zai1/) 的模板方法，为了方便理解，我把原地去重的逻辑抽离出来。你可以试图将同级的两个内部循环合在一起写，就得到灵神的模板。\n\n### 二分查找方法\n\n注意到，每次外层迭代后，集合 `nums[j]` 值是非递减的。这时我们可以考虑 [[为什么二分查找总是写不对？|二分查找]]。\n\n```java\npublic long countSubarrays(int[] nums, int k) {\n\tlong ans = 0;\n\tfor (int i = 0; i < nums.length; i++) {\n\t\tint x = nums[i];\n\t\tfor (int j = i - 1; j >= 0 && (nums[j] & x) != nums[j]; j--) {\n\t\t\tnums[j] &= x;\n\t\t}\n\t\tans += lowerBound(nums, i, k + 1) - lowerBound(nums, i, k);\n\t}\n\treturn ans;\n}\n\n// 此二分查找方法交给读者实现\nprivate int lowerBound(int[] nums, int right, int target); \n```\n\n复杂度分析：\n\n- 时间复杂度：$O(n\\log U+n\\log n)$，其中 n 是 `nums` 的长度，$U=\\max(nums)$。由于二进制数对应集合的大小不会超过 29，因此在 AND 运算下，每个数字至多可以减小 29 次。总体上看（除去二分），二重循环的总循环次数等于每个数字可以减小的次数之和，即 $O(n\\log U)$。\n- 空间复杂度：$O(1)$。\n\n### 个数维护方法\n\n```java\nclass Solution {\n    public long countSubarrays(int[] nums, int k) {\n        long ans = 0;\n        int cnt = 0;\n        for (int i = 0; i < nums.length; i++) {\n            int x = nums[i];\n            cnt += x == k ? 1 : 0;\n            for (int j = i - 1; j >= 0 && (nums[j] & x) != nums[j]; j--) {\n                cnt -= nums[j] == k ? 1 : 0; // 去除上一轮统计时留下的标记\n                nums[j] &= x;\n                cnt += nums[j] == k ? 1 : 0;\n            }\n            ans += cnt;\n        }\n        return ans;\n    }\n}\n```\n\n代码中，`cnt` 表示当层 `i` 中符合要求的答案数量。\n\n复杂度分析：\n\n- 时间复杂度：$O(n\\log U)$，其中 `n` 是 `nums` 的长度，$U=\\max(nums)$。\n- 空间复杂度：$O(1)$。\n\n## GCD 最大公约数的计数问题\n\n> [!example] 🟨 [Problem - 475D - CGCDSSQ - Codeforces](https://codeforces.com/problemset/problem/475/D)\n>\n> Given a sequence of integers $a_1, ..., a_n$ and q queries $x_1, ..., x_q$ on it. For each query $x_i$ you have to count the number of pairs (l, r) such that $1 ≤ l ≤ r ≤ n$ and $gcd(a_l, a_{l + 1}, ..., a_r) = x_i$.\n>\n> $gcd(v_1, v_2, ..., v_n)$ is a greatest common divisor of $v_1, v_2, ..., v_n$, that is equal to a largest positive integer that divides all $v_i$.\n>\n> **Input**\n> The first line of the input contains integer $n, (1 ≤ n ≤ 10^5)$, denoting the length of the sequence. The next line contains n space separated integers $a_1, ..., a_n, (1 ≤ a_i ≤ 10^9)$.\n>\n> The third line of the input contains integer $q, (1 ≤ q ≤ 3 × 10^5)$, denoting the number of queries. Then follows q lines, each contain an integer $x_i, (1 ≤ x_i ≤ 10^9)$.\n>\n> **Output**\n> For each query print the result in a separate line.\n>\n> ![image.png](https://cdn.gallery.uuanqin.top/img/202501201619045.webp)\n\n此题中，GCD 的运算性质和与运算类似。\n\n此题与前面题目不同的是，它会有 `q` 组询问；而前面题目只有 1 组询问，这时就需要 `Map` 来存储不同询问的答案。\n\n以下是输入输出代码结构：\n\n```java\nimport java.util.Scanner;\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.HashMap;\n \npublic class Main{\n    \n    public static void main(String[] args) {\n    \tScanner in = new Scanner(System.in);\n    \t// 注意 hasNext 和 hasNextLine 的区别\n    \tint T = in.nextInt();\n    \tint[] nums = new int[T];\n    \t\n    \tfor(int i=0;i<T;i++){\n    \t    int e = in.nextInt();\n    \t    nums[i] = e;\n    \t}\n    \tMap<Integer,Long> map = new HashMap<>();\n    \tsolution(nums,map);\n    \tint Q = in.nextInt();\n    \twhile (Q--!=0) { // 注意 while 处理多个 case\n    \t\tint q = in.nextInt();\n    \t\tSystem.out.println(map.getOrDefault(q,0L));\n    \t}\n    }\n    \n    public static void solution(int[] nums,Map<Integer,Long> map){\n        // ...\n    }\n    \n    public static int gcd(int a,int b){ // 原理是辗转相除法（迭代版本）\n        while(b!=0){\n            a%=b;\n            a^=b;\n            b^=a;\n            a^=b;\n        }\n        return a;\n    }\n}\n```\n\n我们所需要做的是填充 `solution` 这个核心代码。\n\n## 个数维护方法\n\n此题是上面提到的 🟥 [3209. 子数组按位与值为 K 的数目 - 力扣（LeetCode）](https://leetcode.cn/problems/number-of-subarrays-with-and-value-of-k/description/) 个数维护方法 Map 版。\n\n```java\npublic static void solution(int[] nums,Map<Integer,Long> map){\n\tint len = nums.length;\n\tMap<Integer,Long> cntMap = new HashMap<>();\n\tfor(int i=0;i<len;i++){\n\t\t\n\t\tint x = nums[i];\n\t\t// cnt+= x==k? 1:0;\n\t\tcntMap.put(x,cntMap.getOrDefault(x,0L)+1L);\n\t\tfor(int j=i-1;j>=0&&gcd(nums[j],x)!=nums[j];j--){\n\t\t\t\n\t\t\tcntMap.put(nums[j],cntMap.getOrDefault(nums[j],0L)-1L);\n\t\t\tif(cntMap.get(nums[j])==0)cntMap.remove(nums[j]); // 这是必要的，它能降低时间复杂度 维持 O(log U)\n\t\t\tnums[j] = gcd(nums[j],x);\n\t\t\tcntMap.put(nums[j],cntMap.getOrDefault(nums[j],0L)+1L);\n\n\t\t}\n\t\tfor(int k:cntMap.keySet()){\n\t\t\tmap.put(k,map.getOrDefault(k,0L)+cntMap.get(k));\n\t\t}\n\t}\n}\n```\n\n## `List` + 原地去重法\n\n这里只给出 `solution` 方法的实现，将此函数替换上一节代码中相应函数即可。\n\n```java\npublic static void solution(int[] nums,Map<Integer,Long> map){\n\tint len = nums.length;\n\tList<int[]> ls = new ArrayList<>(); // gcd cnt\n\tfor(int i=0;i<len;i++){\n\t\t\n\t\tint x = nums[i];\n\t\t// cnt+= x==k? 1:0;\n\t\tmap.put(x,map.getOrDefault(x,0L)+1L);\n\t\tls.add(new int[]{x,1});\n\n\t\tfor(int j=0;j<ls.size()-1;j++){\n\t\t\tint[] e = ls.get(j);\n\t\t\tint newgcd = gcd(e[0],x);\n\t\t\tmap.put(newgcd,map.getOrDefault(newgcd,0L)+Long.valueOf(e[1]));\n\t\t\te[0] = newgcd;\n\t\t}\n\t\t// 原地去重\n\t\tint k=0;\n\t\tfor(int j=1;j<ls.size();j++){\n\t\t\tif(ls.get(j)[0]==ls.get(k)[0]){\n\t\t\t\t// int[] e = ls.get(k);\n\t\t\t\tls.get(k)[1]+= ls.get(j)[1];\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tls.set(k+1,ls.get(j));\n\t\t\tk++;\n\t\t}\n\t\tls.subList(k+1,ls.size()).clear();\n\t}\n}\n```\n\n> 相关题目：\n> - 🟥 [Problem - 1632D - New Year Concert - Codeforces](https://codeforces.com/problemset/problem/1632/D)\n> - 🟨 [蓝桥杯2021年第十二届国赛真题-和与乘积 - C语言网](https://www.dotcpp.com/oj/problem2622.html)\n\n# 后续计划\n\n- [ ] 补充 CF1632D、蓝桥杯真题相关题解\n\n# 本文参考\n- [@灵茶山艾府](https://leetcode.cn/u/endlesscheng/) 的相关 [题单](https://leetcode.cn/circle/discuss/dHn9Vk/) 与题解\n- [Logtrick - GsGXT - 博客园](https://www.cnblogs.com/bananawolf/p/18325334)\n- [LeetCode 🔴 3171. Find Subarray With Bitwise OR Closest to K | 十六個天亮](https://gdst.dev/posts/LC-3171/)\n","categories":[{"name":"算法与数据结构","api":"api/categories/算法与数据结构.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"二分查找","api":"api/tags/二分查找.json"},{"name":"LeetCode","api":"api/tags/LeetCode.json"},{"name":"LogTrick","api":"api/tags/LogTrick.json"}]},"api":"api/posts/p/6aba4215.json"}