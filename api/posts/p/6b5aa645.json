{"data":{"title":"Java List 的 toArray 方法","slug":"计算机语言/Java List 的 toArray 方法","description":"从源码上进行理解","date":"2025-01-06T16:06:51.000Z","updated":"2025-06-11T16:08:12.779Z","language":"zh-CN","comments":true,"url":"p/6b5aa645/","cover":"https://cdn.gallery.uuanqin.top/img/202501070005899.webp","images":[],"content":"<p>本文目的是从源码层面分清楚 <code>List</code> 中这两个函数的区别：</p>\n<ul>\n<li><code>Object[] toArray()</code></li>\n<li><code>&lt;T&gt; T[] toArray(T[] a)</code>。参数 <code>a</code> 由用户传递，用于指定新数组生成的位置。</li>\n</ul>\n<h1 id=\"快速感知\"><a class=\"markdownIt-Anchor\" href=\"#快速感知\"></a> 快速感知</h1>\n<p>两个函数的作用都是将 <code>ArrayList</code> 对象转换为数组，都<strong>返回新数组</strong>，多次运行 <code>toArray</code> 方法会获得不同的数组对象，但是这些数组对象中内容一样的。</p>\n<p>区别在于是否携带参数。具体区别：</p>\n<ul>\n<li><code>Object[] toArray()</code> 中\n<ul>\n<li>如果 <code>ArrayList</code> 中的内容是基本类型，你可以简单的认为新数组之间没有任何关联。</li>\n<li>如果 <code>ArrayList</code> 中的内容是自定义类型，那么即使 <code>toArray</code> 返回不同的新数组，但是在不同的新数组中，对应下标元素均引用同一个对象。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义类型</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyPair</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> val;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MyPair</span><span class=\"params\">(<span class=\"type\">int</span> val)</span>&#123;<span class=\"built_in\">this</span>.val = val;&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;MyPair&#123; val = &quot;</span>+ <span class=\"built_in\">this</span>.val + <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\tList&lt;MyPair&gt; ls =<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\tls.add(<span class=\"keyword\">new</span> <span class=\"title class_\">MyPair</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">\tls.add(<span class=\"keyword\">new</span> <span class=\"title class_\">MyPair</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">\tls.add(<span class=\"keyword\">new</span> <span class=\"title class_\">MyPair</span>(<span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\tObject[] newArr1 = ls.toArray();</span><br><span class=\"line\">\tObject[] newArr2 = ls.toArray();</span><br><span class=\"line\">\tSystem.out.println(newArr1==newArr2);  <span class=\"comment\">// false</span></span><br><span class=\"line\">\tSystem.out.println(newArr1[<span class=\"number\">0</span>]==newArr2[<span class=\"number\">0</span>]);  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tnewArr1[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">MyPair</span>(<span class=\"number\">99</span>); <span class=\"comment\">// 对第一个数组内容进行修改 （new 新对象）</span></span><br><span class=\"line\">\tSystem.out.println(Arrays.toString(newArr1)); </span><br><span class=\"line\">\tSystem.out.println(Arrays.toString(newArr2)); </span><br><span class=\"line\">\t<span class=\"comment\">// 输出：</span></span><br><span class=\"line\">\t<span class=\"comment\">// [MyPair&#123; val = 99&#125;, MyPair&#123; val = 1&#125;, MyPair&#123; val = 2&#125;]</span></span><br><span class=\"line\">\t<span class=\"comment\">// [MyPair&#123; val = 0&#125;, MyPair&#123; val = 1&#125;, MyPair&#123; val = 2&#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t((MyPair)newArr2[<span class=\"number\">1</span>]).val = <span class=\"number\">66</span>; <span class=\"comment\">// 对第二个数字内容指向的对象进行修改</span></span><br><span class=\"line\">\tSystem.out.println(Arrays.toString(newArr1)); </span><br><span class=\"line\">\tSystem.out.println(Arrays.toString(newArr2)); </span><br><span class=\"line\">\t<span class=\"comment\">// 输出：</span></span><br><span class=\"line\">\t<span class=\"comment\">// [MyPair&#123; val = 99&#125;, MyPair&#123; val = 66&#125;, MyPair&#123; val = 2&#125;]</span></span><br><span class=\"line\">\t<span class=\"comment\">// [MyPair&#123; val = 0&#125;, MyPair&#123; val = 66&#125;, MyPair&#123; val = 2&#125;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>&lt;T&gt; T[] toArray(T[] a)</code>，<code>a</code> 指的是用户可以指定的新数组的存储位置，返回类型为 <code>T[]</code>。如果用户给的 <code>a</code> 足够大，代码就会把元素复制到 <code>a</code> 中，如果还有富余，则结尾设置 <code>null</code>；如果不够大，则代码自己生成一个大小刚好符合要求的新的数组，再复制返回。\n<ul>\n<li><code>ls.toArray(new Object[0])</code> 等同于 <code>ls.toArray()</code></li>\n</ul>\n</li>\n</ul>\n\n<div class=\"callout\" data-callout=\"note\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">阿里巴巴 Java 开发手册对集合使用的相关要求</div>\n</div>\n<div class=\"callout-content\"><p>一、（六）9.【强制】 使用集合转数组的方法， 必须使用集合的 <code>toArray(T[] array)</code>， 传入的是类型完全一致、 长度为 0 的空数组。</p>\n</div></div><p>原因：</p>\n<ol>\n<li>直接使用 <code>toArray</code> 无参方法存在问题， 此方法返回值只能是 <code>Object[]</code> 类， 若强转其它类型数组将出现 <code>ClassCastException</code> 错误。</li>\n<li>使用 toArray 带参方法， 数组空间大小的 <code>length</code> 的选择：\n<ul>\n<li>等于 0， 动态创建与 <code>size</code> 相同的数组， 性能最好。</li>\n<li>大于 0 但小于 <code>size</code>， 重新创建大小等于 <code>size</code> 的数组， 增加 GC 负担。也就是说，作为参数传入的那个数组没用上。</li>\n<li>等于 <code>size</code>， 在高并发情况下， 数组创建完成之后， <code>size</code> 正在变大的情况下， 负面影响与第 2 种情况相同。但实际上，并发场景本就不建议使用 <code>ArrayList</code>。</li>\n<li>大于 <code>size</code>， 空间浪费， 且在 <code>size</code> 处插入 <code>null</code> 值， 存在 NPE 隐患。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"源码阅读\"><a class=\"markdownIt-Anchor\" href=\"#源码阅读\"></a> 源码阅读</h1>\n<p>此部分需读者耐心阅读。</p>\n<h2 id=\"systemarraycopy-和-arrayscopyof-方法\"><a class=\"markdownIt-Anchor\" href=\"#systemarraycopy-和-arrayscopyof-方法\"></a> <code>System.arraycopy()</code> 和 <code>Arrays.copyOf()</code> 方法</h2>\n<p>为了便于后面内容的理解，这里先介绍 <code>System.arraycopy()</code> 和 <code>Arrays.copyOf()</code> 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** System</span></span><br><span class=\"line\"><span class=\"comment\">* 复制数组</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> src 源数组</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> srcPos 源数组中的起始位置</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> dest 目标数组</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> destPos 目标数组中的起始位置</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> length 要复制的数组元素的数量</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">arraycopy</span><span class=\"params\">(Object src,  <span class=\"type\">int</span>  srcPos,</span></span><br><span class=\"line\"><span class=\"params\">                                        Object dest, <span class=\"type\">int</span> destPos,</span></span><br><span class=\"line\"><span class=\"params\">                                        <span class=\"type\">int</span> length)</span>;</span><br></pre></td></tr></table></figure>\n<p>使用示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;执行前：&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">\t\tSystem.out.print(a[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.arraycopy(a, <span class=\"number\">2</span>, a, <span class=\"number\">7</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;\\n执行后：&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</span><br><span class=\"line\">\t\tSystem.out.print(a[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 执行前：  </span></span><br><span class=\"line\"><span class=\"comment\">// 0 1 2 3 0 0 0 0 0 0 0  </span></span><br><span class=\"line\"><span class=\"comment\">// 执行后：  </span></span><br><span class=\"line\"><span class=\"comment\">// 0 1 2 3 0 0 0 2 3 0 0</span></span><br></pre></td></tr></table></figure>\n<p><code>Arrays.copyOf()</code> 返回一个全新数组。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Arrays.copyOf() 的其中两个重写</span></span><br><span class=\"line\"><span class=\"comment\">// 有返回值为 byte[] short[] 等类型的重写</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] copyOf(<span class=\"type\">int</span>[] original, <span class=\"type\">int</span> newLength) &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>[] copy = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[newLength];  <span class=\"comment\">// 新数组可用于扩容</span></span><br><span class=\"line\">\tSystem.arraycopy(original, <span class=\"number\">0</span>, copy, <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\t\t Math.min(original.length, newLength));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class=\"type\">int</span> newLength) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (T[]) copyOf(original, newLength, original.getClass());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Arrays 类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class=\"type\">int</span> newLength, Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">T</span>[]&gt; newType) &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">\tT[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class=\"line\">\t\t? (T[]) <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[newLength]</span><br><span class=\"line\">\t\t: (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class=\"line\">\tSystem.arraycopy(original, <span class=\"number\">0</span>, copy, <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\t\t Math.min(original.length, newLength));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"arraylist-类中的-toarray\"><a class=\"markdownIt-Anchor\" href=\"#arraylist-类中的-toarray\"></a> <code>ArrayList</code> 类中的 <code>toArray</code></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ArrayList 类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object[] toArray() &#123;  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Arrays.copyOf(elementData, size);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果用户传入的 a 的大小过小，代码自动为你创建一个合适的新数组，并执行复制</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a.length &lt; size)</span><br><span class=\"line\">\t\t<span class=\"comment\">// Make a new array of a&#x27;s runtime type, but my contents:</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class=\"line\">\t<span class=\"comment\">// 如果 a 的大小富余，就直接用用户的。</span></span><br><span class=\"line\">\tSystem.arraycopy(elementData, <span class=\"number\">0</span>, a, <span class=\"number\">0</span>, size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a.length &gt; size)</span><br><span class=\"line\">\t\ta[size] = <span class=\"literal\">null</span>; <span class=\"comment\">// 最后置 null 代表结束</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"拓展使用原有-collection-类构造新的-arraylist\"><a class=\"markdownIt-Anchor\" href=\"#拓展使用原有-collection-类构造新的-arraylist\"></a> 【拓展】使用原有 <code>Collection</code> 类构造新的 <code>ArrayList</code></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ArrayList</span><span class=\"params\">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class=\"line\">\tObject[] a = c.toArray(); <span class=\"comment\">// 不是所有集合的 toArray() 方法都遵循同样的实现细节</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((size = a.length) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c.getClass() == ArrayList.class) &#123;</span><br><span class=\"line\">\t\t\telementData = a;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 防御性编程。如果 c 的类型不是 ArrayList，c.toArray() 返回的数组可能并不是完全适配于 ArrayList 的内部需求（如具体的实现或内存管理）。因此，通过 Arrays.copyOf 创建一个新的数组，确保 ArrayList 自己拥有一个与其内部规范一致的新数组。</span></span><br><span class=\"line\">\t\t\telementData = Arrays.copyOf(a, size, Object[].class);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// replace with empty array.</span></span><br><span class=\"line\">\t\telementData = EMPTY_ELEMENTDATA;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>小结：</p>\n<ul>\n<li>如果传入的集合类 <code>c</code> 大小为空，则元素列表 <code>elementData</code> 设为空集合。</li>\n<li>如果传入的集合类 <code>c</code> 大小不为空，则将 <code>c</code> 中的数组处理好。</li>\n</ul>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://javaguide.cn/java/collection/arraylist-source-code.html#%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%88%86%E6%9E%90-arraylist-%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6\">ArrayList 源码分析 | JavaGuide</a></li>\n<li><a href=\"https://blog.csdn.net/mucaoyx/article/details/86005283\">深入理解List的toArray()无参方法和带参方法-CSDN博客</a></li>\n<li>阿里巴巴 Java 开发手册（黄山版）</li>\n</ul>\n<p>推荐阅读：<a href=\"https://mp.weixin.qq.com/s/uv6DKaD62dHCdt0hdaRsHw\">一个 Bug JDK 居然改了十年？</a></p>\n","raw":"---\ntitle: Java List 的 toArray 方法\ntags:\n  - Java\n  - 源码阅读\ncover: 'https://cdn.gallery.uuanqin.top/img/202501070005899.webp'\ndescription: 从源码上进行理解\ncategories:\n  - 计算机语言\nabbrlink: 6b5aa645\ndate: 2025-01-07 00:06:51\ntop_img:\n---\n\n本文目的是从源码层面分清楚 `List` 中这两个函数的区别：\n\n- `Object[] toArray()`\n- `<T> T[] toArray(T[] a)`。参数 `a` 由用户传递，用于指定新数组生成的位置。\n\n\n# 快速感知\n\n两个函数的作用都是将 `ArrayList` 对象转换为数组，都**返回新数组**，多次运行 `toArray` 方法会获得不同的数组对象，但是这些数组对象中内容一样的。\n\n区别在于是否携带参数。具体区别：\n\n- `Object[] toArray()` 中\n\t- 如果 `ArrayList` 中的内容是基本类型，你可以简单的认为新数组之间没有任何关联。\n\t- 如果 `ArrayList` 中的内容是自定义类型，那么即使 `toArray` 返回不同的新数组，但是在不同的新数组中，对应下标元素均引用同一个对象。\n\n```java\n// 自定义类型\nprivate static class MyPair{\n\tint val;\n\tpublic MyPair(int val){this.val = val;}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"MyPair{ val = \"+ this.val + '}';\n\t}\n}\npublic static void main(String[] args) {\n\tList<MyPair> ls =new ArrayList<>();\n\tls.add(new MyPair(0));\n\tls.add(new MyPair(1));\n\tls.add(new MyPair(2));\n\n\tObject[] newArr1 = ls.toArray();\n\tObject[] newArr2 = ls.toArray();\n\tSystem.out.println(newArr1==newArr2);  // false\n\tSystem.out.println(newArr1[0]==newArr2[0]);  // true\n\n\tnewArr1[0] = new MyPair(99); // 对第一个数组内容进行修改 （new 新对象）\n\tSystem.out.println(Arrays.toString(newArr1)); \n\tSystem.out.println(Arrays.toString(newArr2)); \n\t// 输出：\n\t// [MyPair{ val = 99}, MyPair{ val = 1}, MyPair{ val = 2}]\n\t// [MyPair{ val = 0}, MyPair{ val = 1}, MyPair{ val = 2}]\n\n\t((MyPair)newArr2[1]).val = 66; // 对第二个数字内容指向的对象进行修改\n\tSystem.out.println(Arrays.toString(newArr1)); \n\tSystem.out.println(Arrays.toString(newArr2)); \n\t// 输出：\n\t// [MyPair{ val = 99}, MyPair{ val = 66}, MyPair{ val = 2}]\n\t// [MyPair{ val = 0}, MyPair{ val = 66}, MyPair{ val = 2}]\n\n}\n```\n\n-  `<T> T[] toArray(T[] a)`，`a` 指的是用户可以指定的新数组的存储位置，返回类型为 `T[]`。如果用户给的 `a` 足够大，代码就会把元素复制到 `a` 中，如果还有富余，则结尾设置 `null`；如果不够大，则代码自己生成一个大小刚好符合要求的新的数组，再复制返回。\n\t- `ls.toArray(new Object[0])` 等同于 `ls.toArray()`\n\n> [!note] 阿里巴巴 Java 开发手册对集合使用的相关要求\n> 一、（六）9.【强制】 使用集合转数组的方法， 必须使用集合的 `toArray(T[] array)`， 传入的是类型完全一致、 长度为 0 的空数组。\n\n原因：\n\n1. 直接使用 `toArray` 无参方法存在问题， 此方法返回值只能是 `Object[]` 类， 若强转其它类型数组将出现 `ClassCastException` 错误。\n2. 使用 toArray 带参方法， 数组空间大小的 `length` 的选择：\n\t- 等于 0， 动态创建与 `size` 相同的数组， 性能最好。\n\t- 大于 0 但小于 `size`， 重新创建大小等于 `size` 的数组， 增加 GC 负担。也就是说，作为参数传入的那个数组没用上。\n\t- 等于 `size`， 在高并发情况下， 数组创建完成之后， `size` 正在变大的情况下， 负面影响与第 2 种情况相同。但实际上，并发场景本就不建议使用 `ArrayList`。\n\t- 大于 `size`， 空间浪费， 且在 `size` 处插入 `null` 值， 存在 NPE 隐患。\n\n# 源码阅读\n\n此部分需读者耐心阅读。\n\n## `System.arraycopy()` 和 `Arrays.copyOf()` 方法\n\n为了便于后面内容的理解，这里先介绍 `System.arraycopy()` 和 `Arrays.copyOf()` 方法。\n\n```java\n/** System\n* 复制数组\n* @param src 源数组\n* @param srcPos 源数组中的起始位置\n* @param dest 目标数组\n* @param destPos 目标数组中的起始位置\n* @param length 要复制的数组元素的数量\n*/\npublic static native void arraycopy(Object src,  int  srcPos,\n                                        Object dest, int destPos,\n                                        int length);\n```\n\n使用示例：\n\n```java\npublic static void main(String[] args) {\n\t// TODO Auto-generated method stub\n\tint[] a = new int[]{0,1,2,3,0,0,0,0,0,0,0};\n\tSystem.out.println(\"执行前：\");\n\tfor (int i = 0; i < a.length; i++) {\n\t\tSystem.out.print(a[i] + \" \");\n\t}\n\tSystem.arraycopy(a, 2, a, 7, 3);\n\tSystem.out.println(\"\\n执行后：\");\n\tfor (int i = 0; i < a.length; i++) {\n\t\tSystem.out.print(a[i] + \" \");\n\t}\n}\n// 执行前：  \n// 0 1 2 3 0 0 0 0 0 0 0  \n// 执行后：  \n// 0 1 2 3 0 0 0 2 3 0 0\n```\n\n`Arrays.copyOf()` 返回一个全新数组。\n\n```java\n// Arrays.copyOf() 的其中两个重写\n// 有返回值为 byte[] short[] 等类型的重写\npublic static int[] copyOf(int[] original, int newLength) {\n\tint[] copy = new int[newLength];  // 新数组可用于扩容\n\tSystem.arraycopy(original, 0, copy, 0,\n\t\t\t\t\t Math.min(original.length, newLength));\n\treturn copy;\n}\n\npublic static <T> T[] copyOf(T[] original, int newLength) {\n\treturn (T[]) copyOf(original, newLength, original.getClass());\n}\n\n// Arrays 类\npublic static <T,U> T[] copyOf(U[] original, int newLength, Class<? extends T[]> newType) {\n\t@SuppressWarnings(\"unchecked\")\n\tT[] copy = ((Object)newType == (Object)Object[].class)\n\t\t? (T[]) new Object[newLength]\n\t\t: (T[]) Array.newInstance(newType.getComponentType(), newLength);\n\tSystem.arraycopy(original, 0, copy, 0,\n\t\t\t\t\t Math.min(original.length, newLength));\n\treturn copy;\n}\n```\n\n\n## `ArrayList` 类中的 `toArray`\n\n```java\n// ArrayList 类\npublic Object[] toArray() {  \n\treturn Arrays.copyOf(elementData, size);  \n}\n\npublic <T> T[] toArray(T[] a) {\n\t// 如果用户传入的 a 的大小过小，代码自动为你创建一个合适的新数组，并执行复制\n\tif (a.length < size)\n\t\t// Make a new array of a's runtime type, but my contents:\n\t\treturn (T[]) Arrays.copyOf(elementData, size, a.getClass());\n\t// 如果 a 的大小富余，就直接用用户的。\n\tSystem.arraycopy(elementData, 0, a, 0, size);\n\tif (a.length > size)\n\t\ta[size] = null; // 最后置 null 代表结束\n\treturn a;\n}\n```\n\n## 【拓展】使用原有 `Collection` 类构造新的 `ArrayList`\n\n```java\nprivate static final Object[] EMPTY_ELEMENTDATA = {};\npublic ArrayList(Collection<? extends E> c) {\n\tObject[] a = c.toArray(); // 不是所有集合的 toArray() 方法都遵循同样的实现细节\n\tif ((size = a.length) != 0) {\n\t\tif (c.getClass() == ArrayList.class) {\n\t\t\telementData = a;\n\t\t} else {\n\t\t\t// 防御性编程。如果 c 的类型不是 ArrayList，c.toArray() 返回的数组可能并不是完全适配于 ArrayList 的内部需求（如具体的实现或内存管理）。因此，通过 Arrays.copyOf 创建一个新的数组，确保 ArrayList 自己拥有一个与其内部规范一致的新数组。\n\t\t\telementData = Arrays.copyOf(a, size, Object[].class);\n\t\t}\n\t} else {\n\t\t// replace with empty array.\n\t\telementData = EMPTY_ELEMENTDATA;\n\t}\n}\n```\n\n小结：\n\n- 如果传入的集合类 `c` 大小为空，则元素列表 `elementData` 设为空集合。\n- 如果传入的集合类 `c` 大小不为空，则将 `c` 中的数组处理好。\n\n# 本文参考\n- [ArrayList 源码分析 | JavaGuide](https://javaguide.cn/java/collection/arraylist-source-code.html#%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%88%86%E6%9E%90-arraylist-%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6)\n- [深入理解List的toArray()无参方法和带参方法-CSDN博客](https://blog.csdn.net/mucaoyx/article/details/86005283)\n- 阿里巴巴 Java 开发手册（黄山版）\n\n推荐阅读：[一个 Bug JDK 居然改了十年？](https://mp.weixin.qq.com/s/uv6DKaD62dHCdt0hdaRsHw)","categories":[{"name":"计算机语言","api":"api/categories/计算机语言.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"源码阅读","api":"api/tags/源码阅读.json"}]},"api":"api/posts/p/6b5aa645.json"}