{"title":"单例模式的应用——为 Java 程序应用全局配置","tags":["设计模式","Java","单例模式","Hutool","配置"],"cover":"https://cdn.gallery.uuanqin.top/img/202409050026212.webp","description":"备忘一个全局配置类的写法。","categories":["高质量代码及设计模式"],"abbrlink":"43de456a","date":"2024-08-13T20:13:10.000Z","top_img":null,"summary":"目标 Java 程序维护一个全局的配置对象，可以在任何地方读取配置文件 `application.properties` 中的配置。项目启动后，从配置文件中读取配置并创建对象实例，之后就可以集中地从这个对象中获取配置信息，而不用每次加载配置时再重新读取配置、并创建新的对象，减少了性能开销。 代码实践 项目初始化与依赖引入 新建空 Maven 项目。`pom.xml` 引入以下依赖： 本项目使用 Hutool 工具类简化代码的编写。 配置类 这个类定义了你的 Java 应用的默认配置。 配置加载工具类 这个工具类的作用是，传入配置类、配置名称的前缀以及环境，返回填好配置信息的配置类。 > [!hint] Hutool 中的 `Props` 类 > > - 类 Props：Properties 文件读取封装类。继承 `java.util.Properties` > - 构造函数：`Props(String path)` 构造，使用相对于 Class 文件根目录的相对路径。 > - 方法 `<T> T toBean(Class<T> beanClass, String prefix)`：将配置文件转换为 Bean，支持嵌套 Bean。 > - `prefix`：公共前缀，不指定前缀传 null，当指定前缀后非此前缀的属性被忽略 > > ——hutool 5.8.29 API > > [!hint] Hutool 中的 `StrUtil` 工具类 > - 继承 `cn.hutool.core.text.CharSequenceUtil` 类 > - `CharSequenceUtil` 中的方法：`isNotBlank(CharSequence str)`。判断字符串是否为非空白，非空白的定义如下： 不为 `null` 不为空字符串：`\"\"` 不为空格、全角空格、制表符、换行符，等不可见字符 > > ——hutool 5.8.29 API > 这个工具类的亮点在于： 灵活处理配置类，`loadConfig` 的 `tClass` 参数指定生成的配置类 多环境配置文件的支持：通过 `environment` 参数，依照命名惯例，加载多环境的配置文件 可拓展点：你可以试着编写读取 `application.yaml` 配置的功能 关于 `java.util.P..."}