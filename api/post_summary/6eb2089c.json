{"title":"Git 的分支管理策略 —— Git-flow","tags":["git"],"cover":"https://cdn.gallery.uuanqin.top/img/git-flowcover555555.png","description":"这是一篇对分支管理策略学习和探讨","abbrlink":"6eb2089c","categories":["技术学习"],"date":"2023-05-27T21:51:53.000Z","top_img":null,"summary":"A successful Git branching model 是一篇有名的分支管理策略（Git-Flow）的学习，下面文章以这篇文章为基础，介绍 Git-Flow 工作流，顺便练一下英语。这篇不是简单的英文翻译，里面杂合了我的理解与外部参考。 > 参考： > > * A successful Git branching model » nvie.com > * Git分支管理策略 - 阮一峰的网络日志 (ruanyifeng.com) > 前言 这篇文章诞生于 10 年前，那时 Git 刚诞生不久。在这 10 年里，许多团队都把它当成了“准则”和“灵丹妙药”。现在，越来越多的软件类型转向了 web 应用，而这些应用一般是持续交付的，而不是回滚式的，因此不需要支持多版本管理。如果软件开发团队正在做持续交付的软件，那么可以参考更简单的工作流（如 GitHub 流）而不是非得使用 git-flow。 当然了，学习前需要记住，世界上没有灵丹妙药。要考虑自己的情况选择自己的工作流。 为什么选择 Git Git 改变了程序员对“合并/分支”的看法。以前（CVS/Subversion 时代），“合并/分支”有点可怕：小心合并冲突，不然它会咬你！但有了 Git，这些操作将变得成本低廉和简单。由于其简单和可重复性的特性，“合并/分支”不再可怕。 “去中心化”了但是还要“中心化” 因为 Git 是 DVCS（分布式管理系统），在技术层面上就没有诸如”中心化“仓库的东西。但是要让我们的模型工作得好，首先就得有一个“中心”的“真实”的仓库。这个中心化的仓库我们称为 `origin`（这个名字对 Git 用户来说比较熟悉） <img src=\"https://cdn.gallery.uuanqin.top/img/centr-decentr@2x.png\" style=\"zoom:50%;\" /> 每一个开发人员都从 `origin` 中拉取和推送，与此同时成员之间也互相拉取形成子团队。这适用于 2 到 3 个开发人员在对一个软件的重要特性的进行开发的场景。 上图中，alice 和 bob、alice 和 david、david 和 clair 组成了子团队，这意味着 Alice 定义了一个远程 Git 仓库名为 bob，反之亦然。..."}