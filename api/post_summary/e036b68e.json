{"title":"SpringBoot 中的面向切面编程（AOP）","tags":["SpringBoot","AOP","Java","Spring AOP"],"cover":"https://cdn.gallery.uuanqin.top/img/202409050029414.webp","description":"回忆 AOP 基本概念，备忘基本的 AOP 使用方式","categories":["技术学习"],"abbrlink":"e036b68e","date":"2024-08-10T01:04:09.000Z","top_img":null,"summary":"> [!notice] SpringBoot 的两大核心 > > 1. [[SpringBoot 中的 IoC & DI 入门|IoC]]：控制反转 > 2. AOP：面向切面编程 概念 AOP（Aspect Oriented Programming，面向切面编程、面向方面编程），其实就是面向特定方法编程。AOP 是 OOP（面向对象编程）的一种延续，二者互补，并不对立。AOP 是一种编程思想，动态代理是这种思想的主流实现方式。 AOP 之所以叫面向切面编程，是因为它的核心思想就是将横切关注点从核心业务逻辑中分离出来，形成一个个的切面（Aspect）。 应用场景： 日志记录：自定义日志记录注解，利用 AOP，一行代码即可实现日志记录。 性能统计：利用 AOP 在目标方法的执行前后统计方法的执行时间，方便优化和分析。 事务管理：`@Transactional` 注解可以让 Spring 为我们进行事务管理比如回滚异常操作，免去了重复的事务管理逻辑。`@Transactional`注解就是基于 AOP 实现的。 权限控制：利用 AOP 在目标方法执行前判断用户是否具备所需要的权限，如果具备，就执行目标方法，否则就不执行。例如，SpringSecurity 利用`@PreAuthorize` 注解一行代码即可自定义权限校验。 接口限流：利用 AOP 在目标方法执行前通过具体的限流算法和实现对请求进行限流处理。 缓存管理：利用 AOP 在目标方法执行前后进行缓存的读取和更新。 优势： 代码无侵入 减少重复代码 提高开发效率 维护方便 AOP 的常见实现方式有动态代理、字节码操作等方式。 Spring AOP 是 Spring 框架的高级技术，旨在管理 bean 对象的过程中，丰要通过底层的动态代理机制，对特定的方法进行编程。 > AOP是一种思想，Spring AOP是这个思想的一种实现。AOP和Spring AOP的关系相当于IoC和DI之间的关系一样。 引入 AOP 依赖： 一些概念： 横切关注点 Cross-cutting Concerns ：多个类或对象中的公共行为（如日志记录、事务管理、权限控制、接口限流、接口幂等等）。..."}