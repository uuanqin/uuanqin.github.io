{"data":{"title":"Hexo 博客与 Waline 评论区实现外链跳转中间页","slug":"博客站点维护/Waline/Hexo 博客与 Waline 评论区实现外链跳转中间页","description":"博客与评论区统一拦截重定向","date":"2024-08-04T15:40:25.000Z","updated":"2025-06-24T06:59:58.705Z","language":"zh-CN","comments":true,"url":"p/e1ee5eca/","cover":"https://cdn.gallery.uuanqin.top/img/202408042352584.webp","images":[],"content":"\n<div class=\"callout\" data-callout=\"note\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">文章重要更新 <code>240804</code></div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ul>\n<li><strong>新增 Waline 评论区中间页的实现</strong></li>\n<li>加入 <a href=\"https://blog.qyliu.top/\">@清羽飞扬</a> 的插件方案</li>\n</ul>\n<p>原文章发表于 <code>240223</code>。</p>\n</div></div>\n<div class=\"callout\" data-callout=\"success\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-check\"><path d=\"M20 6 9 17l-5-5\"/></svg>\n</div>\n<div class=\"callout-title-inner\">本文已收录至 <a href=\"https://butterfly.zhheo.com/\">Butterfly 主题美化教程</a></div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>今年年初站长收到了 wxb 的温暖来电😨…自此以后对博客安全额外关注。好巧不巧那时在 <a href=\"/pages/friend_circle/\">友链朋友圈</a> 刷到类似文章，于是立刻开展学习并全站自查外链安全性。</p>\n<p>本文主要构成：</p>\n<ul>\n<li><strong>Waline 评论区中间页的实现（新增）</strong>：\n<ul>\n<li>方案 1：官方插件实现。但是有点小问题，建议直接看第二个方案。</li>\n<li>方案 2：使用博主自写插件，<strong>流畅配合 Hexo 中其他中间页插件，同时支持昵称中的外链插入中间页</strong>。</li>\n</ul>\n</li>\n<li>Hexo 博客外链跳转中间页的实现：\n<ul>\n<li>方案 1： <a href=\"https://blog.qyliu.top/\">@清羽飞扬</a> 的插件方案。</li>\n<li>方案 2【过期方案】：博主原本的过渡方案。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"waline-评论区实现外链跳转中间页\"><a class=\"markdownIt-Anchor\" href=\"#waline-评论区实现外链跳转中间页\"></a> Waline 评论区实现外链跳转中间页</h1>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">温馨提示：本章节介绍的内容适用于基于 <strong>Vercel</strong> 服务端部署的 Waline</div>\n</div>\n<div class=\"callout-content\"><p>当然，如果 Waline 是其他部署方式，那么安装插件的方法其实大差不差，可继续阅读参考。</p>\n</div></div><p>Waline 评论区独立于 Hexo 博客，是一个另外的系统，因此 Hexo 的各种渲染插件管理不到 Waline 的内容。但是我们可以通过安装 Waline 评论区的插件实现评论中的外链拦截。</p>\n<p>这里介绍两种方案：</p>\n<ul>\n<li>方案 1：使用官方插件。但是中间页链接无法定制，不够灵活，且存在小 Bug。</li>\n<li>方案 2：使用博主本人基于官方插件二次改造的插件。其特点是黑白名单逻辑优化，<strong>可定制中间页链接，昵称外链匹配</strong>，并修复一些原官方插件中的 Bug。</li>\n</ul>\n<p>想立刻上手可以<strong>直接看方案 2！</strong></p>\n<h2 id=\"方案一使用-waline-官方提供的插件-waline-pluginslink-interceptor\"><a class=\"markdownIt-Anchor\" href=\"#方案一使用-waline-官方提供的插件-waline-pluginslink-interceptor\"></a> 方案一：使用 Waline 官方提供的插件 <code>@waline-plugins/link-interceptor</code></h2>\n<p>虽然 Waline 的插件不多，但是 Waline 维护者 <a href=\"https://github.com/lizheming\">@lizheming</a> 还是写了个相关的插件：<a href=\"https://github.com/walinejs/plugins/tree/master/packages/link-interceptor\">plugins/packages/link-interceptor at master · walinejs/plugins (github.com)</a></p>\n<blockquote>\n<p>本方案将介绍一种繁琐的但是又利于管理的安装 Waline 插件的方法，以理解整个插件安装流程。在后续方案 2 中会介绍另一种十分轻松的偷懒方法，简化整个 Waline 插件安装过程。</p>\n</blockquote>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\"></a> 安装</h3>\n<p>首先从 GitHub 中 <code>git clone</code> 你的 Waline 后端到本地，然后进入你的 Waline 后端项目，输入以下命令安装 npm 包：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i @waline-plugins/link-interceptor</span><br></pre></td></tr></table></figure>\n<p>按照官方 Demo 的做法，在你的 Waline 后端项目的 <code>index.js</code> 中添加对应代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Application</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@waline/vercel&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">LinkInterceptor</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@waline-plugins/link-interceptor&#x27;</span>); <span class=\"comment\">// 增加这一条</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">Application</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...这里省略你以前写的东西</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 插件</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">LinkInterceptor</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">whiteList</span>: [<span class=\"string\">&#x27;uuanqin.top&#x27;</span>],  <span class=\"comment\">// 白名单</span></span><br><span class=\"line\">      <span class=\"attr\">blackList</span>: [],  <span class=\"comment\">// 黑名单</span></span><br><span class=\"line\">      <span class=\"comment\">// interceptorTemplate: `redirect to __URL__ `  // 这是中间页的模板，__URL__会被替换为匹配到的url</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>interceptorTemplate</code> 选项不写的话，官方默认的 HTML 网页模板为：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Redirect to third party website<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">data-url</span>=<span class=\"string\">&quot;__URL__&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Redirecting to __URL__<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\">location.<span class=\"property\">href</span> = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;data-url&#x27;</span>);</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"部署与测试\"><a class=\"markdownIt-Anchor\" href=\"#部署与测试\"></a> 部署与测试</h3>\n<p>将下面的文件加到 <code>.gitignore</code> 文件中：</p>\n<ul>\n<li>刚才安装插件新增的 <code>node_modules</code> 文件夹</li>\n<li>新增的 <code>package-lock.json</code></li>\n</ul>\n<p>然后 <code>git add</code> 以下文件（也就是说只有以下两个文件发生了改动）：</p>\n<ul>\n<li>你刚刚改动的 <code>index.js</code></li>\n<li>下载插件后自动变化的 <code>package.json</code></li>\n</ul>\n<p>最后 <code>git commit</code> 并上传 <code>git push</code>。上传成功后 Vercel 会自动重新部署后端。</p>\n<p>你可以发表评论进行测试。比如 <code>blackList</code> 中包含 <code>jd.com</code>，那么评论内容出现相关域名链接时将替换链接为插件指定的中间页地址，并展示指定模板。</p>\n<p>效果如下（使用默认模板）：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202408041813082.webp\" alt=\"image.png\" /></p>\n<p>上面的默认模板显示后，紧接着自动跳转到目标链接。</p>\n<details><summary><b>官方插件中存在的问题</b></summary>\n<p>\n<h4 id=\"黑白名单判断逻辑\"><a class=\"markdownIt-Anchor\" href=\"#黑白名单判断逻辑\"></a> 黑白名单判断逻辑</h4>\n<p>该插件的黑白名单判断逻辑：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isValidUrl</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> !inBlackList || inWhiteList;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说它是黑名单优先的：</p>\n<ul>\n<li>如果网址不在黑名单，那就立马通过验证。</li>\n<li>只有在黑名单且不在白名单才进行中间页拦截。</li>\n</ul>\n<p>此外，没有域名通配符逻辑。这样的效果似乎不是很好。</p>\n<h4 id=\"中间页模板已修复\"><a class=\"markdownIt-Anchor\" href=\"#中间页模板已修复\"></a> 中间页模板（已修复）</h4>\n<blockquote>\n<p>此问题当天 PR 当天就修复，赞赞赞！</p>\n</blockquote>\n<p>另外，官方插件中的模板功能并不生效。因为官方插件的函数 <code>outputHtml</code> 写错位置了（已提 <a href=\"https://github.com/walinejs/plugins/pull/13\">PR</a> ，目前成功合并）。</p>\n<h4 id=\"昵称中的外链\"><a class=\"markdownIt-Anchor\" href=\"#昵称中的外链\"></a> 昵称中的外链</h4>\n<p>官方插件并不过滤昵称中的外链。</p>\n<h4 id=\"不支持带有-符号的外链识别\"><a class=\"markdownIt-Anchor\" href=\"#不支持带有-符号的外链识别\"></a> 不支持带有 <code>#</code> 符号的外链识别</h4>\n<p>看了下代码，感觉是偷懒…因为它编写的正则表达式有意的排除了带 <code>#</code> 的链接，简化后续域名判断。但是修复这个问题其实并不难（或者存在我没考虑的的情况？），暂且理解为官方为了省事暂时不变写这段逻辑。</p>\n</p>\n</details>\n<h2 id=\"方案二使用博主自写插件-waline-link-interceptor\"><a class=\"markdownIt-Anchor\" href=\"#方案二使用博主自写插件-waline-link-interceptor\"></a> 方案二：使用博主自写插件 <code>waline-link-interceptor</code></h2>\n<p>针对官方插件中存在的不足，我对官方插件的逻辑进行改进：</p>\n<ul>\n<li><s>修复官方插件中的中间页模板不生效的问题</s>（官方已在 <a href=\"https://github.com/walinejs/plugins/pull/13\">PR #13</a> 同步修复）；</li>\n<li>黑名单、白名单匹配规则更改；</li>\n<li>可以自定义跳转的中间页，以联合 Hexo 中的相关插件；</li>\n<li>【v0.1.1 新增】除了评论内容中的外链筛选外，可以以同样的方式为<strong>头像旁边的昵称中的外链</strong>应用中间页。</li>\n<li>【v0.1.2 修复】修复原官方插件中，不对带有 <code>#</code> 链接进行处理的错误逻辑</li>\n</ul>\n<p><a href=\"https://github.com/uuanqin/waline-link-interceptor\"><img src= \"/image/loading.gif\" data-lazy-src=\"https://github-readme-stats.uuanqin.top/api/pin/?username=uuanqin&amp;repo=waline-link-interceptor\" alt=\"Readme Card\" /></a></p>\n<p>项目地址：<a href=\"https://github.com/uuanqin/waline-link-interceptor?tab=readme-ov-file\">uuanqin/waline-link-interceptor: A plugin of Waline Comment System which can add a intercept page for external links in comments. (github.com)</a></p>\n<h3 id=\"直接改动-github-仓库完成插件的安装和使用\"><a class=\"markdownIt-Anchor\" href=\"#直接改动-github-仓库完成插件的安装和使用\"></a> 直接改动 GitHub 仓库完成插件的安装和使用</h3>\n<p>上一小节在介绍方案 1 时，安装 waline 插件时又要 <code>git clone</code>、<code>npm install</code> 的，可能会特别麻烦。这里介绍直接在 GitHub 仓库改文件的方法，因为两者的本质是一样的。</p>\n<p>进入你 GitHub 中的 Waline 后端项目，修改 <code>package.json</code> 文件，添加依赖：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;template&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class=\"line\">  &quot;private&quot;: true,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\"><span class=\"deletion\">-    &quot;@waline/vercel&quot;: &quot;latest&quot;</span></span><br><span class=\"line\"><span class=\"addition\">+    &quot;@waline/vercel&quot;: &quot;latest&quot;,</span></span><br><span class=\"line\"><span class=\"addition\">+    &quot;waline-link-interceptor&quot;: &quot;^0.1.2&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一定要注意：</p>\n<ul>\n<li>由于 Json 严格的语法规范，请留意逗号不要多加</li>\n<li><code>waline-link-interceptor</code> 后面接版本号，目前的版本为：<a href=\"https://github.com/uuanqin/waline-link-interceptor\"><img src= \"/image/loading.gif\" data-lazy-src=\"https://img.shields.io/npm/v/waline-link-interceptor?label=waline-link-interceptor\" alt=\"img\" /></a></li>\n</ul>\n<p>编辑 Waline 后端项目的 <code>index.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Application</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@waline/vercel&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">LinkInterceptor</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;waline-link-interceptor&#x27;</span>); <span class=\"comment\">// 添加这一行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">Application</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 插件</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">LinkInterceptor</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">whiteList</span>: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;uuanqin.top&#x27;</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"comment\">// blackList: [],</span></span><br><span class=\"line\">      <span class=\"comment\">// interceptorTemplate: `hello __URL__ `,  // 这是中间页的模板（当不指定跳转链接时默认使用模板）</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个插件的最基本的用法和上面方案 1 中官方插件的用法完全一样。不同的是，黑白名单的逻辑稍有变更：</p>\n<ul>\n<li>如果只填写白名单，那么不在白名单内的域名及其子域名，均将重定向至拦截页；</li>\n<li>如果只填写黑名单，那么黑名单中的域名及其子域名，均将重定向至拦截页。其余链接放行；</li>\n<li>如果黑白名单都填写，那么只拦截在黑名单中但不在白名单中的域名及其子域名。</li>\n</ul>\n<p>将这些修改 commit 并 push 到远程仓库的 main 分支后之后，Waline 会自动部署，部署完成后即可看到效果。</p>\n<blockquote>\n<p>关于 Vercel 中的 Production 分支详见官方文档：<a href=\"https://vercel.com/docs/deployments/git#production-branch\">Deploying Git Repositories with Vercel</a></p>\n</blockquote>\n<h3 id=\"进阶使用-重定向至指定的链接\"><a class=\"markdownIt-Anchor\" href=\"#进阶使用-重定向至指定的链接\"></a> 进阶使用 - 重定向至指定的链接</h3>\n<p>有时候，我们并不想使用 Waline 默认提供的跳转页模板（可以说官方这个模板十分简陋了），又或者不想自己手动通过 <code>interceptorTemplate</code> 字段写中间页模板。如果我们已经有了现成的中间页网址，可不可以让外链跳转到指定的地址呢？答案是肯定的，这个插件提供修改中间页链接的可选项。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">Application</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 插件</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">LinkInterceptor</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">whiteList</span>: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;uuanqin.top&#x27;</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      <span class=\"comment\">// blackList: [],</span></span><br><span class=\"line\">      <span class=\"comment\">// interceptorTemplate: `hello __URL__ `,   // 如果下面自定义了跳转地址，那么此处模板不生效</span></span><br><span class=\"line\">      <span class=\"attr\">redirectUrl</span>: <span class=\"string\">&quot;https://example.com/go.html&quot;</span>, <span class=\"comment\">// 填写中间页的具体 html 地址。</span></span><br><span class=\"line\">      <span class=\"attr\">encodeFunc</span>: <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> url;                               <span class=\"comment\">// 填入一个外链 url 的处理函数</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例-1简单示例\"><a class=\"markdownIt-Anchor\" href=\"#示例-1简单示例\"></a> 示例 1：简单示例</h4>\n\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">免责声明：以下内容仅供学习参考，请读者自行判断合法性并承担风险。</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>比如我想让中间页地址形式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://example.com/go.html?u=https://external-link.com</span><br></pre></td></tr></table></figure>\n<p>其中，<a href=\"http://example.com\">example.com</a> 表示主站地址，<a href=\"http://external-link.com\">external-link.com</a> 表示外部站点地址。那么， <code>waline-link-interceptor</code> 插件参数填写如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">redirectUrl</span>: <span class=\"string\">`https://example.com/go.html`</span>,</span><br><span class=\"line\"><span class=\"attr\">encodeFunc</span>: <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;u=&quot;</span>+url;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说，外链地址中问号 <code>?</code> 的前面归 <code>redirectUrl</code> 管，问号后面的归 <code>encodeFunc</code> 管。</p>\n<p>比如，像知乎中间页链接就是这种简单的形式（来自评论区小伙伴提供的思路，这种方式有点说不出的妙🤭）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://link.zhihu.com/?target=https://uuanqin.top/</span><br></pre></td></tr></table></figure>\n<p>对应的 <code>waline-link-interceptor</code> 配置为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">redirectUrl</span>: <span class=\"string\">`https://link.zhihu.com/`</span>,</span><br><span class=\"line\"><span class=\"attr\">encodeFunc</span>: <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;target=&quot;</span>+url;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例-2配合-hexo-中间页插件-hexo-safego\"><a class=\"markdownIt-Anchor\" href=\"#示例-2配合-hexo-中间页插件-hexo-safego\"></a> 示例 2：配合 Hexo 中间页插件 <code>hexo-safego</code></h4>\n<p>如果你装了后文提到 Hexo 插件 <code>hexo-safego</code>，且假设你的 <code>hexo-safego</code> 的相关配置（在 <code>_config.yml</code> 中）为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># see https://blog.qyliu.top/posts/1dfd1f41/</span></span><br><span class=\"line\"><span class=\"attr\">hexo_safego:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否启用 hexo-safego 插件</span></span><br><span class=\"line\">  <span class=\"attr\">enable_base64_encode:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否启用 Base64 编码链接</span></span><br><span class=\"line\">  <span class=\"attr\">enable_target_blank:</span> <span class=\"literal\">true</span>  <span class=\"comment\"># 是否在跳转链接中添加 target=&quot;_blank&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">url_param_name:</span> <span class=\"string\">&#x27;u&#x27;</span>  <span class=\"comment\"># URL 参数名，用于生成跳转链接</span></span><br><span class=\"line\">  <span class=\"attr\">html_file_name:</span> <span class=\"string\">&#x27;go.html&#x27;</span>  <span class=\"comment\"># 跳转页面文件名</span></span><br></pre></td></tr></table></figure>\n<p>也就是说其中间页地址形式为：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://example.com/go.html?u=xxxxxxxxxxxxxxxxx  </span><br><span class=\"line\"># 这里表示 `xxxxxxxxxxxxxxxxx` 表示经过 Base64 编码后的外部链接。</span><br></pre></td></tr></table></figure>\n<p>那么你在插件 <code>waline-link-interceptor</code> 的配置中可以这样填写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">redirectUrl</span>: <span class=\"string\">&quot;https://example.com/go.html&quot;</span>,</span><br><span class=\"line\"><span class=\"attr\">encodeFunc</span>: <span class=\"function\">(<span class=\"params\">url</span>) =&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 启用 Base64 编码链接</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;u=&quot;</span>+<span class=\"title class_\">Buffer</span>.<span class=\"title function_\">from</span>(url).<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;base64&#x27;</span>) <span class=\"comment\">// 或者 return &quot;u=&quot;+btoa(url) </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就能 Waline 评论区 + Hexo 文章统一的中间页跳转啦🥳！</p>\n<h1 id=\"hexo-博客文章或页面的外链跳转\"><a class=\"markdownIt-Anchor\" href=\"#hexo-博客文章或页面的外链跳转\"></a> Hexo 博客文章或页面的外链跳转</h1>\n<h2 id=\"方案一直接使用跳转插件-hexo-safego\"><a class=\"markdownIt-Anchor\" href=\"#方案一直接使用跳转插件-hexo-safego\"></a> 方案一：直接使用跳转插件 <code>hexo-safego</code></h2>\n\n<div class=\"callout\" data-callout=\"success\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-check\"><path d=\"M20 6 9 17l-5-5\"/></svg>\n</div>\n<div class=\"callout-title-inner\">【博主推荐】这是本站目前使用的 Hexo 文章外链跳转方案！</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>详见友链用户 <a href=\"https://blog.qyliu.top/\">@清羽飞扬</a> 的文章：<a href=\"https://blog.qyliu.top/posts/1dfd1f41/\">安全跳转页面·插件版</a>。</p>\n<p>效果如下：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202408041758490.webp\" alt=\"image.png\" width=\"600px\" /></p>\n<h2 id=\"方案二过期魔改既有插件-hexo-external-link\"><a class=\"markdownIt-Anchor\" href=\"#方案二过期魔改既有插件-hexo-external-link\"></a> 方案二【过期】：魔改既有插件 <code>hexo-external-link</code></h2>\n\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">本方案过期提示</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ul>\n<li>本小节为今年（2024）年初事态紧急时探索的方案；</li>\n<li>作为临时过渡措施，本方案已经完成了它的使命；</li>\n<li>虽然整体的实现并不优雅，但直至目前该方案仍可继续正常工作。</li>\n</ul>\n</div></div><p>本小节提供一个在 Hexo 实现的简单的方法，涉及到对插件源代码的修改（不优雅），但过渡时期可暂时容忍这一不足。我觉得整体思路是有参考性的。</p>\n<h3 id=\"插件安装与调整\"><a class=\"markdownIt-Anchor\" href=\"#插件安装与调整\"></a> 插件安装与调整</h3>\n<p>插件的原理是识别出所有的外部链接，并修改其 URL 的格式使之成为内部链接。URL 指向一个中间页（没错，就是我以前嗤之以鼻的「互联网壁垒」）。你可以选择其他方式完成这件事情（比如 Hugo 方案参考友链用户 <a href=\"https://www.eallion.com/\">@大大的蜗牛</a> 的文章： <a href=\"https://www.eallion.com/hugo-redirect-landing-page/\">Hugo 外部链接跳转提示页面</a>）</p>\n<p>插件 <a href=\"https://github.com/hvnobug/hexo-external-link/tree/master\">hvnobug/hexo-external-link (github.com)</a> 所做的就是这件事情。但是唯一缺点就是最终转换的链接不可定制，于是我就手动修改了一下源代码——即修改博客目录下 <code>blogs\\node_modules\\hexo-filter-links\\lib\\filter.js</code> 文件：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- NewhrefStr = &#x27;href=&quot;&#x27; + config.url + &#x27;/go/#&#x27; + NewhrefStr + &#x27;&quot;&#x27;;</span></span><br><span class=\"line\"><span class=\"addition\">+ NewhrefStr = &#x27;href=&quot;&#x27; + &#x27;/pages/go.html#&#x27; + NewhrefStr + &#x27;&quot;&#x27;;</span></span><br></pre></td></tr></table></figure>\n<p>这样链接就变成了我想要的样子：<code>/pages/go.html#</code>+ 编码为 Base64 的外部链接地址。</p>\n<h3 id=\"建立中间页\"><a class=\"markdownIt-Anchor\" href=\"#建立中间页\"></a> 建立中间页</h3>\n<p>从上面转换后的中间连接可以知道，我设置的中间页位置为 <code>/pages/go.html</code>。其实我只是在 <code>sourse/pages</code> 目录下新建了 <code>go.md</code> 文件而已，Hexo 会自动渲染成 HTML。我这样做只是为了和某些页面统一而已。你也可以自己另外设计独立的页面。</p>\n<p><code>go.md</code> 基本内容如下（省略了样式代码，保留主要的 HTML，看思路即可）：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: </span><br><span class=\"line\">date: 2024-02-22 00:00:00</span><br><span class=\"line\">aside: false</span><br><span class=\"line\"><span class=\"section\">top<span class=\"emphasis\">_img: </span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">---</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/css/simple_page.css&quot;</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>/&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span></span>GO Page<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;h3&quot;</span>&gt;</span></span>您即将在 &amp;nbsp; <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;go_time&quot;</span>&gt;</span></span>inf<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>s &amp;nbsp;后跳转到以下地址<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;to_address text_align&quot;</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;to_url button&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color: #FFFFFF;&quot;</span>&gt;</span></span>立即跳转<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">  <span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">// 链接解析与设置</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">  const params = window.location.hash;</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">  const encodedTarget = params.slice(1);</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">  const target = atob(encodedTarget);  // 对应插件的编解码方法</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">  </span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">  if (target) &#123;</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">     console.log(&#x27;解析到的target&#x27;,target,params,encodedTarget);</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">    document.getElementsByClassName(&#x27;to_</span>url button&#x27;)[0].href = target;</span></span><br><span class=\"line\"><span class=\"section\">    document.getElementsByClassName(&#x27;to<span class=\"emphasis\">_address text_</span>align&#x27;)[0].textContent = &#x27;&#x27; + target; // 直接显示目标地址    </span></span><br><span class=\"line\"><span class=\"section\">  &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"section\">    console.error(&#x27;外部链接跳转未指定重定向目标。&#x27;);</span></span><br><span class=\"line\"><span class=\"section\">  &#125;</span></span><br><span class=\"line\"><span class=\"section\"></span></span><br><span class=\"line\"><span class=\"section\">// 倒计时逻辑</span></span><br><span class=\"line\"><span class=\"section\">var second=5;</span></span><br><span class=\"line\"><span class=\"section\">var time = document.getElementById(&quot;go<span class=\"emphasis\">_time&quot;);</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">function show() &#123;</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\t</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\tif(second==0)&#123;</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\t\t//跳转页面</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\t\tlocation.href=target;</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\t&#125;else&#123;</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\t\tsecond--; // 放在if的分支里可以避免出现负数的情况</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\t&#125;</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\t//用来动态设置里面的内容</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">\ttime.innerHTML=second+&quot;&quot;;</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">&#125;</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">//用来实现这个一秒实现一次这个方法</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">setInterval(show,1000);</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"></span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>不太建议全站启用外链中间页，只对文章内容启用中间页即可。</p>\n</blockquote>\n<h1 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h1>\n<p>附一份常用白名单，涵盖程序员常用外链（云服务平台、博客网站、笔记网站等）：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">allowList:</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;github.com&#x27;</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;gitee.com&#x27;</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;tencent.com&#x27;</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;aliyun.com&#x27;</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;csdn.net&#x27;</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;juejin.cn&#x27;</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;jianshu.com&#x27;</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;cnblogs.com&#x27;</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;zhihu.com&#x27;</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;bilibili.com&#x27;</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;feishu.cn&#x27;</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;yuque.com&#x27;</span>  </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">&#x27;kdocs.cn&#x27;</span>  </span><br></pre></td></tr></table></figure>\n<p>如果平时不喜欢各大网站中间页可以考虑安装这个脚本：<a href=\"https://greasyfork.org/zh-CN/scripts/412612-open-the-f-king-url-right-now\">Open the F**king URL Right Now (greasyfork.org)</a>。或者尝试安装这个插件（我没试过）：<a href=\"https://chromewebstore.google.com/detail/skip-redirect/jaoafjdoijdconemdmodhbfpianehlon\">Skip Redirect (google.com)</a></p>\n\n<details class=\"callout\" data-callout=\"cite\" data-callout-fold=\"-\">\n<summary class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-quote\"><path d=\"M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z\"/><path d=\"M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">Open the F**king URL Right Now</div>\n<div class=\"callout-fold\"></div>\n</summary>\n<div class=\"callout-content\"><p>很多时候，在网上读到一篇好文章，我们被作者思想的深度，逻辑论证的缜密，内容的旁征博引所折服，这时我们往往也想去作者给出的相关链接上看看是怎样的奇文给了作者启发，写出了这样一篇振聋发聩的好文，于是点击链接，但是很多时候会突然跳出来一行字，要用户手动复制该链接贴到地址栏访问才行，被网站这样一折腾，刚刚提起来的求知欲一下子烟消云散了。</p>\n<p>一次两次也倒罢了，但最近此风甚长，还有愈演愈烈之势，好好的超链接变成了一个个的『超不链接』，其他网站为了留存用户，延长用户停留时间，不惜以暴制暴，进行恶性竞争，结果就是互联网的用户体验变成了各大公司利益的牺牲品，在夹缝中艰难地生存，昔日的信息高速公路上就这样被人为地挖了许多坑。</p>\n<p>为了把互联网体验变回我们熟悉的样子，为了让超链接能痛快地把用户送到终点，就写了这样一个简单的脚本…</p>\n<p>——<a href=\"https://greasyfork.org/zh-CN/scripts/412612-open-the-f-king-url-right-now\">OldPanda</a> ，摘自中间页跳转脚本 Open the F**king URL Right Now 的简介</p>\n</div></details>\n<details class=\"callout\" data-callout=\"cite\" data-callout-fold=\"-\">\n<summary class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-quote\"><path d=\"M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z\"/><path d=\"M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">安全跳转必要性</div>\n<div class=\"callout-fold\"></div>\n</summary>\n<div class=\"callout-content\"><p>有朋友问，为何要增设这样一个看似多余的步骤？“直接浏览不更直接吗？何必增添一个看似拖沓的跳转环节？”还有人，将其误解为纯粹的技术冗余，误以为这是效仿某些平台所设置的“用户不便”之举…Hexo-SafeGo 插件的核心目的，并非直接进行安全检测，而是作为一种自我保护机制，默默守护着网站的声誉与访问者的信任。现在的插件并没有能力能够主动扫描并消除网络中的所有威胁，但却能有效避免自身网站因缺少必要的安全协议而被浏览器标记为“不安全”，这一小步跳跃，实则是维护网站形象与信誉的一大步。</p>\n<p>此插件的实施，更像是一份无形的“免责声明”，它向访问者无声宣告：作为网站管理者，我已经采取措施确保连接的安全性，即便遭遇外部链接可能带来的不确定性，也已事先提醒，尽到了告知的责任。在这个信息错综复杂的时代，这样的透明度与责任感显得尤为重要。</p>\n<p>—— <a href=\"https://blog.qyliu.top/\">@清羽飞扬</a>，摘自中间页插件 hexo-safego 的介绍文章</p>\n</div></details><p>在编写 waline 插件时，真的如同盲人摸象，全靠猜测和 log 输出，好在需要修改的地方不复杂。</p>\n<p>本文经历了过期又翻新的过程。讯飞星火参与正则代码编写，所以这种苦力活最适合交给 AI 做。</p>\n<p><strong>最后建议各位博主不要过度依赖各类插件，定期清理文章或评论区的可疑链接才是治本措施。</strong></p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://cuojue.org/read/hexo-filter-links.html\">Hexo的外链转内链插件 - 春风吹 - 浅秋枫影的博客 (cuojue.org)</a></li>\n<li><a href=\"https://www.eallion.com/hugo-redirect-landing-page/\">Hugo 外部链接跳转提示页面-大大的小蜗牛 (eallion.com)</a></li>\n<li><a href=\"https://koobai.com/zhongjiantiaozhuan/\">HUGO 外链跳转到中间页 - 空白Koobai</a></li>\n<li><a href=\"https://blog.csdn.net/he1234555/article/details/112099087\">js实现倒计时跳转页面_在网页中显示倒计时读秒效果,比如543210当数据小于0时指定跳转到其他页面-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/mouday/article/details/114676558\">NodeJS：字符串和base64相互转换_nodejs string to base64-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/gulang03/article/details/88854858\">使用 JavaScript 进行 Base64 编码与解码_js base64解码-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/ZYS10000/article/details/115265721\">JavaScript中 切割截取字符串的几种方法_js 截取字符串-CSDN博客</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName\">Document: getElementsByClassName() method - Web APIs | MDN (mozilla.org)</a></li>\n</ul>\n","raw":"---\ntitle: Hexo 博客与 Waline 评论区实现外链跳转中间页\ntags:\n  - JavaScript\n  - HTML\n  - Waline\n  - Butterfly\n  - npm\n  - Vercel\n  - GitHub\ndescription: 博客与评论区统一拦截重定向\nabbrlink: e1ee5eca\ncover: 'https://cdn.gallery.uuanqin.top/img/202408042352584.webp'\ncategories:\n  - 博客站点维护\n  - Waline\nswiper_index: 7\nswiper_desc: 文章推荐\nswiper_cover: 'https://cdn.gallery.uuanqin.top/img/202408042352584.webp'\ndate: 2024-08-04 23:40:25\ntop_img:\n---\n\n> [!note] 文章重要更新 `240804`\n> - **新增 Waline 评论区中间页的实现**\n> - 加入 [@清羽飞扬](https://blog.qyliu.top/) 的插件方案\n>\n> 原文章发表于 `240223`。\n\n> [!success] 本文已收录至 [Butterfly 主题美化教程](https://butterfly.zhheo.com/)\n\n今年年初站长收到了 wxb 的温暖来电😨......自此以后对博客安全额外关注。好巧不巧那时在 [友链朋友圈](/pages/friend_circle/) 刷到类似文章，于是立刻开展学习并全站自查外链安全性。\n\n本文主要构成：\n\n- **Waline 评论区中间页的实现（新增）**：\n\t- 方案 1：官方插件实现。但是有点小问题，建议直接看第二个方案。\n\t- 方案 2：使用博主自写插件，**流畅配合 Hexo 中其他中间页插件，同时支持昵称中的外链插入中间页**。\n- Hexo 博客外链跳转中间页的实现：\n\t- 方案 1： [@清羽飞扬](https://blog.qyliu.top/) 的插件方案。\n\t- 方案 2【过期方案】：博主原本的过渡方案。\n\n# Waline 评论区实现外链跳转中间页\n\n> [!hint] 温馨提示：本章节介绍的内容适用于基于 **Vercel** 服务端部署的 Waline\n> 当然，如果 Waline 是其他部署方式，那么安装插件的方法其实大差不差，可继续阅读参考。\n\nWaline 评论区独立于 Hexo 博客，是一个另外的系统，因此 Hexo 的各种渲染插件管理不到 Waline 的内容。但是我们可以通过安装 Waline 评论区的插件实现评论中的外链拦截。\n\n这里介绍两种方案：\n\n- 方案 1：使用官方插件。但是中间页链接无法定制，不够灵活，且存在小 Bug。\n- 方案 2：使用博主本人基于官方插件二次改造的插件。其特点是黑白名单逻辑优化，**可定制中间页链接，昵称外链匹配**，并修复一些原官方插件中的 Bug。\n\n想立刻上手可以**直接看方案 2！**\n\n## 方案一：使用 Waline 官方提供的插件 `@waline-plugins/link-interceptor`\n\n虽然 Waline 的插件不多，但是 Waline 维护者 [@lizheming](https://github.com/lizheming) 还是写了个相关的插件：[plugins/packages/link-interceptor at master · walinejs/plugins (github.com)](https://github.com/walinejs/plugins/tree/master/packages/link-interceptor)\n\n> 本方案将介绍一种繁琐的但是又利于管理的安装 Waline 插件的方法，以理解整个插件安装流程。在后续方案 2 中会介绍另一种十分轻松的偷懒方法，简化整个 Waline 插件安装过程。\n\n### 安装\n\n首先从 GitHub 中 `git clone` 你的 Waline 后端到本地，然后进入你的 Waline 后端项目，输入以下命令安装 npm 包：\n\n```sh\nnpm i @waline-plugins/link-interceptor\n```\n\n按照官方 Demo 的做法，在你的 Waline 后端项目的 `index.js` 中添加对应代码：\n\n```javascript\nconst Application = require('@waline/vercel');\nconst LinkInterceptor = require('@waline-plugins/link-interceptor'); // 增加这一条\n\nmodule.exports = Application({\n  // ...这里省略你以前写的东西\n\n  // 插件\n  plugins: [\n    LinkInterceptor({\n      whiteList: ['uuanqin.top'],  // 白名单\n      blackList: [],  // 黑名单\n      // interceptorTemplate: `redirect to __URL__ `  // 这是中间页的模板，__URL__会被替换为匹配到的url\n    })\n  ]\n});\n```\n\n`interceptorTemplate` 选项不写的话，官方默认的 HTML 网页模板为：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n\t<head>\n\t\t<title>Redirect to third party website</title>\n\t</head>\n\t<body data-url=\"__URL__\">\n\t\t<p>Redirecting to __URL__</p>\n\t\t<script>location.href = document.body.getAttribute('data-url');</script>\n\t</body>\n</html>\n```\n\n### 部署与测试\n\n将下面的文件加到 `.gitignore` 文件中：\n\n- 刚才安装插件新增的 `node_modules` 文件夹\n- 新增的 `package-lock.json`\n\n然后 `git add` 以下文件（也就是说只有以下两个文件发生了改动）：\n\n- 你刚刚改动的 `index.js`\n- 下载插件后自动变化的 `package.json`\n\n最后 `git commit` 并上传 `git push`。上传成功后 Vercel 会自动重新部署后端。\n\n你可以发表评论进行测试。比如 `blackList` 中包含 `jd.com`，那么评论内容出现相关域名链接时将替换链接为插件指定的中间页地址，并展示指定模板。\n\n效果如下（使用默认模板）：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202408041813082.webp)\n\n上面的默认模板显示后，紧接着自动跳转到目标链接。\n\n<details><summary><b>官方插件中存在的问题</b></summary>\n<p>\n\n\n#### 黑白名单判断逻辑\n\n该插件的黑白名单判断逻辑：\n\n```javascript\nfunction isValidUrl(url) {\n\t// ...\n\treturn !inBlackList || inWhiteList;\n}\n```\n\n也就是说它是黑名单优先的：\n\n- 如果网址不在黑名单，那就立马通过验证。\n- 只有在黑名单且不在白名单才进行中间页拦截。\n\n此外，没有域名通配符逻辑。这样的效果似乎不是很好。\n\n#### 中间页模板（已修复）\n\n> 此问题当天 PR 当天就修复，赞赞赞！\n\n另外，官方插件中的模板功能并不生效。因为官方插件的函数 `outputHtml` 写错位置了（已提 [PR](https://github.com/walinejs/plugins/pull/13) ，目前成功合并）。\n\n#### 昵称中的外链\n\n官方插件并不过滤昵称中的外链。\n\n#### 不支持带有 `#` 符号的外链识别\n\n看了下代码，感觉是偷懒......因为它编写的正则表达式有意的排除了带 `#` 的链接，简化后续域名判断。但是修复这个问题其实并不难（或者存在我没考虑的的情况？），暂且理解为官方为了省事暂时不变写这段逻辑。\n\n</p>\n</details>\n\n\n## 方案二：使用博主自写插件 `waline-link-interceptor`\n\n针对官方插件中存在的不足，我对官方插件的逻辑进行改进：\n\n- ~~修复官方插件中的中间页模板不生效的问题~~（官方已在 [PR #13](https://github.com/walinejs/plugins/pull/13) 同步修复）；\n- 黑名单、白名单匹配规则更改；\n- 可以自定义跳转的中间页，以联合 Hexo 中的相关插件；\n- 【v0.1.1 新增】除了评论内容中的外链筛选外，可以以同样的方式为**头像旁边的昵称中的外链**应用中间页。\n- 【v0.1.2 修复】修复原官方插件中，不对带有 `#` 链接进行处理的错误逻辑\n\n[![Readme Card](https://github-readme-stats.uuanqin.top/api/pin/?username=uuanqin&repo=waline-link-interceptor)](https://github.com/uuanqin/waline-link-interceptor)\n\n项目地址：[uuanqin/waline-link-interceptor: A plugin of Waline Comment System which can add a intercept page for external links in comments. (github.com)](https://github.com/uuanqin/waline-link-interceptor?tab=readme-ov-file)\n\n### 直接改动 GitHub 仓库完成插件的安装和使用\n\n上一小节在介绍方案 1 时，安装 waline 插件时又要 `git clone`、`npm install` 的，可能会特别麻烦。这里介绍直接在 GitHub 仓库改文件的方法，因为两者的本质是一样的。\n\n进入你 GitHub 中的 Waline 后端项目，修改 `package.json` 文件，添加依赖：\n\n```diff\n{\n  \"name\": \"template\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"dependencies\": {\n-    \"@waline/vercel\": \"latest\"\n+    \"@waline/vercel\": \"latest\",\n+    \"waline-link-interceptor\": \"^0.1.2\"\n  }\n}\n```\n\n一定要注意：\n\n- 由于 Json 严格的语法规范，请留意逗号不要多加\n- `waline-link-interceptor` 后面接版本号，目前的版本为：[![img](https://img.shields.io/npm/v/waline-link-interceptor?label=waline-link-interceptor)](https://github.com/uuanqin/waline-link-interceptor)\n\n编辑 Waline 后端项目的 `index.js`：\n\n```js\nconst Application = require('@waline/vercel');\nconst LinkInterceptor = require('waline-link-interceptor'); // 添加这一行\n\nmodule.exports = Application({\n  // 插件\n  plugins: [\n    LinkInterceptor({\n      whiteList: [\n        'uuanqin.top'\n      ],\n      // blackList: [],\n      // interceptorTemplate: `hello __URL__ `,  // 这是中间页的模板（当不指定跳转链接时默认使用模板）\n    })\n  ]\n});\n```\n\n这个插件的最基本的用法和上面方案 1 中官方插件的用法完全一样。不同的是，黑白名单的逻辑稍有变更：\n\n- 如果只填写白名单，那么不在白名单内的域名及其子域名，均将重定向至拦截页；\n- 如果只填写黑名单，那么黑名单中的域名及其子域名，均将重定向至拦截页。其余链接放行；\n- 如果黑白名单都填写，那么只拦截在黑名单中但不在白名单中的域名及其子域名。\n\n将这些修改 commit 并 push 到远程仓库的 main 分支后之后，Waline 会自动部署，部署完成后即可看到效果。\n\n> 关于 Vercel 中的 Production 分支详见官方文档：[Deploying Git Repositories with Vercel](https://vercel.com/docs/deployments/git#production-branch)\n\n### 进阶使用 - 重定向至指定的链接\n\n有时候，我们并不想使用 Waline 默认提供的跳转页模板（可以说官方这个模板十分简陋了），又或者不想自己手动通过 `interceptorTemplate` 字段写中间页模板。如果我们已经有了现成的中间页网址，可不可以让外链跳转到指定的地址呢？答案是肯定的，这个插件提供修改中间页链接的可选项。\n\n```js\nmodule.exports = Application({\n  // 插件\n  plugins: [\n    LinkInterceptor({\n      whiteList: [\n        'uuanqin.top'\n      ],\n      // blackList: [],\n      // interceptorTemplate: `hello __URL__ `,   // 如果下面自定义了跳转地址，那么此处模板不生效\n      redirectUrl: \"https://example.com/go.html\", // 填写中间页的具体 html 地址。\n      encodeFunc: (url) =>{\n        return url;                               // 填入一个外链 url 的处理函数\n      }\n    })\n  ]\n});\n```\n\n#### 示例 1：简单示例\n\n> [!warning] 免责声明：以下内容仅供学习参考，请读者自行判断合法性并承担风险。\n\n比如我想让中间页地址形式为：\n\n```url\nhttps://example.com/go.html?u=https://external-link.com\n```\n\n其中，example.com 表示主站地址，external-link.com 表示外部站点地址。那么， `waline-link-interceptor` 插件参数填写如下：\n\n```js\nredirectUrl: `https://example.com/go.html`,\nencodeFunc: (url) =>{\n\treturn \"u=\"+url;\n}\n```\n\n也就是说，外链地址中问号 `?` 的前面归 `redirectUrl` 管，问号后面的归 `encodeFunc` 管。\n\n比如，像知乎中间页链接就是这种简单的形式（来自评论区小伙伴提供的思路，这种方式有点说不出的妙🤭）：\n\n```\nhttps://link.zhihu.com/?target=https://uuanqin.top/\n```\n\n对应的 `waline-link-interceptor` 配置为：\n\n```js\nredirectUrl: `https://link.zhihu.com/`,\nencodeFunc: (url) =>{\n\treturn \"target=\"+url;\n}\n```\n\n#### 示例 2：配合 Hexo 中间页插件 `hexo-safego`\n\n如果你装了后文提到 Hexo 插件 `hexo-safego`，且假设你的 `hexo-safego` 的相关配置（在 `_config.yml` 中）为：\n\n```yaml\n# see https://blog.qyliu.top/posts/1dfd1f41/\nhexo_safego:\n  enable: true  # 是否启用 hexo-safego 插件\n  enable_base64_encode: true  # 是否启用 Base64 编码链接\n  enable_target_blank: true  # 是否在跳转链接中添加 target=\"_blank\"\n  url_param_name: 'u'  # URL 参数名，用于生成跳转链接\n  html_file_name: 'go.html'  # 跳转页面文件名\n```\n\n也就是说其中间页地址形式为：\n\n```html\nhttps://example.com/go.html?u=xxxxxxxxxxxxxxxxx  \n# 这里表示 `xxxxxxxxxxxxxxxxx` 表示经过 Base64 编码后的外部链接。\n```\n\n那么你在插件 `waline-link-interceptor` 的配置中可以这样填写：\n\n```js\nredirectUrl: \"https://example.com/go.html\",\nencodeFunc: (url) =>{\n\t// 启用 Base64 编码链接\n\treturn \"u=\"+Buffer.from(url).toString('base64') // 或者 return \"u=\"+btoa(url) \n}\n```\n\n这样就能 Waline 评论区 + Hexo 文章统一的中间页跳转啦🥳！\n\n# Hexo 博客文章或页面的外链跳转\n\n## 方案一：直接使用跳转插件 `hexo-safego`\n\n> [!success] 【博主推荐】这是本站目前使用的 Hexo 文章外链跳转方案！\n\n详见友链用户 [@清羽飞扬](https://blog.qyliu.top/) 的文章：[安全跳转页面·插件版](https://blog.qyliu.top/posts/1dfd1f41/)。\n\n效果如下：\n\n![image.png|600](https://cdn.gallery.uuanqin.top/img/202408041758490.webp)\n\n## 方案二【过期】：魔改既有插件 `hexo-external-link`\n\n> [!warning] 本方案过期提示\n> - 本小节为今年（2024）年初事态紧急时探索的方案；\n> - 作为临时过渡措施，本方案已经完成了它的使命；\n> - 虽然整体的实现并不优雅，但直至目前该方案仍可继续正常工作。\n\n本小节提供一个在 Hexo 实现的简单的方法，涉及到对插件源代码的修改（不优雅），但过渡时期可暂时容忍这一不足。我觉得整体思路是有参考性的。\n\n### 插件安装与调整\n\n插件的原理是识别出所有的外部链接，并修改其 URL 的格式使之成为内部链接。URL 指向一个中间页（没错，就是我以前嗤之以鼻的「互联网壁垒」）。你可以选择其他方式完成这件事情（比如 Hugo 方案参考友链用户 [@大大的蜗牛](https://www.eallion.com/) 的文章： [Hugo 外部链接跳转提示页面](https://www.eallion.com/hugo-redirect-landing-page/)）\n\n插件 [hvnobug/hexo-external-link (github.com)](https://github.com/hvnobug/hexo-external-link/tree/master) 所做的就是这件事情。但是唯一缺点就是最终转换的链接不可定制，于是我就手动修改了一下源代码——即修改博客目录下 `blogs\\node_modules\\hexo-filter-links\\lib\\filter.js` 文件：\n\n```diff\n- NewhrefStr = 'href=\"' + config.url + '/go/#' + NewhrefStr + '\"';\n+ NewhrefStr = 'href=\"' + '/pages/go.html#' + NewhrefStr + '\"';\n```\n\n这样链接就变成了我想要的样子：`/pages/go.html#`+ 编码为 Base64 的外部链接地址。\n\n### 建立中间页\n\n从上面转换后的中间连接可以知道，我设置的中间页位置为 `/pages/go.html`。其实我只是在 `sourse/pages` 目录下新建了 `go.md` 文件而已，Hexo 会自动渲染成 HTML。我这样做只是为了和某些页面统一而已。你也可以自己另外设计独立的页面。\n\n`go.md` 基本内容如下（省略了样式代码，保留主要的 HTML，看思路即可）：\n\n```markdown\n---\ntitle: \ndate: 2024-02-22 00:00:00\naside: false\ntop_img: \n---\n\n<link rel=\"stylesheet\" href=\"/css/simple_page.css\">\n\n<body>\n  <meta charset=\"utf-8\"/>\n  <title>GO Page</title>\n  <div>\n\t<p class=\"h3\">您即将在 &nbsp; <span id=\"go_time\">inf</span>s &nbsp;后跳转到以下地址</p>\n\t<p class=\"to_address text_align\">\n\t</p>\n\t<a href=\"\" class=\"to_url button\" style=\"color: #FFFFFF;\">立即跳转</a>\n  </div>\n</body>\n\n<script>\n// 链接解析与设置\n  const params = window.location.hash;\n  const encodedTarget = params.slice(1);\n  const target = atob(encodedTarget);  // 对应插件的编解码方法\n  \n  if (target) {\n     console.log('解析到的target',target,params,encodedTarget);\n    document.getElementsByClassName('to_url button')[0].href = target;\n    document.getElementsByClassName('to_address text_align')[0].textContent = '' + target; // 直接显示目标地址    \n  } else {\n    console.error('外部链接跳转未指定重定向目标。');\n  }\n\n// 倒计时逻辑\nvar second=5;\nvar time = document.getElementById(\"go_time\");\nfunction show() {\n\t\n\tif(second==0){\n\t\t//跳转页面\n\t\tlocation.href=target;\n\t}else{\n\t\tsecond--; // 放在if的分支里可以避免出现负数的情况\n\t}\n\t//用来动态设置里面的内容\n\ttime.innerHTML=second+\"\";\n\n}\n//用来实现这个一秒实现一次这个方法\nsetInterval(show,1000);\n</script>\n\n```\n\n> 不太建议全站启用外链中间页，只对文章内容启用中间页即可。\n\n# 后记\n\n附一份常用白名单，涵盖程序员常用外链（云服务平台、博客网站、笔记网站等）：\n\n```yaml\nallowList:  \n- 'github.com' \n- 'gitee.com' \n- 'tencent.com'  \n- 'aliyun.com'  \n- 'csdn.net'  \n- 'juejin.cn'  \n- 'jianshu.com'  \n- 'cnblogs.com'  \n- 'zhihu.com'  \n- 'bilibili.com'  \n- 'feishu.cn'  \n- 'yuque.com'  \n- 'kdocs.cn'  \n```\n\n如果平时不喜欢各大网站中间页可以考虑安装这个脚本：[Open the F\\*\\*king URL Right Now (greasyfork.org)](https://greasyfork.org/zh-CN/scripts/412612-open-the-f-king-url-right-now)。或者尝试安装这个插件（我没试过）：[Skip Redirect (google.com)](https://chromewebstore.google.com/detail/skip-redirect/jaoafjdoijdconemdmodhbfpianehlon)\n\n> [!cite]- Open the F\\*\\*king URL Right Now\n> 很多时候，在网上读到一篇好文章，我们被作者思想的深度，逻辑论证的缜密，内容的旁征博引所折服，这时我们往往也想去作者给出的相关链接上看看是怎样的奇文给了作者启发，写出了这样一篇振聋发聩的好文，于是点击链接，但是很多时候会突然跳出来一行字，要用户手动复制该链接贴到地址栏访问才行，被网站这样一折腾，刚刚提起来的求知欲一下子烟消云散了。\n>\n> 一次两次也倒罢了，但最近此风甚长，还有愈演愈烈之势，好好的超链接变成了一个个的『超不链接』，其他网站为了留存用户，延长用户停留时间，不惜以暴制暴，进行恶性竞争，结果就是互联网的用户体验变成了各大公司利益的牺牲品，在夹缝中艰难地生存，昔日的信息高速公路上就这样被人为地挖了许多坑。\n>\n> 为了把互联网体验变回我们熟悉的样子，为了让超链接能痛快地把用户送到终点，就写了这样一个简单的脚本......\n>\n> ——[OldPanda](https://greasyfork.org/zh-CN/scripts/412612-open-the-f-king-url-right-now) ，摘自中间页跳转脚本 Open the F\\*\\*king URL Right Now 的简介\n\n> [!cite]- 安全跳转必要性\n> 有朋友问，为何要增设这样一个看似多余的步骤？“直接浏览不更直接吗？何必增添一个看似拖沓的跳转环节？”还有人，将其误解为纯粹的技术冗余，误以为这是效仿某些平台所设置的“用户不便”之举......Hexo-SafeGo 插件的核心目的，并非直接进行安全检测，而是作为一种自我保护机制，默默守护着网站的声誉与访问者的信任。现在的插件并没有能力能够主动扫描并消除网络中的所有威胁，但却能有效避免自身网站因缺少必要的安全协议而被浏览器标记为“不安全”，这一小步跳跃，实则是维护网站形象与信誉的一大步。\n>\n> 此插件的实施，更像是一份无形的“免责声明”，它向访问者无声宣告：作为网站管理者，我已经采取措施确保连接的安全性，即便遭遇外部链接可能带来的不确定性，也已事先提醒，尽到了告知的责任。在这个信息错综复杂的时代，这样的透明度与责任感显得尤为重要。\n>\n> —— [@清羽飞扬](https://blog.qyliu.top/)，摘自中间页插件 hexo-safego 的介绍文章\n\n在编写 waline 插件时，真的如同盲人摸象，全靠猜测和 log 输出，好在需要修改的地方不复杂。\n\n本文经历了过期又翻新的过程。讯飞星火参与正则代码编写，所以这种苦力活最适合交给 AI 做。\n\n**最后建议各位博主不要过度依赖各类插件，定期清理文章或评论区的可疑链接才是治本措施。**\n\n# 本文参考\n- [Hexo的外链转内链插件 - 春风吹 - 浅秋枫影的博客 (cuojue.org)](https://cuojue.org/read/hexo-filter-links.html)\n- [Hugo 外部链接跳转提示页面-大大的小蜗牛 (eallion.com)](https://www.eallion.com/hugo-redirect-landing-page/)\n- [HUGO 外链跳转到中间页 - 空白Koobai](https://koobai.com/zhongjiantiaozhuan/)\n- [js实现倒计时跳转页面_在网页中显示倒计时读秒效果,比如543210当数据小于0时指定跳转到其他页面-CSDN博客](https://blog.csdn.net/he1234555/article/details/112099087)\n- [NodeJS：字符串和base64相互转换_nodejs string to base64-CSDN博客](https://blog.csdn.net/mouday/article/details/114676558)\n- [使用 JavaScript 进行 Base64 编码与解码_js base64解码-CSDN博客](https://blog.csdn.net/gulang03/article/details/88854858)\n- [JavaScript中 切割截取字符串的几种方法_js 截取字符串-CSDN博客](https://blog.csdn.net/ZYS10000/article/details/115265721)\n- [Document: getElementsByClassName() method - Web APIs | MDN (mozilla.org)](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName)\n\n","categories":[{"name":"博客站点维护","api":"api/categories/博客站点维护.json"},{"name":"Waline","api":"api/categories/博客站点维护/Waline.json"}],"tags":[{"name":"npm","api":"api/tags/npm.json"},{"name":"HTML","api":"api/tags/HTML.json"},{"name":"JavaScript","api":"api/tags/JavaScript.json"},{"name":"GitHub","api":"api/tags/GitHub.json"},{"name":"Waline","api":"api/tags/Waline.json"},{"name":"Butterfly","api":"api/tags/Butterfly.json"},{"name":"Vercel","api":"api/tags/Vercel.json"}]},"api":"api/posts/p/e1ee5eca.json"}