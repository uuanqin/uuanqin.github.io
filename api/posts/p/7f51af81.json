{"data":{"title":"Obsidian Internal links 双向链接渲染解决方案","slug":"Archive/OutOfDate/Obsidian Internal links 双向链接渲染解决方案","description":"这是一篇过期方法的分离内容","date":"2023-08-01T03:34:33.000Z","updated":"2024-10-02T15:59:37.787Z","language":"zh-CN","comments":true,"url":"p/7f51af81/","cover":"https://cdn.gallery.uuanqin.top/img/new-out-of-date-cover.png","images":[],"content":"\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">这是一篇过期文章 <code>240412</code></div>\n</div>\n<div class=\"callout-content\"><p>本篇文章已过期，<strong>但方案仍然可工作</strong>，此处归档以备后续参考。</p>\n<ul>\n<li>本文为文章 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/d4bc55f2/\"><span class=\"bilink-pop-up\">站内文章</span>Hexo 博客适配 Obsidian 新语法</a> 中双链语法部分的分离，强烈建议使用新方法适配双向链接。</li>\n<li>在没有合适插件的情况下，我自己探索了一套方法实现这个效果。但是这套方法安装插件较多，依赖性复杂，不易维护。于是我自己写了一个更好的插件完成了这个效果，更多故事详见 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/2c7939aa/\"><span class=\"bilink-pop-up\">站内文章</span>【开发杂记】第一次写 Hexo 插件</a></li>\n<li>这套工作链服务了半年，成功见证了数十篇文章诞生。截至光荣退休时它还能工作😀。</li>\n</ul>\n</div></div><p>文章介绍了在 Hexo 中成功渲染双向链接的方法。</p>\n<h1 id=\"相关插件安装\"><a class=\"markdownIt-Anchor\" href=\"#相关插件安装\"></a> 相关插件安装</h1>\n<p>对于 OFM 语法中的 <strong>[[ ]]</strong>，需安装以下三个插件。</p>\n<h2 id=\"hexo-第三方插件-hexo-abbrlink\"><a class=\"markdownIt-Anchor\" href=\"#hexo-第三方插件-hexo-abbrlink\"></a> Hexo 第三方插件 <code>hexo-abbrlink</code></h2>\n<p>确保安装了 Hexo 第三方插件 <code>hexo-abbrlink</code>。<code>hexo-abbrlink</code> 是一个生成文章永久链接的插件，平时写博客就很建议你使用。后续插件将基于 <code>hexo-abbrlink</code> 进行工作。</p>\n<p>仓库地址：<a href=\"https://github.com/rozbo/hexo-abbrlink\">rozbo/hexo-abbrlink: create one and only link for every post for hexo (github.com)</a></p>\n<h1 id=\"obsidian-第三方插件-link-info-server\"><a class=\"markdownIt-Anchor\" href=\"#obsidian-第三方插件-link-info-server\"></a> <strong>Obsidian</strong> 第三方插件 <code>link-info-server</code></h1>\n<p>从 GitHub 仓库下载压缩包：<a href=\"https://github.com/moelody/link-to-server\">moelody/link-to-server (github.com)</a>（理论上应该在 Obsidian 第三方插件市场找，但是找不到）。安装了插件之后记得启用。</p>\n<h1 id=\"hexo-第三方插件-hexo-link-obsidian\"><a class=\"markdownIt-Anchor\" href=\"#hexo-第三方插件-hexo-link-obsidian\"></a> <strong>Hexo</strong> 第三方插件 <code>hexo-link-obsidian</code></h1>\n<p>仓库地址：<a href=\"https://github.com/moelody/hexo-link-obsidian\">moelody/hexo-link-obsidian (github.com)</a>。此插件还支持更多双向链接功能，具体可查看仓库说明文档。</p>\n<p>该插件目前存在的问题：</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/moelody/hexo-link-obsidian/issues/3\">关于网络图片的问题 · Issue #3</a></li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/moelody/hexo-link-obsidian/issues/5\">关于生成的链接问题 · Issue #5</a></li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\"> 不支持 webp 图像的识别 <a href=\"https://github.com/moelody/hexo-link-obsidian/pull/6\">Pull Request #6</a></li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\"> 必须保证 Obsidian 软件的运行（临时解决方法：详看下一小节）</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\"> 混淆了接口类型的图片（临时解决方法：修改源代码中的图片正则匹配，彻底弃用该插件的图片功能）</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" checked=\"\" disabled=\"\" type=\"checkbox\"> 不支持形如 <strong>[](![]())</strong> 的格式识别。纯文本中存在这种字符就报错，就比如这里我用的是粗体加反斜杠转义而不是使用行内代码格式表示。（临时解决方法：修改源代码中的图片正则匹配，彻底弃用该插件的图片功能）</li>\n</ul>\n<h1 id=\"可选自写脚本实现-hexo-静态网页生成前自动检查\"><a class=\"markdownIt-Anchor\" href=\"#可选自写脚本实现-hexo-静态网页生成前自动检查\"></a> 【可选】自写脚本实现 hexo 静态网页生成前自动检查</h1>\n<p>注意到，要想运行正常，得先打开 Obsidian 软件启动 3333 端口。为了避免疏忽造成链接生成的失误，我写了一个脚本对相关端口和插件进行了检查。</p>\n<h2 id=\"写好-js-脚本\"><a class=\"markdownIt-Anchor\" href=\"#写好-js-脚本\"></a> 写好 js 脚本</h2>\n<p>使用脚本前需要安装本脚本依赖的 npm 包。也就一个 <code>npm inastall -g yamljs</code>（全局安装还是局部安装自己看着办），读 yaml 文件用的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Writer: uuanqin</span></span><br><span class=\"line\"><span class=\"comment\">// At: 2023.07.27</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; exit &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;process&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable constant_\">YAML</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;yamljs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;child_process&#x27;</span>).<span class=\"property\">exec</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> package_json = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./package.json&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">execute</span>(<span class=\"params\">cmd</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"title function_\">exec</span>(cmd, <span class=\"keyword\">function</span>(<span class=\"params\">error, stdout, stderr</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(error)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// console.log(stdout)</span></span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`PRE-CHECK: excuse command - <span class=\"subst\">$&#123;cmd&#125;</span>`</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">resolve</span>(stdout)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(<span class=\"string\">&quot;err&quot;</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参考</span></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/moelody/hexo-link-obsidian</span></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/moelody/link-to-server</span></span><br><span class=\"line\"><span class=\"comment\">// 插件默认监听的端口号</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"number\">3333</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 查看有没有自定义port</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">update_custom_port</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Load yaml file using YAML.load</span></span><br><span class=\"line\">    nativeObject = <span class=\"variable constant_\">YAML</span>.<span class=\"title function_\">load</span>(<span class=\"string\">&#x27;_config.yml&#x27;</span>);</span><br><span class=\"line\">    jsonstr = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(nativeObject);</span><br><span class=\"line\">    jsonTemp = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(jsonstr, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 有没有自定义过监听端口，有则改</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jsonTemp.<span class=\"property\">easy_images</span>!==<span class=\"literal\">undefined</span> &amp;&amp; jsonTemp.<span class=\"property\">easy_images</span>.<span class=\"property\">port</span>)&#123;</span><br><span class=\"line\">        port = jsonTemp.<span class=\"property\">easy_images</span>.<span class=\"property\">port</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pid_arr,pid_port_open_arr;</span><br><span class=\"line\">    <span class=\"title function_\">execute</span>(<span class=\"string\">`tasklist /FI &quot;IMAGENAME eq Obsidian.exe&quot; /NH`</span>)</span><br><span class=\"line\">        <span class=\"comment\">// PID 检查程序是否启动</span></span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">str</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> reg1 = <span class=\"title class_\">RegExp</span>(<span class=\"regexp\">/obsidian.exe/gi</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str.<span class=\"title function_\">search</span>(reg1)&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"string\">&quot;Obsidian.exe is not running.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str)</span><br><span class=\"line\">            pid_arr = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/(?&lt;=obsidian.exe\\s+)[0-9]+(?=\\s)/gi</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// Hexo插件安装检查</span></span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> version = package_json.<span class=\"property\">dependencies</span>[<span class=\"string\">&quot;hexo-link-obsidian&quot;</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(version !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`PRE-CHECK: Your hexo-link-obsidian version - <span class=\"subst\">$&#123;version&#125;</span>`</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"string\">&quot;You haven&#x27;t install hexo-link-obsidian plugin or just install it in global.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 目标端口更新</span></span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"title function_\">update_custom_port</span>()</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;PRE-CHECK: Target port - &quot;</span>,port)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 查询目标端口对应开放的PID</span></span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// console.log(pid_arr)</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">execute</span>(<span class=\"string\">`netstat -ano | findstr &quot;:<span class=\"subst\">$&#123;port&#125;</span>&quot;`</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// PID_PID 匹配</span></span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">str</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str)</span><br><span class=\"line\">            pid_port_open_arr = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/(?&lt;=\\s+)[0-9]+(?=\\r)/g</span>)</span><br><span class=\"line\">            <span class=\"comment\">// console.log(pid_port_open_arr)</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> pid_set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(pid_arr)</span><br><span class=\"line\">            <span class=\"comment\">// console.log(pid_set)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (num <span class=\"keyword\">of</span> pid_port_open_arr)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pid_set.<span class=\"title function_\">has</span>(num))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"string\">&quot;Target port is not listening by Obsidian. Please check your settings.&quot;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;PRE-CHECK: All checks are done.&quot;</span>)</span><br><span class=\"line\">            <span class=\"title function_\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 命令执行抛出err</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(error===<span class=\"string\">&quot;err&quot;</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`ERROR: Please contact developer to seek for solutions.`</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;ERROR: &quot;</span>,error)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这个脚本主要做以下事情：</p>\n<ul>\n<li>检查 Obsidian 程序是否启动</li>\n<li>检查 <code>hexo-link-obsidian</code> 插件是否安装</li>\n<li>确认 <code>hexo-link-obsidian</code> 插件监听的端口</li>\n<li>查询对应端口占用的进程是否为 Obsidian 程序</li>\n</ul>\n<p>在这里，我将脚本命名为 <code>check_obsidian.js</code>。</p>\n<h2 id=\"packagejson-的配置\"><a class=\"markdownIt-Anchor\" href=\"#packagejson-的配置\"></a> <code>package.json</code> 的配置</h2>\n<p>package.json 中的 script 有以下特点：</p>\n<ul>\n<li>具有钩子性质</li>\n<li>其中一条命令异常退出（返回非零值）后续命令则终止</li>\n</ul>\n<p>由于在每一次本地部署和网站发布前我们都需要检查一下 Obsidian 是否打开，我们可以这样设置钩子。</p>\n<p>什么是钩子？比如，我们设置的本地部署命令为 hexo 三连 <code>&quot;start&quot;: &quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;</code>，那么我们可以新建一个命令：<code>&quot;prestart&quot;: &quot;node check_obsidian.js&quot;</code>。当我们每次执行 <code>npm run start</code> 时，都会先执行 prestart、再执行 start。</p>\n<p>当 prestart 过程出现错误时，start 就不会执行。这样我们就实现了部署前的检查。</p>\n<p>分享一下我目前的 script 配置：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hexo generate&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;clean&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hexo clean&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;deploy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hexo deploy&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;server&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hexo server&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;prepublish&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run check-obsidian &amp;&amp; npm run check-markdown-filename&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;publish&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; npm run gen-cosma &amp;&amp; hexo d&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;postpublish&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hexo algolia &amp;&amp; npm run flush-cdn&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;prestart&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run check-obsidian &amp;&amp; npm run check-markdown-filename&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; npm run gen-cosma &amp;&amp; hexo s&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;check-obsidian&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node my_scripts/check_obsidian.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">注意</div>\n</div>\n<div class=\"callout-content\"><p>hexo algolia 放在 hexo d -g 后，否则报错</p>\n</div></div>\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">提示</div>\n</div>\n<div class=\"callout-content\"><p><code>&amp;&amp;</code> 表示与，根据“短路效应”。只有前面的命令执行成功，后面的命令才会继续执行。<br />\n<code>&amp;</code> 表示两条命令同时执行。</p>\n</div></div><h1 id=\"可选自写脚本检查文件标题与文件内-front-matter-中-title-属性是否相等\"><a class=\"markdownIt-Anchor\" href=\"#可选自写脚本检查文件标题与文件内-front-matter-中-title-属性是否相等\"></a> 【可选】自写脚本检查文件标题与文件内 front-matter 中 title 属性是否相等</h1>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">经过博主本人长时间使用验证，此脚本运行稳定。</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>编写好以下脚本后，可在 <code>package.json</code> 配置运行。<code>package.json</code> 参考配置看上一小节。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">非侵入式检查指定文件夹下 Markdown 文件中的 Front-matter title 是否与文件名一致。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">作者：wuanqin</span></span><br><span class=\"line\"><span class=\"string\">邮箱：wuanqin@mail.ustc.edu.cn</span></span><br><span class=\"line\"><span class=\"string\">博客：https://uusnqin.top/</span></span><br><span class=\"line\"><span class=\"string\">日期：2023.08.15</span></span><br><span class=\"line\"><span class=\"string\">许可证：MIT</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\">all_file_num = <span class=\"number\">0</span></span><br><span class=\"line\">no_pass = []</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">walk_posts_dir</span>(<span class=\"params\">folder</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    遍历指定目录</span></span><br><span class=\"line\"><span class=\"string\">    :param folder:</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> all_file_num, no_pass</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(folder):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            <span class=\"comment\"># 过滤 Markdown 文件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> file.endswith(<span class=\"string\">&quot;.md&quot;</span>):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            file_name = Path(file).stem</span><br><span class=\"line\">            <span class=\"comment\"># 打开具体文件提取Frontmatter</span></span><br><span class=\"line\">            file_path = os.path.join(root, file)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_path,<span class=\"string\">&quot;r&quot;</span>,encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                content = f.read()</span><br><span class=\"line\">            front_matter, _ = parse_yaml_front_matter(content)</span><br><span class=\"line\">            file_name_front_matter = front_matter[<span class=\"string\">&#x27;title&#x27;</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 判断文件名与Front-matter中的title字段是否相等</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> file_name == file_name_front_matter:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[File Name Check] PASS: <span class=\"subst\">&#123;file&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                no_pass.append(file_path)</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[File Name Check] NO PASS: <span class=\"subst\">&#123;file&#125;</span>&quot;</span>)</span><br><span class=\"line\">            all_file_num = all_file_num + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 直到检查完输出结果</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[File Name Check] Done. <span class=\"subst\">&#123;all_file_num&#125;</span> files Total.&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(no_pass)&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> no_pass:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[File Name Check] Conflict - <span class=\"subst\">&#123;e&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 返回错误码以终止后续进程</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[File Name Check] Exit 1.&quot;</span>)</span><br><span class=\"line\">            exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse_yaml_front_matter</span>(<span class=\"params\">content</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Parses YAML front matter from a Markdown file (More general).</span></span><br><span class=\"line\"><span class=\"string\">    Now it can recognize Block Mode and Flow Mode of the YAML specification (See https://cosma.arthurperret.fr/user-manual.html#metadata).</span></span><br><span class=\"line\"><span class=\"string\">    Also, it can process Line Folding (See https://yaml.org/spec/1.2.2/).</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">match</span> = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^---\\n(.*?)\\n---(.*)&quot;</span>, content, re.DOTALL)</span><br><span class=\"line\">    data = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">match</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Divide a markdown file to two parts: the front-matter and the remaining content.</span></span><br><span class=\"line\">        front_matter = <span class=\"keyword\">match</span>.group(<span class=\"number\">1</span>)</span><br><span class=\"line\">        content = <span class=\"keyword\">match</span>.group(<span class=\"number\">2</span>)</span><br><span class=\"line\">        block_mode_attribute = <span class=\"literal\">None</span></span><br><span class=\"line\">        line_fold_attribute = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"comment\"># Parse yaml by lines.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> front_matter.split(<span class=\"string\">&quot;\\n&quot;</span>):</span><br><span class=\"line\">            <span class=\"comment\"># If the line is the first line of an attribute.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^([a-zA-Z-_]+):(.*)$&quot;</span>, line):</span><br><span class=\"line\">                match_obj = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^([a-zA-Z-_]+):(.*)$&quot;</span>, line, re.DOTALL)</span><br><span class=\"line\">                key = match_obj.group(<span class=\"number\">1</span>)</span><br><span class=\"line\">                value = match_obj.group(<span class=\"number\">2</span>)</span><br><span class=\"line\">                value = value.strip(<span class=\"string\">&quot; \\&#x27;\\&quot;&quot;</span>)</span><br><span class=\"line\">                value = convert2num_if_possible(value)</span><br><span class=\"line\">                <span class=\"comment\"># A line like &#x27;attribute: &#x27;, which means that it uses Block Mode.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value:</span><br><span class=\"line\">                    <span class=\"comment\"># A mark to indicate that we should treat the next line as one of the parameter of the attribute.</span></span><br><span class=\"line\">                    block_mode_attribute = key</span><br><span class=\"line\">                    data[key] = []</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"comment\"># A line like &#x27;attribute: &gt;-&#x27;, which means that it uses Line Folding.</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> value == <span class=\"string\">&#x27;&gt;-&#x27;</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># A mark to indicate that we should treat the next line as one of the parameter of the attribute.</span></span><br><span class=\"line\">                    line_fold_attribute = key</span><br><span class=\"line\">                    data[key] = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"comment\"># Otherwise, treat the line as a common key-value pair.</span></span><br><span class=\"line\">            <span class=\"comment\"># Parse a line that is in Block Mode.</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> block_mode_attribute <span class=\"keyword\">and</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*-\\s(.*)$&quot;</span>, line):</span><br><span class=\"line\">                match_obj = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*-\\s(.*)$&quot;</span>, line)</span><br><span class=\"line\">                data[block_mode_attribute].append(match_obj.group(<span class=\"number\">1</span>).strip())</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># Parse a line that is in Line Folding.</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> line_fold_attribute:</span><br><span class=\"line\">                data[line_fold_attribute] = data[line_fold_attribute] + line.strip(<span class=\"string\">&quot; \\&#x27;\\&quot;&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[WARNING] Unknown YAML line: <span class=\"subst\">&#123;line&#125;</span>&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            block_mode_attribute = <span class=\"literal\">None</span></span><br><span class=\"line\">            line_fold_attribute = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># Parse a line that is in Flow Mode.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(value, <span class=\"built_in\">str</span>) <span class=\"keyword\">and</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;\\[(.*)\\]&quot;</span>, value, re.DOTALL):</span><br><span class=\"line\">                match_obj = re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;\\[(.*)\\]&quot;</span>, value, re.DOTALL)</span><br><span class=\"line\">                value = match_obj.group(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"comment\"># Remove the brackets from the string</span></span><br><span class=\"line\">                value = value.strip(<span class=\"string\">&quot;[]&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\"># Split the string on commas and store the resulting list of tags</span></span><br><span class=\"line\">                value = value.split(<span class=\"string\">&quot;,&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\"># Strip any leading or trailing whitespace from each tag</span></span><br><span class=\"line\">                value = [convert2num_if_possible(v.strip()) <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> value]</span><br><span class=\"line\">            data[key] = value</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data, content</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">convert2num_if_possible</span>(<span class=\"params\">value</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; Parse values as integers or floats if possible, otherwise keep as string&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        value = <span class=\"built_in\">int</span>(value)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># Check the number to avoid the peculiar bugs occur, such as &#x27;13e4&#x27; converts to 130000.0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">str</span>(<span class=\"built_in\">float</span>(value)) != value:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> ValueError</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                value = <span class=\"built_in\">float</span>(value)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">convert_dict2_yaml_front_matter</span>(<span class=\"params\">d: <span class=\"built_in\">dict</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Convert a dictionary of Python to the front matter (YAML)&quot;&quot;&quot;</span></span><br><span class=\"line\">    front_matter = <span class=\"string\">&quot;---\\n&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> d.items():</span><br><span class=\"line\">        front_matter = front_matter + <span class=\"string\">f&quot;<span class=\"subst\">&#123;k&#125;</span>: <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(v)&#125;</span>\\n&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> front_matter + <span class=\"string\">&quot;---\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    walk_posts_dir(sys.argv[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://docs.npmjs.com/cli/v6/using-npm/scripts/#special-packagejson-config-object\">scripts | npm Docs (npmjs.com)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v6/configuring-npm/package-json#dependencies\">docs.npmjs.com/cli/v6/configuring-npm/package-json#dependencies</a></li>\n<li><a href=\"https://github.com/moelody/link-to-server\">moelody/link-to-server (github.com)</a></li>\n<li><a href=\"https://github.com/moelody/hexo-link-obsidian\">moelody/hexo-link-obsidian (github.com)</a></li>\n<li><a href=\"https://awsm.page/nodejs/run-shell-scripts-using-npm-script/#:~:text=You%20can%20run%20your%20shell%20script%20through%20a,build.sh%20%2F%2F...%20%22scripts%22%3A%20%7B%20%22build%22%3A%20%22.%2Fbuild.sh%22%20%7D%2C%20%2F%2F\">Run shell scripts using npm script (awsm.page)</a></li>\n<li><a href=\"https://blog.csdn.net/az44yao/article/details/107040391\">node.js 读取 yaml 文件_js 读取 yaml_az44yao 的博客-CSDN 博客</a></li>\n<li><a href=\"https://blog.csdn.net/gongxifacai_believe/article/details/108950368\">JavaScript 中查找指定字符串的几种方式_js 查找字符串_魏晓蕾的博客-CSDN 博客</a></li>\n<li><a href=\"https://www.runoob.com/regexp/regexp-metachar.html\">正则表达式 – 元字符 | 菜鸟教程 (runoob.com)</a></li>\n<li><a href=\"https://www.runoob.com/js/js-promise.html\">JavaScript Promise | 菜鸟教程 (runoob.com)</a></li>\n<li><a href=\"https://www.cnblogs.com/xuweili/articles/3943920.html#:~:text=%E5%BC%80%E5%A7%8B--%E8%BF%90%E8%A1%8C--cmd%20%E8%BF%9B%E5%85%A5%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6%20%E8%BE%93%E5%85%A5netstat%20-ano%20%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%89%80%E6%9C%89%E8%BF%9E%E6%8E%A5%E7%9A%84PID%20%E4%B9%8B%E5%90%8E%E5%9C%A8%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E6%89%BE%E5%88%B0%E8%BF%99%E4%B8%AAPID%E6%89%80%E5%AF%B9%E5%BA%94%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%A6%82%E6%9E%9C%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%20%E6%B2%A1%E6%9C%89PID%20%E8%BF%99%E4%B8%80%E9%A1%B9%2C%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E9%80%89%22%E6%9F%A5%E7%9C%8B%22-%22%E9%80%89%E6%8B%A9%E5%88%97%22,C%3A%3E%20netstat%20-ano%20%E5%8D%8F%E8%AE%AE%20%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80%20%E5%A4%96%E9%83%A8%E5%9C%B0%E5%9D%80%20%E7%8A%B6%E6%80%81%20PID\">windows 中查看端口占用、pid、禁用 - 山顶的鱼 - 博客园 (cnblogs.com)</a></li>\n<li><a href=\"https://blog.csdn.net/nothing_is_imposible/article/details/108315760\">JavaScript Set 的用法与理解_js set push_暮春风的博客-CSDN 博客</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#for...in_%E8%AF%AD%E5%8F%A5\">循环与迭代 - JavaScript | MDN (mozilla.org)</a></li>\n</ul>\n","raw":"---\ntitle: Obsidian Internal links 双向链接渲染解决方案\ntags:\n  - Obsidian\n  - JavaScript\n  - OFM\n  - Markdown\ncover: 'https://cdn.gallery.uuanqin.top/img/new-out-of-date-cover.png'\ndescription: 这是一篇过期方法的分离内容\nabbrlink: 7f51af81\ncategories:\n  - Archive\n  - OutOfDate\ndate: 2023-08-01 11:34:33\ntop_img:\n---\n\n> [!warning] 这是一篇过期文章 `240412`\n> 本篇文章已过期，**但方案仍然可工作**，此处归档以备后续参考。\n>\n> - 本文为文章 [[Hexo 博客适配 Obsidian 新语法]] 中双链语法部分的分离，强烈建议使用新方法适配双向链接。\n> - 在没有合适插件的情况下，我自己探索了一套方法实现这个效果。但是这套方法安装插件较多，依赖性复杂，不易维护。于是我自己写了一个更好的插件完成了这个效果，更多故事详见 [[【开发杂记】第一次写 Hexo 插件]]\n> - 这套工作链服务了半年，成功见证了数十篇文章诞生。截至光荣退休时它还能工作😀。\n\n文章介绍了在 Hexo 中成功渲染双向链接的方法。\n\n# 相关插件安装\n\n对于 OFM 语法中的 **\\[\\[ \\]\\]**，需安装以下三个插件。\n\n## Hexo 第三方插件 `hexo-abbrlink`\n\n确保安装了 Hexo 第三方插件 `hexo-abbrlink`。`hexo-abbrlink` 是一个生成文章永久链接的插件，平时写博客就很建议你使用。后续插件将基于 `hexo-abbrlink` 进行工作。\n\n仓库地址：[rozbo/hexo-abbrlink: create one and only link for every post for hexo (github.com)](https://github.com/rozbo/hexo-abbrlink)\n\n# **Obsidian** 第三方插件 `link-info-server`\n\n从 GitHub 仓库下载压缩包：[moelody/link-to-server (github.com)](https://github.com/moelody/link-to-server)（理论上应该在 Obsidian 第三方插件市场找，但是找不到）。安装了插件之后记得启用。\n\n# **Hexo** 第三方插件 `hexo-link-obsidian`\n\n仓库地址：[moelody/hexo-link-obsidian (github.com)](https://github.com/moelody/hexo-link-obsidian)。此插件还支持更多双向链接功能，具体可查看仓库说明文档。\n\n该插件目前存在的问题：\n\n- [x] [关于网络图片的问题 · Issue #3](https://github.com/moelody/hexo-link-obsidian/issues/3)\n- [x] [关于生成的链接问题 · Issue #5](https://github.com/moelody/hexo-link-obsidian/issues/5)\n- [x] 不支持 webp 图像的识别 [Pull Request #6](https://github.com/moelody/hexo-link-obsidian/pull/6)\n- [x] 必须保证 Obsidian 软件的运行（临时解决方法：详看下一小节）\n- [x] 混淆了接口类型的图片（临时解决方法：修改源代码中的图片正则匹配，彻底弃用该插件的图片功能）\n- [x] 不支持形如 **\\[\\]\\(\\!\\[\\]\\(\\)\\)** 的格式识别。纯文本中存在这种字符就报错，就比如这里我用的是粗体加反斜杠转义而不是使用行内代码格式表示。（临时解决方法：修改源代码中的图片正则匹配，彻底弃用该插件的图片功能）\n\n\n# 【可选】自写脚本实现 hexo 静态网页生成前自动检查\n\n注意到，要想运行正常，得先打开 Obsidian 软件启动 3333 端口。为了避免疏忽造成链接生成的失误，我写了一个脚本对相关端口和插件进行了检查。\n\n## 写好 js 脚本\n\n使用脚本前需要安装本脚本依赖的 npm 包。也就一个 `npm inastall -g yamljs`（全局安装还是局部安装自己看着办），读 yaml 文件用的。\n\n```js\n// Writer: uuanqin\n// At: 2023.07.27\n\nconst { exit } = require('process');\nYAML = require('yamljs');\nvar exec = require('child_process').exec;\nconst package_json = require('./package.json')\n\nfunction execute(cmd){\n    return new Promise((resolve, reject)=>{\n        exec(cmd, function(error, stdout, stderr) {\n            if(error){\n                console.error(error);\n            }\n            else{\n                // console.log(stdout)\n                console.log(`PRE-CHECK: excuse command - ${cmd}`)\n                return resolve(stdout)\n            }\n            return reject(\"err\")\n        })\n    })\n}\n\n// 参考\n// https://github.com/moelody/hexo-link-obsidian\n// https://github.com/moelody/link-to-server\n// 插件默认监听的端口号\nvar port = 3333\n\n// 查看有没有自定义port\nfunction update_custom_port(){\n\n    // Load yaml file using YAML.load\n    nativeObject = YAML.load('_config.yml');\n    jsonstr = JSON.stringify(nativeObject);\n    jsonTemp = JSON.parse(jsonstr, null);\n\n    // 有没有自定义过监听端口，有则改\n    if(jsonTemp.easy_images!==undefined && jsonTemp.easy_images.port){\n        port = jsonTemp.easy_images.port\n    }\n}\n\nfunction main(){\n    var pid_arr,pid_port_open_arr;\n    execute(`tasklist /FI \"IMAGENAME eq Obsidian.exe\" /NH`)\n        // PID 检查程序是否启动\n        .then((str)=>{\n            const reg1 = RegExp(/obsidian.exe/gi);\n            if(str.search(reg1)<0){\n                throw \"Obsidian.exe is not running.\"\n            }\n            console.log(str)\n            pid_arr = str.match(/(?<=obsidian.exe\\s+)[0-9]+(?=\\s)/gi)\n        })\n        // Hexo插件安装检查\n        .then(()=>{\n            var version = package_json.dependencies[\"hexo-link-obsidian\"]\n            if(version !== undefined){\n                console.log(`PRE-CHECK: Your hexo-link-obsidian version - ${version}`)\n                return;\n            }else{\n                throw \"You haven't install hexo-link-obsidian plugin or just install it in global.\"\n            }\n        })\n        // 目标端口更新\n        .then(()=>{\n            update_custom_port()\n            console.log(\"PRE-CHECK: Target port - \",port)\n        })\n        // 查询目标端口对应开放的PID\n        .then(()=>{\n            // console.log(pid_arr)\n            return execute(`netstat -ano | findstr \":${port}\"`)\n        })\n        // PID_PID 匹配\n        .then((str)=>{\n            console.log(str)\n            pid_port_open_arr = str.match(/(?<=\\s+)[0-9]+(?=\\r)/g)\n            // console.log(pid_port_open_arr)\n            const pid_set = new Set(pid_arr)\n            // console.log(pid_set)\n            for (num of pid_port_open_arr){\n                if (pid_set.has(num)){\n                    return;\n                }\n            }\n            throw \"Target port is not listening by Obsidian. Please check your settings.\"\n        })\n        .then(()=>{\n            console.log(\"PRE-CHECK: All checks are done.\")\n            exit(0);\n        })\n        .catch((error)=>{\n            // 命令执行抛出err\n            if(error===\"err\"){\n                console.error(`ERROR: Please contact developer to seek for solutions.`)\n            }\n            else{\n                console.error(\"ERROR: \",error)\n            }\n            exit(1);\n        })\n}\n\nmain()\n\n```\n\n这个脚本主要做以下事情：\n\n- 检查 Obsidian 程序是否启动\n- 检查 `hexo-link-obsidian` 插件是否安装\n- 确认 `hexo-link-obsidian` 插件监听的端口\n- 查询对应端口占用的进程是否为 Obsidian 程序\n\n在这里，我将脚本命名为 `check_obsidian.js`。\n\n## `package.json` 的配置\n\npackage.json 中的 script 有以下特点：\n\n- 具有钩子性质\n- 其中一条命令异常退出（返回非零值）后续命令则终止\n\n由于在每一次本地部署和网站发布前我们都需要检查一下 Obsidian 是否打开，我们可以这样设置钩子。\n\n什么是钩子？比如，我们设置的本地部署命令为 hexo 三连 `\"start\": \"hexo clean && hexo g && hexo s\"`，那么我们可以新建一个命令：`\"prestart\": \"node check_obsidian.js\"`。当我们每次执行 `npm run start` 时，都会先执行 prestart、再执行 start。\n\n当 prestart 过程出现错误时，start 就不会执行。这样我们就实现了部署前的检查。\n\n分享一下我目前的 script 配置：\n\n```json\n\"scripts\": {\n\t\"build\": \"hexo generate\",\n\t\"clean\": \"hexo clean\",\n\t\"deploy\": \"hexo deploy\",\n\t\"server\": \"hexo server\",\n\t\"prepublish\": \"npm run check-obsidian && npm run check-markdown-filename\",\n\t\"publish\": \"hexo clean && hexo g && npm run gen-cosma && hexo d\",\n\t\"postpublish\": \"hexo algolia && npm run flush-cdn\",\n\t\"prestart\": \"npm run check-obsidian && npm run check-markdown-filename\",\n\t\"start\": \"hexo clean && hexo g && npm run gen-cosma && hexo s\",\n\t\"check-obsidian\": \"node my_scripts/check_obsidian.js\",\n\t...\n},\n```\n\n> [!warning] 注意\n> hexo algolia 放在 hexo d -g 后，否则报错\n\n> [!Hint] 提示\n> `&&` 表示与，根据“短路效应”。只有前面的命令执行成功，后面的命令才会继续执行。\n> `&` 表示两条命令同时执行。\n\n# 【可选】自写脚本检查文件标题与文件内 front-matter 中 title 属性是否相等\n\n> [!hint] 经过博主本人长时间使用验证，此脚本运行稳定。\n\n编写好以下脚本后，可在 `package.json` 配置运行。`package.json` 参考配置看上一小节。\n\n```python\n\"\"\"\n非侵入式检查指定文件夹下 Markdown 文件中的 Front-matter title 是否与文件名一致。\n\n作者：wuanqin\n邮箱：wuanqin@mail.ustc.edu.cn\n博客：https://uusnqin.top/\n日期：2023.08.15\n许可证：MIT\n\"\"\"\n\nimport os\nimport re\nimport sys\nfrom pathlib import Path\n\nall_file_num = 0\nno_pass = []\ndef walk_posts_dir(folder):\n    \"\"\"\n    遍历指定目录\n    :param folder:\n    :return:\n    \"\"\"\n    global all_file_num, no_pass\n    for root, dirs, files in os.walk(folder):\n        for file in files:\n            # 过滤 Markdown 文件\n            if not file.endswith(\".md\"):\n                continue\n            file_name = Path(file).stem\n            # 打开具体文件提取Frontmatter\n            file_path = os.path.join(root, file)\n            with open(file_path,\"r\",encoding=\"utf-8\") as f:\n                content = f.read()\n            front_matter, _ = parse_yaml_front_matter(content)\n            file_name_front_matter = front_matter['title']\n            # 判断文件名与Front-matter中的title字段是否相等\n            if file_name == file_name_front_matter:\n                print(f\"[File Name Check] PASS: {file}\")\n            else:\n                no_pass.append(file_path)\n                print(f\"[File Name Check] NO PASS: {file}\")\n            all_file_num = all_file_num + 1\n    # 直到检查完输出结果\n    else:\n        print(f\"[File Name Check] Done. {all_file_num} files Total.\")\n        if len(no_pass)>0:\n            for e in no_pass:\n                print(f\"[File Name Check] Conflict - {e}\")\n            # 返回错误码以终止后续进程\n            print(f\"[File Name Check] Exit 1.\")\n            exit(1)\n\ndef parse_yaml_front_matter(content):\n    \"\"\"\n    Parses YAML front matter from a Markdown file (More general).\n    Now it can recognize Block Mode and Flow Mode of the YAML specification (See https://cosma.arthurperret.fr/user-manual.html#metadata).\n    Also, it can process Line Folding (See https://yaml.org/spec/1.2.2/).\n    \"\"\"\n    match = re.match(r\"^---\\n(.*?)\\n---(.*)\", content, re.DOTALL)\n    data = {}\n    if match:\n        # Divide a markdown file to two parts: the front-matter and the remaining content.\n        front_matter = match.group(1)\n        content = match.group(2)\n        block_mode_attribute = None\n        line_fold_attribute = None\n        # Parse yaml by lines.\n        for line in front_matter.split(\"\\n\"):\n            # If the line is the first line of an attribute.\n            if re.match(r\"^([a-zA-Z-_]+):(.*)$\", line):\n                match_obj = re.match(r\"^([a-zA-Z-_]+):(.*)$\", line, re.DOTALL)\n                key = match_obj.group(1)\n                value = match_obj.group(2)\n                value = value.strip(\" \\'\\\"\")\n                value = convert2num_if_possible(value)\n                # A line like 'attribute: ', which means that it uses Block Mode.\n                if not value:\n                    # A mark to indicate that we should treat the next line as one of the parameter of the attribute.\n                    block_mode_attribute = key\n                    data[key] = []\n                    continue\n                # A line like 'attribute: >-', which means that it uses Line Folding.\n                elif value == '>-':\n                    # A mark to indicate that we should treat the next line as one of the parameter of the attribute.\n                    line_fold_attribute = key\n                    data[key] = ''\n                    continue\n                # Otherwise, treat the line as a common key-value pair.\n            # Parse a line that is in Block Mode.\n            elif block_mode_attribute and re.match(r\"^\\s*-\\s(.*)$\", line):\n                match_obj = re.match(r\"^\\s*-\\s(.*)$\", line)\n                data[block_mode_attribute].append(match_obj.group(1).strip())\n                continue\n            # Parse a line that is in Line Folding.\n            elif line_fold_attribute:\n                data[line_fold_attribute] = data[line_fold_attribute] + line.strip(\" \\'\\\"\")\n                continue\n            else:\n                print(f\"[WARNING] Unknown YAML line: {line}\")\n                continue\n\n            block_mode_attribute = None\n            line_fold_attribute = None\n\n            # Parse a line that is in Flow Mode.\n            if isinstance(value, str) and re.match(r\"\\[(.*)\\]\", value, re.DOTALL):\n                match_obj = re.match(r\"\\[(.*)\\]\", value, re.DOTALL)\n                value = match_obj.group(1)\n                # Remove the brackets from the string\n                value = value.strip(\"[]\")\n                # Split the string on commas and store the resulting list of tags\n                value = value.split(\",\")\n                # Strip any leading or trailing whitespace from each tag\n                value = [convert2num_if_possible(v.strip()) for v in value]\n            data[key] = value\n    return data, content\n\ndef convert2num_if_possible(value):\n    \"\"\" Parse values as integers or floats if possible, otherwise keep as string\"\"\"\n    try:\n        value = int(value)\n    except ValueError:\n        try:\n            # Check the number to avoid the peculiar bugs occur, such as '13e4' converts to 130000.0\n            if str(float(value)) != value:\n                raise ValueError\n            else:\n                value = float(value)\n        except ValueError:\n            pass\n    return value\n\ndef convert_dict2_yaml_front_matter(d: dict) -> str:\n    \"\"\"Convert a dictionary of Python to the front matter (YAML)\"\"\"\n    front_matter = \"---\\n\"\n    for k, v in d.items():\n        front_matter = front_matter + f\"{k}: {str(v)}\\n\"\n    return front_matter + \"---\\n\"\n\nif __name__ == \"__main__\":\n    walk_posts_dir(sys.argv[1])\n\n```\n\n# 本文参考\n\n- [scripts | npm Docs (npmjs.com)](https://docs.npmjs.com/cli/v6/using-npm/scripts/#special-packagejson-config-object)\n- [docs.npmjs.com/cli/v6/configuring-npm/package-json#dependencies](https://docs.npmjs.com/cli/v6/configuring-npm/package-json#dependencies)\n- [moelody/link-to-server (github.com)](https://github.com/moelody/link-to-server)\n- [moelody/hexo-link-obsidian (github.com)](https://github.com/moelody/hexo-link-obsidian)\n- [Run shell scripts using npm script (awsm.page)](https://awsm.page/nodejs/run-shell-scripts-using-npm-script/#:~:text=You%20can%20run%20your%20shell%20script%20through%20a,build.sh%20%2F%2F...%20%22scripts%22%3A%20%7B%20%22build%22%3A%20%22.%2Fbuild.sh%22%20%7D%2C%20%2F%2F)\n- [node.js 读取 yaml 文件_js 读取 yaml_az44yao 的博客-CSDN 博客](https://blog.csdn.net/az44yao/article/details/107040391)\n- [JavaScript 中查找指定字符串的几种方式_js 查找字符串_魏晓蕾的博客-CSDN 博客](https://blog.csdn.net/gongxifacai_believe/article/details/108950368)\n- [正则表达式 – 元字符 | 菜鸟教程 (runoob.com)](https://www.runoob.com/regexp/regexp-metachar.html)\n- [JavaScript Promise | 菜鸟教程 (runoob.com)](https://www.runoob.com/js/js-promise.html)\n- [windows 中查看端口占用、pid、禁用 - 山顶的鱼 - 博客园 (cnblogs.com)](https://www.cnblogs.com/xuweili/articles/3943920.html#:~:text=%E5%BC%80%E5%A7%8B--%E8%BF%90%E8%A1%8C--cmd%20%E8%BF%9B%E5%85%A5%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6%20%E8%BE%93%E5%85%A5netstat%20-ano%20%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%89%80%E6%9C%89%E8%BF%9E%E6%8E%A5%E7%9A%84PID%20%E4%B9%8B%E5%90%8E%E5%9C%A8%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E6%89%BE%E5%88%B0%E8%BF%99%E4%B8%AAPID%E6%89%80%E5%AF%B9%E5%BA%94%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%A6%82%E6%9E%9C%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%20%E6%B2%A1%E6%9C%89PID%20%E8%BF%99%E4%B8%80%E9%A1%B9%2C%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%AD%E9%80%89%22%E6%9F%A5%E7%9C%8B%22-%22%E9%80%89%E6%8B%A9%E5%88%97%22,C%3A%3E%20netstat%20-ano%20%E5%8D%8F%E8%AE%AE%20%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80%20%E5%A4%96%E9%83%A8%E5%9C%B0%E5%9D%80%20%E7%8A%B6%E6%80%81%20PID)\n- [JavaScript Set 的用法与理解_js set push_暮春风的博客-CSDN 博客](https://blog.csdn.net/nothing_is_imposible/article/details/108315760)\n- [循环与迭代 - JavaScript | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#for...in_%E8%AF%AD%E5%8F%A5)","categories":[{"name":"Archive","api":"api/categories/Archive.json"},{"name":"OutOfDate","api":"api/categories/Archive/OutOfDate.json"}],"tags":[{"name":"JavaScript","api":"api/tags/JavaScript.json"},{"name":"Markdown","api":"api/tags/Markdown.json"},{"name":"OFM","api":"api/tags/OFM.json"},{"name":"Obsidian","api":"api/tags/Obsidian.json"}]},"api":"api/posts/p/7f51af81.json"}