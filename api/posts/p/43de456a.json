{"data":{"title":"单例模式的应用——为 Java 程序应用全局配置","slug":"高质量代码及设计模式/单例模式的应用——为 Java 程序应用全局配置","description":"备忘一个全局配置类的写法。","date":"2024-08-13T12:13:10.000Z","updated":"2025-06-11T16:08:12.779Z","language":"zh-CN","comments":true,"url":"p/43de456a/","cover":"https://cdn.gallery.uuanqin.top/img/202409050026212.webp","images":[],"content":"<h1 id=\"目标\"><a class=\"markdownIt-Anchor\" href=\"#目标\"></a> 目标</h1>\n<p>Java 程序维护一个全局的配置对象，可以在任何地方读取配置文件 <code>application.properties</code> 中的配置。项目启动后，从配置文件中读取配置并创建对象实例，之后就可以集中地从这个对象中获取配置信息，而不用每次加载配置时再重新读取配置、并创建新的对象，减少了性能开销。</p>\n<h1 id=\"代码实践\"><a class=\"markdownIt-Anchor\" href=\"#代码实践\"></a> 代码实践</h1>\n<h2 id=\"项目初始化与依赖引入\"><a class=\"markdownIt-Anchor\" href=\"#项目初始化与依赖引入\"></a> 项目初始化与依赖引入</h2>\n<p>新建空 Maven 项目。<code>pom.xml</code> 引入以下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- https://doc.hutool.cn/ --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.hutool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hutool-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.8.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>本项目使用 <a href=\"https://doc.hutool.cn/\">Hutool</a> 工具类简化代码的编写。</p>\n<h2 id=\"配置类\"><a class=\"markdownIt-Anchor\" href=\"#配置类\"></a> 配置类</h2>\n<p>这个类定义了你的 Java 应用的默认配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin.glocalconfig.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 我的应用配置</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uuanqin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 姓名</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Wuanqin&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * ID</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Integer</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> <span class=\"number\">10908</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"配置加载工具类\"><a class=\"markdownIt-Anchor\" href=\"#配置加载工具类\"></a> 配置加载工具类</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin.glocalconfig.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.util.StrUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.setting.dialect.Props;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 配置工具类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加载配置对象</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tClass</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> prefix</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">loadConfig</span><span class=\"params\">(Class&lt;T&gt; tClass, String prefix)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loadConfig(tClass, prefix, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加载配置对象，支持区分环境</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tClass</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> prefix</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> environment</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">loadConfig</span><span class=\"params\">(Class&lt;T&gt; tClass, String prefix, String environment)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">configFileBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"string\">&quot;application&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StrUtil.isNotBlank(environment)) &#123;</span><br><span class=\"line\">            configFileBuilder.append(<span class=\"string\">&quot;-&quot;</span>).append(environment);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        configFileBuilder.append(<span class=\"string\">&quot;.properties&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Props</span> <span class=\"variable\">props</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Props</span>(configFileBuilder.toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> props.toBean(tClass, prefix);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这个工具类的作用是，传入配置类、配置名称的前缀以及环境，返回填好配置信息的配置类。</p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">Hutool 中的 <code>Props</code> 类</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ul>\n<li>类 Props：Properties 文件读取封装类。继承 <code>java.util.Properties</code></li>\n<li>构造函数：<code>Props(String path)</code> 构造，使用相对于 Class 文件根目录的相对路径。</li>\n<li>方法 <code>&lt;T&gt; T toBean(Class&lt;T&gt; beanClass, String prefix)</code>：将配置文件转换为 Bean，支持嵌套 Bean。\n<ul>\n<li><code>prefix</code>：公共前缀，不指定前缀传 null，当指定前缀后非此前缀的属性被忽略</li>\n</ul>\n</li>\n</ul>\n<p>——<a href=\"https://plus.hutool.cn/apidocs/\">hutool 5.8.29 API</a></p>\n</div></div>\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">Hutool 中的 <code>StrUtil</code> 工具类</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ul>\n<li>继承 <code>cn.hutool.core.text.CharSequenceUtil</code> 类</li>\n<li><code>CharSequenceUtil</code> 中的方法：<code>isNotBlank(CharSequence str)</code>。判断字符串是否为非空白，非空白的定义如下： 不为 <code>null</code> 不为空字符串：<code>&quot;&quot;</code> 不为空格、全角空格、制表符、换行符，等不可见字符</li>\n</ul>\n<p>——<a href=\"https://plus.hutool.cn/apidocs/\">hutool 5.8.29 API</a></p>\n</div></div><p>这个工具类的亮点在于：</p>\n<ol>\n<li>灵活处理配置类，<code>loadConfig</code> 的 <code>tClass</code> 参数指定生成的配置类</li>\n<li>多环境配置文件的支持：通过 <code>environment</code> 参数，依照命名惯例，加载多环境的配置文件</li>\n<li>可拓展点：你可以试着编写读取 <code>application.yaml</code> 配置的功能</li>\n</ol>\n<p>关于 <code>java.util.Properties</code> 更多说明详见：<a href=\"https://blog.csdn.net/u012060033/article/details/123400800\">java.util.Properties类操作properties文件-CSDN博客</a></p>\n<p>关于 <code>getBean</code> 函数可看本站文章以获取更多补充：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/66216cb4/\"><span class=\"yukari\">站内文章</span>SpringBoot 中的 IoC &amp; DI 入门</a></p>\n<h2 id=\"常量定义\"><a class=\"markdownIt-Anchor\" href=\"#常量定义\"></a> 常量定义</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin.glocalconfig.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 相关常量</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Constant</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认配置文件加载前缀</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_CONFIG_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;my-config&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用单例模式维护全局对象\"><a class=\"markdownIt-Anchor\" href=\"#使用单例模式维护全局对象\"></a> 使用单例模式维护全局对象</h2>\n<p>这里的单例模式使用了经典的双检锁单例模式。</p>\n<blockquote>\n<p>双检锁单例模式以及单例模式初始化参数的问题详见 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/f7f6f747/\"><span class=\"yukari\">站内文章</span>单例模式一文通</a>。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin.glocalconfig;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> top.uuanqin.glocalconfig.config.ConfigUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> top.uuanqin.glocalconfig.config.Constant;</span><br><span class=\"line\"><span class=\"keyword\">import</span> top.uuanqin.glocalconfig.config.MyConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 我的应用</span></span><br><span class=\"line\"><span class=\"comment\"> * 相当于 holder，存放了项目全局用到的变量。双检锁单例模式实现</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uuanqin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> MyConfig myConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 框架初始化，支持传入自定义配置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> newMyConfig</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(MyConfig newMyConfig)</span> &#123;</span><br><span class=\"line\">        myConfig = newMyConfig;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;my application init, config = &#123;&#125;&quot;</span>, newMyConfig.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        MyConfig newMyConfig;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            newMyConfig = ConfigUtils.loadConfig(MyConfig.class, Constant.DEFAULT_CONFIG_PREFIX);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 配置加载失败，使用默认值</span></span><br><span class=\"line\">            newMyConfig = <span class=\"keyword\">new</span> <span class=\"title class_\">MyConfig</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        init(newMyConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取配置</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MyConfig <span class=\"title function_\">getMyConfig</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (myConfig == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (MyApplication.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (myConfig == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    init();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myConfig;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>为了便于扩展，支持通过 <code>public static void init(MyConfig newMyConfig)</code> 方法传入自己的配置。</p>\n<h1 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\"></a> 测试</h1>\n<h2 id=\"调用测试\"><a class=\"markdownIt-Anchor\" href=\"#调用测试\"></a> 调用测试</h2>\n<p>一行代码即可读取配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin.glocalconfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> top.uuanqin.glocalconfig.config.MyConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyConfig</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> MyApplication.getMyConfig();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改配置文件\"><a class=\"markdownIt-Anchor\" href=\"#修改配置文件\"></a> 修改配置文件</h2>\n<p>修改配置文件运行测试可以查看效果。</p>\n<p><code>application.properties</code>：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">my-config.id</span>=<span class=\"string\">6651</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://yuyuanweb.feishu.cn/wiki/EweIwSYsXiEvCDkzS8BcTiAonyc\">知识星球·编程导航 - 手写 RFC 框架</a></li>\n</ul>\n","raw":"---\ntitle: 单例模式的应用——为 Java 程序应用全局配置\ntags:\n  - 设计模式\n  - Java\n  - 单例模式\n  - Hutool\n  - 配置\ncover: 'https://cdn.gallery.uuanqin.top/img/202409050026212.webp'\ndescription: 备忘一个全局配置类的写法。\ncategories:\n  - 高质量代码及设计模式\nabbrlink: 43de456a\ndate: 2024-08-13 20:13:10\ntop_img:\n---\n\n# 目标\n\nJava 程序维护一个全局的配置对象，可以在任何地方读取配置文件 `application.properties` 中的配置。项目启动后，从配置文件中读取配置并创建对象实例，之后就可以集中地从这个对象中获取配置信息，而不用每次加载配置时再重新读取配置、并创建新的对象，减少了性能开销。\n\n# 代码实践\n\n## 项目初始化与依赖引入\n\n新建空 Maven 项目。`pom.xml` 引入以下依赖：\n\n```xml\n<dependencies>\n\t<dependency>\n\t\t<groupId>org.projectlombok</groupId>\n\t\t<artifactId>lombok</artifactId>\n\t\t<version>1.18.32</version>\n\t\t<scope>provided</scope>\n\t</dependency>\n\t<!-- https://doc.hutool.cn/ -->\n\t<dependency>\n\t\t<groupId>cn.hutool</groupId>\n\t\t<artifactId>hutool-all</artifactId>\n\t\t<version>5.8.16</version>\n\t</dependency>\n\t<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->\n\t<dependency>\n\t\t<groupId>ch.qos.logback</groupId>\n\t\t<artifactId>logback-classic</artifactId>\n\t\t<version>1.3.12</version>\n\t</dependency>\n</dependencies>\n```\n\n本项目使用 [Hutool](https://doc.hutool.cn/) 工具类简化代码的编写。\n\n## 配置类\n\n这个类定义了你的 Java 应用的默认配置。\n\n```java\npackage top.uuanqin.glocalconfig.config;\n\nimport lombok.Data;\n\n/**\n * 我的应用配置\n * @author uuanqin\n */\n@Data\npublic class MyConfig {\n\n    /**\n     * 姓名\n     */\n    private String name = \"Wuanqin\";\n    \n    /**\n     * ID\n     */\n    private Integer id = 10908;\n\n}\n\n```\n\n## 配置加载工具类\n\n```java\npackage top.uuanqin.glocalconfig.config;\n\nimport cn.hutool.core.util.StrUtil;\nimport cn.hutool.setting.dialect.Props;\n\n/**\n * 配置工具类\n */\npublic class ConfigUtils {\n\n    /**\n     * 加载配置对象\n     *\n     * @param tClass\n     * @param prefix\n     * @param <T>\n     * @return\n     */\n    public static <T> T loadConfig(Class<T> tClass, String prefix) {\n        return loadConfig(tClass, prefix, \"\");\n    }\n\n    /**\n     * 加载配置对象，支持区分环境\n     *\n     * @param tClass\n     * @param prefix\n     * @param environment\n     * @param <T>\n     * @return\n     */\n    public static <T> T loadConfig(Class<T> tClass, String prefix, String environment) {\n        StringBuilder configFileBuilder = new StringBuilder(\"application\");\n        if (StrUtil.isNotBlank(environment)) {\n            configFileBuilder.append(\"-\").append(environment);\n        }\n        configFileBuilder.append(\".properties\");\n        Props props = new Props(configFileBuilder.toString());\n        return props.toBean(tClass, prefix);\n    }\n}\n\n```\n\n这个工具类的作用是，传入配置类、配置名称的前缀以及环境，返回填好配置信息的配置类。\n\n> [!hint] Hutool 中的 `Props` 类\n>\n> - 类 Props：Properties 文件读取封装类。继承 `java.util.Properties`\n> - 构造函数：`Props(String path)` 构造，使用相对于 Class 文件根目录的相对路径。\n> - 方法 `<T> T toBean(Class<T> beanClass, String prefix)`：将配置文件转换为 Bean，支持嵌套 Bean。\n> \t- `prefix`：公共前缀，不指定前缀传 null，当指定前缀后非此前缀的属性被忽略\n>\n> ——[hutool 5.8.29 API](https://plus.hutool.cn/apidocs/)\n>\n\n> [!hint] Hutool 中的 `StrUtil` 工具类\n> - 继承 `cn.hutool.core.text.CharSequenceUtil` 类\n> - `CharSequenceUtil` 中的方法：`isNotBlank(CharSequence str)`。判断字符串是否为非空白，非空白的定义如下： 不为 `null` 不为空字符串：`\"\"` 不为空格、全角空格、制表符、换行符，等不可见字符\n>\n> ——[hutool 5.8.29 API](https://plus.hutool.cn/apidocs/)\n>\n\n这个工具类的亮点在于：\n\n1. 灵活处理配置类，`loadConfig` 的 `tClass` 参数指定生成的配置类\n2. 多环境配置文件的支持：通过 `environment` 参数，依照命名惯例，加载多环境的配置文件\n3. 可拓展点：你可以试着编写读取 `application.yaml` 配置的功能\n\n关于 `java.util.Properties` 更多说明详见：[java.util.Properties类操作properties文件-CSDN博客](https://blog.csdn.net/u012060033/article/details/123400800)\n\n关于 `getBean` 函数可看本站文章以获取更多补充：[[SpringBoot 中的 IoC & DI 入门]]\n\n## 常量定义\n\n```java\npackage top.uuanqin.glocalconfig.config;\n\n/**\n * 相关常量\n *\n */\npublic interface Constant {\n\n    /**\n     * 默认配置文件加载前缀\n     */\n    String DEFAULT_CONFIG_PREFIX = \"my-config\";\n}\n\n```\n\n## 使用单例模式维护全局对象\n\n这里的单例模式使用了经典的双检锁单例模式。\n\n> 双检锁单例模式以及单例模式初始化参数的问题详见 [[单例模式一文通]]。\n\n```java\npackage top.uuanqin.glocalconfig;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport top.uuanqin.glocalconfig.config.ConfigUtils;\nimport top.uuanqin.glocalconfig.config.Constant;\nimport top.uuanqin.glocalconfig.config.MyConfig;\n\n/**\n * 我的应用\n * 相当于 holder，存放了项目全局用到的变量。双检锁单例模式实现\n * @author uuanqin\n */\n@Slf4j\npublic class MyApplication {\n\n    private static volatile MyConfig myConfig;\n\n    /**\n     * 框架初始化，支持传入自定义配置\n     *\n     * @param newMyConfig\n     */\n    public static void init(MyConfig newMyConfig) {\n        myConfig = newMyConfig;\n        log.info(\"my application init, config = {}\", newMyConfig.toString());\n    }\n\n    /**\n     * 初始化\n     */\n    public static void init() {\n        MyConfig newMyConfig;\n        try {\n            newMyConfig = ConfigUtils.loadConfig(MyConfig.class, Constant.DEFAULT_CONFIG_PREFIX);\n        } catch (Exception e) {\n            // 配置加载失败，使用默认值\n            newMyConfig = new MyConfig();\n        }\n        init(newMyConfig);\n    }\n\n    /**\n     * 获取配置\n     *\n     * @return\n     */\n    public static MyConfig getMyConfig() {\n        if (myConfig == null) {\n            synchronized (MyApplication.class) {\n                if (myConfig == null) {\n                    init();\n                }\n            }\n        }\n        return myConfig;\n    }\n}\n\n```\n\n为了便于扩展，支持通过 `public static void init(MyConfig newMyConfig)` 方法传入自己的配置。\n\n# 测试\n\n## 调用测试\n\n一行代码即可读取配置。\n\n```java\npackage top.uuanqin.glocalconfig;\n\nimport top.uuanqin.glocalconfig.config.MyConfig;\n\npublic class Main {\n    public static void main(String[] args) {\n        MyConfig config = MyApplication.getMyConfig();\n    }\n}\n\n```\n\n## 修改配置文件\n\n修改配置文件运行测试可以查看效果。\n\n`application.properties`：\n\n```properties\nmy-config.id=6651\n```\n\n# 本文参考\n- [知识星球·编程导航 - 手写 RFC 框架](https://yuyuanweb.feishu.cn/wiki/EweIwSYsXiEvCDkzS8BcTiAonyc)","categories":[{"name":"高质量代码及设计模式","api":"api/categories/高质量代码及设计模式.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"Hutool","api":"api/tags/Hutool.json"},{"name":"设计模式","api":"api/tags/设计模式.json"},{"name":"单例模式","api":"api/tags/单例模式.json"},{"name":"配置","api":"api/tags/配置.json"}]},"api":"api/posts/p/43de456a.json"}