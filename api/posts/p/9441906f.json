{"data":{"title":"SpringBoot 中的配置","slug":"技术学习/SpringBoot 中的配置","description":"SpringBoot 最基础的读取配置的方式备忘。","date":"2024-08-02T16:10:59.000Z","updated":"2025-06-11T16:08:12.779Z","language":"zh-CN","comments":true,"url":"p/9441906f/","cover":"https://cdn.gallery.uuanqin.top/img/20240723234813.webp","images":[],"content":"<h1 id=\"配置文件\"><a class=\"markdownIt-Anchor\" href=\"#配置文件\"></a> 配置文件</h1>\n<p>SpringBoot 配置文件为：</p>\n<ul>\n<li><code>application.properties</code>。形式：<code>main_key.sub=value</code>。不能写注释。</li>\n<li>【推荐】<code>application.yml</code>，<code>application.yaml</code>。格式采用 YAML 格式，可以写注释。</li>\n</ul>\n<p>外部配置的属性注入方法：</p>\n<ul>\n<li>使用 <code>@Value</code> 注解通常用于外部配置的属性注入，具体用法为：<code>@Value(&quot;$&#123;配置文件中的key&#125;&quot;)</code>。</li>\n<li>但是遇到复杂参数名的话，其注解可能会比较长且繁琐。我们可以使用 <code>@ConfigurationProperties</code> 简化开发。</li>\n</ul>\n<p><code>@Value</code> 和 <code>@ConfigurationProperties</code> 的不同点：</p>\n<ul>\n<li><code>@Value</code> 注解只能一个一个的进行外部属性的注入。</li>\n<li><code>@ConfigurationProperties</code> 可以批量的将外部的属性配置注入到 bean 对象的属性中。</li>\n</ul>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\"></a> 示例</h2>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># application.yml</span></span><br><span class=\"line\"><span class=\"attr\">key:</span></span><br><span class=\"line\">\t<span class=\"attr\">sub:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">sub1:</span> <span class=\"string\">abc</span></span><br><span class=\"line\">\t\t<span class=\"attr\">sub2:</span> <span class=\"string\">cdf</span></span><br></pre></td></tr></table></figure>\n<p><code>@Value</code> 方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SomeoneClass</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;$&#123;key.sub.sub1&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String sub1;\t</span><br><span class=\"line\">\t<span class=\"meta\">@Value(&quot;$&#123;key.sub.sub2&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String sub2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 <code>@ConfigurationProperties</code> 方式，注意成员变量的命名要和配置文件中的键名对应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个配置类</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span> <span class=\"comment\">// Lombok</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span> <span class=\"comment\">// 添加到IOC容器中</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;key.sub&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyKeyProperties</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String sub1;\t<span class=\"comment\">// 注意：名称要和配置文件中的键名对应</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String sub2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ 使用方法 ---------</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SomeoneClass</span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span> <span class=\"comment\">// 注入</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> MyKeyProperties myKeyProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">sub1</span> <span class=\"operator\">=</span> myKeyProperties.getSub1(); <span class=\"comment\">// Lombok 提供类get方法</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">sub2</span> <span class=\"operator\">=</span> myKeyProperties.getSub2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可选操作：<code>pom.xml</code> 引入以下依赖，用于帮助 IDEA 识别 <code>@ConfigurationProperties</code> 中的 prefix，消去 IDEA 的警告，并且 IDEA 提供配置的自动补全。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个依赖安装与否都不影响程序的正确运行。</p>\n<h1 id=\"配置方式\"><a class=\"markdownIt-Anchor\" href=\"#配置方式\"></a> 配置方式</h1>\n<p>SpringBoot 除了支持配置文件属性配置，还支持 Java 系统属性和命令行参数的方式进行属性配置。</p>\n<ul>\n<li>Java 系统属性：<code>-Dserver.port=9000</code>。\n<ul>\n<li>IDEA 中在 Run/Debug Configurations -&gt; 你的 Spring 项目 -&gt;VM options 中配置。</li>\n<li>java 指令运行 jar 包：<code>java -Dserver.port=9000 -jar your.jar</code></li>\n</ul>\n</li>\n<li>命令行参数：<code>--server.port=10010</code>。\n<ul>\n<li>IDEA 中在 Run/Debug Configurations -&gt; 你的 Spring 项目 -&gt; Program arguments 中配置</li>\n<li>java 指令运行 jar 包：<code>java -jar your.jar --server.port=10010</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>SpringBoot 同时启动多项目： <a href=\"https://blog.csdn.net/weixin_44606481/article/details/132694434\">https://blog.csdn.net/weixin_44606481/article/details/132694434</a></p>\n</blockquote>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">SpringBoot 项目打包操作依赖</div>\n</div>\n<div class=\"callout-content\"><p>进行打包时需要引入 <code>spring-boot-maven-plugin</code>。不过基于官方骨架创建项目，会自动添加这个插件。</p>\n</div></div><p>关于 SpringBoot 项目的部署方式详见本站文章：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/b1ef28a0/\"><span class=\"yukari\">站内文章</span>SpringBoot 项目的上线方式</a>。</p>\n<h1 id=\"配置优先级\"><a class=\"markdownIt-Anchor\" href=\"#配置优先级\"></a> 配置优先级</h1>\n<p>多个配置文件同时存在时，配置文件优先级从高到低依次为：</p>\n<ul>\n<li><code>application.properties</code></li>\n<li><code>application.yml</code></li>\n<li><code>application.yaml</code></li>\n</ul>\n<p>虽然 springboot 支持多种格式配置文件，但是在项目开发时，推荐统一使用一种格式的配置（yml 是主流）。</p>\n<p>属性配置方式的优先级从高到低依次为：</p>\n<ul>\n<li>命令行参数</li>\n<li>Java 系统属性</li>\n</ul>\n<p>五种配置方式的优先级从高到低依次为：</p>\n<ol>\n<li>命令行参数</li>\n<li>Java 系统属性</li>\n<li><code>application.properties</code></li>\n<li><code>application.yml</code></li>\n<li><code>application.yaml</code></li>\n</ol>\n<p>官方文档：<a href=\"https://springdoc.cn/spring-boot/features.html#features.external-config\">核心特性 (springdoc.cn)</a></p>\n<h1 id=\"更多\"><a class=\"markdownIt-Anchor\" href=\"#更多\"></a> 更多</h1>\n<p>关于读取配置文件更骚的操作详看本站文章：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/43de456a/\"><span class=\"yukari\">站内文章</span>单例模式的应用——为 Java 程序应用全局配置</a></p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1m84y1w7Tb?p=153&amp;vd_source=e03d48176855fc5349b27aef691f9cdb\">Day11-09. 案例-配置文件-参数配置化_哔哩哔哩_bilibili</a></li>\n</ul>\n","raw":"---\ntitle: SpringBoot 中的配置\ncover: 'https://cdn.gallery.uuanqin.top/img/20240723234813.webp'\ncategories:\n  - 技术学习\nabbrlink: 9441906f\ndescription: SpringBoot 最基础的读取配置的方式备忘。\ndate: 2024-08-03 00:10:59\ntags:\ntop_img:\n---\n\n# 配置文件\n\nSpringBoot 配置文件为：\n\n- `application.properties`。形式：`main_key.sub=value`。不能写注释。\n- 【推荐】`application.yml`，`application.yaml`。格式采用 YAML 格式，可以写注释。\n\n外部配置的属性注入方法：\n\n- 使用 `@Value` 注解通常用于外部配置的属性注入，具体用法为：`@Value(\"${配置文件中的key}\")`。\n- 但是遇到复杂参数名的话，其注解可能会比较长且繁琐。我们可以使用 `@ConfigurationProperties` 简化开发。\n\n`@Value` 和 `@ConfigurationProperties` 的不同点：\n\n- `@Value` 注解只能一个一个的进行外部属性的注入。\n- `@ConfigurationProperties` 可以批量的将外部的属性配置注入到 bean 对象的属性中。\n\n## 示例\n\n```yaml\n# application.yml\nkey:\n\tsub:\n\t\tsub1: abc\n\t\tsub2: cdf\n```\n\n`@Value` 方式：\n\n```java\n@Component\npublic class SomeoneClass{\n\t@Value(\"${key.sub.sub1}\")\n\tprivate String sub1;\t\n\t@Value(\"${key.sub.sub2}\")\n\tprivate String sub2;\n}\n```\n\n使用 `@ConfigurationProperties` 方式，注意成员变量的命名要和配置文件中的键名对应：\n\n```java\n// 新建一个配置类\n@Data // Lombok\n@Component // 添加到IOC容器中\n@ConfigurationProperties(prefix = \"key.sub\")\npublic class MyKeyProperties{\n\tprivate String sub1;\t// 注意：名称要和配置文件中的键名对应\n\tprivate String sub2;\n}\n\n//------ 使用方法 ---------\npublic class SomeoneClass{\n\t@Autowired // 注入\n\tprivate MyKeyProperties myKeyProperties;\n\n\tString sub1 = myKeyProperties.getSub1(); // Lombok 提供类get方法\n\tString sub2 = myKeyProperties.getSub2();\n}\n```\n\n可选操作：`pom.xml` 引入以下依赖，用于帮助 IDEA 识别 `@ConfigurationProperties` 中的 prefix，消去 IDEA 的警告，并且 IDEA 提供配置的自动补全。\n\n```xml\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-configuration-processor</artifactId>\n</dependency>\n```\n\n这个依赖安装与否都不影响程序的正确运行。\n\n# 配置方式\n\nSpringBoot 除了支持配置文件属性配置，还支持 Java 系统属性和命令行参数的方式进行属性配置。\n\n- Java 系统属性：`-Dserver.port=9000`。\n\t- IDEA 中在 Run/Debug Configurations -> 你的 Spring 项目 ->VM options 中配置。\n\t- java 指令运行 jar 包：`java -Dserver.port=9000 -jar your.jar`\n- 命令行参数：`--server.port=10010`。\n\t- IDEA 中在 Run/Debug Configurations -> 你的 Spring 项目 -> Program arguments 中配置\n\t- java 指令运行 jar 包：`java -jar your.jar --server.port=10010`\n\n> SpringBoot 同时启动多项目： https://blog.csdn.net/weixin_44606481/article/details/132694434\n\n> [!hint] SpringBoot 项目打包操作依赖\n> 进行打包时需要引入 `spring-boot-maven-plugin`。不过基于官方骨架创建项目，会自动添加这个插件。\n\n关于 SpringBoot 项目的部署方式详见本站文章：[[SpringBoot 项目的上线方式]]。\n\n# 配置优先级\n\n多个配置文件同时存在时，配置文件优先级从高到低依次为：\n\n- `application.properties`\n- `application.yml`\n- `application.yaml`\n\n虽然 springboot 支持多种格式配置文件，但是在项目开发时，推荐统一使用一种格式的配置（yml 是主流）。\n\n属性配置方式的优先级从高到低依次为：\n\n- 命令行参数\n- Java 系统属性\n\n五种配置方式的优先级从高到低依次为：\n\n1. 命令行参数\n2. Java 系统属性\n3. `application.properties`\n4. `application.yml`\n5. `application.yaml`\n\n官方文档：[核心特性 (springdoc.cn)](https://springdoc.cn/spring-boot/features.html#features.external-config)\n\n# 更多\n\n关于读取配置文件更骚的操作详看本站文章：[[单例模式的应用——为 Java 程序应用全局配置]]\n\n# 本文参考\n- [Day11-09. 案例-配置文件-参数配置化_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1m84y1w7Tb?p=153&vd_source=e03d48176855fc5349b27aef691f9cdb)","categories":[{"name":"技术学习","api":"api/categories/技术学习.json"}],"tags":[]},"api":"api/posts/p/9441906f.json"}