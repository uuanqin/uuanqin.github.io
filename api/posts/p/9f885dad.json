{"data":{"title":"AJAX 的快速入门 - 代码驱动学习","slug":"技术学习/AJAX 的快速入门 - 代码驱动学习","description":"通读代码快速理解 AJAX 原理","date":"2023-05-02T12:39:49.000Z","updated":"2025-06-11T16:08:12.778Z","language":"zh-CN","comments":true,"url":"p/9f885dad/","cover":"https://cdn.gallery.uuanqin.top/img/ajaxcover.png","images":[],"content":"\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">❄❄❄白雪警告❄❄❄</div>\n</div>\n<div class=\"callout-content\"><p>原生的 AJAX 请求方式目前已经很少使用，一般使用 axios。本文包含部分 axios 内容。</p>\n</div></div><blockquote>\n<p>源码附于文末。</p>\n</blockquote>\n<h1 id=\"什么是-ajax\"><a class=\"markdownIt-Anchor\" href=\"#什么是-ajax\"></a> 什么是 AJAX？</h1>\n<p>AJAX（Asynchronous JavaScript And XML，异步的 JavaScript 和 XML），读作”/eɪdʒæks/，也可以念为“阿贾克斯”。最大的特点就是<strong>在不刷新网页的情况下向服务端发请求并获取结果</strong>。AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p>\n<blockquote>\n<p>Ajax 是一个令人误导的名称。Ajax 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。参考：<a href=\"https://www.w3school.com.cn/js/js_ajax_intro.asp\">AJAX 简介 (w3school.com.cn)</a></p>\n</blockquote>\n<blockquote>\n<p>XML 可扩展标记语言，XML 被设计用来传输和存储数据。XML 和 HTML 类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签，全都是自定义标签，用来表示一些数据。不过现在 AJAX 多使用 JSON 格式了。</p>\n<p>XML 简介：<a href=\"https://www.w3school.com.cn/x.asp\">XML系列教程 (w3school.com.cn)</a></p>\n</blockquote>\n<p>AJAX 的优点：</p>\n<ul>\n<li>可以无需刷新页面而与服务器端进行通信。</li>\n<li>允许你根据用户事件来更新部分页面内容。</li>\n</ul>\n<p>AJAX 的缺点：</p>\n<ul>\n<li>没有浏览历史，不能回退</li>\n<li>存在跨域问题 (同源)</li>\n<li>SEO 不友好</li>\n</ul>\n<p>应用：</p>\n<ol>\n<li>搜索联想</li>\n<li>用户名是否可用</li>\n</ol>\n<p>同步操作和异步操作的区别：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240502182625.webp\" alt=\"image.png\" /></p>\n<h1 id=\"学习准备\"><a class=\"markdownIt-Anchor\" href=\"#学习准备\"></a> 学习准备</h1>\n<h2 id=\"预备知识\"><a class=\"markdownIt-Anchor\" href=\"#预备知识\"></a> 预备知识</h2>\n<p>本文章在于通过代码实践快速掌握 AJAX 基本使用。阅读前你需要具备一定的 HTML、CSS、JS 知识，了解 HTTP 协议的请求报文和响应报文的结构。</p>\n<ul>\n<li>JS 基础请看：<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics\">JavaScript 基础 - 学习 Web 开发 | MDN (mozilla.org)</a></li>\n<li>HTTP 结构：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Messages\">HTTP 消息 - HTTP | MDN (mozilla.org)</a></li>\n</ul>\n<p>学习前我们需要懂得使用 Chrome、Edge 浏览器开发者模式（按 F12），查看查看 HTTP 报文接收和发送情况。</p>\n<p>本文章主要通过可运行的案例代码以驱动学习，学习者可以通过理解代码并试图在本机运行以加深理解。建议你在学习时打开 F12 调试窗口，查看控制台输出与网络请求。</p>\n<p>本篇文章的实践内容参考：<a href=\"https://www.bilibili.com/video/BV1WC4y1b78y%EF%BC%8C%E8%A7%86%E9%A2%91%E6%97%B6%E9%95%BF%E7%BA%A6\">https://www.bilibili.com/video/BV1WC4y1b78y，视频时长约</a> 3 小时。</p>\n<h2 id=\"软件安装\"><a class=\"markdownIt-Anchor\" href=\"#软件安装\"></a> 软件安装</h2>\n<h3 id=\"nodejs\"><a class=\"markdownIt-Anchor\" href=\"#nodejs\"></a> Node.js</h3>\n<p>安装 Node.js：<a href=\"https://nodejs.org/en\">Node.js (nodejs.org)</a>。</p>\n<p>安装完毕后在终端输入命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n<p>若显示版本号即安装成功。</p>\n<h3 id=\"express-服务端框架\"><a class=\"markdownIt-Anchor\" href=\"#express-服务端框架\"></a> Express 服务端框架</h3>\n<p>为了更好的演示 AJAX 操作，我们需要自己启动一个服务端。接下来的实验我们只需要对这个服务端进行消息的发送。在这一小节中，我们只需要了解 Express 的最小知识。</p>\n<p>安装前保证安装了 Node.js，输入：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i express</span><br></pre></td></tr></table></figure>\n<p>npm 是 Node.js 提供的包管理工具。通过该命令安装 express。</p>\n<p>新建 js 文件，可以将其命名为 server.js，内容如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 引入express</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 创建应用对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 创建路由规则</span></span><br><span class=\"line\"><span class=\"comment\">// request是对请求报文的封装，response是对响应报文的封装</span></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/server&#x27;</span>,<span class=\"function\">(<span class=\"params\">request,response</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    response.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//设置一个简单的响应</span></span><br><span class=\"line\">    response.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;HELLO AJAX!&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 监听端口启动服务</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">8000</span>,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;服务已经启动，8000端口监听中...&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>打开终端，执行以下命令启动服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node &lt;your server.js&gt; </span><br></pre></td></tr></table></figure>\n<p>终端输出 &quot; 服务已经启动，8000 端口监听中…&quot;。打开浏览器输入 127.0.0.1:8000，若显示 '‘‘HELLO AJAX!’，则服务启动成功。</p>\n<p>注意，每次修改 server.js 文件，<strong>保存后</strong>需要关闭当前正在运行的服务，再次启动 server.js 才能应用新的更改。如果我们想要每次修改 server.js 保存后自动重启服务器，我们可以安装 modemon 进行解决。</p>\n<p>常见错误：</p>\n<ul>\n<li>\n<p><strong>启动失败 address already in use :::8000</strong></p>\n<p>这表明 8000 端口已经被占用，你可能忘记中断之前打开的服务，尝试中断之前的服务，或换一个端口号尝试。</p>\n</li>\n<li>\n<p><strong>输入命令后没有反应</strong></p>\n<p>检查你是不是粘贴后没有保存。</p>\n</li>\n</ul>\n<h3 id=\"nodemon-工具安装\"><a class=\"markdownIt-Anchor\" href=\"#nodemon-工具安装\"></a> nodemon 工具安装</h3>\n<p>官网链接：<a href=\"https://www.npmjs.com/package/nodemon\">nodemon - npm (npmjs.com)</a></p>\n<p>安装前保证安装好了 Node.js。安装命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nodemon</span><br></pre></td></tr></table></figure>\n<p>以后每次启动 server.js 脚本可以改为使用以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodemon &lt;your server.js&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"axios\"><a class=\"markdownIt-Anchor\" href=\"#axios\"></a> axios</h3>\n<p>axio 是前端热门的 AJAX 工具库：<a href=\"https://www.axios-http.cn/\">Axios中文文档 | Axios中文网 (axios-http.cn)</a></p>\n<p>使用 axio 我们可以直接通过页面链接引用。</p>\n<p>但是官网给的 CDN 链接是在国外的，所以我们可以通过 <a href=\"https://www.bootcdn.cn/\">BootCDN</a> 查询并替换网址。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.min.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"非必须vscode-插件-live-server\"><a class=\"markdownIt-Anchor\" href=\"#非必须vscode-插件-live-server\"></a> 【非必须】VSCode 插件 -Live Server</h3>\n<p>如果你是在 VSCode 环境下进行操作的话，可以安装一个 Live Server 插件。这个插件右键可以将 html 网页用服务器打开，以模拟跨域同源实验。</p>\n<h1 id=\"第一章节ajax-请求基本实践\"><a class=\"markdownIt-Anchor\" href=\"#第一章节ajax-请求基本实践\"></a> 第一章节：AJAX 请求基本实践</h1>\n<p>本章节包含两个文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.js 服务器文件</span><br><span class=\"line\">client.html 案例</span><br></pre></td></tr></table></figure>\n<p>案例食用说明：</p>\n<ol>\n<li>在终端输入命令执行 server.js <code>nodemon &lt;your server.js&gt;</code></li>\n<li>浏览器打开 client.html</li>\n</ol>\n<p>阅读源码和注解理解即可。</p>\n<p>要点提示：</p>\n<ul>\n<li>\n<p>Chapter 1：本章节演示了 AJAX 操作的基本步骤</p>\n</li>\n<li>\n<p>Chapter 2：演示使用 GET 方法传参与请求头设置</p>\n<p>打开 F12 查看请求标头，可以发现自定义标头已添加。</p>\n</li>\n</ul>\n<p>​\t<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20230426170053196.png\" alt=\"image-20230426170053196\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20230426170810095.png\" alt=\"image-20230426170810095\" /></p>\n<p>小技巧：解决 IE 缓存问题。神奇的 IE 浏览器会对 AJAX 进行缓存，解决方法：在请求地址后加上随机的参数，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;http://127.0.0.1:8000/server?t=&quot;</span>+<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>())</span><br></pre></td></tr></table></figure>\n<p>或者在调试器中禁用缓存。</p>\n<ul>\n<li>\n<p>Chapter 3：演示 AJAX 发送 POST 请求</p>\n</li>\n<li>\n<p>Chapter 4：演示 AJAX 超时设置以及设置网络异常时的回调</p>\n<p>调试器可以方便地断开网络：</p>\n</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/image-20230426183213807.png\" alt=\"image-20230426183213807\" /></p>\n<ul>\n<li>Chapter 5：防抖的演示。防抖在于防止用户反复点击按钮发送多个请求，这里的代码可以实现用户每次只能发送一个请求。</li>\n<li>Chapter 6：axios 演示</li>\n<li>Chapter 7：fetch 演示</li>\n</ul>\n<h1 id=\"第二章节跨域同源\"><a class=\"markdownIt-Anchor\" href=\"#第二章节跨域同源\"></a> 第二章节：跨域/同源</h1>\n<p>同源策略 (Same-Origin Policy) 最早由 Netscape 公司提出，是浏览器的一种安全策略，也就是当前网页 URL 和 AJAX 请求的目标 URL 必须<strong>同源</strong>（协议、域名、端口号必须完全相同）。AJAX 发送请求时默认遵循同源策略。违背同源策略就是<strong>跨域</strong>。</p>\n<p>跨域的解决方案有以下两种：</p>\n<ul>\n<li>\n<p>Jsonp：JSONP（JSON with Padding)，是一个非官方的跨域解决方案，只支持 get 请求。</p>\n<p>JSONp 怎么工作的？在网页有一些标签天生具有跨域能力，比如：img、link iframe、script。JSONP 就是利用 script 标签的跨域能力来发送请求的。</p>\n</li>\n<li>\n<p>CORS：CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 请求。跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。CORS 怎么工作的？CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p>\n</li>\n</ul>\n<p>本章节包含两个文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.js 服务器文件（就是上一章节那个）</span><br><span class=\"line\">same-origin-policy.html 案例</span><br><span class=\"line\">handle.js 示例js文件（需保证与server.js放在同一层级下）</span><br></pre></td></tr></table></figure>\n<p>案例食用说明：</p>\n<ol>\n<li>在终端输入命令执行 server.js <code>nodemon &lt;your server.js&gt;</code></li>\n<li>使用不同的端口或协议打开 same-origin-policy.html</li>\n</ol>\n<p>阅读源码和注解理解即可。</p>\n<p>要点提示：</p>\n<ul>\n<li>Chapter 1：同源策略示例</li>\n<li>Chapter 2：Jsonp 简单示例</li>\n<li>Chapter 3：原生使用 Jsonp</li>\n<li>Chapter 4：服务端设置 CROS 响应头实现跨域</li>\n</ul>\n<h1 id=\"文章代码\"><a class=\"markdownIt-Anchor\" href=\"#文章代码\"></a> 文章代码</h1>\n<p>链接：<a href=\"https://pan.baidu.com/s/1AsxAiua98_pyHzno7HCSFA?pwd=33gn\">https://pan.baidu.com/s/1AsxAiua98_pyHzno7HCSFA?pwd=33gn</a></p>\n<p>提取码：33gn</p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1m84y1w7Tb/?p=35&amp;spm_id_from=pageDriver&amp;vd_source=e03d48176855fc5349b27aef691f9cdb\">Day03-02. Ajax-Axios2_哔哩哔哩_bilibili</a></li>\n</ul>\n","raw":"---\ntitle: AJAX 的快速入门 - 代码驱动学习\ntags:\n  - AJAX\n  - JavaScript\n  - VSCode\n  - 源码案例驱动\n  - axios\ncover: 'https://cdn.gallery.uuanqin.top/img/ajaxcover.png'\ndescription: 通读代码快速理解 AJAX 原理\nabbrlink: 9f885dad\ncategories:\n  - 技术学习\ndate: 2023-05-02 20:39:49\n---\n\n> [!warning] ❄❄❄白雪警告❄❄❄\n> 原生的 AJAX 请求方式目前已经很少使用，一般使用 axios。本文包含部分 axios 内容。\n\n> 源码附于文末。\n# 什么是 AJAX？\n\nAJAX（Asynchronous JavaScript And XML，异步的 JavaScript 和 XML），读作”/eɪdʒæks/，也可以念为“阿贾克斯”。最大的特点就是**在不刷新网页的情况下向服务端发请求并获取结果**。AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。\n\n> Ajax 是一个令人误导的名称。Ajax 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。参考：[AJAX 简介 (w3school.com.cn)](https://www.w3school.com.cn/js/js_ajax_intro.asp)\n\n> XML 可扩展标记语言，XML 被设计用来传输和存储数据。XML 和 HTML 类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签，全都是自定义标签，用来表示一些数据。不过现在 AJAX 多使用 JSON 格式了。\n>\n> XML 简介：[XML系列教程 (w3school.com.cn)](https://www.w3school.com.cn/x.asp)\n\nAJAX 的优点：\n\n* 可以无需刷新页面而与服务器端进行通信。\n* 允许你根据用户事件来更新部分页面内容。\n\nAJAX 的缺点：\n\n* 没有浏览历史，不能回退\n* 存在跨域问题 (同源)\n* SEO 不友好\n\n应用：\n\n1. 搜索联想\n2. 用户名是否可用\n\n同步操作和异步操作的区别：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240502182625.webp)\n\n# 学习准备\n\n## 预备知识\n\n本文章在于通过代码实践快速掌握 AJAX 基本使用。阅读前你需要具备一定的 HTML、CSS、JS 知识，了解 HTTP 协议的请求报文和响应报文的结构。\n\n* JS 基础请看：[JavaScript 基础 - 学习 Web 开发 | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics)\n* HTTP 结构：[HTTP 消息 - HTTP | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Messages)\n\n学习前我们需要懂得使用 Chrome、Edge 浏览器开发者模式（按 F12），查看查看 HTTP 报文接收和发送情况。\n\n本文章主要通过可运行的案例代码以驱动学习，学习者可以通过理解代码并试图在本机运行以加深理解。建议你在学习时打开 F12 调试窗口，查看控制台输出与网络请求。\n\n本篇文章的实践内容参考：https://www.bilibili.com/video/BV1WC4y1b78y，视频时长约 3 小时。\n\n## 软件安装\n\n### Node.js\n\n安装 Node.js：[Node.js (nodejs.org)](https://nodejs.org/en)。\n\n安装完毕后在终端输入命令：\n\n```sh\nnode -v\n```\n\n若显示版本号即安装成功。\n\n### Express 服务端框架\n\n为了更好的演示 AJAX 操作，我们需要自己启动一个服务端。接下来的实验我们只需要对这个服务端进行消息的发送。在这一小节中，我们只需要了解 Express 的最小知识。\n\n安装前保证安装了 Node.js，输入：\n\n```sh\nnpm i express\n```\n\nnpm 是 Node.js 提供的包管理工具。通过该命令安装 express。\n\n新建 js 文件，可以将其命名为 server.js，内容如下：\n\n```js\n// 1. 引入express\nconst express = require('express');\n\n// 2. 创建应用对象\nconst app = express();\n\n// 3. 创建路由规则\n// request是对请求报文的封装，response是对响应报文的封装\napp.get('/server',(request,response)=>{\n    response.setHeader('Access-Control-Allow-Origin',\"*\");\n\n    //设置一个简单的响应\n    response.send('HELLO AJAX!')\n})\n\n// 4. 监听端口启动服务\napp.listen(8000,()=>{\n    console.log(\"服务已经启动，8000端口监听中...\")\n})\n```\n\n打开终端，执行以下命令启动服务：\n\n```\nnode <your server.js> \n```\n\n终端输出 \" 服务已经启动，8000 端口监听中...\"。打开浏览器输入 127.0.0.1:8000，若显示 '‘'HELLO AJAX!'，则服务启动成功。\n\n注意，每次修改 server.js 文件，**保存后**需要关闭当前正在运行的服务，再次启动 server.js 才能应用新的更改。如果我们想要每次修改 server.js 保存后自动重启服务器，我们可以安装 modemon 进行解决。\n\n常见错误：\n\n* **启动失败 address already in use :::8000**\n\n  这表明 8000 端口已经被占用，你可能忘记中断之前打开的服务，尝试中断之前的服务，或换一个端口号尝试。\n\n* **输入命令后没有反应**\n\n  检查你是不是粘贴后没有保存。\n\n### nodemon 工具安装\n\n官网链接：[nodemon - npm (npmjs.com)](https://www.npmjs.com/package/nodemon)\n\n安装前保证安装好了 Node.js。安装命令：\n\n```sh\nnpm install -g nodemon\n```\n\n以后每次启动 server.js 脚本可以改为使用以下命令：\n\n```sh\nnodemon <your server.js>\n```\n\n### axios\n\naxio 是前端热门的 AJAX 工具库：[Axios中文文档 | Axios中文网 (axios-http.cn)](https://www.axios-http.cn/)\n\n使用 axio 我们可以直接通过页面链接引用。\n\n但是官网给的 CDN 链接是在国外的，所以我们可以通过 [BootCDN](https://www.bootcdn.cn/) 查询并替换网址。\n\n```\nhttps://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.min.js\n```\n\n### 【非必须】VSCode 插件 -Live Server\n\n如果你是在 VSCode 环境下进行操作的话，可以安装一个 Live Server 插件。这个插件右键可以将 html 网页用服务器打开，以模拟跨域同源实验。\n\n# 第一章节：AJAX 请求基本实践\n\n本章节包含两个文件：\n\n```\nserver.js 服务器文件\nclient.html 案例\n```\n\n案例食用说明：\n\n1. 在终端输入命令执行 server.js `nodemon <your server.js>`\n2. 浏览器打开 client.html\n\n阅读源码和注解理解即可。\n\n要点提示：\n\n* Chapter 1：本章节演示了 AJAX 操作的基本步骤\n* Chapter 2：演示使用 GET 方法传参与请求头设置\n\n  打开 F12 查看请求标头，可以发现自定义标头已添加。\n\n​\t![image-20230426170053196](https://cdn.gallery.uuanqin.top/img/image-20230426170053196.png)\n\n![image-20230426170810095](https://cdn.gallery.uuanqin.top/img/image-20230426170810095.png)\n\n小技巧：解决 IE 缓存问题。神奇的 IE 浏览器会对 AJAX 进行缓存，解决方法：在请求地址后加上随机的参数，比如：\n\n```js\nxhr.open(\"GET\",\"http://127.0.0.1:8000/server?t=\"+Date.now())\n```\n\n或者在调试器中禁用缓存。\n\n* Chapter 3：演示 AJAX 发送 POST 请求\n* Chapter 4：演示 AJAX 超时设置以及设置网络异常时的回调\n\n  调试器可以方便地断开网络：\n\n![image-20230426183213807](https://cdn.gallery.uuanqin.top/img/image-20230426183213807.png)\n\n* Chapter 5：防抖的演示。防抖在于防止用户反复点击按钮发送多个请求，这里的代码可以实现用户每次只能发送一个请求。\n* Chapter 6：axios 演示\n* Chapter 7：fetch 演示\n\n# 第二章节：跨域/同源\n\n同源策略 (Same-Origin Policy) 最早由 Netscape 公司提出，是浏览器的一种安全策略，也就是当前网页 URL 和 AJAX 请求的目标 URL 必须**同源**（协议、域名、端口号必须完全相同）。AJAX 发送请求时默认遵循同源策略。违背同源策略就是**跨域**。\n\n跨域的解决方案有以下两种：\n\n* Jsonp：JSONP（JSON with Padding)，是一个非官方的跨域解决方案，只支持 get 请求。\n\n  JSONp 怎么工作的？在网页有一些标签天生具有跨域能力，比如：img、link iframe、script。JSONP 就是利用 script 标签的跨域能力来发送请求的。\n\n* CORS：CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持 get 和 post 请求。跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源。CORS 怎么工作的？CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。\n\n本章节包含两个文件：\n\n```\nserver.js 服务器文件（就是上一章节那个）\nsame-origin-policy.html 案例\nhandle.js 示例js文件（需保证与server.js放在同一层级下）\n```\n\n案例食用说明：\n\n1. 在终端输入命令执行 server.js `nodemon <your server.js>`\n2. 使用不同的端口或协议打开 same-origin-policy.html\n\n阅读源码和注解理解即可。\n\n要点提示：\n\n- Chapter 1：同源策略示例\n- Chapter 2：Jsonp 简单示例\n- Chapter 3：原生使用 Jsonp\n- Chapter 4：服务端设置 CROS 响应头实现跨域\n\n# 文章代码\n\n链接：https://pan.baidu.com/s/1AsxAiua98_pyHzno7HCSFA?pwd=33gn\n\n提取码：33gn\n\n# 本文参考\n\n- [Day03-02. Ajax-Axios2_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1m84y1w7Tb/?p=35&spm_id_from=pageDriver&vd_source=e03d48176855fc5349b27aef691f9cdb)","categories":[{"name":"技术学习","api":"api/categories/技术学习.json"}],"tags":[{"name":"JavaScript","api":"api/tags/JavaScript.json"},{"name":"VSCode","api":"api/tags/VSCode.json"},{"name":"AJAX","api":"api/tags/AJAX.json"},{"name":"源码案例驱动","api":"api/tags/源码案例驱动.json"},{"name":"axios","api":"api/tags/axios.json"}]},"api":"api/posts/p/9f885dad.json"}