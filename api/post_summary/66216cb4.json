{"title":"SpringBoot 中的 IoC & DI 入门","tags":["SpringBoot","Java","Bean","IoC","DI"],"cover":"https://cdn.gallery.uuanqin.top/img/202409050030052.webp","description":"入门案例感受 IOC 容器的基本工作方式。","categories":["技术学习"],"abbrlink":"66216cb4","date":"2024-08-02T00:40:03.000Z","top_img":null,"summary":"> [!notice] SpringBoot 的两大核心 > > 1. IoC：控制反转 > 2. [[SpringBoot 中的面向切面编程（AOP）|AOP]]：面向切面编程 基本概念 IoC （Inversion of Control ）即控制反转/反转控制。它是一种思想不是一个技术实现。描述的是 Java 开发领域对象的创建以及管理的问题 控制 ：指的是对象创建（实例化、管理）的权力 反转 ：控制权交给外部环境（IoC 容器） IoC 最常见以及最合理的实现方式叫做依赖注入（Dependency Injection，简称 DI）。 三层架构： Controller：控制层，接收前端发送的请求，对请求进行处理，并响应数据。 Service：业务逻辑层，处理具体的业务逻辑。 Dao：数据访问层（Data Access Object）（持久层），负责数据访问操作，包括数据的增、删、改、查。 分层解耦： 内聚：软件中各个功能模块内部的功能联系。 耦合：衡量软件中各个层/模块之间的依赖、关联的程度。 软件设计原则：高内聚低耦合 重要概念： 控制反转：Inversion Of Control，简称 IoC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。这个容器我们称为 IoC 容器，或者 Spring 容器。 依赖注入：Dependency Injection，简称 Dl。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。 Bean 对象：IoC 容器中创建、管理的对象，称之为 bean。 IoC/DI 的使用 基础使用： `@Component`：将当前类（Service 层、Dao 层）交给 IoC 容器管理，成为 IoC 容器中的 bean。实现控制反转。 `@Autowired`：（为 Controller 和 Service 注入）运行时，IoC 容器会提供该类型的 bean 对象，并赋值给该变量。实现依赖注入。 > 所以说，切换业务实现类时，直接把需要用的实现类上加上 `@Component` 就行。..."}