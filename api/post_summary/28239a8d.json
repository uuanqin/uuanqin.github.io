{"title":"面向对象 OOP","tags":["Java","Python","多态","设计模式","OOP","面向对象编程","面向过程编程"],"description":"这门课不知道看了多少遍了","katex":false,"abbrlink":"28239a8d","cover":"https://cdn.gallery.uuanqin.top/img/202506102236358.webp","categories":["高质量代码及设计模式"],"date":"2021-11-17T21:26:10.000Z","top_img":null,"summary":"英文缩略语概览： 面向对象编程：OOP Object Oriented Programming 面向对象编程语言：OOPL Object Oriented Programming Language 面向对象分析：OOA Object Oriented Analysis 面向对象设计：OOD Object Oriented Design OOA、OOD、OOP 三个连在一起就是面向对象分析、设计、编程（实现），正好是面向对象软件开发要经历的三个阶段。 四大特性 面向对象的四大特性：继承、多态、封装、抽象。但有些人认为抽象不算特性之一。 封装 信息隐藏或者数据访问保护，类通过暴露有限的访问接口，授权外部仅能通过类提供的方式（函数）来访问内部信息或数据，保证数据的一致性。 获取类的信息时，我们尽量只能通过对象变量来访问这个对象的变量或方法，不通过引用变量就无法访问其中的变量或方法。对于访问者而言，这个对象是封装成一个整体的，这正体现了面向对象的程序设计的「封装性」。 对于封装的特性，编程语言需要一定的语法机制支持。Java 中的修饰符 `public`，`private`，`protected` 可实现封装。 封装的意义在于保护数据不被修改，提高代码的可维护性。仅暴露有限的必要接口，提供更少的承诺，提高类的易用性。这样的封装并不是在自己防自己，只要多一个人开发就要设防，防止傻瓜操作影响到自己的类。 抽象 隐藏方法的具体实现，让使用者只需要关心方法提供了哪些功能，不需要知道这些功能是如何实现的。 抽象可以通过接口类或者抽象类来实现，但其实也并不需要特殊的语法机制来支持，比如一般编程语言中的函数机制也可理解为抽象。Java 中使用 `interface` 和 `abstract` 关键字实现。 意义在于提高代码的可扩展性，可维护性，修改实现不需要改变定义，减少代码的改动范围；它也是处理复杂系统的有效手段，能够有效地过滤不必要关注的信息。 > 面向对象中，有时并不愿意把抽象当做特性，是因为抽象是一个非常通用的设计思想，并不需要编程语言提供特殊的语法机制支持，没有很强的“特异性”。 继承 继承表示类之间的 is-a 关系，分两种模式：单继承和多继承。 单继承：一个子类只继承一个父类。 多继承：一个子类可以继承多个父类。..."}