{"title":"Scrapy-入门篇","tags":["scrapy","python","css","XPath"],"cover":"https://cdn.gallery.uuanqin.top/img/20240220045858.webp","description":"创建第一个 Scrapy 爬虫","abbrlink":"cf3e4a7b","categories":["核心协同"],"date":"2024-02-20T00:54:08.000Z","top_img":null,"summary":"Scrapy (/ˈskreɪpaɪ/) 是一个爬取网页并提取结构化数据的应用框架，使用 Python 编写。官方文档：Scrapy at a glance — Scrapy 2.11.1 documentation。网上有许多教程，爬虫做是做出来了，但其中的原理可能讲得还不够清晰。我认为阅读官方文档将更有助于理解。 文章内容主要基于官方文档第一章 FIRST STEPS 进行补充。本文将通过爬取英文名人名言网站 https://quotes.toscrape.com 的例子初步理解 Scrapy，学会自己编写一个简单的爬虫。 > 框架：是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。基于框架进行开发，更加快捷、更加高效。 安装 可以使用 pip 进行安装： 推荐单独为 Scrapy 创建一个 Python 虚拟环境（venv），不管是在哪个平台，以避免和系统中的其它包产生冲突。 创建 Scrapy 项目 在你想要创建 Scrapy 项目的位置执行以下命令： 成功效果如图： 这时将会多出一个名为 tutorial，其内容如下： 我们需要定义一个类（这个类必须是 `scrapy.Spider` 的子类），Scrapy 使用这个类的信息去爬取网站。这个类定义了： 爬取的第一个网站 【可选】如何继续生成下一个需要爬取的网页 【可选】如何解析下载下来的页面并提取信息 我们可以在文件夹 `tutorial/spiders` 下创建我们第一个爬虫，文件名为 `quotes_spider.py`： 回到项目的顶层目录，执行以下命令运行我们刚刚创建的爬虫： 项目下多出以下两个文件，这两个文件就是两个网站的 HTML 数据。我们将在下一小节实现对数据的提取。 让我们看看执行这个命令发生了什么？ `start_requests()` 方法返回 `scrapy.Request` 类供 Scrapy 进行调度 收到每一个 Request 的回复（response）后，Scrapy 实例化 `Response`，并调用对应 Request 的回调函数（在这个例子中回调函数为 `parse()`），将 `Response` 作为回调函数中的参数。..."}