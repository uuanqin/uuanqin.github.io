{"data":{"title":"STM32 延时函数（FreeRTOS）","slug":"嵌入式/STM32 延时函数（FreeRTOS）","description":"微秒、毫秒级别的延时","date":"2024-04-04T14:07:11.000Z","updated":"2024-05-01T05:53:13.483Z","language":"zh-CN","comments":true,"url":"p/c5d0cc56/","cover":"https://cdn.gallery.uuanqin.top/img/20240404231737.webp","images":[],"content":"<h1 id=\"标准库freertos\"><a class=\"markdownIt-Anchor\" href=\"#标准库freertos\"></a> 标准库（FreeRTOS）</h1>\n<p>试用前需要调用 <code>SysTick_Init(SYSCLK)</code> 进行初始化，SYSCLK 一般选择 72。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _SysTick_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _SysTick_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span>                  <span class=\"comment\">// Device header</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//#include &quot;system.h&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SysTick_Init</span><span class=\"params\">(<span class=\"type\">uint8_t</span> SYSCLK)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_ms</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nms)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_us</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nus)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_xms</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nms)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;SysTick.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;FreeRTOS.h&quot;</span>\t<span class=\"comment\">//FreeRTOS使用\t\t  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;task.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">uint8_t</span>  fac_us=<span class=\"number\">0</span>;\t\t\t\t\t\t\t<span class=\"comment\">//us延时倍乘数\t\t\t   </span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">uint16_t</span> fac_ms=<span class=\"number\">0</span>;\t\t\t\t\t\t\t<span class=\"comment\">//ms延时倍乘数</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化延迟函数</span></span><br><span class=\"line\"><span class=\"comment\">//SYSTICK的时钟固定为AHB时钟，基础例程里面SYSTICK时钟频率为AHB/8</span></span><br><span class=\"line\"><span class=\"comment\">//SYSCLK:系统时钟频率</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">SysTick_Init</span><span class=\"params\">(<span class=\"type\">uint8_t</span> SYSCLK)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> reload;</span><br><span class=\"line\">\tSysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);<span class=\"comment\">//选择外部时钟  HCLK</span></span><br><span class=\"line\">\tfac_us=SystemCoreClock/<span class=\"number\">1000000</span>;\t\t\t\t<span class=\"comment\">//不论是否使用OS,fac_us都需要使用</span></span><br><span class=\"line\">\treload=SystemCoreClock/<span class=\"number\">1000000</span>;\t\t\t\t<span class=\"comment\">//每秒钟的计数次数 单位为M  </span></span><br><span class=\"line\">\treload*=<span class=\"number\">1000000</span>/configTICK_RATE_HZ;\t\t\t<span class=\"comment\">//根据configTICK_RATE_HZ设定溢出时间</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">//reload为24位寄存器,最大值:16777216,在72M下,约合0.233s左右\t</span></span><br><span class=\"line\">\tfac_ms=<span class=\"number\">1000</span>/configTICK_RATE_HZ;\t\t\t\t<span class=\"comment\">//代表OS可以延时的最少单位\t   </span></span><br><span class=\"line\"></span><br><span class=\"line\">\tSysTick-&gt;CTRL|=SysTick_CTRL_TICKINT_Msk;   \t<span class=\"comment\">//开启SYSTICK中断</span></span><br><span class=\"line\">\tSysTick-&gt;LOAD=reload; \t\t\t\t\t\t<span class=\"comment\">//每1/configTICK_RATE_HZ秒中断一次\t</span></span><br><span class=\"line\">\tSysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk;   \t<span class=\"comment\">//开启SYSTICK\t\t\t\t   </span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//延时nus</span></span><br><span class=\"line\"><span class=\"comment\">//nus:要延时的us数.\t</span></span><br><span class=\"line\"><span class=\"comment\">//nus:0~204522252(最大值即2^32/fac_us@fac_us=168)\t    \t\t\t\t\t\t\t\t   </span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_us</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nus)</span></span><br><span class=\"line\">&#123;\t\t</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> ticks;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> told,tnow,tcnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> reload=SysTick-&gt;LOAD;\t\t\t\t<span class=\"comment\">//LOAD的值\t    \t </span></span><br><span class=\"line\">\tticks=nus*fac_us; \t\t\t\t\t\t<span class=\"comment\">//需要的节拍数 </span></span><br><span class=\"line\">\ttold=SysTick-&gt;VAL;        \t\t\t\t<span class=\"comment\">//刚进入时的计数器值</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttnow=SysTick-&gt;VAL;\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(tnow!=told)</span><br><span class=\"line\">\t\t&#123;\t    </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(tnow&lt;told)tcnt+=told-tnow;\t<span class=\"comment\">//这里注意一下SYSTICK是一个递减的计数器就可以了.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> tcnt+=reload-tnow+told;\t    </span><br><span class=\"line\">\t\t\ttold=tnow;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(tcnt&gt;=ticks)<span class=\"keyword\">break</span>;\t\t\t<span class=\"comment\">//时间超过/等于要延迟的时间,则退出.</span></span><br><span class=\"line\">\t\t&#125;  </span><br><span class=\"line\">\t&#125;;\t\t\t\t\t\t\t\t\t\t    </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//延时nms</span></span><br><span class=\"line\"><span class=\"comment\">//nms:要延时的ms数</span></span><br><span class=\"line\"><span class=\"comment\">//nms:0~65535</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_ms</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nms)</span></span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED)<span class=\"comment\">//系统已经运行</span></span><br><span class=\"line\">\t&#123;\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(nms&gt;=fac_ms)\t\t\t\t\t\t<span class=\"comment\">//延时的时间大于OS的最少时间周期 </span></span><br><span class=\"line\">\t\t&#123; </span><br><span class=\"line\">   \t\t\tvTaskDelay(nms/fac_ms);\t \t\t<span class=\"comment\">//FreeRTOS延时</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnms%=fac_ms;\t\t\t\t\t\t<span class=\"comment\">//OS已经无法提供这么小的延时了,采用普通方式延时    </span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDelay_us((<span class=\"type\">uint32_t</span>)(nms*<span class=\"number\">1000</span>));\t\t\t\t<span class=\"comment\">//普通方式延时</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//延时nms,不会引起任务调度</span></span><br><span class=\"line\"><span class=\"comment\">//nms:要延时的ms数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">Delay_xms</span><span class=\"params\">(<span class=\"type\">uint32_t</span> nms)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">uint32_t</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;nms;i++) Delay_us(<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>FreeRTOS 的微秒级延时：<code>vTaskDelay()</code>。</p>\n<h1 id=\"hal\"><a class=\"markdownIt-Anchor\" href=\"#hal\"></a> HAL</h1>\n<p>把系统时钟配置成 72Mhz。这里以使用 TIM1 时钟为例。CubeMX 配置：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240404224201.webp\" alt=\"image.png\" /></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> _DELAY_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _DELAY_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;tim.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">delay_us</span><span class=\"params\">(<span class=\"type\">uint16_t</span> nus)</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/*  _DELAY_H  */</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;delay.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">delay_us</span><span class=\"params\">(<span class=\"type\">uint16_t</span> nus)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__HAL_TIM_SET_COUNTER(&amp;htim1, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t__HAL_TIM_ENABLE(&amp;htim1);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (__HAL_TIM_GET_COUNTER(&amp;htim1) &lt; nus)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t__HAL_TIM_DISABLE(&amp;htim1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>至于毫秒级延时可以使用 HAL 库方法延时。毫秒级延时 FreeRTOS 还有另一种延时方法 <code>osDelay</code>。</p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_27849725/article/details/121993479\">四、【STM32 HAL库开发】TIM定时器：实现微秒延时___hal_tim_get_counter-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/m0_59766260/article/details/134098825\">FreeRTOS中osDelay和HAL_Delay的区别-CSDN博客</a></li>\n</ul>\n","raw":"---\ntitle: STM32 延时函数（FreeRTOS）\ntags:\n  - C\n  - STM32\n  - FreeRTOS\ncover: 'https://cdn.gallery.uuanqin.top/img/20240404231737.webp'\ncategories:\n  - 嵌入式\nabbrlink: c5d0cc56\ndate: 2024-04-04 22:07:11\ndescription: 微秒、毫秒级别的延时\ntop_img:\n---\n\n# 标准库（FreeRTOS）\n\n试用前需要调用 `SysTick_Init(SYSCLK)` 进行初始化，SYSCLK 一般选择 72。\n\n```c\n#ifndef _SysTick_H\n#define _SysTick_H\n#include \"stm32f10x.h\"                  // Device header\n\n//#include \"system.h\"\n\nvoid SysTick_Init(uint8_t SYSCLK);\nvoid Delay_ms(uint32_t nms);\nvoid Delay_us(uint32_t nus);\nvoid Delay_xms(uint32_t nms);\n\n#endif\n\n```\n\n```c\n#include \"SysTick.h\"\n#include \"FreeRTOS.h\"\t//FreeRTOS使用\t\t  \n#include \"task.h\"\nstatic uint8_t  fac_us=0;\t\t\t\t\t\t\t//us延时倍乘数\t\t\t   \nstatic uint16_t fac_ms=0;\t\t\t\t\t\t\t//ms延时倍乘数\n\n\n//初始化延迟函数\n//SYSTICK的时钟固定为AHB时钟，基础例程里面SYSTICK时钟频率为AHB/8\n//SYSCLK:系统时钟频率\nvoid SysTick_Init(uint8_t SYSCLK)\n{\n\tuint32_t reload;\n\tSysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);//选择外部时钟  HCLK\n\tfac_us=SystemCoreClock/1000000;\t\t\t\t//不论是否使用OS,fac_us都需要使用\n\treload=SystemCoreClock/1000000;\t\t\t\t//每秒钟的计数次数 单位为M  \n\treload*=1000000/configTICK_RATE_HZ;\t\t\t//根据configTICK_RATE_HZ设定溢出时间\n\t\t\t\t\t\t\t\t\t\t\t\t//reload为24位寄存器,最大值:16777216,在72M下,约合0.233s左右\t\n\tfac_ms=1000/configTICK_RATE_HZ;\t\t\t\t//代表OS可以延时的最少单位\t   \n\n\tSysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   \t//开启SYSTICK中断\n\tSysTick->LOAD=reload; \t\t\t\t\t\t//每1/configTICK_RATE_HZ秒中断一次\t\n\tSysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;   \t//开启SYSTICK\t\t\t\t   \n}\t\t\t\t\t\t\t\t    \n\n\n//延时nus\n//nus:要延时的us数.\t\n//nus:0~204522252(最大值即2^32/fac_us@fac_us=168)\t    \t\t\t\t\t\t\t\t   \nvoid Delay_us(uint32_t nus)\n{\t\t\n\tuint32_t ticks;\n\tuint32_t told,tnow,tcnt=0;\n\tuint32_t reload=SysTick->LOAD;\t\t\t\t//LOAD的值\t    \t \n\tticks=nus*fac_us; \t\t\t\t\t\t//需要的节拍数 \n\ttold=SysTick->VAL;        \t\t\t\t//刚进入时的计数器值\n\twhile(1)\n\t{\n\t\ttnow=SysTick->VAL;\t\n\t\tif(tnow!=told)\n\t\t{\t    \n\t\t\tif(tnow<told)tcnt+=told-tnow;\t//这里注意一下SYSTICK是一个递减的计数器就可以了.\n\t\t\telse tcnt+=reload-tnow+told;\t    \n\t\t\ttold=tnow;\n\t\t\tif(tcnt>=ticks)break;\t\t\t//时间超过/等于要延迟的时间,则退出.\n\t\t}  \n\t};\t\t\t\t\t\t\t\t\t\t    \n}  \n//延时nms\n//nms:要延时的ms数\n//nms:0~65535\nvoid Delay_ms(uint32_t nms)\n{\t\n\tif(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED)//系统已经运行\n\t{\t\t\n\t\tif(nms>=fac_ms)\t\t\t\t\t\t//延时的时间大于OS的最少时间周期 \n\t\t{ \n   \t\t\tvTaskDelay(nms/fac_ms);\t \t\t//FreeRTOS延时\n\t\t}\n\t\tnms%=fac_ms;\t\t\t\t\t\t//OS已经无法提供这么小的延时了,采用普通方式延时    \n\t}\n\tDelay_us((uint32_t)(nms*1000));\t\t\t\t//普通方式延时\n}\n\n//延时nms,不会引起任务调度\n//nms:要延时的ms数\nvoid Delay_xms(uint32_t nms)\n{\n\tuint32_t i;\n\tfor(i=0;i<nms;i++) Delay_us(1000);\n}\n\n```\n\nFreeRTOS 的微秒级延时：`vTaskDelay()`。\n\n# HAL\n\n把系统时钟配置成 72Mhz。这里以使用 TIM1 时钟为例。CubeMX 配置：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240404224201.webp)\n\n```c\n#ifndef _DELAY_H\n#define _DELAY_H\n#include \"tim.h\"\nvoid delay_us(uint16_t nus);\n#endif /*  _DELAY_H  */\n\n```\n\n```c\n#include \"delay.h\"\n\nvoid delay_us(uint16_t nus)\n{\n\t__HAL_TIM_SET_COUNTER(&htim1, 0);\n\t__HAL_TIM_ENABLE(&htim1);\n\twhile (__HAL_TIM_GET_COUNTER(&htim1) < nus)\n\t{\n\t}\n\t__HAL_TIM_DISABLE(&htim1);\n}\n\n```\n\n至于毫秒级延时可以使用 HAL 库方法延时。毫秒级延时 FreeRTOS 还有另一种延时方法 `osDelay`。\n\n# 本文参考\n- [四、【STM32 HAL库开发】TIM定时器：实现微秒延时___hal_tim_get_counter-CSDN博客](https://blog.csdn.net/qq_27849725/article/details/121993479)\n- [FreeRTOS中osDelay和HAL_Delay的区别-CSDN博客](https://blog.csdn.net/m0_59766260/article/details/134098825)\n\n","categories":[{"name":"嵌入式","api":"api/categories/嵌入式.json"}],"tags":[{"name":"C","api":"api/tags/C.json"},{"name":"STM32","api":"api/tags/STM32.json"},{"name":"FreeRTOS","api":"api/tags/FreeRTOS.json"}]},"api":"api/posts/p/c5d0cc56.json"}