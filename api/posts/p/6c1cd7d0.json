{"data":{"title":"STM32 工程的创建 - 基于寄存器或标准库","slug":"嵌入式/STM32 工程的创建 - 基于寄存器或标准库","description":"附两种方式的 LED 点灯。","date":"2024-04-02T06:12:46.000Z","updated":"2024-04-04T15:09:16.434Z","language":"zh-CN","comments":true,"url":"p/6c1cd7d0/","cover":"https://cdn.gallery.uuanqin.top/img/20240404230910.webp","images":[],"content":"<p>目前 STM32 的开发方式有 3 个层次：</p>\n<ol>\n<li>基于寄存器方式。极少的人使用这种形式。这种方式最底层、最直接、效率更高，但 STM32 寄存器十分复杂，一般不建议采取这种方式。</li>\n<li>基于标准库（库函数）方式。使用 ST 官方提供封装好的函数，通过调用函数间接配置寄存器。这种方式对开发人员比较友好，有利于提高开发效率。</li>\n<li>基于 HAL 库方式。HAL 库是 ST 公司目前主力推的开发方式，全称就是 Hardware Abstraction Layer（抽象印象层）。可以使用图形化界面快速配置 STM32，隐藏底层的逻辑。</li>\n</ol>\n<p>这里介绍基于寄存器或标准库方式创建 STM32 工程（以 STM32F103C8T6 为例，其它型号大差不差），并通过点灯演示示例。基于 HAL 库方式请移步：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/53832aef/\"><span class=\"bilink-pop-up\">站内文章</span>STM32 工程的创建 - 基于 HAL 库</a></p>\n<p>软件安装提示：阅读前请准备好 Keil uVision5 MDK 的安装（可以和 Keil C51 安在一起），软件需破解。安装和破解过程不再赘述。Keil 的一些使用技巧可以看这篇文章：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/9c0a1431/\"><span class=\"bilink-pop-up\">站内文章</span>Keil 的使用技巧与问题解决</a></p>\n<p>LED 点灯实验工具准备：</p>\n<ol>\n<li>ST-LINK</li>\n<li>STM32（以 STM32F103C8T6 最小核心板为例）</li>\n<li>杜邦线若干</li>\n</ol>\n<h1 id=\"固件库下载\"><a class=\"markdownIt-Anchor\" href=\"#固件库下载\"></a> 固件库下载</h1>\n<p>进入官网： <a href=\"https://www.st.com/\">https://www.st.com/</a></p>\n<p>右上角选择中文。根据菜单选择：工具与软件&gt;嵌入式软件&gt;STM32 微控制器软件。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402142752.webp\" alt=\"image.png\" /></p>\n<p>选择标准外设软件库，选择 F1 系列。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402142956.webp\" alt=\"image.png\" /></p>\n<p>点击获取最新版本进行下载。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402142533.webp\" alt=\"image.png\" /></p>\n<p>解压后得到固件库文件夹：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STM32F10x_StdPeriph_Lib_V3.6.0</span><br><span class=\"line\">│  Package_license.html</span><br><span class=\"line\">│  Package_license.md</span><br><span class=\"line\">│  Release_Notes.html          # 发行说明</span><br><span class=\"line\">│  stm32f10x_stdperiph_lib_um.chm # 使用手册</span><br><span class=\"line\">├─Libraries</span><br><span class=\"line\">│  ├─CMSIS</span><br><span class=\"line\">│  │  ├─CM3 # Cortex-M3</span><br><span class=\"line\">│  │  │  ├─CoreSupport # 【C】 内核的寄存器描述文件</span><br><span class=\"line\">│  │  │  │      core_cm3.c</span><br><span class=\"line\">│  │  │  │      core_cm3.h</span><br><span class=\"line\">│  │  │  └─DeviceSupport</span><br><span class=\"line\">│  │  │      └─ST</span><br><span class=\"line\">│  │  │          └─STM32F10x</span><br><span class=\"line\">│  │  │              │  LICENSE.txt</span><br><span class=\"line\">│  │  │              │  Release_Notes.html</span><br><span class=\"line\">│  │  │              │  stm32f10x.h # 【B】STM32 外设寄存器描述文件。和51单片机REGX52.H的作用相似，描述寄存器和对应的地址</span><br><span class=\"line\">│  │  │              │  system_stm32f10x.c # 【B】用于配置时钟</span><br><span class=\"line\">│  │  │              │  system_stm32f10x.h # 【B】用于配置时钟</span><br><span class=\"line\">│  │  │              └─startup</span><br><span class=\"line\">│  │  │                  ├─arm   # 【A】STM32的启动文件</span><br><span class=\"line\">......</span><br><span class=\"line\">│  │  └─Documentation</span><br><span class=\"line\">│  └─STM32F10x_StdPeriph_Driver # stm32 标准外设驱动</span><br><span class=\"line\">│      │  LICENSE.txt</span><br><span class=\"line\">│      │  Release_Notes.html</span><br><span class=\"line\">│      │</span><br><span class=\"line\">│      ├─inc # 【E】库函数的头文件。</span><br><span class=\"line\">│      │      misc.h</span><br><span class=\"line\">......</span><br><span class=\"line\">│      │</span><br><span class=\"line\">│      └─src # 【D】库函数的源文件。除了misc.c，其余都是内核外的外设库函数</span><br><span class=\"line\">│              misc.c    # 内核库函数。</span><br><span class=\"line\">......</span><br><span class=\"line\">├─Project # 官方提供的工程示例和模板</span><br><span class=\"line\">│  ├─STM32F10x_StdPeriph_Examples</span><br><span class=\"line\">│  └─STM32F10x_StdPeriph_Template</span><br><span class=\"line\">│      │  LICENSE.txt</span><br><span class=\"line\">│      │  main.c</span><br><span class=\"line\">│      │  Release_Notes.html</span><br><span class=\"line\">│      │  stm32f10x_conf.h  # 【F】配置库函数头文件的包含关系</span><br><span class=\"line\">│      │  stm32f10x_it.c    # 【F】存放中断函数</span><br><span class=\"line\">│      │  stm32f10x_it.h    # 【F】存放中断函数</span><br><span class=\"line\">│      │  system_stm32f10x.c</span><br><span class=\"line\">├─Utilities # 官方评估板的相关例程</span><br><span class=\"line\">│  └─STM32_EVAL</span><br><span class=\"line\">└─_htmresc  </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意上面带【A】【B】【C】【D】【E】【F】标号的文件位置，后面会有相应操作。</p>\n<h1 id=\"新建项目\"><a class=\"markdownIt-Anchor\" href=\"#新建项目\"></a> 新建项目</h1>\n<p>打开 Keil，选择 Project&gt;New uVision project。</p>\n<ul>\n<li>选择你要存放项目的文件夹（这个文件夹下有多个项目）</li>\n<li>再<strong>新建一个文件夹</strong>（这个文件夹存放一个项目的所有东西，文件夹名称以后可以方便改）</li>\n<li>选择新的空文件夹进入，设置工程的名字（比如这里为 <code>STM32-proj</code>）。工程的名字可以设置为通用的名字（以后不太方便改）。</li>\n</ul>\n<p>注意路径名称 <strong>不要有中文</strong>。</p>\n<p>新建工程后，选择 STM32F103C8：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402145049.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>我们可以把弹出的新建工程小助手给关掉，这里暂时不演示其的使用。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402145240.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>我们就得到以下文件结构：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402150100.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<h1 id=\"库函数移植\"><a class=\"markdownIt-Anchor\" href=\"#库函数移植\"></a> 库函数移植</h1>\n<p>接下来我们将新建多个文件夹以对新文件进行分类，每个人有不同的风格，我这里就演示 <a href=\"https://jiangxiekeji.com/\">江科大</a> 的风格。</p>\n<p>在项目文件夹中新建 Start 文件夹，并按照以下要求进行操作：</p>\n<ul>\n<li>把固件库文件夹中【A】文件夹下的所有 <code>.s</code> 文件复制到这里。</li>\n<li>把固件库文件夹中【B】标识的三个文件也复制到这里。</li>\n<li>把固件库文件夹中【C】文件夹下的所有文件（2 个文件）复制到这里。</li>\n</ul>\n<p>回到 Keil，现在将我们新建的 Start 添加到工程。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402151820.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<blockquote>\n<p>至于确定自己芯片型号的缩写，可看文末介绍。STM32F103C8T6 应选择后缀为 <code>md</code> 的启动文件。</p>\n</blockquote>\n<p>同样的方法也将这几个也加进来，结果如下图：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402152131.webp\" alt=\"image.png\" width=\"301px\" /></p>\n<p>上图中 Start 组里的文件我们是不需要进行修改的。（我们还可以在电脑文件管理器中将这些文件设置为只读，这样可以避免误修改。这时上图的文件图标上就会带有一把小钥匙，表示这是只读文件。）</p>\n<p>接下来为工程添加头文件路径，不然编译的时候找不到头文件：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402152833.webp\" alt=\"image.png\" /></p>\n<p>然后两次 OK，退出魔术棒弹窗。</p>\n<h1 id=\"main-函数\"><a class=\"markdownIt-Anchor\" href=\"#main-函数\"></a> main 函数</h1>\n<p>新建 User 文件夹（同样也是 <a href=\"https://jiangxiekeji.com/\">江科大</a> 的风格）：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402153154.webp\" alt=\"image.png\" /></p>\n<p>回到 Keil，新建组，并改名为 User。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402153256.webp\" alt=\"image.png\" /></p>\n<p>在组里面新建文件：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402153412.webp\" alt=\"image.png\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402153455.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>进入 main.c，插入头文件：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402153642.webp\" alt=\"image.png\" /></p>\n<p>main.c 内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span>                  <span class=\"comment\">// Device header</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 最后一行为空行，不然编译后出现警告</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>选择编译并建立工程：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402153954.webp\" alt=\"image.png\" /></p>\n<p>下面的提示栏显示 0 错误，0 警告，说明工程建立没问题：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402154045.webp\" alt=\"image.png\" /></p>\n\n<div class=\"callout\" data-callout=\"success\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-check\"><path d=\"M20 6 9 17l-5-5\"/></svg>\n</div>\n<div class=\"callout-title-inner\">基于寄存器开发 STM32 工程创建结束</div>\n</div>\n<div class=\"callout-content\"><p>进行到这里时并没有使用库函数。如果想用寄存器开发 STM32，那么新建一个工程到这里就结束了。可以继续阅读下面两节进行寄存器点灯操作。</p>\n</div></div><h1 id=\"接线与调试器配置\"><a class=\"markdownIt-Anchor\" href=\"#接线与调试器配置\"></a> 接线与调试器配置</h1>\n<p>接线图：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402155804.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<p>注意，当你使用的引脚标号位置与上图不一致时，请以你使用的器件为准。</p>\n<p>调试器配置：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402160256.webp\" alt=\"image.png\" /></p>\n<p>继续点击 Setting，设置下载程序后立即复位运行，这样比较方便。否则下载之后都需要按一下复位按钮才能执行程序。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402160418.webp\" alt=\"image.png\" /></p>\n<p>重新编译一下。</p>\n<h1 id=\"基于寄存器的-led-点灯\"><a class=\"markdownIt-Anchor\" href=\"#基于寄存器的-led-点灯\"></a> 基于寄存器的 LED 点灯</h1>\n<blockquote>\n<p>本小节可略读。</p>\n</blockquote>\n<p>接下来通过寄存器点亮连接 PC13（就在最小核心板上）的 LED 灯：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span>                  <span class=\"comment\">// Device header</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 基于手册配置寄存器</span></span><br><span class=\"line\">\tRCC-&gt;APB2ENR = <span class=\"number\">0x00000010</span>;</span><br><span class=\"line\">\tGPIOC-&gt;CRH = <span class=\"number\">0x00300000</span>;</span><br><span class=\"line\">\tGPIOC-&gt;ODR = <span class=\"number\">0x00000000</span>; <span class=\"comment\">// 灭灯为 0x00002000</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编译后没有错误即可下载：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402161813.webp\" alt=\"image.png\" /></p>\n<p>程序现象为最小核心板的 PC13 连接的 LED 灯点亮。</p>\n<p>基于寄存器编程代码简洁，但需要不断查询手册，过程比较繁杂。且为了不影响寄存器中的其它位，还需要进行 <code>|=</code> 和 <code>&amp;=</code> 操作。</p>\n<h1 id=\"为工程添加库函数\"><a class=\"markdownIt-Anchor\" href=\"#为工程添加库函数\"></a> 为工程添加库函数</h1>\n<p>新建 Library 文件夹（同样也是 <a href=\"https://jiangxiekeji.com/\">江科大</a> 的风格）：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402164717.webp\" alt=\"image.png\" width=\"378px\" /></p>\n<p>在项目文件夹中新建 Library 文件夹，并按照以下要求进行操作：</p>\n<ul>\n<li>把固件库文件夹中【D】文件夹下的所有 <code>.c</code> 文件复制到这里。</li>\n<li>把固件库文件夹中【E】文件夹下的所有 <code>.h</code> 文件复制到这里。</li>\n</ul>\n<p>回到 Keil 软件，和 Start 文件夹的操作类似（往上翻复习一下）。添加组并命名 Library，添加已经存在的文件（Library 下所有的 <code>.c</code> 和 <code>.h</code> 文件，注意文件类型筛选器选择 All Files）。结果为：<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402170002.webp\" alt=\"image.png\" /></p>\n<p>Library 中的这些文件我们也不需要更改，可以把它们的权限设置为只读。</p>\n<p>在项目文件夹中之前建立的 User 文件夹（存放 main.c 函数的文件夹）中：</p>\n<ul>\n<li>把固件库文件夹中标记【F】的 3 个文件复制到这里。</li>\n</ul>\n<p>回到 Keil 软件，把这三个文件也添加到 User 组里。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402170855.webp\" alt=\"image.png\" /></p>\n<p>我们的 main.c 中第一行中添加了头文件 <code>#include &quot;stm32f10x.h&quot;</code>，将光标放在头文件名中，右键选择打开头文件。我们看到一个条件编译：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402171518.webp\" alt=\"image.png\" /></p>\n<p>意思是如果定义了 <code>USE_STDPERIPH_DRIVER</code>（使用标准外设驱动）字符串，就引用 <code>stm32f10x_conf.h</code>。接下来打开魔术棒（工程选项），将字符串粘贴到这里：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402171731.webp\" alt=\"image.png\" /></p>\n<p>这样才能包含标准外设库。</p>\n<blockquote>\n<p><code>STM32F10X_MD</code> 字符串 Keil 已经定义好，不需要我们手动定义。</p>\n</blockquote>\n<p>最后别忘了把 User 和 Library 文件夹添加到头文件路径中：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402172008.webp\" alt=\"image.png\" /></p>\n<p>顺便提一点，在这个按钮中我们可以根据喜好调整组的顺序或向组添加文件（比如把 Start 和 Library 这些不需要更改的文件往上移）：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402172207.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>到这里，重新编译一下，检查是否有错。</p>\n<blockquote>\n<p>其实所有的 <code>.h</code> 文件是可以不必加到组里的。编译一次后 Keil 中也能看到 <code>.h</code> 文件。这里我们还是沿用 <a href=\"https://jiangxiekeji.com/\">江科大</a> 的风格。</p>\n</blockquote>\n<h1 id=\"基于库函数的-led-点灯\"><a class=\"markdownIt-Anchor\" href=\"#基于库函数的-led-点灯\"></a> 基于库函数的 LED 点灯</h1>\n<p>main.c 函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span>                  <span class=\"comment\">// Device header</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span>&#123;</span><br><span class=\"line\">\tGPIO_InitTypeDef GPIO_InitStructure; <span class=\"comment\">// 声明放在前面以防报错（或使用C99 mode）</span></span><br><span class=\"line\">\tRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE); </span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP; <span class=\"comment\">// 推挽</span></span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Pin=GPIO_Pin_13;</span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class=\"line\">\tGPIO_Init(GPIOC,&amp;GPIO_InitStructure);</span><br><span class=\"line\">\tGPIO_ResetBits(GPIOC,GPIO_Pin_13);             <span class=\"comment\">// 输出高电平</span></span><br><span class=\"line\"><span class=\"comment\">//\tGPIO_SetBits(GPIOC,GPIO_Pin_13);               // 输出低电平</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编译并下载，观察输出高电平或低电平的实验现象。</p>\n\n<div class=\"callout\" data-callout=\"success\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-check\"><path d=\"M20 6 9 17l-5-5\"/></svg>\n</div>\n<div class=\"callout-title-inner\">至此，基于标准库开发 STM32 工程创建及示例介绍完毕。</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>如果 <code>GPIO_InitTypeDef</code> 放在 <code>RCC_APB2PeriphClockCmd</code> 之后，编译时有时候会产生这种错误：</p>\n\n<div class=\"callout\" data-callout=\"bug\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-bug\"><path d=\"m8 2 1.88 1.88\"/><path d=\"M14.12 3.88 16 2\"/><path d=\"M9 7.13v-1a3.003 3.003 0 1 1 6 0v1\"/><path d=\"M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6\"/><path d=\"M12 20v-9\"/><path d=\"M6.53 9C4.6 8.8 3 7.1 3 5\"/><path d=\"M6 13H2\"/><path d=\"M3 21c0-2.1 1.7-3.9 3.8-4\"/><path d=\"M20.97 5c0 2.1-1.6 3.8-3.5 4\"/><path d=\"M22 13h-4\"/><path d=\"M17.2 17c2.1.1 3.8 1.9 3.8 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">编译错误</div>\n</div>\n<div class=\"callout-content\"><p>error:  #268: declaration may not appear after executable statement in block</p>\n</div></div><p>解决方法见：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/9c0a1431/\"><span class=\"bilink-pop-up\">站内文章</span>Keil 的使用技巧与问题解决</a>。</p>\n<h1 id=\"其它\"><a class=\"markdownIt-Anchor\" href=\"#其它\"></a> 其它</h1>\n<h2 id=\"移植-freertos\"><a class=\"markdownIt-Anchor\" href=\"#移植-freertos\"></a> 移植 FreeRTOS</h2>\n<p>进一步，你可以尝试移植 FreeRTOS，详看：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/8111c784/\"><span class=\"bilink-pop-up\">站内文章</span>STM32 移植 FreeRTOS - 基于标准库</a></p>\n<h2 id=\"stm32-型号分类及缩写\"><a class=\"markdownIt-Anchor\" href=\"#stm32-型号分类及缩写\"></a> STM32 型号分类及缩写</h2>\n<table>\n<thead>\n<tr>\n<th>缩写</th>\n<th>释义</th>\n<th>Flash 容量</th>\n<th>型号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LD_VL</td>\n<td>小容量产品超值系列</td>\n<td>16~32K</td>\n<td rowspan=\"3\">STM32F100</td>\n</tr>\n<tr>\n<td>MD_VL</td>\n<td>中容量产品超值系列</td>\n<td>64~128K</td>\n</tr>\n<tr>\n<td>HD_VL</td>\n<td>大容量产品超值系列</td>\n<td>256~512K</td>\n</tr>\n<tr>\n<td>LD</td>\n<td>小容量产品</td>\n<td>16~32K</td>\n<td rowspan=\"4\">STM32F101/102/103</td>\n</tr>\n<tr>\n<td>MD</td>\n<td>中容量产品</td>\n<td>64~128K</td>\n</tr>\n<tr>\n<td>HD</td>\n<td>大容量产品</td>\n<td>256~512K</td>\n</tr>\n<tr>\n<td>XL</td>\n<td>加大容量产品</td>\n<td>大于 512K</td>\n</tr>\n<tr>\n<td>CL</td>\n<td>互联型产品</td>\n<td>-</td>\n<td>STM32F105/107</td>\n</tr>\n</tbody>\n</table>\n<p>STM32F103C8T6 的 Flash 容量为 64K。</p>\n<h2 id=\"工程架构\"><a class=\"markdownIt-Anchor\" href=\"#工程架构\"></a> 工程架构</h2>\n<p>我们可以再捋一遍我们建立的工程的架构：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402193416.webp\" alt=\"image.png\" /></p>\n<p>startup_xx.s：程序执行最基本的文件，定义了中断向量表，中断服务函数等。复位中断为程序的入口。</p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1th411z7sn?p=4&amp;vd_source=e03d48176855fc5349b27aef691f9cdb\">新建工程_哔哩哔哩_bilibili</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1fS4y1W7Me/\">STM32HAL库纯使用向教学，STM32HAL库学习（一）32单片机讲解以及开发环境的配置。_哔哩哔哩_bilibili</a></li>\n</ul>\n","raw":"---\ntitle: STM32 工程的创建 - 基于寄存器或标准库\ntags:\n  - STM32\n  - Keil\n  - C\ndescription: 附两种方式的 LED 点灯。\ncategories:\n  - 嵌入式\nabbrlink: 6c1cd7d0\ndate: 2024-04-02 14:12:46\ncover: https://cdn.gallery.uuanqin.top/img/20240404230910.webp\ntop_img:\n---\n\n目前 STM32 的开发方式有 3 个层次：\n\n1. 基于寄存器方式。极少的人使用这种形式。这种方式最底层、最直接、效率更高，但 STM32 寄存器十分复杂，一般不建议采取这种方式。\n2. 基于标准库（库函数）方式。使用 ST 官方提供封装好的函数，通过调用函数间接配置寄存器。这种方式对开发人员比较友好，有利于提高开发效率。\n3. 基于 HAL 库方式。HAL 库是 ST 公司目前主力推的开发方式，全称就是 Hardware Abstraction Layer（抽象印象层）。可以使用图形化界面快速配置 STM32，隐藏底层的逻辑。\n\n这里介绍基于寄存器或标准库方式创建 STM32 工程（以 STM32F103C8T6 为例，其它型号大差不差），并通过点灯演示示例。基于 HAL 库方式请移步：[[STM32 工程的创建 - 基于 HAL 库]]\n\n软件安装提示：阅读前请准备好 Keil uVision5 MDK 的安装（可以和 Keil C51 安在一起），软件需破解。安装和破解过程不再赘述。Keil 的一些使用技巧可以看这篇文章：[[Keil 的使用技巧与问题解决]]\n\nLED 点灯实验工具准备：\n\n1. ST-LINK\n2. STM32（以 STM32F103C8T6 最小核心板为例）\n3. 杜邦线若干\n\n# 固件库下载\n\n进入官网： https://www.st.com/\n\n右上角选择中文。根据菜单选择：工具与软件>嵌入式软件>STM32 微控制器软件。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402142752.webp)\n\n选择标准外设软件库，选择 F1 系列。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402142956.webp)\n\n点击获取最新版本进行下载。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402142533.webp)\n\n解压后得到固件库文件夹：\n\n```tree\nSTM32F10x_StdPeriph_Lib_V3.6.0\n│  Package_license.html\n│  Package_license.md\n│  Release_Notes.html          # 发行说明\n│  stm32f10x_stdperiph_lib_um.chm # 使用手册\n├─Libraries\n│  ├─CMSIS\n│  │  ├─CM3 # Cortex-M3\n│  │  │  ├─CoreSupport # 【C】 内核的寄存器描述文件\n│  │  │  │      core_cm3.c\n│  │  │  │      core_cm3.h\n│  │  │  └─DeviceSupport\n│  │  │      └─ST\n│  │  │          └─STM32F10x\n│  │  │              │  LICENSE.txt\n│  │  │              │  Release_Notes.html\n│  │  │              │  stm32f10x.h # 【B】STM32 外设寄存器描述文件。和51单片机REGX52.H的作用相似，描述寄存器和对应的地址\n│  │  │              │  system_stm32f10x.c # 【B】用于配置时钟\n│  │  │              │  system_stm32f10x.h # 【B】用于配置时钟\n│  │  │              └─startup\n│  │  │                  ├─arm   # 【A】STM32的启动文件\n......\n│  │  └─Documentation\n│  └─STM32F10x_StdPeriph_Driver # stm32 标准外设驱动\n│      │  LICENSE.txt\n│      │  Release_Notes.html\n│      │\n│      ├─inc # 【E】库函数的头文件。\n│      │      misc.h\n......\n│      │\n│      └─src # 【D】库函数的源文件。除了misc.c，其余都是内核外的外设库函数\n│              misc.c    # 内核库函数。\n......\n├─Project # 官方提供的工程示例和模板\n│  ├─STM32F10x_StdPeriph_Examples\n│  └─STM32F10x_StdPeriph_Template\n│      │  LICENSE.txt\n│      │  main.c\n│      │  Release_Notes.html\n│      │  stm32f10x_conf.h  # 【F】配置库函数头文件的包含关系\n│      │  stm32f10x_it.c    # 【F】存放中断函数\n│      │  stm32f10x_it.h    # 【F】存放中断函数\n│      │  system_stm32f10x.c\n├─Utilities # 官方评估板的相关例程\n│  └─STM32_EVAL\n└─_htmresc  \n\n```\n\n注意上面带【A】【B】【C】【D】【E】【F】标号的文件位置，后面会有相应操作。\n\n# 新建项目\n\n打开 Keil，选择 Project>New uVision project。\n\n- 选择你要存放项目的文件夹（这个文件夹下有多个项目）\n- 再**新建一个文件夹**（这个文件夹存放一个项目的所有东西，文件夹名称以后可以方便改）\n- 选择新的空文件夹进入，设置工程的名字（比如这里为 `STM32-proj`）。工程的名字可以设置为通用的名字（以后不太方便改）。\n\n注意路径名称 **不要有中文**。\n\n新建工程后，选择 STM32F103C8：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240402145049.webp)\n\n我们可以把弹出的新建工程小助手给关掉，这里暂时不演示其的使用。\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240402145240.webp)\n\n我们就得到以下文件结构：\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/20240402150100.webp)\n\n# 库函数移植\n\n接下来我们将新建多个文件夹以对新文件进行分类，每个人有不同的风格，我这里就演示 [江科大](https://jiangxiekeji.com/) 的风格。\n\n在项目文件夹中新建 Start 文件夹，并按照以下要求进行操作：\n\n- 把固件库文件夹中【A】文件夹下的所有 `.s` 文件复制到这里。\n- 把固件库文件夹中【B】标识的三个文件也复制到这里。\n- 把固件库文件夹中【C】文件夹下的所有文件（2 个文件）复制到这里。\n\n回到 Keil，现在将我们新建的 Start 添加到工程。\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240402151820.webp)\n\n> 至于确定自己芯片型号的缩写，可看文末介绍。STM32F103C8T6 应选择后缀为 `md` 的启动文件。\n\n同样的方法也将这几个也加进来，结果如下图：\n\n![image.png|301](https://cdn.gallery.uuanqin.top/img/20240402152131.webp)\n\n上图中 Start 组里的文件我们是不需要进行修改的。（我们还可以在电脑文件管理器中将这些文件设置为只读，这样可以避免误修改。这时上图的文件图标上就会带有一把小钥匙，表示这是只读文件。）\n\n接下来为工程添加头文件路径，不然编译的时候找不到头文件：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402152833.webp)\n\n然后两次 OK，退出魔术棒弹窗。\n\n# main 函数\n\n新建 User 文件夹（同样也是 [江科大](https://jiangxiekeji.com/) 的风格）：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402153154.webp)\n\n回到 Keil，新建组，并改名为 User。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402153256.webp)\n\n在组里面新建文件：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402153412.webp)\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240402153455.webp)\n\n进入 main.c，插入头文件：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402153642.webp)\n\nmain.c 内容如下：\n\n```c\n#include \"stm32f10x.h\"                  // Device header\n\nint main(void){\n\twhile(1){\n\t\t\n\t}\n}\n// 最后一行为空行，不然编译后出现警告\n\n```\n\n选择编译并建立工程：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402153954.webp)\n\n下面的提示栏显示 0 错误，0 警告，说明工程建立没问题：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402154045.webp)\n\n> [!success] 基于寄存器开发 STM32 工程创建结束\n> 进行到这里时并没有使用库函数。如果想用寄存器开发 STM32，那么新建一个工程到这里就结束了。可以继续阅读下面两节进行寄存器点灯操作。\n\n# 接线与调试器配置\n\n接线图：\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/20240402155804.webp)\n\n注意，当你使用的引脚标号位置与上图不一致时，请以你使用的器件为准。\n\n调试器配置：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402160256.webp)\n\n继续点击 Setting，设置下载程序后立即复位运行，这样比较方便。否则下载之后都需要按一下复位按钮才能执行程序。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402160418.webp)\n\n重新编译一下。\n\n# 基于寄存器的 LED 点灯\n\n> 本小节可略读。\n\n接下来通过寄存器点亮连接 PC13（就在最小核心板上）的 LED 灯：\n\n```c\n#include \"stm32f10x.h\"                  // Device header\n\nint main(void){\n\t// 基于手册配置寄存器\n\tRCC->APB2ENR = 0x00000010;\n\tGPIOC->CRH = 0x00300000;\n\tGPIOC->ODR = 0x00000000; // 灭灯为 0x00002000\n\twhile(1){\n\t\t\n\t}\n}\n\n```\n\n编译后没有错误即可下载：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402161813.webp)\n\n程序现象为最小核心板的 PC13 连接的 LED 灯点亮。\n\n基于寄存器编程代码简洁，但需要不断查询手册，过程比较繁杂。且为了不影响寄存器中的其它位，还需要进行 `|=` 和 `&=` 操作。\n\n# 为工程添加库函数\n\n新建 Library 文件夹（同样也是 [江科大](https://jiangxiekeji.com/) 的风格）：\n\n![image.png|378](https://cdn.gallery.uuanqin.top/img/20240402164717.webp)\n\n在项目文件夹中新建 Library 文件夹，并按照以下要求进行操作：\n\n- 把固件库文件夹中【D】文件夹下的所有 `.c` 文件复制到这里。\n- 把固件库文件夹中【E】文件夹下的所有 `.h` 文件复制到这里。\n\n回到 Keil 软件，和 Start 文件夹的操作类似（往上翻复习一下）。添加组并命名 Library，添加已经存在的文件（Library 下所有的 `.c` 和 `.h` 文件，注意文件类型筛选器选择 All Files）。结果为：![image.png](https://cdn.gallery.uuanqin.top/img/20240402170002.webp)\n\nLibrary 中的这些文件我们也不需要更改，可以把它们的权限设置为只读。\n\n在项目文件夹中之前建立的 User 文件夹（存放 main.c 函数的文件夹）中：\n\n- 把固件库文件夹中标记【F】的 3 个文件复制到这里。\n\n回到 Keil 软件，把这三个文件也添加到 User 组里。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402170855.webp)\n\n我们的 main.c 中第一行中添加了头文件 `#include \"stm32f10x.h\"`，将光标放在头文件名中，右键选择打开头文件。我们看到一个条件编译：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402171518.webp)\n\n意思是如果定义了 `USE_STDPERIPH_DRIVER`（使用标准外设驱动）字符串，就引用 `stm32f10x_conf.h`。接下来打开魔术棒（工程选项），将字符串粘贴到这里：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402171731.webp)\n\n这样才能包含标准外设库。\n\n> `STM32F10X_MD` 字符串 Keil 已经定义好，不需要我们手动定义。\n\n最后别忘了把 User 和 Library 文件夹添加到头文件路径中：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402172008.webp)\n\n顺便提一点，在这个按钮中我们可以根据喜好调整组的顺序或向组添加文件（比如把 Start 和 Library 这些不需要更改的文件往上移）：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240402172207.webp)\n\n到这里，重新编译一下，检查是否有错。\n\n> 其实所有的 `.h` 文件是可以不必加到组里的。编译一次后 Keil 中也能看到 `.h` 文件。这里我们还是沿用 [江科大](https://jiangxiekeji.com/) 的风格。\n# 基于库函数的 LED 点灯\n\nmain.c 函数：\n\n```c\n#include \"stm32f10x.h\"                  // Device header\n\nint main(void){\n\tGPIO_InitTypeDef GPIO_InitStructure; // 声明放在前面以防报错（或使用C99 mode）\n\tRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE); \n\tGPIO_InitStructure.GPIO_Mode=GPIO_Mode_Out_PP; // 推挽\n\tGPIO_InitStructure.GPIO_Pin=GPIO_Pin_13;\n\tGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;\n\tGPIO_Init(GPIOC,&GPIO_InitStructure);\n\tGPIO_ResetBits(GPIOC,GPIO_Pin_13);             // 输出高电平\n//\tGPIO_SetBits(GPIOC,GPIO_Pin_13);               // 输出低电平\n\twhile(1){\n\t\t\n\t}\n}\n\n```\n\n编译并下载，观察输出高电平或低电平的实验现象。\n\n> [!success] 至此，基于标准库开发 STM32 工程创建及示例介绍完毕。\n\n如果 `GPIO_InitTypeDef` 放在 `RCC_APB2PeriphClockCmd` 之后，编译时有时候会产生这种错误：\n\n> [!bug] 编译错误\n> error:  #268: declaration may not appear after executable statement in block\n\n解决方法见：[[Keil 的使用技巧与问题解决]]。\n\n# 其它\n\n## 移植 FreeRTOS\n\n进一步，你可以尝试移植 FreeRTOS，详看：[[STM32 移植 FreeRTOS - 基于标准库]]\n\n## STM32 型号分类及缩写\n\n| 缩写  | 释义               | Flash 容量 | 型号              |\n| ----- | ------------------ | --------- | ----------------- |\n| LD_VL | 小容量产品超值系列 | 16~32K    | STM32F100         |\n| MD_VL | 中容量产品超值系列 | 64~128K   | STM32F100         |\n| HD_VL | 大容量产品超值系列 | 256~512K  | STM32F100         |\n| LD    | 小容量产品         | 16~32K    | STM32F101/102/103 |\n| MD    | 中容量产品         | 64~128K   | STM32F101/102/103 |\n| HD    | 大容量产品         | 256~512K  | STM32F101/102/103 |\n| XL    | 加大容量产品       | 大于 512K  | STM32F101/102/103 |\n| CL    | 互联型产品         | -         | STM32F105/107     |\n\nSTM32F103C8T6 的 Flash 容量为 64K。\n\n## 工程架构\n\n我们可以再捋一遍我们建立的工程的架构：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402193416.webp)\n\nstartup_xx.s：程序执行最基本的文件，定义了中断向量表，中断服务函数等。复位中断为程序的入口。\n\n# 本文参考\n- [新建工程_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1th411z7sn?p=4&vd_source=e03d48176855fc5349b27aef691f9cdb)\n- [STM32HAL库纯使用向教学，STM32HAL库学习（一）32单片机讲解以及开发环境的配置。_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1fS4y1W7Me/)\n","categories":[{"name":"嵌入式","api":"api/categories/嵌入式.json"}],"tags":[{"name":"C","api":"api/tags/C.json"},{"name":"STM32","api":"api/tags/STM32.json"},{"name":"Keil","api":"api/tags/Keil.json"}]},"api":"api/posts/p/6c1cd7d0.json"}