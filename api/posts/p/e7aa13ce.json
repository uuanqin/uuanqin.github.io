{"data":{"title":"SPI 概念及案例实践（下）","slug":"技术学习/SPI 概念及案例实践（下）","description":"写一个更灵活的 SPI 框架","date":"2024-08-01T05:08:18.000Z","updated":"2025-06-11T16:08:12.778Z","language":"zh-CN","comments":true,"url":"p/e7aa13ce/","cover":"https://cdn.gallery.uuanqin.top/img/20240731214853.webp","images":[],"content":"\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">阅读前提示</div>\n</div>\n<div class=\"callout-content\"><p>为了更好地理解文章，建议先阅读 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/acab999c/\"><span class=\"yukari\">站内文章</span>SPI 概念及案例实践（上）</a>。</p>\n</div></div><p>在 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/acab999c/\"><span class=\"yukari\">站内文章</span>这篇文章</a> 中我们学习并实践了 Java 原生的 SPI 机制。但我们还想更便捷的使用 SPI。设想这样一个场景：当公司 A 使用互联网连接服务时，我们直接这样调用服务：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获得互联网连接服务，具体的实现类为中国移动公司提供互联网连接服务</span></span><br><span class=\"line\"><span class=\"type\">InternetService</span> <span class=\"variable\">internetService1</span> <span class=\"operator\">=</span> InternetServiceFactory(<span class=\"string\">&quot;cn-mobile-beijing&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 在同样的应用中，我们可以获取另一种互联网连接服务的实现</span></span><br><span class=\"line\"><span class=\"type\">InternetService</span> <span class=\"variable\">internetService2</span> <span class=\"operator\">=</span> InternetServiceFactory(<span class=\"string\">&quot;cn-unicom&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>这样就不需要在 <code>pom.xml</code> 中导入不同的 jar 包以获取实现类，又或者在多个实现类中选择一个具体的服务实现。编写好一个 SPI 框架，我们能更好地调用和扩展 SPI 服务。</p>\n<p>本文源代码详见文末。</p>\n<h1 id=\"写一个-spi-框架\"><a class=\"markdownIt-Anchor\" href=\"#写一个-spi-框架\"></a> 写一个 SPI 框架</h1>\n<h2 id=\"重写-serviceloader\"><a class=\"markdownIt-Anchor\" href=\"#重写-serviceloader\"></a> 重写 ServiceLoader</h2>\n<p>现在，公司 A 决定写一套 SPI 框架。</p>\n<p>新建模块 <code>simple-company-frame</code>。在 <code>simple-company-frame</code> 模块 <code>pom.xml</code> 中导入以下模块以提供日志功能：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span>  </span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>top.uuanqin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  </span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>simple-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>  </span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span>  </span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- https://doc.hutool.cn/ --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.hutool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hutool-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.8.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.12<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>compile<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>重写 ServiceLoader ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin.frame;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.core.io.resource.ResourceUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * SPI 加载器（支持键值对映射）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpiLoader</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存储已加载的类：接口名 =&gt;（key =&gt; 实现类）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, Map&lt;String, Class&lt;?&gt;&gt;&gt; loaderMap = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 对象实例缓存（避免重复 new），类路径 =&gt; 对象实例，单例模式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, Object&gt; instanceCache = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 系统 SPI 目录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">RPC_SYSTEM_SPI_DIR</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;META-INF/rpc/system/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用户自定义 SPI 目录</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">RPC_CUSTOM_SPI_DIR</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;META-INF/rpc/custom/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扫描路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] SCAN_DIRS = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[]&#123;RPC_SYSTEM_SPI_DIR, RPC_CUSTOM_SPI_DIR&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取某个接口的实例</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> tClass</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; T <span class=\"title function_\">getInstance</span><span class=\"params\">(Class&lt;?&gt; tClass, String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">tClassName</span> <span class=\"operator\">=</span> tClass.getName();</span><br><span class=\"line\">        Map&lt;String, Class&lt;?&gt;&gt; keyClassMap = loaderMap.get(tClassName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (keyClassMap == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(String.format(<span class=\"string\">&quot;SpiLoader 未加载 %s 类型&quot;</span>, tClassName));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!keyClassMap.containsKey(key)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(String.format(<span class=\"string\">&quot;SpiLoader 的 %s 不存在 key=%s 的类型&quot;</span>, tClassName, key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 获取到要加载的实现类型</span></span><br><span class=\"line\">        Class&lt;?&gt; implClass = keyClassMap.get(key);</span><br><span class=\"line\">        <span class=\"comment\">// 从实例缓存中加载指定类型的实例</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">implClassName</span> <span class=\"operator\">=</span> implClass.getName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!instanceCache.containsKey(implClassName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                instanceCache.put(implClassName, implClass.newInstance());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">errorMsg</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;%s 类实例化失败&quot;</span>, implClassName);</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(errorMsg, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) instanceCache.get(implClassName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加载某个类型</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> loadClass</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, Class&lt;?&gt;&gt; load(Class&lt;?&gt; loadClass) &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;加载类型为 &#123;&#125; 的 SPI&quot;</span>, loadClass.getName());</span><br><span class=\"line\">        <span class=\"comment\">// 扫描路径，用户自定义的 SPI 优先级高于系统 SPI</span></span><br><span class=\"line\">        Map&lt;String, Class&lt;?&gt;&gt; keyClassMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String scanDir : SCAN_DIRS) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ResourceUtil.getResources 获得资源的URL 路径用/分隔</span></span><br><span class=\"line\">            List&lt;URL&gt; resources = ResourceUtil.getResources(scanDir + loadClass.getName()); <span class=\"comment\">// 获取配置文件是使用了 ResourceUtil.getResources，而不是通过文件路径获取。因为如果框架作为依赖被引入，是无法得到正确文件路径的。</span></span><br><span class=\"line\">            <span class=\"comment\">// 读取每个资源文件</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (URL resource : resources) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">InputStreamReader</span> <span class=\"variable\">inputStreamReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(resource.openStream());</span><br><span class=\"line\">                    <span class=\"type\">BufferedReader</span> <span class=\"variable\">bufferedReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(inputStreamReader);</span><br><span class=\"line\">                    String line;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> ((line = bufferedReader.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        String[] strArray = line.split(<span class=\"string\">&quot;=&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (strArray.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                            <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> strArray[<span class=\"number\">0</span>];</span><br><span class=\"line\">                            <span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> strArray[<span class=\"number\">1</span>];</span><br><span class=\"line\">                            keyClassMap.put(key, Class.forName(className));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    log.error(<span class=\"string\">&quot;spi resource load error&quot;</span>, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        loaderMap.put(loadClass.getName(), keyClassMap);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keyClassMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相当于一个工具类，提供了读取配置并加载实现类的方法。</p>\n<p>关键实现如下：</p>\n<ul>\n<li>用 Map 来存储已加载的配置信息 键名 =&gt; 实现类。</li>\n<li>扫描指定路径，读取每个配置文件，获取到 键名 =&gt; 实现类 信息并存储在 Map 中。</li>\n<li>定义获取实例方法，根据用户传入的接口和键名，从 Map 中找到对应的实现类，然后通过反射获取到实现类对象。可以维护一个对象实例缓存，创建过一次的对象从缓存中读取即可。</li>\n</ul>\n<p>我们扫描的 SPI 目录有两个：</p>\n<ul>\n<li><code>META-INF/my/system/</code> 框架的 SPI 目录</li>\n<li><code>META-INF/my/custom/</code> 用户自定义的 SPI 目录（优先级高）</li>\n</ul>\n<h2 id=\"为框架编写自己-internetservice-的实现类\"><a class=\"markdownIt-Anchor\" href=\"#为框架编写自己-internetservice-的实现类\"></a> 为框架编写自己 <code>InternetService</code> 的实现类</h2>\n<p>在 <code>simple-company-frame</code> 模块新建包 <code>internet</code>，存放与互联网连接相关的代码。</p>\n<p>写随便两个公司自己编写的实现类，用于后续测试。比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin.frame.internet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> top.uuanqin.InternetService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uuanqin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocalConnection</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InternetService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">connectInternet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;访问 127.0.0.1 ......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"写一个-internetservice-工厂类\"><a class=\"markdownIt-Anchor\" href=\"#写一个-internetservice-工厂类\"></a> 写一个 <code>InternetService</code> 工厂类</h2>\n<p>互联网连接服务对象是可以复用的，没必要每次执行连接操作前都创建一个新的对象。所以我们可以使用设计模式中的 工厂模式 + 单例模式 来简化创建和获取互联网连接服务对象的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin.frame.internet;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> top.uuanqin.InternetService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> top.uuanqin.frame.SpiLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 互联网连接工厂（用于获取互联网连接服务对象）</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 互联网连接服务对象是可以复用的，没必要每次执行连接操作前都创建一个新的对象。所以我们可以使用设计模式中的 工厂模式 + 单例模式 来简化创建和获取互联网连接服务对象的操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InternetServiceFactory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用静态代码块，在工厂首次加载时，就会调用 SpiLoader 的 load 方法加载序列化器接口的所有实现类，之后就可以通过调用 getInstance 方法获取指定的实现类对象了。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        SpiLoader.load(InternetService.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认连接对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">InternetService</span> <span class=\"variable\">DEFAULT_SERIALIZER</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LocalConnection</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取实例</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> InternetService <span class=\"title function_\">getInstance</span><span class=\"params\">(String key)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SpiLoader.getInstance(InternetService.class, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"写配置\"><a class=\"markdownIt-Anchor\" href=\"#写配置\"></a> 写配置</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240731231752.webp\" alt=\"image.png\" /></p>\n<h1 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\"></a> 测试</h1>\n<p>回到 <code>simple-company</code> 模块。</p>\n<p><code>pom.xml</code> 中引入框架：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>top.uuanqin<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>simple-company-frame<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>编写测试用的主函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> top.uuanqin.frame.internet.InternetServiceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpiMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">InternetService</span> <span class=\"variable\">internetService</span> <span class=\"operator\">=</span> InternetServiceFactory.getInstance(<span class=\"string\">&quot;local&quot;</span>);</span><br><span class=\"line\">        internetService.connectInternet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>返回结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问 127.0.0.1 ......</span><br></pre></td></tr></table></figure>\n<p>如果 <code>main</code> 函数代码改成这样，将得到不一样的结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">InternetService</span> <span class=\"variable\">internetService</span> <span class=\"operator\">=</span> InternetServiceFactory.getInstance(<span class=\"string\">&quot;fake&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 结果：</span></span><br><span class=\"line\"><span class=\"comment\">// 你没有插网线！</span></span><br><span class=\"line\"><span class=\"type\">InternetService</span> <span class=\"variable\">internetService</span> <span class=\"operator\">=</span> InternetServiceFactory.getInstance(<span class=\"string\">&quot;ddd&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 错误：</span></span><br><span class=\"line\"><span class=\"comment\">// Exception in thread &quot;main&quot; java.lang.RuntimeException: SpiLoader 的 top.uuanqin.InternetService 不存在 key=ddd 的类型</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"服务拓展\"><a class=\"markdownIt-Anchor\" href=\"#服务拓展\"></a> 服务拓展</h1>\n<p>既然公司 A 写了一套框架，那么现在公司 A 要求所有的运营商：</p>\n<ul>\n<li>把所有连接互联网的 SPI 实现通通放在 <code>META-INF/my/system/</code> 下！</li>\n<li>实现服务类名前面加上个 Key！</li>\n</ul>\n<p>中国移动和中国联通运营商们都乖乖照做了：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240731233104.webp\" alt=\"image.png\" /></p>\n<p>框架 <code>simple-company-frame</code> 的 <code>pom.xml</code> 中同时导入了这两个服务供应商的包：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.mobile<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>simple-isp-mobile<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.unicom<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>simple-isp-unicom<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>下面回到 <code>simple-company</code> 模块测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> top.uuanqin.frame.internet.InternetServiceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpiMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">InternetService</span> <span class=\"variable\">internetService</span> <span class=\"operator\">=</span> InternetServiceFactory.getInstance(<span class=\"string\">&quot;cn-mobile-beijing&quot;</span>);</span><br><span class=\"line\">        internetService.connectInternet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">【中国移动（北京移动）】欢迎使用中国移动联网服务！</span><br></pre></td></tr></table></figure>\n<p>这样，公司 A 可以通过切换 key 随时指定需要的服务了！</p>\n<h1 id=\"用户自定义实现类\"><a class=\"markdownIt-Anchor\" href=\"#用户自定义实现类\"></a> 用户自定义实现类</h1>\n<p>公司 A 想自己写几个临时实现类，但是不想让框架 <code>simple-company-frame</code> 导入。这时 <code>META-INF/my/custom/</code> 目录就起作用了。</p>\n<p><code>simple-company</code> 模块新建了自己的临时实现类：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">package</span> top.uuanqin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uuanqin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TempConnection</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InternetService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">connectInternet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;公司 A 的临时连接。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编写 SPI 配置：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240731234049.webp\" alt=\"image.png\" /></p>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> top.uuanqin.frame.internet.InternetServiceFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpiMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">InternetService</span> <span class=\"variable\">internetService</span> <span class=\"operator\">=</span> InternetServiceFactory.getInstance(<span class=\"string\">&quot;temp&quot;</span>);</span><br><span class=\"line\">        internetService.connectInternet();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">公司 A 的临时连接。</span><br></pre></td></tr></table></figure>\n<h1 id=\"改进与拓展思路\"><a class=\"markdownIt-Anchor\" href=\"#改进与拓展思路\"></a> 改进与拓展思路</h1>\n<h2 id=\"spi-框架复用\"><a class=\"markdownIt-Anchor\" href=\"#spi-框架复用\"></a> SPI 框架复用</h2>\n<p>在上面的代码中，<code>SpiLoader</code> 并没有存在于「互联网服务」相关的硬编码。我们可以仿照上面的工厂写法，写出更多的服务工厂。这样我们的 Main 函数就可以是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">InternetService</span> <span class=\"variable\">internetService</span> <span class=\"operator\">=</span> InternetServiceFactory.getInstance(<span class=\"string\">&quot;cn-mobile-suzhou&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">TVService</span> <span class=\"variable\">tvService</span> <span class=\"operator\">=</span> TVServiceFactory.getInstance(<span class=\"string\">&quot;xiaomi&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">FoodService</span> <span class=\"variable\">foodService</span> <span class=\"operator\">=</span> FoodServiceFactory.getInstance(<span class=\"string\">&quot;kfc&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"常量存储\"><a class=\"markdownIt-Anchor\" href=\"#常量存储\"></a> 常量存储</h2>\n<p>写一个接口类，专门存储字符串常量以供使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin.frame.internet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uuanqin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ConnectionKeys</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">FAKE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;fake&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">LOCAL</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;local&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">CN_MOBILE_SUZHOU</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;cn-mobile-suzhou&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"配合全局配置\"><a class=\"markdownIt-Anchor\" href=\"#配合全局配置\"></a> 配合全局配置</h2>\n<p>结合 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/43de456a/\"><span class=\"yukari\">站内文章</span>这篇文章</a>，我们可以通过修改配置文件直接选择我们需要的服务。</p>\n<h1 id=\"源代码\"><a class=\"markdownIt-Anchor\" href=\"#源代码\"></a> 源代码</h1>\n<p><a href=\"https://github.com/uuanqin/SPI-simple-example\"><img src= \"/image/loading.gif\" data-lazy-src=\"https://github-readme-stats.uuanqin.top/api/pin/?username=uuanqin&amp;repo=SPI-simple-example\" alt=\"Readme Card\" /></a></p>\n<p>GitHub 仓库地址：<a href=\"https://github.com/uuanqin/SPI-simple-example\">uuanqin/SPI-simple-example (github.com)</a></p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1RY4y1v7mN/\">10分钟让你彻底明白Java SPI，附实例代码演示#安员外很有码_哔哩哔哩_bilibili</a></li>\n<li><a href=\"https://yuyuanweb.feishu.cn/wiki/EweIwSYsXiEvCDkzS8BcTiAonyc\">知识星球·编程导航 - 手写 RFC 框架</a></li>\n</ul>\n","raw":"---\ntitle: SPI 概念及案例实践（下）\ntags:\n  - SPI\n  - ServiceLoader\n  - Java\ndescription: 写一个更灵活的 SPI 框架\ncategories:\n  - 技术学习\nabbrlink: e7aa13ce\ncover: 'https://cdn.gallery.uuanqin.top/img/20240731214853.webp'\ndate: 2024-08-01 13:08:18\ntop_img:\n---\n\n> [!hint] 阅读前提示\n> 为了更好地理解文章，建议先阅读 [[SPI 概念及案例实践（上）]]。\n\n在 [[SPI 概念及案例实践（上）|这篇文章]] 中我们学习并实践了 Java 原生的 SPI 机制。但我们还想更便捷的使用 SPI。设想这样一个场景：当公司 A 使用互联网连接服务时，我们直接这样调用服务：\n\n```java\n// 获得互联网连接服务，具体的实现类为中国移动公司提供互联网连接服务\nInternetService internetService1 = InternetServiceFactory(\"cn-mobile-beijing\");\n// 在同样的应用中，我们可以获取另一种互联网连接服务的实现\nInternetService internetService2 = InternetServiceFactory(\"cn-unicom\");\n```\n\n这样就不需要在 `pom.xml` 中导入不同的 jar 包以获取实现类，又或者在多个实现类中选择一个具体的服务实现。编写好一个 SPI 框架，我们能更好地调用和扩展 SPI 服务。\n\n本文源代码详见文末。\n\n# 写一个 SPI 框架\n\n## 重写 ServiceLoader\n\n现在，公司 A 决定写一套 SPI 框架。\n\n新建模块 `simple-company-frame`。在 `simple-company-frame` 模块 `pom.xml` 中导入以下模块以提供日志功能：\n\n```xml\n<dependencies>\n\t<dependency>  \n\t\t<groupId>top.uuanqin</groupId>  \n\t\t<artifactId>simple-api</artifactId>  \n\t\t<version>1.0-SNAPSHOT</version>  \n\t</dependency>\n\n\t<!-- https://doc.hutool.cn/ -->\n\t<dependency>\n\t\t<groupId>cn.hutool</groupId>\n\t\t<artifactId>hutool-all</artifactId>\n\t\t<version>5.8.16</version>\n\t</dependency>\n\n\t<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->\n\t<dependency>\n\t\t<groupId>ch.qos.logback</groupId>\n\t\t<artifactId>logback-classic</artifactId>\n\t\t<version>1.3.12</version>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.projectlombok</groupId>\n\t\t<artifactId>lombok</artifactId>\n\t\t<version>1.18.32</version>\n\t\t<scope>compile</scope>\n\t</dependency>\n</dependencies>\n```\n\n重写 ServiceLoader ：\n\n```java\npackage top.uuanqin.frame;\n\nimport cn.hutool.core.io.resource.ResourceUtil;\nimport lombok.extern.slf4j.Slf4j;\n\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * SPI 加载器（支持键值对映射）\n */\n@Slf4j\npublic class SpiLoader {\n\n    /**\n     * 存储已加载的类：接口名 =>（key => 实现类）\n     */\n    private static Map<String, Map<String, Class<?>>> loaderMap = new ConcurrentHashMap<>();\n\n    /**\n     * 对象实例缓存（避免重复 new），类路径 => 对象实例，单例模式\n     */\n    private static Map<String, Object> instanceCache = new ConcurrentHashMap<>();\n\n    /**\n     * 系统 SPI 目录\n     */\n    private static final String RPC_SYSTEM_SPI_DIR = \"META-INF/rpc/system/\";\n\n    /**\n     * 用户自定义 SPI 目录\n     */\n    private static final String RPC_CUSTOM_SPI_DIR = \"META-INF/rpc/custom/\";\n\n    /**\n     * 扫描路径\n     */\n    private static final String[] SCAN_DIRS = new String[]{RPC_SYSTEM_SPI_DIR, RPC_CUSTOM_SPI_DIR};\n\n    /**\n     * 获取某个接口的实例\n     *\n     * @param tClass\n     * @param key\n     * @param <T>\n     * @return\n     */\n    public static <T> T getInstance(Class<?> tClass, String key) {\n        String tClassName = tClass.getName();\n        Map<String, Class<?>> keyClassMap = loaderMap.get(tClassName);\n        if (keyClassMap == null) {\n            throw new RuntimeException(String.format(\"SpiLoader 未加载 %s 类型\", tClassName));\n        }\n        if (!keyClassMap.containsKey(key)) {\n            throw new RuntimeException(String.format(\"SpiLoader 的 %s 不存在 key=%s 的类型\", tClassName, key));\n        }\n        // 获取到要加载的实现类型\n        Class<?> implClass = keyClassMap.get(key);\n        // 从实例缓存中加载指定类型的实例\n        String implClassName = implClass.getName();\n        if (!instanceCache.containsKey(implClassName)) {\n            try {\n                instanceCache.put(implClassName, implClass.newInstance());\n            } catch (InstantiationException | IllegalAccessException e) {\n                String errorMsg = String.format(\"%s 类实例化失败\", implClassName);\n                throw new RuntimeException(errorMsg, e);\n            }\n        }\n        return (T) instanceCache.get(implClassName);\n    }\n\n    /**\n     * 加载某个类型\n     *\n     * @param loadClass\n     */\n    public static Map<String, Class<?>> load(Class<?> loadClass) {\n        log.info(\"加载类型为 {} 的 SPI\", loadClass.getName());\n        // 扫描路径，用户自定义的 SPI 优先级高于系统 SPI\n        Map<String, Class<?>> keyClassMap = new HashMap<>();\n        for (String scanDir : SCAN_DIRS) {\n            // ResourceUtil.getResources 获得资源的URL 路径用/分隔\n            List<URL> resources = ResourceUtil.getResources(scanDir + loadClass.getName()); // 获取配置文件是使用了 ResourceUtil.getResources，而不是通过文件路径获取。因为如果框架作为依赖被引入，是无法得到正确文件路径的。\n            // 读取每个资源文件\n            for (URL resource : resources) {\n                try {\n                    InputStreamReader inputStreamReader = new InputStreamReader(resource.openStream());\n                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n                    String line;\n                    while ((line = bufferedReader.readLine()) != null) {\n                        String[] strArray = line.split(\"=\");\n                        if (strArray.length > 1) {\n                            String key = strArray[0];\n                            String className = strArray[1];\n                            keyClassMap.put(key, Class.forName(className));\n                        }\n                    }\n                } catch (Exception e) {\n                    log.error(\"spi resource load error\", e);\n                }\n            }\n        }\n        loaderMap.put(loadClass.getName(), keyClassMap);\n        return keyClassMap;\n    }\n}\n```\n\n相当于一个工具类，提供了读取配置并加载实现类的方法。\n\n关键实现如下：\n\n- 用 Map 来存储已加载的配置信息 键名 => 实现类。\n- 扫描指定路径，读取每个配置文件，获取到 键名 => 实现类 信息并存储在 Map 中。\n- 定义获取实例方法，根据用户传入的接口和键名，从 Map 中找到对应的实现类，然后通过反射获取到实现类对象。可以维护一个对象实例缓存，创建过一次的对象从缓存中读取即可。\n\n我们扫描的 SPI 目录有两个：\n\n- `META-INF/my/system/` 框架的 SPI 目录\n- `META-INF/my/custom/` 用户自定义的 SPI 目录（优先级高）\n\n\n## 为框架编写自己 `InternetService` 的实现类\n\n在 `simple-company-frame` 模块新建包 `internet`，存放与互联网连接相关的代码。\n\n写随便两个公司自己编写的实现类，用于后续测试。比如：\n\n```java\npackage top.uuanqin.frame.internet;\n\nimport top.uuanqin.InternetService;\n\n/**\n * @author uuanqin\n */\npublic class LocalConnection implements InternetService {\n    @Override\n    public void connectInternet() {\n        System.out.println(\"访问 127.0.0.1 ......\");\n    }\n}\n\n```\n\n## 写一个 `InternetService` 工厂类\n\n互联网连接服务对象是可以复用的，没必要每次执行连接操作前都创建一个新的对象。所以我们可以使用设计模式中的 工厂模式 + 单例模式 来简化创建和获取互联网连接服务对象的操作。\n\n```java\npackage top.uuanqin.frame.internet;\n\n\n\nimport top.uuanqin.InternetService;\nimport top.uuanqin.frame.SpiLoader;\n\n/**\n * 互联网连接工厂（用于获取互联网连接服务对象）\n *\n * 互联网连接服务对象是可以复用的，没必要每次执行连接操作前都创建一个新的对象。所以我们可以使用设计模式中的 工厂模式 + 单例模式 来简化创建和获取互联网连接服务对象的操作\n */\npublic class InternetServiceFactory {\n\n    // 使用静态代码块，在工厂首次加载时，就会调用 SpiLoader 的 load 方法加载序列化器接口的所有实现类，之后就可以通过调用 getInstance 方法获取指定的实现类对象了。\n\n    static {\n        SpiLoader.load(InternetService.class);\n    }\n\n    /**\n     * 默认连接对象\n     */\n    private static final InternetService DEFAULT_SERIALIZER = new LocalConnection();\n\n    /**\n     * 获取实例\n     *\n     * @param key\n     * @return\n     */\n    public static InternetService getInstance(String key) {\n        return SpiLoader.getInstance(InternetService.class, key);\n    }\n\n}\n```\n\n## 写配置\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240731231752.webp)\n\n# 测试\n\n回到 `simple-company` 模块。\n\n`pom.xml` 中引入框架：\n\n```xml\n<dependency>\n\t<groupId>top.uuanqin</groupId>\n\t<artifactId>simple-company-frame</artifactId>\n\t<version>1.0-SNAPSHOT</version>\n</dependency>\n```\n\n编写测试用的主函数：\n\n```java\npackage top.uuanqin;\n\nimport top.uuanqin.frame.internet.InternetServiceFactory;\n\npublic class SpiMain {\n    public static void main(String[] args) {\n        InternetService internetService = InternetServiceFactory.getInstance(\"local\");\n        internetService.connectInternet();\n    }\n}\n\n```\n\n返回结果：\n\n```\n访问 127.0.0.1 ......\n```\n\n如果 `main` 函数代码改成这样，将得到不一样的结果：\n\n```java\nInternetService internetService = InternetServiceFactory.getInstance(\"fake\");\n// 结果：\n// 你没有插网线！\nInternetService internetService = InternetServiceFactory.getInstance(\"ddd\");\n// 错误：\n// Exception in thread \"main\" java.lang.RuntimeException: SpiLoader 的 top.uuanqin.InternetService 不存在 key=ddd 的类型\n```\n\n# 服务拓展\n\n既然公司 A 写了一套框架，那么现在公司 A 要求所有的运营商：\n\n- 把所有连接互联网的 SPI 实现通通放在 `META-INF/my/system/` 下！\n- 实现服务类名前面加上个 Key！\n\n中国移动和中国联通运营商们都乖乖照做了：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240731233104.webp)\n\n框架 `simple-company-frame` 的 `pom.xml` 中同时导入了这两个服务供应商的包：\n\n```xml\n<dependency>\n\t<groupId>cn.mobile</groupId>\n\t<artifactId>simple-isp-mobile</artifactId>\n\t<version>1.0-SNAPSHOT</version>\n</dependency>\n<dependency>\n\t<groupId>cn.unicom</groupId>\n\t<artifactId>simple-isp-unicom</artifactId>\n\t<version>1.0-SNAPSHOT</version>\n</dependency>\n```\n\n下面回到 `simple-company` 模块测试：\n\n```java\npackage top.uuanqin;\n\nimport top.uuanqin.frame.internet.InternetServiceFactory;\n\npublic class SpiMain {\n    public static void main(String[] args) {\n        InternetService internetService = InternetServiceFactory.getInstance(\"cn-mobile-beijing\");\n        internetService.connectInternet();\n    }\n}\n```\n\n输出：\n\n```\n【中国移动（北京移动）】欢迎使用中国移动联网服务！\n```\n\n这样，公司 A 可以通过切换 key 随时指定需要的服务了！\n\n# 用户自定义实现类\n\n公司 A 想自己写几个临时实现类，但是不想让框架 `simple-company-frame` 导入。这时 `META-INF/my/custom/` 目录就起作用了。\n\n `simple-company` 模块新建了自己的临时实现类：\n\n ```java\n package top.uuanqin;\n\n/**\n * @author uuanqin\n */\npublic class TempConnection implements InternetService {\n    @Override\n    public void connectInternet() {\n        System.out.println(\"公司 A 的临时连接。\");\n    }\n}\n\n```\n\n编写 SPI 配置：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240731234049.webp)\n\n测试：\n\n```java\npackage top.uuanqin;\n\nimport top.uuanqin.frame.internet.InternetServiceFactory;\n\npublic class SpiMain {\n    public static void main(String[] args) {\n        InternetService internetService = InternetServiceFactory.getInstance(\"temp\");\n        internetService.connectInternet();\n    }\n}\n\n```\n\n输出：\n\n```\n公司 A 的临时连接。\n```\n\n# 改进与拓展思路\n\n## SPI 框架复用\n\n在上面的代码中，`SpiLoader` 并没有存在于「互联网服务」相关的硬编码。我们可以仿照上面的工厂写法，写出更多的服务工厂。这样我们的 Main 函数就可以是：\n\n```java\nInternetService internetService = InternetServiceFactory.getInstance(\"cn-mobile-suzhou\");\nTVService tvService = TVServiceFactory.getInstance(\"xiaomi\");\nFoodService foodService = FoodServiceFactory.getInstance(\"kfc\");\n// ...\n```\n\n## 常量存储\n\n写一个接口类，专门存储字符串常量以供使用：\n\n```java\npackage top.uuanqin.frame.internet;\n\n/**\n * @author uuanqin\n */\npublic interface ConnectionKeys {\n    String FAKE = \"fake\";\n    \n    String LOCAL = \"local\";\n    \n    String CN_MOBILE_SUZHOU = \"cn-mobile-suzhou\";\n}\n\n```\n\n## 配合全局配置\n\n结合 [[单例模式的应用——为 Java 程序应用全局配置|这篇文章]]，我们可以通过修改配置文件直接选择我们需要的服务。\n\n# 源代码\n\n[![Readme Card](https://github-readme-stats.uuanqin.top/api/pin/?username=uuanqin&repo=SPI-simple-example)](https://github.com/uuanqin/SPI-simple-example)\n\nGitHub 仓库地址：[uuanqin/SPI-simple-example (github.com)](https://github.com/uuanqin/SPI-simple-example)\n\n# 本文参考\n- [10分钟让你彻底明白Java SPI，附实例代码演示#安员外很有码_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1RY4y1v7mN/)\n- [知识星球·编程导航 - 手写 RFC 框架](https://yuyuanweb.feishu.cn/wiki/EweIwSYsXiEvCDkzS8BcTiAonyc)","categories":[{"name":"技术学习","api":"api/categories/技术学习.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"SPI","api":"api/tags/SPI.json"},{"name":"ServiceLoader","api":"api/tags/ServiceLoader.json"}]},"api":"api/posts/p/e7aa13ce.json"}