{"data":{"title":"UML 中类图与类的关系","slug":"高质量代码及设计模式/UML 中类图与类的关系","description":"关系是挺复杂的","date":"2025-06-18T02:32:48.000Z","updated":"2025-06-18T02:46:39.341Z","language":"zh-CN","comments":true,"url":"p/25e0b352/","cover":"https://cdn.gallery.uuanqin.top/img/202506181034799.webp","images":[],"content":"<p>类图（Class Diagram）描述系统中类的<strong>静态结构</strong>。不仅定义系统中的类，表示类之间的联系如关联、依赖、聚合等，也包括类的内部结构（类的属性和操作）。类图是以类为中心来组织的，类图中的其他元素或属于某个类或与类相关联。</p>\n<p>类图以反映类的结构（属性、操作）以及类之间的关系为主要目的，描述了软件系统的结构，是一种静态建模方法。类图中的“类”与面向对象语言中的“类”的概念是对应的，是对现实世界中的事物的抽象。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231228170613.webp\" alt=\"image.png\" /></p>\n\n<div class=\"callout\" data-callout=\"note\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">UML中的类图与对象图</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ul>\n<li>类图 Class Diagram：类图描述系统中类的<strong>静态结构</strong>。不仅定义系统中的类，表示类之间的联系如关联、依赖、聚合等，也包括类的内部结构（类的属性和操作）。</li>\n<li>对象图（Object Diagram）：对象图是类图的实例，几乎使用与类图完全相同的标识。他们的不同点在于对象图显示类的多个对象实例，而不是实际的类。<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231227210050.webp\" alt=\"image.png\" /></li>\n</ul>\n</div></div>\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">判断：类图是描述系统中类的静态结构，对象图是描述系统中类的动态结构。❌</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h1 id=\"类图中的事物及解释\"><a class=\"markdownIt-Anchor\" href=\"#类图中的事物及解释\"></a> 类图中的事物及解释</h1>\n<h2 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\"></a> 类</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231228170714.webp\" alt=\"image.png\" /></p>\n<p>从上到下分为三部分，分别是类名、属性和操作。</p>\n<ul>\n<li>类名是必须有的。</li>\n<li>类如果有属性，则每一个属性都必须有一个名字，另外还可以有其它的描述信息，如可见性、数据类型、缺省值等。</li>\n<li>类如果有操作，则每一个操作也都有一个名字，其它可选的信息包括可见性、参数的名字、参数类型、参数缺省值和操作的返回值的类型等。</li>\n</ul>\n<p>类型：</p>\n<ul>\n<li>接口：一组操作的集合，只有操作的声明而没有实现</li>\n<li>抽象类：不能被实例化的类，一般至少包含一个抽象操作</li>\n<li>模板类：一种参数化的类，在编译时把模板参数绑定到不同的数据类型，从而产生不同的类</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231228170856.webp\" alt=\"image.png\" /></p>\n<h3 id=\"在-uml-类图中表示具体类\"><a class=\"markdownIt-Anchor\" href=\"#在-uml-类图中表示具体类\"></a> 在 UML 类图中表示具体类</h3>\n<p>具体类在类图中用矩形框表示，矩形框分为三层：</p>\n<ul>\n<li>第一层是类名字；</li>\n<li>第二层是类的成员变量；</li>\n<li>第三层是类的方法。</li>\n</ul>\n<p>成员变量以及方法前的访问修饰符用符号来表示：</p>\n<table>\n<thead>\n<tr>\n<th>UML 表示</th>\n<th>Java 修饰符</th>\n<th>Rose 工具中的表示</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>+</code></td>\n<td><code>public</code></td>\n<td><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506180952446.webp\" alt=\"image.png\" width=\"23px\" /><br><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506180952767.webp\" alt=\"image.png\" width=\"26px\" /></td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td><code>private</code></td>\n<td><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506180953150.webp\" alt=\"image.png\" width=\"26px\" /><br></td>\n</tr>\n<tr>\n<td><code>#</code></td>\n<td><code>protected</code></td>\n<td><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506180958167.webp\" alt=\"image.png\" width=\"22px\" /><br></td>\n</tr>\n<tr>\n<td><code>~</code></td>\n<td><code>default</code>：同一个包中的类才能访问的方法和字段</td>\n<td rowspan=\"3\"></td>\n</tr>\n<tr>\n<td>不带符号</td>\n<td><code>default</code> 或者不关心</td>\n</tr>\n<tr>\n<td>下划线/<code>$</code></td>\n<td><code>static</code> 静态方法、静态字段</td>\n</tr>\n</tbody>\n</table>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/7d51a77f-e555-48eb-8844-a481853081a9.webp\" alt=\"\" width=\"500px\" /></p>\n<h3 id=\"在-uml-类图中表示抽象类\"><a class=\"markdownIt-Anchor\" href=\"#在-uml-类图中表示抽象类\"></a> 在 UML 类图中表示抽象类</h3>\n<p>抽象类在 UML 类图中同样用矩形框表示，但是抽象类的类名以及抽象方法的名字都用斜体字表示。</p>\n<p>例 1：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/5029c884-95a8-47de-81a5-beb7929cacef.webp\" alt=\"\" width=\"500px\" /></p>\n<p>例 2：抽象类的 C++ 与 Java 实现</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506181027467.webp\" alt=\"image.png\" width=\"160px\" /></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t   <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">Start</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t   <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">Stop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t   <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">int</span> <span class=\"title\">Run</span><span class=\"params\">(<span class=\"type\">float</span> fSpeed)</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t   <span class=\"type\">float</span> fMaxSpeed;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">int</span> <span class=\"title function_\">Start</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">int</span> <span class=\"title function_\">Stop</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"type\">int</span> <span class=\"title function_\">Run</span><span class=\"params\">(<span class=\"type\">float</span> fSpeed)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">float</span> fMaxSpeed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在-uml-类图中表示接口\"><a class=\"markdownIt-Anchor\" href=\"#在-uml-类图中表示接口\"></a> 在 UML 类图中表示接口</h3>\n<p>接口在类图中也是用矩形框表示，但是与类的表示法不同的是，接口在类图中的第一层顶端用构造型 <code>&lt;&lt;interface&gt;&gt;</code> 表示，下面是接口的名字，第二层是方法，如图 3 所示。此外，接口还有另一种表示法，俗称棒棒糖表示法，就是类上面的一根棒棒糖（圆圈 + 实线）。圆圈旁为接口名称，接口方法在实现类中出现。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/7f440eba-ad8e-4121-bb0f-b67ed7cf0dd8.webp\" alt=\"\" width=\"500px\" /></p>\n<p>表示接口时，可以默认 <code>abstract</code> 和 <code>public</code> 。不需要斜体表示。</p>\n<h3 id=\"在-uml-类图中表示包\"><a class=\"markdownIt-Anchor\" href=\"#在-uml-类图中表示包\"></a> 在 UML 类图中表示包</h3>\n<p>类和接口一般都出现在包中。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/3be12571-32ab-4e30-96ce-42876bdf6bc7.webp\" alt=\"\" width=\"500px\" /></p>\n<h2 id=\"关系\"><a class=\"markdownIt-Anchor\" href=\"#关系\"></a> 关系</h2>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/6b8635d8-b6a5-4909-b519-9df1b2f88191.webp\" alt=\"\" width=\"500px\" /></p>\n<p>注意，以上的类的关系分类方式仅供参考。在其他资料中可能会有以下说法，本文在此不再深究：</p>\n<ul>\n<li>依赖关系、关联关系是平级的。依赖关系是一种独立的关系。</li>\n<li>实现关系是泛化关系的子类型。</li>\n</ul>\n<h3 id=\"关联关系\"><a class=\"markdownIt-Anchor\" href=\"#关联关系\"></a> 关联关系</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231228172125.webp\" alt=\"image.png\" /></p>\n<p>关联关系描述了类的结构之间的关系。具有方向、名字、角色和多重性等信息。一般的关联关系语义较弱。也有两种语义较强，分别是聚合与组合。</p>\n<p>关联关系（Association）是指对象和对象之间的连接，它使一个对象知道另一个对象的属性和方法。在 Java 中，关联关系的代码表现形式为一个对象含有另一个对象的引用。</p>\n<p>关联关系有单向关联和双向关联。</p>\n<ul>\n<li>双向关联：如果两个对象都知道（即可以调用）对方的公共属性和操作，那么二者就是双向关联。</li>\n<li>单向关联：如果只有一个对象知道（即可以调用）另一个对象的公共属性和操作，那么就是单向关联。大多数关联都是单向关联，单向关联关系更容易建立和维护，有助于寻找可重用的类。</li>\n</ul>\n<p>特性：</p>\n<ul>\n<li>导航性（Navigatity）：在 UML 图中，双向关联关系用带<strong>双箭头的实线</strong>或者<strong>无箭头的实线双线</strong>表示。单向关联用一个<strong>带箭头的实线</strong>表示，<strong>箭头指向被关联的对象</strong>。被指的人不知道有人关联它。</li>\n<li>多重性（multipicity）：一个对象可以持有其它对象的数组或者集合。在 UML 中，通过放置多重性（multipicity）表达式在关联线的末端来表示：\n<ul>\n<li>数字：精确的数量</li>\n<li><code>0..</code>：表示 0 到多个</li>\n<li><code>0..1</code>：表示 0 或者 1 个，在 Java 中经常用一个空引用来实现</li>\n<li><code>1..*</code>：表示 1 到多个</li>\n</ul>\n</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/b6c27425-3041-4c3e-9f82-9bcbb76d70b7.webp\" alt=\"\" width=\"500px\" /></p>\n<p>可以在类名前面加上黑三角表示类之间的关联关系。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506181035026.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<h4 id=\"聚合关系\"><a class=\"markdownIt-Anchor\" href=\"#聚合关系\"></a> 聚合关系</h4>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231228172604.webp\" alt=\"image.png\" /></p>\n<p>聚合（Aggregation）是关联关系的一种特例，是特殊的关联关系。它体现的是整体与部分的<strong>拥有关系</strong>，即 “has a” 的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享，所以聚合关系也常称为<strong>共享关系</strong>。</p>\n<p>在 UML 图中，聚合关系用<strong>空心菱形加实线箭头</strong>表示，<strong>空心菱形在整体一方，箭头指向部分一方</strong>。</p>\n<blockquote>\n<p>哪边是容器哪边就是菱形箭头，像个小篮子一样。</p>\n</blockquote>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">聚合关系案例</div>\n</div>\n<div class=\"callout-content\"><p>公司部门与员工的关系，一个员工可以属于多个部门，一个部门撤消了，员工可以转到其它部门。<br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/c1b49bbe-dd98-46af-8330-06d1a8d24795.webp\" alt=\"\" width=\"500px\" /></p>\n</div></div><h4 id=\"组合关系\"><a class=\"markdownIt-Anchor\" href=\"#组合关系\"></a> 组合关系</h4>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231228180237.webp\" alt=\"image.png\" /></p>\n<p>组合（Composition）也是关联关系的一种特例，是语义更强的聚合。它同样体现整体与部分间的<strong>包含关系</strong>，即 “contains a” 的关系。但此时整体与部分是<strong>不可分的</strong>，部分也不能给其它整体共享，作为整体的对象负责部分的对象的生命周期（部分和整体具有相同的生命周期）。这种关系比聚合更强，也称为强聚合。如果 A 组合 B，则 A 需要知道 B 的生存周期，即可能 A 负责生成或者释放 B，或者 A 通过某种途径知道 B 的生成和释放。</p>\n<p>在 UML 图中，组合关系<strong>用实心菱形加实线箭头</strong>表示，<strong>实心菱形在整体一方，箭头指向部分一方</strong>。</p>\n<p>组合和聚合代码没什么区别，两个对象之间的关系到底是聚合还是组合看你怎么认为。如果一定要区分，那么如果在删除整体对象的时候，必须删掉部分对象，那么就是组合关系，否则可能就是聚合关系。从业务角度上来看，如果作为整体的对象必须要部分对象的参与，才能完成自己的职责，那么二者之间就是组合关系，否则就是聚合关系。</p>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">生活中的组合关系</div>\n</div>\n<div class=\"callout-content\"><p>人包含头、躯干、四肢，它们的生命周期一致。当人出生时，头、躯干、四肢同时诞生。当人死亡时，作为人体组成部分的头、躯干、四肢同时死亡。</p>\n<p>汽车与轮胎，汽车作为整体，轮胎作为部分。如果用在二手车销售业务环境下，二者之间就是聚合关系。因为轮胎作为汽车的一个组成部分，它和汽车可以分别生产以后装配起来使用，但汽车可以换新轮胎，轮胎也可以卸下来给其它汽车使用。如果用在驾驶系统业务环境上，汽车如果没有轮胎，就无法完成行驶任务，二者之间就是一个组合关系。</p>\n<p>再比如网上书店业务中的订单和订单项之间的关系，如果订单没有订单项，也就无法完成订单的业务，所以二者之间是组合关系。而购物车和商品之间的关系，因为商品的生命周期并不被购物车控制，商品可以被多个购物车共享，因此，二者之间是聚合关系。</p>\n</div></div>\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">UML 示例</div>\n</div>\n<div class=\"callout-content\"><p>组合关系，代码表现为 Dialog 的属性有 Button 和 TextBox 的对象。<br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506181016224.webp\" alt=\"image.png\" width=\"181px\" /></p>\n<p>组合关系，员工与时间卡<br />\n<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/7e07973a-e3be-4eba-bb7f-11b1ffaf4c70.webp\" alt=\"\" width=\"500px\" /></p>\n</div></div><h3 id=\"泛化关系\"><a class=\"markdownIt-Anchor\" href=\"#泛化关系\"></a> 泛化关系</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231228180554.webp\" alt=\"image.png\" /></p>\n<p>泛化关系（Generalization）是指对象与对象之间的继承关系。如果对象 A 和对象 B 之间的“is a”关系成立，那么二者之间就存在继承关系，对象 B 是父对象，对象 A 是子对象。比如：一个类（子类、子接口）继承另外一个类（称为父类、父接口）的功能。</p>\n<p>面向对象：从底部、从具体开始抽象。思路，现从有的各种各样的子类，再到父类。</p>\n<p>在 UML 类图中，泛化关系用<strong>空心三角和实线组成的箭头</strong>表示，<strong>从子类指向父类</strong>。关于箭头的方向理解：父类不知道子类的定义，子类一定知道父类的定义。只有在知道对方信息的时候才能指向对方，因此箭头方向是从子类指向父类。</p>\n<p>在 Java 中就是 <code>extends</code> 关键字。</p>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">代码与类图案例</div>\n</div>\n<div class=\"callout-content\"><p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/9d27f4cc-b11a-40f4-bdde-eb0fb2eeb328.webp\" alt=\"\" width=\"500px\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506181023928.webp\" alt=\"image.png\" width=\"201px\" /></p>\n</div></div><h3 id=\"实现关系\"><a class=\"markdownIt-Anchor\" href=\"#实现关系\"></a> 实现关系</h3>\n<p>实现关系是指接口及其实现类之间的关系。在 UML 类图中，实现关系用<strong>空心三角和虚线组成的箭头</strong>来表示，<strong>从实现类指向接口</strong>。</p>\n<p>在 C++ 语言里面，使用抽象类代替接口，使用泛化关系代替实现关系。在 Java 语言里面，有相应的关键字 <code>interface</code>、<code>implements</code>。</p>\n<p>例 1：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/b2b6d8be-6627-453c-b6aa-abb6eb978970.webp\" alt=\"\" width=\"500px\" /></p>\n<p>例 2：类 Circle、Rectangle 实现了接口 Shape 操作。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20231228182007.webp\" alt=\"image.png\" /></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">Draw</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> : <span class=\"keyword\">public</span> Shape&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Draw</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span>;</span><br><span class=\"line\">\t  Point ptCenter;</span><br><span class=\"line\">\t  <span class=\"type\">int</span> nRadius;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Shape</span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Draw</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Shape</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Draw</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Point ptCenter;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">int</span> nRadius;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"依赖关系\"><a class=\"markdownIt-Anchor\" href=\"#依赖关系\"></a> 依赖关系</h3>\n<p>依赖（Dependency）关系是一种弱关联关系，描述了一个类的变化对依赖于它的类产生影响的情况。有多种表现形式，例如绑定（bind）、友元（friend）等。</p>\n<p>如果对象 A 用到对象 B，但是和 B 的关系不是太明显的时候，就可以把这种关系看作是依赖关系。如果对象 A 依赖于对象 B，则 A “use a” B。比如驾驶员和汽车的关系，驾驶员使用汽车，二者之间就是依赖关系。</p>\n<p>在 UML 类图中，依赖关系用一个<strong>带虚线的箭头</strong>表示，<strong>由使用方指向被使用方</strong>，表示使用方对象持有被使用方对象的引用。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/ec8a73fa-453f-48d9-b8f6-9b6ffd745cf4.webp\" alt=\"\" width=\"500px\" /></p>\n<p>A 依赖于 B 的表现形式：</p>\n<ul>\n<li>B 为 A 的局部变量或构造器</li>\n<li>B 作为 A 的方法或构造器的参数</li>\n<li>B 作为 A 的方法的返回值</li>\n<li>A 调用 B 的静态方法</li>\n</ul>\n<p>代码清单 1 B.java：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String field1;   <span class=\"comment\">//成员变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.println(<span class=\"string\">&quot;在类B的方法1中&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;                 <span class=\"comment\">//静态方法</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;在类B的静态方法2中&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码清单 2 A.java：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//A依赖于B的第一种表现形式：B为A的局部变量</span></span><br><span class=\"line\">    <span class=\"type\">B</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">    b.method1();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//A依赖于B的第二种表现形式： 调用B的静态方法</span></span><br><span class=\"line\">    B.method2();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">(B b)</span>  &#123;</span><br><span class=\"line\">    <span class=\"comment\">//A依赖于B的第三种表现形式：B作为A的方法参数</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> b.field1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//A依赖于B的第四种表现形式：B作为A的方法的返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> B <span class=\"title function_\">method4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">B</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例 1：绑定依赖</p>\n<p>模板类 <code>Stack&lt;T&gt;</code> 定义了栈相关的操作；IntStack 将参数 T 与实际类型 int 绑定，使得所有操作都针对 int 类型的数据。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506181026778.webp\" alt=\"image.png\" width=\"226px\" /></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t  <span class=\"type\">int</span> size;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Push</span><span class=\"params\">(T elem)</span></span>;</span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"type\">const</span> T&amp; <span class=\"title\">GetTop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Stack&lt;<span class=\"type\">float</span>&gt; FloatStack;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 编译器生成</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FloatStack</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t  <span class=\"type\">int</span> size;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Push</span><span class=\"params\">(<span class=\"type\">float</span> elem)</span></span>;</span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Pop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t  <span class=\"function\"><span class=\"type\">const</span> <span class=\"type\">float</span>&amp; <span class=\"title\">GetTop</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>例 2：类 Memento 和类 Originator 建立了友元依赖关系，以便 Originator 使用 Memento 的私有变量 state。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506181036526.webp\" alt=\"image.png\" width=\"119px\" /></p>\n<h1 id=\"类图案例\"><a class=\"markdownIt-Anchor\" href=\"#类图案例\"></a> 类图案例</h1>\n<p>本节将配合研究生课程《系统建模与分析》类图相关案例演示。</p>\n<h2 id=\"图形编辑器\"><a class=\"markdownIt-Anchor\" href=\"#图形编辑器\"></a> 图形编辑器</h2>\n<p>图形编辑器一般都具有一些基本图形，如直线、矩形等，用户可以直接使用基本图形画图，也可以把基本图形组合在一起创建复杂图形。如果区别对待基本图形和组合图形，会使代码变得复杂，而且多数情况下用户认为二者是一样的。组合模式可以用相同的方式处理两种图形。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506181026837.webp\" alt=\"image.png\" width=\"350px\" /></p>\n<ul>\n<li>Graphics: 基本图形和组合图形的父类，声明了所有图形共同的操作，如 Draw；也声明了专用于组合图形管理子图形的操作，如 Add、Remove</li>\n<li>Line、Rectangle：基本图形类</li>\n<li>GroupGraphics：组合图形类，与父类有组合关系，从而可以组合所有图形对象（基本图形和组合图形）</li>\n</ul>\n<h2 id=\"演出售票系统\"><a class=\"markdownIt-Anchor\" href=\"#演出售票系统\"></a> 演出售票系统</h2>\n<p>在用例驱动的开发过程中，通过分析各个用例及参与者得到类图。分析用例图的过程中需要根据面向对象的原则设计类和关系，根据用例的细节设计类的属性和操作。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506181029024.webp\" alt=\"image.png\" width=\"400px\" /></p>\n<p>在这里只考虑以下三个用例：</p>\n<ul>\n<li>Buy tickets：买个人票</li>\n<li>Buy Subscription：买套票</li>\n<li>Make charges：信用卡付款</li>\n</ul>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506181030399.webp\" alt=\"image.png\" /></p>\n<h1 id=\"本文-plantuml-归档\"><a class=\"markdownIt-Anchor\" href=\"#本文-plantuml-归档\"></a> 本文 PlantUML 归档</h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Dialog&#123;</span><br><span class=\"line\">\t- btnOK:Button</span><br><span class=\"line\">\t- btnCancel: Button</span><br><span class=\"line\">\t- txtInfo: TextBox</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Button</span><br><span class=\"line\">class TextBox</span><br><span class=\"line\">Dialog *-- Button</span><br><span class=\"line\">Dialog *-- TextBox</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstract class Vehicle&#123;</span><br><span class=\"line\">\t- fMaxSpeed:float</span><br><span class=\"line\">\t+ Start():int</span><br><span class=\"line\">\t+ Stop():int</span><br><span class=\"line\">\t+ Run(float fSpeed):int</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstract class Account&#123;</span><br><span class=\"line\">\t- balance: double = 1</span><br><span class=\"line\">\t+ Deposit(amount:double) : int</span><br><span class=\"line\">\t+ &#123;abstract&#125; ComputeInterest() : double</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class SavingsAccount&#123;</span><br><span class=\"line\">\t+ ComputeInterset():double</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Account&lt;|--SavingsAccount</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Stack&lt;T&gt;&#123; </span><br><span class=\"line\">\t- size:int</span><br><span class=\"line\">\t+ Push(elem:T): int</span><br><span class=\"line\">    + Pop():int</span><br><span class=\"line\">    + GetTop(): const T &amp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class IntStack</span><br><span class=\"line\">class FloatStack</span><br><span class=\"line\">Stack&lt;..IntStack:&lt;&lt;bind&gt;&gt;</span><br><span class=\"line\">Stack&lt;..FloatStack:&lt;&lt;bind&gt;&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abstract class Graphics &#123;</span><br><span class=\"line\">   &#123;abstract&#125; +Draw()</span><br><span class=\"line\">   &#123;abstract&#125; +Add(g:Graphics)</span><br><span class=\"line\">   &#123;abstract&#125; +Remove(g:Graphics)</span><br><span class=\"line\">   &#123;abstract&#125; +GetChild(index:int)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Line&#123;</span><br><span class=\"line\">\t+Draw()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Rectangle&#123;</span><br><span class=\"line\">\t+Draw()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class GroupGraphics&#123;</span><br><span class=\"line\">\t+Draw()</span><br><span class=\"line\">\t+Add(g:Graphics)</span><br><span class=\"line\">\t+Remove(g:Graphics)</span><br><span class=\"line\">\t+GetChild(index:int)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">skinparam classAttributeIconSize 0</span><br><span class=\"line\">skinparam groupInheritance 3</span><br><span class=\"line\"></span><br><span class=\"line\">Graphics &lt;|-- Line</span><br><span class=\"line\">Graphics &lt;|-- Rectangle</span><br><span class=\"line\">Graphics &lt;|-- GroupGraphics</span><br><span class=\"line\">Graphics --*GroupGraphics: + children</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">left to right direction</span><br><span class=\"line\"></span><br><span class=\"line\">rectangle BoxOffice &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tusecase (Buy Subscription) as bs</span><br><span class=\"line\">\tusecase (Make charges) as mc</span><br><span class=\"line\">        usecase (Buy tickets) as bt</span><br><span class=\"line\">\tusecase (Survey sales) as ss</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">actor 信息亭 as xxt</span><br><span class=\"line\">actor clerk</span><br><span class=\"line\">actor 监督员 as jdy</span><br><span class=\"line\">actor 信用卡服务商 as fws</span><br><span class=\"line\"></span><br><span class=\"line\">xxt--&gt;bt</span><br><span class=\"line\">bt &lt;-- clerk</span><br><span class=\"line\">bs &lt;-- clerk</span><br><span class=\"line\">mc&lt;-bt:&lt;&lt;include&gt;&gt;</span><br><span class=\"line\">mc&lt;-bs:&lt;&lt;include&gt;&gt;</span><br><span class=\"line\">ss&lt;--jdy</span><br><span class=\"line\">mc&lt;--fws</span><br><span class=\"line\">@enduml</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skinparam groupInheritance 2</span><br><span class=\"line\">class Customer&#123;</span><br><span class=\"line\">\t- name: string</span><br><span class=\"line\">\t- phone: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Reservation&#123;</span><br><span class=\"line\">\t- date: Date</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class SubscriptionSeries&#123;</span><br><span class=\"line\">\t- series: int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class IndividualReservation&#123;&#125;</span><br><span class=\"line\">class Ticket&#123;</span><br><span class=\"line\">\t- no:int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Customer &quot;1&quot; -- &quot;1..*&quot; Reservation</span><br><span class=\"line\">Reservation &lt;|-- SubscriptionSeries</span><br><span class=\"line\"></span><br><span class=\"line\">Reservation &lt;|-- IndividualReservation</span><br><span class=\"line\">note left on link</span><br><span class=\"line\">使用泛化关系处理客户</span><br><span class=\"line\">购买个人票和套票两种不同情况</span><br><span class=\"line\">end note</span><br><span class=\"line\">SubscriptionSeries &quot;0..1&quot; -- &quot;3..6&quot; Ticket</span><br><span class=\"line\">IndividualReservation &quot;0..1&quot; -- &quot;1&quot; Ticket</span><br><span class=\"line\"></span><br><span class=\"line\">class kiosk&#123;</span><br><span class=\"line\">\t+ ShowAvailability(seatlist)</span><br><span class=\"line\">\t+ DemandPayment(cost)</span><br><span class=\"line\">\t+ PrintTickets(performance, seats)</span><br><span class=\"line\">\t+ EjectCard()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class CreditCardService&#123;</span><br><span class=\"line\">\t+ Charge(cardnumber,cost)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class BoxOffice&#123;</span><br><span class=\"line\">\t+ Request(count, performance)</span><br><span class=\"line\">\t+ Select(seats)</span><br><span class=\"line\">\t+ InsertCard(cardnumber, password)</span><br><span class=\"line\">\t+ Authorized()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Performance&#123;</span><br><span class=\"line\">\t- no:int</span><br><span class=\"line\">\t- date:Date</span><br><span class=\"line\">\t- time:Time</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Seat&#123;</span><br><span class=\"line\">\t- no:int</span><br><span class=\"line\">\t- colomn:int</span><br><span class=\"line\">\t- row:int</span><br><span class=\"line\">\t- available:bool</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">kiosk--BoxOffice</span><br><span class=\"line\">CreditCardService--BoxOffice</span><br><span class=\"line\">BoxOffice--Performance</span><br><span class=\"line\">Seat &quot;0..*&quot; -- &quot;1&quot; Performance</span><br><span class=\"line\">Ticket &quot;1&quot; -- &quot;1&quot; Seat</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">left to right direction</span><br><span class=\"line\">class Client</span><br><span class=\"line\">Client --&gt; Target : Uses &gt;</span><br><span class=\"line\">note right of Target: Client uses Target</span><br><span class=\"line\"></span><br><span class=\"line\">Factory --&gt; Product : Creates &gt;</span><br><span class=\"line\">note right of Product: Factory creates Product</span><br><span class=\"line\"></span><br><span class=\"line\">Subject --&gt; Observer : Notifies &gt;</span><br><span class=\"line\">note right of Observer: Subject notifies Observer</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Memento&#123;</span><br><span class=\"line\">- state:State*</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Originator</span><br><span class=\"line\"></span><br><span class=\"line\">Memento&lt;..Originator:&lt;&lt;friend&gt;&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/109655171\">30 分钟学会 UML 类图 - 知乎 (zhihu.com)</a></li>\n<li>本科学习笔记《面向对象设计与设计模式》</li>\n<li>研究生课程《系统建模与分析》相关课件</li>\n</ul>\n","raw":"---\ntitle: UML 中类图与类的关系\ntags:\n  - UML\n  - 类图\n  - Java\n  - C++\ncover: 'https://cdn.gallery.uuanqin.top/img/202506181034799.webp'\ndescription: 关系是挺复杂的\nkatex: false\ncategories:\n  - 高质量代码及设计模式\nabbrlink: 25e0b352\ndate: 2025-06-18 10:32:48\ntop_img:\n---\n\n类图（Class Diagram）描述系统中类的**静态结构**。不仅定义系统中的类，表示类之间的联系如关联、依赖、聚合等，也包括类的内部结构（类的属性和操作）。类图是以类为中心来组织的，类图中的其他元素或属于某个类或与类相关联。\n\n类图以反映类的结构（属性、操作）以及类之间的关系为主要目的，描述了软件系统的结构，是一种静态建模方法。类图中的“类”与面向对象语言中的“类”的概念是对应的，是对现实世界中的事物的抽象。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231228170613.webp)\n\n> [!note] UML中的类图与对象图\n> - 类图 Class Diagram：类图描述系统中类的**静态结构**。不仅定义系统中的类，表示类之间的联系如关联、依赖、聚合等，也包括类的内部结构（类的属性和操作）。\n> - 对象图（Object Diagram）：对象图是类图的实例，几乎使用与类图完全相同的标识。他们的不同点在于对象图显示类的多个对象实例，而不是实际的类。![image.png](https://cdn.gallery.uuanqin.top/img/20231227210050.webp)\n\n> [!example] 判断：类图是描述系统中类的静态结构，对象图是描述系统中类的动态结构。❌\n\n# 类图中的事物及解释\n\n## 类\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231228170714.webp)\n\n从上到下分为三部分，分别是类名、属性和操作。\n\n- 类名是必须有的。\n- 类如果有属性，则每一个属性都必须有一个名字，另外还可以有其它的描述信息，如可见性、数据类型、缺省值等。\n- 类如果有操作，则每一个操作也都有一个名字，其它可选的信息包括可见性、参数的名字、参数类型、参数缺省值和操作的返回值的类型等。\n\n类型：\n\n- 接口：一组操作的集合，只有操作的声明而没有实现\n- 抽象类：不能被实例化的类，一般至少包含一个抽象操作\n- 模板类：一种参数化的类，在编译时把模板参数绑定到不同的数据类型，从而产生不同的类\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231228170856.webp)\n\n### 在 UML 类图中表示具体类\n\n具体类在类图中用矩形框表示，矩形框分为三层：\n\n- 第一层是类名字；\n- 第二层是类的成员变量；\n- 第三层是类的方法。\n\n成员变量以及方法前的访问修饰符用符号来表示：\n\n| UML 表示  | Java 修饰符                    | Rose 工具中的表示                                                                                                                                              |\n| ------- | --------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `+`     | `public`                    | ![image.png\\|23](https://cdn.gallery.uuanqin.top/img/202506180952446.webp)<br>![image.png\\|26](https://cdn.gallery.uuanqin.top/img/202506180952767.webp) |\n| `-`     | `private`                   | ![image.png\\|26](https://cdn.gallery.uuanqin.top/img/202506180953150.webp)<br>                                                                           |\n| `#`     | `protected`                 | ![image.png\\|22](https://cdn.gallery.uuanqin.top/img/202506180958167.webp)<br>                                                                           |\n| `~`     | `default`：同一个包中的类才能访问的方法和字段 |                                                                                                                                                          |\n| 不带符号    | `default` 或者不关心             |                                                                                                                                                          |\n| 下划线/`$` | `static` 静态方法、静态字段           |                                                                                                                                                          |\n\n![|500](https://cdn.gallery.uuanqin.top/img/7d51a77f-e555-48eb-8844-a481853081a9.webp)\n\n### 在 UML 类图中表示抽象类\n\n抽象类在 UML 类图中同样用矩形框表示，但是抽象类的类名以及抽象方法的名字都用斜体字表示。\n\n例 1：\n\n![|500](https://cdn.gallery.uuanqin.top/img/5029c884-95a8-47de-81a5-beb7929cacef.webp)\n\n例 2：抽象类的 C++ 与 Java 实现\n\n![image.png|160](https://cdn.gallery.uuanqin.top/img/202506181027467.webp)\n\n```C++\nclass Vehicle\n{\n\tpublic:\n\t   virtual int Start() = 0;\n\t   virtual int Stop() = 0;\n\t   virtual int Run(float fSpeed) = 0;\n\tprivate:\n\t   float fMaxSpeed;\n};\n```\n```java\npublic abstract class Vehicle\n{\n  public abstract int Start();\n  public abstract int Stop();\n  public abstract int Run(float fSpeed);\n\n  private float fMaxSpeed;\n}\n```\n\n### 在 UML 类图中表示接口\n\n接口在类图中也是用矩形框表示，但是与类的表示法不同的是，接口在类图中的第一层顶端用构造型 `<<interface>>` 表示，下面是接口的名字，第二层是方法，如图 3 所示。此外，接口还有另一种表示法，俗称棒棒糖表示法，就是类上面的一根棒棒糖（圆圈 + 实线）。圆圈旁为接口名称，接口方法在实现类中出现。\n\n![|500](https://cdn.gallery.uuanqin.top/img/7f440eba-ad8e-4121-bb0f-b67ed7cf0dd8.webp)\n\n表示接口时，可以默认 `abstract` 和 `public` 。不需要斜体表示。\n\n### 在 UML 类图中表示包\n\n类和接口一般都出现在包中。\n\n![|500](https://cdn.gallery.uuanqin.top/img/3be12571-32ab-4e30-96ce-42876bdf6bc7.webp)\n\n## 关系\n\n![|500](https://cdn.gallery.uuanqin.top/img/6b8635d8-b6a5-4909-b519-9df1b2f88191.webp)\n\n注意，以上的类的关系分类方式仅供参考。在其他资料中可能会有以下说法，本文在此不再深究：\n\n- 依赖关系、关联关系是平级的。依赖关系是一种独立的关系。\n- 实现关系是泛化关系的子类型。\n\n### 关联关系\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231228172125.webp)\n\n关联关系描述了类的结构之间的关系。具有方向、名字、角色和多重性等信息。一般的关联关系语义较弱。也有两种语义较强，分别是聚合与组合。\n\n关联关系（Association）是指对象和对象之间的连接，它使一个对象知道另一个对象的属性和方法。在 Java 中，关联关系的代码表现形式为一个对象含有另一个对象的引用。\n\n关联关系有单向关联和双向关联。\n\n- 双向关联：如果两个对象都知道（即可以调用）对方的公共属性和操作，那么二者就是双向关联。\n- 单向关联：如果只有一个对象知道（即可以调用）另一个对象的公共属性和操作，那么就是单向关联。大多数关联都是单向关联，单向关联关系更容易建立和维护，有助于寻找可重用的类。\n\n特性：\n\n- 导航性（Navigatity）：在 UML 图中，双向关联关系用带**双箭头的实线**或者**无箭头的实线双线**表示。单向关联用一个**带箭头的实线**表示，**箭头指向被关联的对象**。被指的人不知道有人关联它。\n- 多重性（multipicity）：一个对象可以持有其它对象的数组或者集合。在 UML 中，通过放置多重性（multipicity）表达式在关联线的末端来表示：\n\t- 数字：精确的数量\n\t- `0..`：表示 0 到多个\n\t- `0..1`：表示 0 或者 1 个，在 Java 中经常用一个空引用来实现\n\t- `1..*`：表示 1 到多个\n\n![|500](https://cdn.gallery.uuanqin.top/img/b6c27425-3041-4c3e-9f82-9bcbb76d70b7.webp)\n\n可以在类名前面加上黑三角表示类之间的关联关系。\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/202506181035026.webp)\n\n#### 聚合关系\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231228172604.webp)\n\n聚合（Aggregation）是关联关系的一种特例，是特殊的关联关系。它体现的是整体与部分的**拥有关系**，即 “has a” 的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享，所以聚合关系也常称为**共享关系**。\n\n在 UML 图中，聚合关系用**空心菱形加实线箭头**表示，**空心菱形在整体一方，箭头指向部分一方**。\n\n> 哪边是容器哪边就是菱形箭头，像个小篮子一样。\n\n> [!example] 聚合关系案例\n> 公司部门与员工的关系，一个员工可以属于多个部门，一个部门撤消了，员工可以转到其它部门。\n> ![|500](https://cdn.gallery.uuanqin.top/img/c1b49bbe-dd98-46af-8330-06d1a8d24795.webp)\n\n#### 组合关系\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231228180237.webp)\n\n组合（Composition）也是关联关系的一种特例，是语义更强的聚合。它同样体现整体与部分间的**包含关系**，即 “contains a” 的关系。但此时整体与部分是**不可分的**，部分也不能给其它整体共享，作为整体的对象负责部分的对象的生命周期（部分和整体具有相同的生命周期）。这种关系比聚合更强，也称为强聚合。如果 A 组合 B，则 A 需要知道 B 的生存周期，即可能 A 负责生成或者释放 B，或者 A 通过某种途径知道 B 的生成和释放。\n\n在 UML 图中，组合关系**用实心菱形加实线箭头**表示，**实心菱形在整体一方，箭头指向部分一方**。\n\n组合和聚合代码没什么区别，两个对象之间的关系到底是聚合还是组合看你怎么认为。如果一定要区分，那么如果在删除整体对象的时候，必须删掉部分对象，那么就是组合关系，否则可能就是聚合关系。从业务角度上来看，如果作为整体的对象必须要部分对象的参与，才能完成自己的职责，那么二者之间就是组合关系，否则就是聚合关系。\n\n> [!example] 生活中的组合关系\n> 人包含头、躯干、四肢，它们的生命周期一致。当人出生时，头、躯干、四肢同时诞生。当人死亡时，作为人体组成部分的头、躯干、四肢同时死亡。\n>\n> 汽车与轮胎，汽车作为整体，轮胎作为部分。如果用在二手车销售业务环境下，二者之间就是聚合关系。因为轮胎作为汽车的一个组成部分，它和汽车可以分别生产以后装配起来使用，但汽车可以换新轮胎，轮胎也可以卸下来给其它汽车使用。如果用在驾驶系统业务环境上，汽车如果没有轮胎，就无法完成行驶任务，二者之间就是一个组合关系。\n>\n> 再比如网上书店业务中的订单和订单项之间的关系，如果订单没有订单项，也就无法完成订单的业务，所以二者之间是组合关系。而购物车和商品之间的关系，因为商品的生命周期并不被购物车控制，商品可以被多个购物车共享，因此，二者之间是聚合关系。\n\n> [!example] UML 示例\n> 组合关系，代码表现为 Dialog 的属性有 Button 和 TextBox 的对象。\n> ![image.png|181](https://cdn.gallery.uuanqin.top/img/202506181016224.webp)\n>\n> 组合关系，员工与时间卡\n> ![|500](https://cdn.gallery.uuanqin.top/img/7e07973a-e3be-4eba-bb7f-11b1ffaf4c70.webp)\n\n### 泛化关系\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231228180554.webp)\n\n泛化关系（Generalization）是指对象与对象之间的继承关系。如果对象 A 和对象 B 之间的“is a”关系成立，那么二者之间就存在继承关系，对象 B 是父对象，对象 A 是子对象。比如：一个类（子类、子接口）继承另外一个类（称为父类、父接口）的功能。\n\n面向对象：从底部、从具体开始抽象。思路，现从有的各种各样的子类，再到父类。\n\n在 UML 类图中，泛化关系用**空心三角和实线组成的箭头**表示，**从子类指向父类**。关于箭头的方向理解：父类不知道子类的定义，子类一定知道父类的定义。只有在知道对方信息的时候才能指向对方，因此箭头方向是从子类指向父类。\n\n在 Java 中就是 `extends` 关键字。\n\n> [!example] 代码与类图案例\n> ![|500](https://cdn.gallery.uuanqin.top/img/9d27f4cc-b11a-40f4-bdde-eb0fb2eeb328.webp)\n>\n> ![image.png|201](https://cdn.gallery.uuanqin.top/img/202506181023928.webp)\n\n### 实现关系\n\n实现关系是指接口及其实现类之间的关系。在 UML 类图中，实现关系用**空心三角和虚线组成的箭头**来表示，**从实现类指向接口**。\n\n在 C++ 语言里面，使用抽象类代替接口，使用泛化关系代替实现关系。在 Java 语言里面，有相应的关键字 `interface`、`implements`。\n\n例 1：\n\n![|500](https://cdn.gallery.uuanqin.top/img/b2b6d8be-6627-453c-b6aa-abb6eb978970.webp)\n\n例 2：类 Circle、Rectangle 实现了接口 Shape 操作。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20231228182007.webp)\n\n```C++\nclass Shape{ \n\tpublic:\n\t  virtual void Draw() = 0;\n};\n\nclass Circle : public Shape{\n\tpublic:\n\t void Draw();\n\tprivate;\n\t  Point ptCenter;\n\t  int nRadius;\n};\n```\n```java\npublic interface Shape{ \n\tpublic abstract void Draw();\n}\n\npublic class Circle implements Shape\n{\n\tpublic void Draw();\n\tprivate Point ptCenter;\n\tprivate int nRadius;\n}\n```\n\n### 依赖关系\n\n依赖（Dependency）关系是一种弱关联关系，描述了一个类的变化对依赖于它的类产生影响的情况。有多种表现形式，例如绑定（bind）、友元（friend）等。\n\n如果对象 A 用到对象 B，但是和 B 的关系不是太明显的时候，就可以把这种关系看作是依赖关系。如果对象 A 依赖于对象 B，则 A “use a” B。比如驾驶员和汽车的关系，驾驶员使用汽车，二者之间就是依赖关系。\n\n在 UML 类图中，依赖关系用一个**带虚线的箭头**表示，**由使用方指向被使用方**，表示使用方对象持有被使用方对象的引用。\n\n![|500](https://cdn.gallery.uuanqin.top/img/ec8a73fa-453f-48d9-b8f6-9b6ffd745cf4.webp)\n\nA 依赖于 B 的表现形式：\n\n- B 为 A 的局部变量或构造器\n- B 作为 A 的方法或构造器的参数\n- B 作为 A 的方法的返回值\n- A 调用 B 的静态方法\n\n代码清单 1 B.java：\n\n```Java\npublic class B {\n  public String field1;   //成员变量\n\n  public void method1() {\n    System.println(\"在类B的方法1中\");\n  }\n\n  public static void method2() {                 //静态方法\n    System.out.println(\"在类B的静态方法2中\");\n  }\n}\n```\n\n代码清单 2 A.java：\n\n```Java\npublic class A {\n  public void method1() {\n    //A依赖于B的第一种表现形式：B为A的局部变量\n    B b = new B();\n    b.method1();\n  }\n\n  public void method2() {\n    //A依赖于B的第二种表现形式： 调用B的静态方法\n    B.method2();\n  }\n\n  public void method3(B b)  {\n    //A依赖于B的第三种表现形式：B作为A的方法参数\n    String s = b.field1;\n  }\n\n  //A依赖于B的第四种表现形式：B作为A的方法的返回值\n  public B method4() {\n    return new B();\n  }\n}\n```\n\n例 1：绑定依赖\n\n模板类 `Stack<T>` 定义了栈相关的操作；IntStack 将参数 T 与实际类型 int 绑定，使得所有操作都针对 int 类型的数据。\n\n![image.png|226](https://cdn.gallery.uuanqin.top/img/202506181026778.webp)\n\n```c++\ntemplate<typename T>\nclass Stack\n{ \n\tprivate:\n\t  int size;\n\tpublic:\n\t  int Push(T elem);\n\t  int Pop();\n\t  const T& GetTop();\n};\n\ntypedef Stack<float> FloatStack;\n```\n```c++\n// 编译器生成\nclass FloatStack\n{ \n\tprivate:\n\t  int size;\n\tpublic:\n\t  int Push(float elem);\n\t  int Pop();\n\t  const float& GetTop();\n};\n```\n\n例 2：类 Memento 和类 Originator 建立了友元依赖关系，以便 Originator 使用 Memento 的私有变量 state。\n\n![image.png|119](https://cdn.gallery.uuanqin.top/img/202506181036526.webp)\n\n# 类图案例\n\n本节将配合研究生课程《系统建模与分析》类图相关案例演示。\n\n## 图形编辑器\n\n图形编辑器一般都具有一些基本图形，如直线、矩形等，用户可以直接使用基本图形画图，也可以把基本图形组合在一起创建复杂图形。如果区别对待基本图形和组合图形，会使代码变得复杂，而且多数情况下用户认为二者是一样的。组合模式可以用相同的方式处理两种图形。\n\n![image.png|350](https://cdn.gallery.uuanqin.top/img/202506181026837.webp)\n\n- Graphics: 基本图形和组合图形的父类，声明了所有图形共同的操作，如 Draw；也声明了专用于组合图形管理子图形的操作，如 Add、Remove\n- Line、Rectangle：基本图形类\n- GroupGraphics：组合图形类，与父类有组合关系，从而可以组合所有图形对象（基本图形和组合图形）\n\n## 演出售票系统\n\n在用例驱动的开发过程中，通过分析各个用例及参与者得到类图。分析用例图的过程中需要根据面向对象的原则设计类和关系，根据用例的细节设计类的属性和操作。\n\n![image.png|400](https://cdn.gallery.uuanqin.top/img/202506181029024.webp)\n\n在这里只考虑以下三个用例：\n\n- Buy tickets：买个人票\n- Buy Subscription：买套票\n- Make charges：信用卡付款\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202506181030399.webp)\n\n# 本文 PlantUML 归档\n\n```plantuml\nclass Dialog{\n\t- btnOK:Button\n\t- btnCancel: Button\n\t- txtInfo: TextBox\n}\nclass Button\nclass TextBox\nDialog *-- Button\nDialog *-- TextBox\n```\n\n```plantuml\nabstract class Vehicle{\n\t- fMaxSpeed:float\n\t+ Start():int\n\t+ Stop():int\n\t+ Run(float fSpeed):int\n}\n```\n\n```plantuml\nabstract class Account{\n\t- balance: double = 1\n\t+ Deposit(amount:double) : int\n\t+ {abstract} ComputeInterest() : double\n}\nclass SavingsAccount{\n\t+ ComputeInterset():double\n}\nAccount<|--SavingsAccount\n```\n\n```plantuml\nclass Stack<T>{ \n\t- size:int\n\t+ Push(elem:T): int\n    + Pop():int\n    + GetTop(): const T &\n}\nclass IntStack\nclass FloatStack\nStack<..IntStack:<<bind>>\nStack<..FloatStack:<<bind>>\n```\n\n```plantuml\nabstract class Graphics {\n   {abstract} +Draw()\n   {abstract} +Add(g:Graphics)\n   {abstract} +Remove(g:Graphics)\n   {abstract} +GetChild(index:int)\n}\n\nclass Line{\n\t+Draw()\n}\n\nclass Rectangle{\n\t+Draw()\n}\n\nclass GroupGraphics{\n\t+Draw()\n\t+Add(g:Graphics)\n\t+Remove(g:Graphics)\n\t+GetChild(index:int)\n}\nskinparam classAttributeIconSize 0\nskinparam groupInheritance 3\n\nGraphics <|-- Line\nGraphics <|-- Rectangle\nGraphics <|-- GroupGraphics\nGraphics --*GroupGraphics: + children\n```\n\n```plantuml\n@startuml\nleft to right direction\n\nrectangle BoxOffice {\n\t\n\tusecase (Buy Subscription) as bs\n\tusecase (Make charges) as mc\n        usecase (Buy tickets) as bt\n\tusecase (Survey sales) as ss\n}\nactor 信息亭 as xxt\nactor clerk\nactor 监督员 as jdy\nactor 信用卡服务商 as fws\n\nxxt-->bt\nbt <-- clerk\nbs <-- clerk\nmc<-bt:<<include>>\nmc<-bs:<<include>>\nss<--jdy\nmc<--fws\n@enduml\n\n```\n\n```plantuml\nskinparam groupInheritance 2\nclass Customer{\n\t- name: string\n\t- phone: string\n}\nclass Reservation{\n\t- date: Date\n}\nclass SubscriptionSeries{\n\t- series: int\n}\nclass IndividualReservation{}\nclass Ticket{\n\t- no:int\n}\nCustomer \"1\" -- \"1..*\" Reservation\nReservation <|-- SubscriptionSeries\n\nReservation <|-- IndividualReservation\nnote left on link\n使用泛化关系处理客户\n购买个人票和套票两种不同情况\nend note\nSubscriptionSeries \"0..1\" -- \"3..6\" Ticket\nIndividualReservation \"0..1\" -- \"1\" Ticket\n\nclass kiosk{\n\t+ ShowAvailability(seatlist)\n\t+ DemandPayment(cost)\n\t+ PrintTickets(performance, seats)\n\t+ EjectCard()\n}\nclass CreditCardService{\n\t+ Charge(cardnumber,cost)\n}\nclass BoxOffice{\n\t+ Request(count, performance)\n\t+ Select(seats)\n\t+ InsertCard(cardnumber, password)\n\t+ Authorized()\n}\nclass Performance{\n\t- no:int\n\t- date:Date\n\t- time:Time\n}\nclass Seat{\n\t- no:int\n\t- colomn:int\n\t- row:int\n\t- available:bool\n}\nkiosk--BoxOffice\nCreditCardService--BoxOffice\nBoxOffice--Performance\nSeat \"0..*\" -- \"1\" Performance\nTicket \"1\" -- \"1\" Seat\n```\n\n```plantuml\nleft to right direction\nclass Client\nClient --> Target : Uses >\nnote right of Target: Client uses Target\n\nFactory --> Product : Creates >\nnote right of Product: Factory creates Product\n\nSubject --> Observer : Notifies >\nnote right of Observer: Subject notifies Observer\n```\n\n```plantuml\nclass Memento{\n- state:State*\n}\nclass Originator\n\nMemento<..Originator:<<friend>>\n```\n\n# 本文参考\n\n- [30 分钟学会 UML 类图 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/109655171)\n- 本科学习笔记《面向对象设计与设计模式》\n- 研究生课程《系统建模与分析》相关课件","categories":[{"name":"高质量代码及设计模式","api":"api/categories/高质量代码及设计模式.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"C++","api":"api/tags/C.json"},{"name":"UML","api":"api/tags/UML.json"},{"name":"类图","api":"api/tags/类图.json"}]},"api":"api/posts/p/25e0b352.json"}