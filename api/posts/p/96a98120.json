{"data":{"title":"原型模式：学会克隆","slug":"高质量代码及设计模式/原型模式：学会克隆","description":"用了clone其实就是有原型模式的意思","date":"2025-07-21T15:36:14.000Z","updated":"2025-08-18T12:48:20.277Z","language":"zh-CN","comments":true,"url":"p/96a98120/","cover":"https://cdn.gallery.uuanqin.top/img/202507212334117.webp","images":[],"content":"<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202503040232648.webp\" alt=\"image.png\" width=\"350px\" /></p>\n<p>通过 <code>new</code> 关键字生成实例是需要指定类名的。在开发过程中，我们需要「在不指定类名的前提下生成实例」的需求。</p>\n<p>在以下情况，我们就不能根据类来生成实例，而要根据现有的实例来生成新的实例。</p>\n<ol>\n<li>对象种类繁多，无法将它们整合到一个类中。需要处理的对象太多，如果将它们分别作为一个类，必须要编写很多个类文件。</li>\n<li>难以根据类生成实例。生成实例的过程太复杂。</li>\n<li>想解耦框架与生成的实例时。想让生成实例的框架不依赖于具体的类。</li>\n</ol>\n<p>Prototype 模式：</p>\n<ul>\n<li>在软件系统中，有时候需要多次创建某一类型的对象，为了简化创建过程，可以只创建一个对象，然后再通过克隆的方式复制出多个相同的对象</li>\n<li>原型模式不跟据类生成实例，而是根据实例来生成新实例。在 Java 中，可以使用 <code>clone</code> 创建出实例的副本。</li>\n<li>原型模式<strong>在创建重复对象的同时，需要保证性能</strong>。可以通过 <code>clone()</code> 拷贝已有对象的数据，更新少量差值来实现。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>需要为每一个类配备一个克隆方法，因此对已有类进行改造比较麻烦。需要修改其源代码，并且在实现深克隆时需要编写较为复杂的代码。</li>\n</ul>\n<p>原型模式的基本工作原理：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象复制原型自己来实现创建过程。</p>\n<p>登场角色：</p>\n<ul>\n<li><code>Prototype</code>（抽象原型类）：定义用于复制现有实例来生成新实例的方法，可以是抽象类也可以是接口。在 Java 中，这个抽象类是实现了 <code>@Cloneable</code> 接口的。</li>\n<li><code>ConcretePrototype</code>（具体原型类）：实现复制现有实例并生成新实例的方法。</li>\n<li><code>Client</code>（使用者）：使用复制实例的方法生成新实例。</li>\n</ul>\n<pre><code class=\"highlight mermaid\">classDiagram\n    class Client &#123;\n    &#125;\n\n    class Prototype &#123;\n        &lt;&lt;abstract&gt;&gt;\n        +clone() Prototype\n    &#125;\n\n    class ConcretePrototypeA &#123;\n        +clone() Prototype\n    &#125;\n\n    class ConcretePrototypeB &#123;\n        +clone() Prototype\n    &#125;\n\n    Client --&gt; Prototype : uses\n    Prototype &lt;|-- ConcretePrototypeA\n    Prototype &lt;|-- ConcretePrototypeB</code></pre>\n<p>相关的设计模式：</p>\n<ul>\n<li>享元模式 Flyweight：使用 Prototype 模式可以生成一个与当前实例的状态完全相同的实例。而使用 Flyweight 模式可以在不同的地方使用同一个实例。</li>\n<li>Memento 模式：使用 Prototype 模式可以生成一个与当前实例的状态完全相同的实例。而使用 Memento 模式可以保存当前实例的状态，以实现快照和撤销功能。</li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/undefined/\"><span class=\"yukari\">站内文章</span>组合模式</a> 以及 装饰者模式 Decorator：经常使用组合模式和 Decorator 模式时，需要能够动态地创建复杂结构的实例。这时可以使用原型模式，以帮助我们方便地生成实例。</li>\n<li>Command 模式：想要复制 Command 模式中出现的命令时，可以使用 Prototype 模式。</li>\n</ul>\n<h2 id=\"示例带原型管理器的原型模式\"><a class=\"markdownIt-Anchor\" href=\"#示例带原型管理器的原型模式\"></a> 示例：带原型管理器的原型模式</h2>\n<blockquote>\n<p>《图解设计模式》第六章中的案例其实就是使用了原型管理器。</p>\n</blockquote>\n<p>原型管理器（Prototype Manager）角色创建具体原型类的对象，并记录每一个被创建的对象。原型管理器的作用与工厂相似，其中定义了一个集合用于存储原型对象，如果需要某个对象的一个克隆，可以通过复制集合中对应的原型对象来获得。在原型管理器中针对抽象原型类进行编程，以便扩展。</p>\n<h3 id=\"案例-1color\"><a class=\"markdownIt-Anchor\" href=\"#案例-1color\"></a> 案例 1：Color</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202507212317316.webp\" alt=\"image.png\" /></p>\n<p>抽象原型类 <code>MyColor</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyColor</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">clone</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体原型类 <code>Red</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Red</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyColor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">clone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Red r=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            r = (Red) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;This is Red&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体原型类 <code>Blue</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Blue</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MyColor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">clone</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Blue b=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            b = (Blue) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">display</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;This is Blue&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原型管理器类 <code>PrototypeManager</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrototypeManager</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Hashtable</span> <span class=\"variable\">ht</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">Hashtable</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">PrototypeManager</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        ht.put(<span class=\"string\">&quot;red&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Red</span>());</span><br><span class=\"line\">        ht.put(<span class=\"string\">&quot;blue&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">Blue</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addColor</span><span class=\"params\">(String key,MyColor obj)</span>&#123;</span><br><span class=\"line\">        ht.put(key,obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> MyColor <span class=\"title function_\">getColor</span><span class=\"params\">(String key)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (MyColor) ((MyColor)ht.get(key)).clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端测试类 <code>Client</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">PrototypeManager</span> <span class=\"variable\">pm</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">PrototypeManager</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        MyColor obj1=pm.getColor(<span class=\"string\">&quot;red&quot;</span>);</span><br><span class=\"line\">        obj1.display();</span><br><span class=\"line\"></span><br><span class=\"line\">        MyColor obj2=pm.getColor(<span class=\"string\">&quot;red&quot;</span>);</span><br><span class=\"line\">        obj2.display();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(obj1==obj2); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"案例-2shape\"><a class=\"markdownIt-Anchor\" href=\"#案例-2shape\"></a> 案例 2：Shape</h3>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202507212323570.webp\" alt=\"image.png\" width=\"375px\" /></p>\n<h1 id=\"引用拷贝和对象拷贝\"><a class=\"markdownIt-Anchor\" href=\"#引用拷贝和对象拷贝\"></a> 引用拷贝和对象拷贝</h1>\n<p>对象和引用的区别：</p>\n<ul>\n<li>对象：绝大多数对象在堆区，它是实际保存属性的内存空间</li>\n<li>引用：引用大多引用在栈区，可以将它理解为指向实际对象地址的指针</li>\n</ul>\n<p>一个对象可以有多个引用，但一个引用只能指向一个对象。当我们使用 <code>==</code> 比较对象时，一般比较的是对象地址。</p>\n<h2 id=\"引用拷贝\"><a class=\"markdownIt-Anchor\" href=\"#引用拷贝\"></a> 引用拷贝</h2>\n<p>引用拷贝示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Teacher</span> <span class=\"variable\">teacher</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Teacher</span>(<span class=\"string\">&quot;Taylor&quot;</span>,<span class=\"number\">26</span>);</span><br><span class=\"line\"><span class=\"type\">Teacher</span> <span class=\"variable\">otherteacher</span> <span class=\"operator\">=</span> teacher;</span><br><span class=\"line\">System.out.println(teacher);      <span class=\"comment\">// blog.Teacher@355da254</span></span><br><span class=\"line\">System.out.println(otherteacher); <span class=\"comment\">// blog.Teacher@355da254</span></span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202507152322394.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<p>引用拷贝通常发生在传递参数、返回值等场景中。例如，在 Java 中，如果将一个对象作为参数传递给方法，实际上是将该对象的引用传递给了方法，而不是对象本身的拷贝。</p>\n<h2 id=\"对象拷贝\"><a class=\"markdownIt-Anchor\" href=\"#对象拷贝\"></a> 对象拷贝</h2>\n<p>对象拷贝：创建对象本身的一个副本。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Teacher</span> <span class=\"variable\">teacher</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Teacher</span>(<span class=\"string\">&quot;Swift&quot;</span>,<span class=\"number\">26</span>); </span><br><span class=\"line\"><span class=\"type\">Teacher</span> <span class=\"variable\">otherteacher</span> <span class=\"operator\">=</span> (Teacher)teacher.clone(); </span><br><span class=\"line\">System.out.println(teacher);       <span class=\"comment\">// blog.Teacher@355da254</span></span><br><span class=\"line\">System.out.println(otherteacher);  <span class=\"comment\">// blog.Teacher@4dc63996</span></span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202507152324370.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<h1 id=\"深拷贝与浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝与浅拷贝\"></a> 深拷贝与浅拷贝</h1>\n<p>深拷贝和浅拷贝都是对象拷贝。它们之间的主要区别在于是否复制了对象内部的数据。</p>\n<ul>\n<li>浅拷贝 Shallow Copy：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象。</li>\n<li>深拷贝 Deep Copy：被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量，那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象，换言之，深复制把要复制的对象所引用的对象都复制了一遍。</li>\n</ul>\n<blockquote>\n<p>🍐⚱️：（谈浅拷贝）你用魔法棒复制了自己，但是复制人和你都用着同样一台电脑）</p>\n</blockquote>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202507160006407.webp\" alt=\"image.png\" width=\"525px\" /></p>\n<blockquote>\n<p>在上图的例子中，单纯使用 <code>clone()</code> 方法得到的是浅克隆的结果。</p>\n</blockquote>\n<h1 id=\"java-object-类中的-clone-方法\"><a class=\"markdownIt-Anchor\" href=\"#java-object-类中的-clone-方法\"></a> Java <code>Object</code> 类中的 <code>clone()</code> 方法</h1>\n<p><code>clone</code> 用于复制实例。<code>clone</code> 方法定义在 <code>java.lang.Object</code> 中，<code>Object</code> 又是所有类的父类，也就是说所有的 Java 类都继承了 <code>clone</code> 方法。但是，<strong>继承了该方法并不意味着就能直接用</strong>。能调用 <code>clone</code> 方法的前提是这个类必须实现了 <code>Cloneable</code> 接口。</p>\n<p><code>Object</code> 类中的 <code>clone()</code> 方法是通过 <code>native</code> 修饰的，也就是说它是通过直接调用底层操作系统方法实现的。当没有重写该方法时就默认调用这个方法。</p>\n<p><code>clone()</code> 和 <code>new</code> 一样，都可以创建一个新的对象。</p>\n<ul>\n<li><code>new</code>：当我们使用 <code>new</code> 关键字创建对象时，JVM 首先根据关键字后面的类型确定需要申请的内存大小，申请完内存后，执行类的构造方法。在执行构造方法期间，填充内存中各个属性域，这个填充的过程也叫初始化。构造方法执行完标志着对象创建成功，此时返回对象地址，在栈区以引用的方式调用对象。（当然，由于指令的重排序，发布对象可能在构造函数返回之前）</li>\n<li><code>clone()</code>：当我们调用某个对象的 <code>clone()</code> 方法克隆对象时，首先根据原对象的内存大小申请内存空间，申请完内存空间后，将原对象内存域复制到新申请的内存空间，复制完成标志着克隆完成，返回引用类型。也就是说，<strong><code>clone()</code> 的过程没有调用类的构造函数</strong>。</li>\n</ul>\n<p>简单总结：<code>new</code> 和 <code>clone()</code> 第一步都是申请内存，只不过 <code>new</code> 关键字通过类构造方法初始化对象，<code>clone()</code> 方法直接通过克隆内存域完成对象创建。</p>\n<p><code>clone()</code> 是深克隆还是浅克隆？</p>\n<ul>\n<li>如果一个对象中所有属性都是基础类型（<code>int</code>，<code>boolean</code>），那么它的深克隆和单纯 <code>clone()</code> 的浅克隆结果完全相同。</li>\n<li>如果一个对象包含引用类型数据，如果克隆之后的引用所指向对象是不同对象（看你 <code>clone()</code> 的具体实现），那么它是深克隆，否则是浅克隆。</li>\n</ul>\n<h1 id=\"深拷贝的实现\"><a class=\"markdownIt-Anchor\" href=\"#深拷贝的实现\"></a> 深拷贝的实现</h1>\n<p>手动赋值、第三方库也可以实现深拷贝。</p>\n<h2 id=\"cloneable重写-clone-方法\"><a class=\"markdownIt-Anchor\" href=\"#cloneable重写-clone-方法\"></a> <code>Cloneable</code>：重写 <code>clone</code> 方法</h2>\n<p>在编码过程中，一般都是通过实现 <code>java.lang.Cloneable</code> 接口重写 <code>clone()</code> 方法，然后就可以调用重写后的 <code>clone()</code> 方法执行自己的逻辑。<code>Cloneable</code> 接口中并没有声明任何方法。他只是用来标记哪个类可以进行复制。这种接口称为「标记接口」。</p>\n<p>Java 要求被克隆的类<strong>必须显式实现 <code>Cloneable</code> 接口</strong>。如果没有实现 <code>Cloneable</code> 接口的类的实例调用了 <code>clone</code> 方法， 则会在运行时抛出 <code>CloneNotSupportedException</code> 异常。</p>\n<p>在实际应用开发中，浅克隆肯定不能满足所有业务场景。部分情况下，需要将浅克隆优化为深克隆，具体实现方法：实现 <code>Cloneable</code> 接口，重写 <code>clone()</code> 方法，在 <code>clone()</code> 方法中手动克隆引用属性。重写时记得 <code>super.clone()</code>。</p>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Body</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> Head head;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"title function_\">Body</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"title function_\">Body</span><span class=\"params\">(Head head)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.head = head;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">protected</span> Object <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Body</span> <span class=\"variable\">newBody</span> <span class=\"operator\">=</span> (Body) <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">\t\t\tnewBody.head = (Head) head.clone();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> newBody;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Head</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> Face face;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"title function_\">Head</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"title function_\">Head</span><span class=\"params\">(Face face)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.face = face;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">protected</span> Object <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Face</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"title function_\">Face</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> CloneNotSupportedException &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Body</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Body</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Head</span>());</span><br><span class=\"line\">\t\t<span class=\"type\">Body</span> <span class=\"variable\">body1</span> <span class=\"operator\">=</span> (Body) body.clone();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;body == body1 : &quot;</span> + (body == body1)); <span class=\"comment\">// false</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;body.head == body1.head : &quot;</span> + (body.head == body1.head)); <span class=\"comment\">// false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际上，上面的代码克隆得还是不够彻底：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202507212235064.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<p>想要做到完完整整的深克隆，必须保证所有引用属性克隆后都会创建新对象，并且这个过程需要无限向下递归，直到只剩下常量属性。想要实现这种程度的深克隆几乎是不可能的，因为一旦代码中引入 SDK 包中的类，且该类没有重写 <code>clone()</code> 方法，就无法实现深克隆。</p>\n<h2 id=\"serializable序列化后再反序列化\"><a class=\"markdownIt-Anchor\" href=\"#serializable序列化后再反序列化\"></a> <code>Serializable</code>：序列化后再反序列化</h2>\n<blockquote>\n<p>把对象写到流里的过程是串行化（Serilization）过程，一种形象的说法为「冷冻」或者「腌咸菜（picking）」过程；而把对象从流中读出来的并行化（Deserialization）过程则叫做「解冻」或者「回鲜（depicking）」过程。</p>\n</blockquote>\n<p>将对象序列化，然后再反序列化成新的对象是深拷贝的一种方法。</p>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> top.uuanqin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestClone</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String username;<span class=\"comment\">// 用户姓名</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String sex;<span class=\"comment\">// 性别</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Date birthday;<span class=\"comment\">// 生日</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String address;<span class=\"comment\">// 地址</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> Person person; <span class=\"comment\">//引用类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> User <span class=\"title function_\">myColon</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">User</span> <span class=\"variable\">copy</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">baos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">                <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(baos);</span><br><span class=\"line\">                oos.writeObject(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">                <span class=\"comment\">//将流序列化成对象</span></span><br><span class=\"line\">                <span class=\"type\">ByteArrayInputStream</span> <span class=\"variable\">bais</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class=\"line\">                <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(bais);</span><br><span class=\"line\">                copy = (User) ois.readObject();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//此处省略get-set方法代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 引用类型也需要实现Serializable接口，否则会序列化失败。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String mobilePhone;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(<span class=\"type\">int</span> id, String userName, <span class=\"type\">int</span> age, String mobilePhone)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.userName = userName;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.mobilePhone = mobilePhone;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//此处省略get-set方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        u1.person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(); <span class=\"comment\">// 让引用对象不为空</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u2</span> <span class=\"operator\">=</span> u1.myColon();</span><br><span class=\"line\">        System.out.println(u1 == u2);  <span class=\"comment\">// false</span></span><br><span class=\"line\">        System.out.println(u1.person == u2.person); <span class=\"comment\">// false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用反射方法\"><a class=\"markdownIt-Anchor\" href=\"#使用反射方法\"></a> 使用反射方法</h2>\n<p>通过 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/c8dc9bbd/\"><span class=\"yukari\">站内文章</span>反射</a> 生成对象，通过反射机制获取该对象的所有字段和属性信息。遍历所有字段和属性，以递归方式将源对象中的值复制到目标对象中。</p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li>《图解设计模式》第 6 章</li>\n<li>本科生课程笔记《程序设计中级实践＆设计模式》 - TJU 🍐⚱️</li>\n<li><a href=\"https://gitee.com/buxsren/design-pattern-books/blob/master/docs/200786.md\">极客时间专栏 - 设计模式之美 - 王争</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/168777892\">深拷贝和浅拷贝的区别，你真的弄懂了吗？ - 知乎</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/2335478\">【面试题精讲】深拷贝和浅拷贝区别了解吗？什么是引用拷贝？-腾讯云开发者社区-腾讯云</a></li>\n<li>【不推荐】<a href=\"https://blog.csdn.net/weixin_42361467/article/details/130640155\">java clone() 方法详解及深克隆与浅克隆-CSDN博客</a></li>\n<li><a href=\"https://www.cnblogs.com/xzwblog/p/7230788.html\">详解Java中的clone方法 - 何必等明天 - 博客园</a></li>\n<li><a href=\"https://blog.csdn.net/m0_37695902/article/details/119930702\">Java对象-深拷贝(实现Serializable, Cloneable两种方式)_java没有getset的深拷贝-CSDN博客</a></li>\n<li><a href=\"https://www.cnblogs.com/pandefu/p/17536258.html\">解读 — 深拷贝 - NiueryDiary - 博客园</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_45692705/article/details/121647915\">详解Java设计模式之原型模式（Prototype Pattern）_邮件复制 java 模式-CSDN博客</a></li>\n<li><a href=\"https://www.runoob.com/design-pattern/prototype-pattern.html\">原型模式 | 菜鸟教程</a></li>\n</ul>\n","raw":"---\ntitle: 原型模式：学会克隆\ntags:\n  - 设计模式\n  - Java\ncover: 'https://cdn.gallery.uuanqin.top/img/202507212334117.webp'\ndescription: 用了clone其实就是有原型模式的意思\nkatex: false\ncategories:\n  - 高质量代码及设计模式\nabbrlink: 96a98120\ndate: 2025-07-21 23:36:14\ntop_img:\n---\n\n![image.png|350](https://cdn.gallery.uuanqin.top/img/202503040232648.webp)\n\n通过 `new` 关键字生成实例是需要指定类名的。在开发过程中，我们需要「在不指定类名的前提下生成实例」的需求。\n\n在以下情况，我们就不能根据类来生成实例，而要根据现有的实例来生成新的实例。\n\n1. 对象种类繁多，无法将它们整合到一个类中。需要处理的对象太多，如果将它们分别作为一个类，必须要编写很多个类文件。\n2. 难以根据类生成实例。生成实例的过程太复杂。\n3. 想解耦框架与生成的实例时。想让生成实例的框架不依赖于具体的类。\n\nPrototype 模式：\n\n- 在软件系统中，有时候需要多次创建某一类型的对象，为了简化创建过程，可以只创建一个对象，然后再通过克隆的方式复制出多个相同的对象\n- 原型模式不跟据类生成实例，而是根据实例来生成新实例。在 Java 中，可以使用 `clone` 创建出实例的副本。\n- 原型模式**在创建重复对象的同时，需要保证性能**。可以通过 `clone()` 拷贝已有对象的数据，更新少量差值来实现。\n\n缺点：\n\n- 需要为每一个类配备一个克隆方法，因此对已有类进行改造比较麻烦。需要修改其源代码，并且在实现深克隆时需要编写较为复杂的代码。\n\n原型模式的基本工作原理：通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象复制原型自己来实现创建过程。\n\n登场角色：\n\n- `Prototype`（抽象原型类）：定义用于复制现有实例来生成新实例的方法，可以是抽象类也可以是接口。在 Java 中，这个抽象类是实现了 `@Cloneable` 接口的。\n- `ConcretePrototype`（具体原型类）：实现复制现有实例并生成新实例的方法。\n- `Client`（使用者）：使用复制实例的方法生成新实例。\n\n```mermaid\nclassDiagram\n    class Client {\n    }\n\n    class Prototype {\n        <<abstract>>\n        +clone() Prototype\n    }\n\n    class ConcretePrototypeA {\n        +clone() Prototype\n    }\n\n    class ConcretePrototypeB {\n        +clone() Prototype\n    }\n\n    Client --> Prototype : uses\n    Prototype <|-- ConcretePrototypeA\n    Prototype <|-- ConcretePrototypeB\n```\n\n相关的设计模式：\n\n- 享元模式 Flyweight：使用 Prototype 模式可以生成一个与当前实例的状态完全相同的实例。而使用 Flyweight 模式可以在不同的地方使用同一个实例。\n- Memento 模式：使用 Prototype 模式可以生成一个与当前实例的状态完全相同的实例。而使用 Memento 模式可以保存当前实例的状态，以实现快照和撤销功能。\n- [[组合模式：树形结构|组合模式]] 以及 装饰者模式 Decorator：经常使用组合模式和 Decorator 模式时，需要能够动态地创建复杂结构的实例。这时可以使用原型模式，以帮助我们方便地生成实例。\n- Command 模式：想要复制 Command 模式中出现的命令时，可以使用 Prototype 模式。\n\n## 示例：带原型管理器的原型模式\n\n> 《图解设计模式》第六章中的案例其实就是使用了原型管理器。\n\n原型管理器（Prototype Manager）角色创建具体原型类的对象，并记录每一个被创建的对象。原型管理器的作用与工厂相似，其中定义了一个集合用于存储原型对象，如果需要某个对象的一个克隆，可以通过复制集合中对应的原型对象来获得。在原型管理器中针对抽象原型类进行编程，以便扩展。\n\n### 案例 1：Color\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202507212317316.webp)\n\n抽象原型类 `MyColor`：\n\n```java\npublic interface MyColor extends Cloneable {\n    public Object clone();\n    public void display();\n}\n```\n\n具体原型类 `Red`：\n\n```java\npublic class Red implements MyColor {\n    @Override\n    public Object clone() {\n        Red r=null;\n        try {\n            r = (Red) super.clone();\n        }catch (Exception e){}\n        return r;\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"This is Red\");\n    }\n}\n```\n\n具体原型类 `Blue`：\n\n```java\npublic class Blue implements MyColor {\n    @Override\n    public Object clone() {\n        Blue b=null;\n        try {\n            b = (Blue) super.clone();\n        }catch (Exception e){\n\n        }\n        return b;\n    }\n    @Override\n    public void display() {\n        System.out.println(\"This is Blue\");\n    }\n}\n```\n\n原型管理器类 `PrototypeManager`：\n\n```java\npublic class PrototypeManager {\n    private Hashtable ht =new Hashtable();\n    public PrototypeManager() {\n        ht.put(\"red\",new Red());\n        ht.put(\"blue\",new Blue());\n    }\n    public void addColor(String key,MyColor obj){\n        ht.put(key,obj);\n    }\n    public MyColor getColor(String key){\n        return (MyColor) ((MyColor)ht.get(key)).clone();\n    }\n}\n```\n\n客户端测试类 `Client`：\n\n```java\npublic class Client {\n\n    public static void main(String[] args) {\n        PrototypeManager pm =new PrototypeManager();\n\n        MyColor obj1=pm.getColor(\"red\");\n        obj1.display();\n\n        MyColor obj2=pm.getColor(\"red\");\n        obj2.display();\n\n        System.out.println(obj1==obj2); // false\n\n    }\n}\n```\n\n### 案例 2：Shape\n\n![image.png|375](https://cdn.gallery.uuanqin.top/img/202507212323570.webp)\n\n# 引用拷贝和对象拷贝\n\n对象和引用的区别：\n\n- 对象：绝大多数对象在堆区，它是实际保存属性的内存空间\n- 引用：引用大多引用在栈区，可以将它理解为指向实际对象地址的指针\n\n一个对象可以有多个引用，但一个引用只能指向一个对象。当我们使用 `==` 比较对象时，一般比较的是对象地址。\n\n## 引用拷贝\n\n引用拷贝示例：\n\n```java\nTeacher teacher = new Teacher(\"Taylor\",26);\nTeacher otherteacher = teacher;\nSystem.out.println(teacher);      // blog.Teacher@355da254\nSystem.out.println(otherteacher); // blog.Teacher@355da254\n```\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/202507152322394.webp)\n\n引用拷贝通常发生在传递参数、返回值等场景中。例如，在 Java 中，如果将一个对象作为参数传递给方法，实际上是将该对象的引用传递给了方法，而不是对象本身的拷贝。\n\n## 对象拷贝\n\n对象拷贝：创建对象本身的一个副本。\n\n```java\nTeacher teacher = new Teacher(\"Swift\",26); \nTeacher otherteacher = (Teacher)teacher.clone(); \nSystem.out.println(teacher);       // blog.Teacher@355da254\nSystem.out.println(otherteacher);  // blog.Teacher@4dc63996\n```\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/202507152324370.webp)\n\n# 深拷贝与浅拷贝\n\n深拷贝和浅拷贝都是对象拷贝。它们之间的主要区别在于是否复制了对象内部的数据。\n\n- 浅拷贝 Shallow Copy：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象。\n- 深拷贝 Deep Copy：被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量，那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象，换言之，深复制把要复制的对象所引用的对象都复制了一遍。\n\n> 🍐⚱️：（谈浅拷贝）你用魔法棒复制了自己，但是复制人和你都用着同样一台电脑）\n\n![image.png|525](https://cdn.gallery.uuanqin.top/img/202507160006407.webp)\n\n> 在上图的例子中，单纯使用 `clone()` 方法得到的是浅克隆的结果。\n\n# Java `Object` 类中的 `clone()` 方法\n\n`clone` 用于复制实例。`clone` 方法定义在 `java.lang.Object` 中，`Object` 又是所有类的父类，也就是说所有的 Java 类都继承了 `clone` 方法。但是，**继承了该方法并不意味着就能直接用**。能调用 `clone` 方法的前提是这个类必须实现了 `Cloneable` 接口。\n\n`Object` 类中的 `clone()` 方法是通过 `native` 修饰的，也就是说它是通过直接调用底层操作系统方法实现的。当没有重写该方法时就默认调用这个方法。\n\n`clone()` 和 `new` 一样，都可以创建一个新的对象。\n\n- `new`：当我们使用 `new` 关键字创建对象时，JVM 首先根据关键字后面的类型确定需要申请的内存大小，申请完内存后，执行类的构造方法。在执行构造方法期间，填充内存中各个属性域，这个填充的过程也叫初始化。构造方法执行完标志着对象创建成功，此时返回对象地址，在栈区以引用的方式调用对象。（当然，由于指令的重排序，发布对象可能在构造函数返回之前）\n- `clone()`：当我们调用某个对象的 `clone()` 方法克隆对象时，首先根据原对象的内存大小申请内存空间，申请完内存空间后，将原对象内存域复制到新申请的内存空间，复制完成标志着克隆完成，返回引用类型。也就是说，**`clone()` 的过程没有调用类的构造函数**。\n\n简单总结：`new` 和 `clone()` 第一步都是申请内存，只不过 `new` 关键字通过类构造方法初始化对象，`clone()` 方法直接通过克隆内存域完成对象创建。\n\n`clone()` 是深克隆还是浅克隆？\n\n- 如果一个对象中所有属性都是基础类型（`int`，`boolean`），那么它的深克隆和单纯 `clone()` 的浅克隆结果完全相同。\n- 如果一个对象包含引用类型数据，如果克隆之后的引用所指向对象是不同对象（看你 `clone()` 的具体实现），那么它是深克隆，否则是浅克隆。\n\n# 深拷贝的实现\n\n手动赋值、第三方库也可以实现深拷贝。\n\n## `Cloneable`：重写 `clone` 方法\n\n在编码过程中，一般都是通过实现 `java.lang.Cloneable` 接口重写 `clone()` 方法，然后就可以调用重写后的 `clone()` 方法执行自己的逻辑。`Cloneable` 接口中并没有声明任何方法。他只是用来标记哪个类可以进行复制。这种接口称为「标记接口」。\n\nJava 要求被克隆的类**必须显式实现 `Cloneable` 接口**。如果没有实现 `Cloneable` 接口的类的实例调用了 `clone` 方法， 则会在运行时抛出 `CloneNotSupportedException` 异常。\n\n在实际应用开发中，浅克隆肯定不能满足所有业务场景。部分情况下，需要将浅克隆优化为深克隆，具体实现方法：实现 `Cloneable` 接口，重写 `clone()` 方法，在 `clone()` 方法中手动克隆引用属性。重写时记得 `super.clone()`。\n\n示例代码：\n\n```java\npublic class Test {\n\tstatic class Body implements Cloneable {\n\t\tpublic Head head;\n\n\t\tpublic Body() {}\n\n\t\tpublic Body(Head head) {\n\t\t\tthis.head = head;\n\t\t}\n\n\t\t@Override\n\t\tprotected Object clone() throws CloneNotSupportedException {\n\t\t\tBody newBody = (Body) super.clone();\n\t\t\tnewBody.head = (Head) head.clone();\n\t\t\treturn newBody;\n\t\t}\n\t}\n\n\tstatic class Head implements Cloneable {\n\t\tpublic Face face;\n\n\t\tpublic Head() {}\n\n\t\tpublic Head(Face face) {\n\t\t\tthis.face = face;\n\t\t}\n\n\t\t@Override\n\t\tprotected Object clone() throws CloneNotSupportedException {\n\t\t\treturn super.clone();\n\t\t}\n\t}\n\n\tstatic class Face implements Cloneable {\n\t\tpublic Face() {\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws CloneNotSupportedException {\n\t\tBody body = new Body(new Head());\n\t\tBody body1 = (Body) body.clone();\n\t\tSystem.out.println(\"body == body1 : \" + (body == body1)); // false\n\t\tSystem.out.println(\"body.head == body1.head : \" + (body.head == body1.head)); // false\n\t}\n}\n```\n\n实际上，上面的代码克隆得还是不够彻底：\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/202507212235064.webp)\n\n想要做到完完整整的深克隆，必须保证所有引用属性克隆后都会创建新对象，并且这个过程需要无限向下递归，直到只剩下常量属性。想要实现这种程度的深克隆几乎是不可能的，因为一旦代码中引入 SDK 包中的类，且该类没有重写 `clone()` 方法，就无法实现深克隆。\n\n## `Serializable`：序列化后再反序列化\n\n> 把对象写到流里的过程是串行化（Serilization）过程，一种形象的说法为「冷冻」或者「腌咸菜（picking）」过程；而把对象从流中读出来的并行化（Deserialization）过程则叫做「解冻」或者「回鲜（depicking）」过程。\n\n将对象序列化，然后再反序列化成新的对象是深拷贝的一种方法。\n\n示例代码：\n\n```java\npackage top.uuanqin;\n\nimport java.io.*;\nimport java.util.Date;\n\npublic class TestClone {\n    public static class User implements Serializable {\n        private int id;\n        private String username;// 用户姓名\n        private String sex;// 性别\n        private Date birthday;// 生日\n        private String address;// 地址\n        private Person person; //引用类型\n\n        public User myColon() {\n            User copy = null;\n            try {\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                ObjectOutputStream oos = new ObjectOutputStream(baos);\n                oos.writeObject(this);\n                //将流序列化成对象\n                ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n                ObjectInputStream ois = new ObjectInputStream(bais);\n                copy = (User) ois.readObject();\n            } catch (IOException | ClassNotFoundException e) {\n                e.printStackTrace();\n            }\n            return copy;\n        }\n\n        //此处省略get-set方法代码\n    }\n\n    // 引用类型也需要实现Serializable接口，否则会序列化失败。\n    public static class Person implements Serializable {\n        private int id;\n        private String userName;\n        private int age;\n        private String mobilePhone;\n\n        public Person() {\n        }\n\n        public Person(int id, String userName, int age, String mobilePhone) {\n            this.id = id;\n            this.userName = userName;\n            this.age = age;\n            this.mobilePhone = mobilePhone;\n        }\n        //此处省略get-set方法\n    }\n\n    public static void main(String[] args) {\n        User u1 = new User();\n        u1.person = new Person(); // 让引用对象不为空\n        User u2 = u1.myColon();\n        System.out.println(u1 == u2);  // false\n        System.out.println(u1.person == u2.person); // false\n    }\n}\n```\n\n## 使用反射方法\n\n通过 [[Java 中的反射|反射]] 生成对象，通过反射机制获取该对象的所有字段和属性信息。遍历所有字段和属性，以递归方式将源对象中的值复制到目标对象中。\n\n# 本文参考\n\n- 《图解设计模式》第 6 章\n- 本科生课程笔记《程序设计中级实践＆设计模式》 - TJU 🍐⚱️\n- [极客时间专栏 - 设计模式之美 - 王争](https://gitee.com/buxsren/design-pattern-books/blob/master/docs/200786.md)\n- [深拷贝和浅拷贝的区别，你真的弄懂了吗？ - 知乎](https://zhuanlan.zhihu.com/p/168777892)\n- [【面试题精讲】深拷贝和浅拷贝区别了解吗？什么是引用拷贝？-腾讯云开发者社区-腾讯云](https://cloud.tencent.com/developer/article/2335478)\n- 【不推荐】[java clone() 方法详解及深克隆与浅克隆-CSDN博客](https://blog.csdn.net/weixin_42361467/article/details/130640155)\n- [详解Java中的clone方法 - 何必等明天 - 博客园](https://www.cnblogs.com/xzwblog/p/7230788.html)\n- [Java对象-深拷贝(实现Serializable, Cloneable两种方式)_java没有getset的深拷贝-CSDN博客](https://blog.csdn.net/m0_37695902/article/details/119930702)\n- [解读 --- 深拷贝 - NiueryDiary - 博客园](https://www.cnblogs.com/pandefu/p/17536258.html)\n- [详解Java设计模式之原型模式（Prototype Pattern）_邮件复制 java 模式-CSDN博客](https://blog.csdn.net/weixin_45692705/article/details/121647915)\n- [原型模式 | 菜鸟教程](https://www.runoob.com/design-pattern/prototype-pattern.html)","categories":[{"name":"高质量代码及设计模式","api":"api/categories/高质量代码及设计模式.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"设计模式","api":"api/tags/设计模式.json"}]},"api":"api/posts/p/96a98120.json"}