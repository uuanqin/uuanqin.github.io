{"data":{"title":"我的 AI 摘要方案：Vercel+Redis+Hexo API+Spark Lite","slug":"博客站点维护/Hexo/我的 AI 摘要方案：Vercel+Redis+Hexo API+Spark Lite","description":"自己尝试动手实现一个 AI 摘要","date":"2025-06-24T15:19:05.000Z","updated":"2025-07-05T11:37:00.772Z","language":"zh-CN","comments":true,"url":"p/75efe9f3/","cover":"https://cdn.gallery.uuanqin.top/img/202506242301616.webp","images":[],"content":"<p>前段时间看到 <a href=\"https://blog.liushen.fun/\">@LiuShen</a> 发表了一篇博客文章，我不禁感慨：继对友链朋友圈改进后，柳神终于盯上 AI 摘要的改进了！在 Liushen 文章中提到了 <a href=\"https://www.konoxin.top/\">@konoXIN</a> 通过 Vercel 函数调用大模型的方法，对此我也受到启发，打算动手尝试自己的 AI 摘要解决方案。</p>\n<p>目前，静态博客 AI 摘要大概有以下三种：</p>\n<table>\n<thead>\n<tr>\n<th>AI 摘要生成方式</th>\n<th>作者部署速度</th>\n<th>读者获取摘要速度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>直接调用大模型接口</td>\n<td>🟢快</td>\n<td>🔴慢，但可优化</td>\n<td>直接调用大模型接口固然很慢，但通过引入多级缓存，摘要获取时间可大大缩短，还能节约成本。</td>\n</tr>\n<tr>\n<td>本地预构建摘要</td>\n<td>🔴慢</td>\n<td>🟢快</td>\n<td>本地预构建，相当于把读者的访问时间转移到作者预构建的博客时间。这种无后端的配置方式灵活可调。</td>\n</tr>\n<tr>\n<td>第三方摘要服务</td>\n<td colspan=\"2\">🟡取决于服务</td>\n<td>第三方摘要服务可能会收取一定的费用，但是能节省很多时间和精力成本。</td>\n</tr>\n</tbody>\n</table>\n<p>目前，博客圈里我了解到的上面方案对应的实现：</p>\n<table>\n<thead>\n<tr>\n<th>方案</th>\n<th>作者</th>\n<th>前端</th>\n<th>后端</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://blog.zhheo.com/p/ec57d8b2.html\">TianliGPT</a></td>\n<td><a href=\"https://tianli-blog.club/\">@Tianli</a></td>\n<td>引入 js 文件/插件</td>\n<td>第三方后端管理</td>\n</tr>\n<tr>\n<td>插件 <a href=\"https://blog.liushen.fun/posts/40702a0d/\">hexo-ai-summary</a></td>\n<td><a href=\"https://blog.liushen.fun/\">@LiuShen</a></td>\n<td>插件 + 修改主题源码</td>\n<td>无（本地提前生成好摘要）</td>\n</tr>\n<tr>\n<td>自定义 <a href=\"https://www.konoxin.top/posts/db7b3418/\">Vercel 代理方案</a></td>\n<td><a href=\"https://www.konoxin.top/\">@konoXIN</a></td>\n<td>引入 js 文件</td>\n<td>Vercel 接口转发</td>\n</tr>\n</tbody>\n</table>\n<p>TianliGPT 方案是本站最初选择的方案，有专门的后端管理，内容合规、模型选择啥的基本不用操心。现在的 TianliGPT 在多款主题下也开发有多款插件，前端部署不是问题。要想省心省力，选择 TianliGPT 就行。</p>\n<p>hexo-ai-summary 是大佬 Liushen 提供的解决方案。这款方案通过提前生成博客摘要嵌入到每篇文章中，读者访问文章就能访问摘要，没有额外请求时延且不用担心另外的系统故障，此外可以灵活替换使用的大语言模型。此方案是速度与灵活性双重兼顾方案，要想读者以最快的速度获取文章摘要，选择 hexo-ai-summary 准没错。</p>\n<p>konoXIN 也实现了自己的 AI 摘要方案，用户访问文章时携带文章内容发送至 Vercel，Vercel 充当代理调用 LLM 接口，并将最终的摘要数据返回给用户。这种方案朴素、结构直观且有效，给想动 (zhe) 手 (teng) 的人更大的发挥空间。</p>\n<p>本文主要参考的是 konoXIN 的文章，并在原方案的基础上作出了改进。但总的来说不会有前面的方案那么完美，只能说是个人试验的小作品。当然也希望各位读者分享你们的方案与建议，期待和各位大佬探讨交流 ~</p>\n<h1 id=\"我的方案\"><a class=\"markdownIt-Anchor\" href=\"#我的方案\"></a> 我的方案</h1>\n<h2 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\"></a> 概述</h2>\n<p>相较于 <a href=\"https://www.konoxin.top/posts/db7b3418/\">konoXIN 的方案</a>，本方案改进点和可优化点如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>改进点</th>\n<th>可优化点（缺点…）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>样式调整：<br>✅样式文件中，像素 px 统一使用 rem 单位<br>✅Hexo-Butterfly 主题夜间模式适配<br>✅多一个「关于」按钮<br><br>逻辑改进：<br>✅重构前后端代码，增加代码可读性<br>✅优化前端请求方式，减少不必要的参数携带<br>✅本地缓存 + Vercel 代理端 Redis 缓存<br>✅优化提示词模板</td>\n<td>🟥模块依赖较复杂，有一定的耦合性<br>🟥模型的灵活替换功能还需要额外的代码重构<br>🟥仅适合个人学习参考使用<br>🟥API 插件提供的信息过多，存在冗余或安全风险</td>\n</tr>\n</tbody>\n</table>\n<p>交互时序图（Sequence Diagram）如下：</p>\n<pre><code class=\"highlight mermaid\">sequenceDiagram\n    actor U as 用户\n    participant F as 前端\n    participant V as Vercel\n    participant R as Redis\n    participant L as 大模型\n    participant B as 博客 API 服务\n    activate U\n    U -&gt;&gt; F : 访问文章\n    activate F\n    F -&gt;&gt; F : 查询本地缓存\n    activate F\n    deactivate F\n    alt 本地无缓存\n        F -&gt;&gt; V : 文章链接\n        activate V\n        V -&gt;&gt; R : 查询缓存\n        activate R\n        R --&gt;&gt; V : 查询结果\n        deactivate R\n        alt 服务端无缓存            \n            V -&gt;&gt; B : 访问API接口获取全文\n            activate B\n            B --&gt;&gt; V : 文章数据\n            deactivate B\n            \n            V -&gt;&gt; V : 数据清洗\n            activate V\n            deactivate V\n            V -&gt;&gt; L : 提示词与清洗后的数据\n            activate L\n            L --&gt;&gt; V : 文章摘要\n            deactivate L\n            V -&gt;&gt; R : 缓存\n            activate R\n            deactivate R   \n        end\n        V --&gt;&gt; F : 文章摘要\n        deactivate V\n        F -&gt;&gt; F : 摘要本地缓存\n        activate F\n        deactivate F\n    end\n    F --&gt;&gt; U: 文章摘要\n    deactivate F\n    deactivate U</code></pre>\n<p>缓存方案概述：用户访问文章时，先找本地浏览器缓存，本地缓存不命中则发送请求至 Vercel。Vercel 接受请求后，先从 Redis 找缓存，Redis 不命中才向大模型服务获取文章摘要。所有缓存的时间均为 1 周。</p>\n<h2 id=\"前端文件导入\"><a class=\"markdownIt-Anchor\" href=\"#前端文件导入\"></a> 前端：文件导入</h2>\n\n<div class=\"callout\" data-callout=\"note\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">本文所有代码文件均附于文末</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>按照自己主题的导入方式引入以下文件：</p>\n<ul>\n<li><code>ai-summary.js</code></li>\n<li><code>ai-summary.css</code></li>\n</ul>\n<p>hexo-butterfly 主题可在 <code>_config.butterfly.yml</code> 中配置。</p>\n<h2 id=\"后端vercel-提供的函数服务\"><a class=\"markdownIt-Anchor\" href=\"#后端vercel-提供的函数服务\"></a> 后端：Vercel 提供的函数服务</h2>\n\n<div class=\"callout\" data-callout=\"note\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">本文所有代码文件均附于文末</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>我们使用 Vercel 函数服务代理文章摘要请求。官方文档：<a href=\"https://vercel.com/docs/functions\">Vercel Functions</a>.</p>\n<p>建一个 GitHub 仓，里面编写代理逻辑以及 Redis 调用逻辑，然后通过 Vercel 导入这个项目。我的仓库目录如下：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506230041907.webp\" alt=\"image.png\" width=\"275px\" /></p>\n<p>文件说明：</p>\n<ul>\n<li><code>spark-lite.js</code>：编写代理逻辑。放在 <code>/api/ai-summary</code> 下。访问时可通过：<code>https://your-custom-domain/api/ai-summary/spark-lite</code> 进行访问。</li>\n<li><code>redis.js</code>：用于使用 Redis 服务。</li>\n</ul>\n<p>如代码有更新，<code>git push</code> 到代码仓后，Vercel 会自动重新部署。Vercel 自定义域名可自行配置。</p>\n\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">注意：使用 Vercel 函数服务，相关 JavaScript 文件必须放置在名为 <code>api</code> 的文件夹中才能生效。</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><h3 id=\"讯飞星火-spark-lite\"><a class=\"markdownIt-Anchor\" href=\"#讯飞星火-spark-lite\"></a> 讯飞星火 Spark Lite</h3>\n<p>在 <a href=\"https://console.xfyun.cn/services/cbm\">讯飞星火</a> 侧申请自己的大模型应用，并申请 Spark Lite 的无限 Token。记下 APPID、API_SECRET、API_KEY、API_PASSWORD 关键信息。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506242242844.webp\" alt=\"image.png\" /></p>\n<p>打开 Vercel，创建对应的环境变量供后续使用：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506242243395.webp\" alt=\"image.png\" /></p>\n<h3 id=\"使用-vercel-中的-redis-集成服务\"><a class=\"markdownIt-Anchor\" href=\"#使用-vercel-中的-redis-集成服务\"></a> 使用 Vercel 中的 Redis 集成服务</h3>\n<p>Redis 服务可以自己另外部署，且还能有更高的灵活性。本文介绍的是 Vercel 中的 Redis 集成组件。</p>\n<p>在 Vercel 中，可以使用 Redis 集成组件：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506230054761.webp\" alt=\"image.png\" /></p>\n<p>选择 Redis：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506230054574.webp\" alt=\"image.png\" /></p>\n<p>Vercel 免费用户（Hobby 计划）可以建一个 30MB 的，假设每篇摘要 200 字左右，这些空间可以应付上万篇文章摘要的需求，对于个人博客开发者来说完全够用。</p>\n<p>将 Redis 关联到 Vercel 对应的项目中，这样项目中就会多出一条环境变量——Redis 服务的地址。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202506242235748.webp\" alt=\"image.png\" /></p>\n<p>如果详看环境变量信息，除了在 Vercel 网站上看之外，还可以直接下载到代码仓中：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g vercel <span class=\"comment\"># 如果没安装 vercel CLI</span></span><br><span class=\"line\">vercel <span class=\"built_in\">env</span> pull .env.development.local <span class=\"comment\"># 拉取环境变量信息</span></span><br></pre></td></tr></table></figure>\n<p>使用 Redis 服务是记得安装好相应的包：<code>npm install redis</code>。并将生成的 <code>package.json</code> 以及 <code>package-lock.json</code> 一并加入到代码仓的版本管理中。</p>\n<h2 id=\"安装-api-插件\"><a class=\"markdownIt-Anchor\" href=\"#安装-api-插件\"></a> 安装 API 插件</h2>\n<p>插件是在 Hexo 插件列表找的，基本符合我的要求。安装这个插件并根据自己的情况配置即可：<a href=\"https://github.com/wherewhere/hexo-generator-apis\">wherewhere/hexo-generator-apis: Generate restful json data for Hexo plugins</a></p>\n<p>通过 <code>/api/posts/&#123;path&#125;.json</code> 请求可以得到文章元信息，里面有文章全文数据。Hexo 博客部署后，你可以尝试一下调用这个 API。</p>\n<h1 id=\"代码文件\"><a class=\"markdownIt-Anchor\" href=\"#代码文件\"></a> 代码文件</h1>\n<h2 id=\"ai-summaryjs\"><a class=\"markdownIt-Anchor\" href=\"#ai-summaryjs\"></a> <code>ai-summary.js</code></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义样式常量 - 便于集中管理和修改</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">LEFT_STYLE</span> = <span class=\"string\">&quot;color: #fadfa3; background: #030307; padding:5px 0;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RIGHT_STYLE</span> = <span class=\"string\">&quot;background: #fadfa3; padding:5px 0;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构建消息模板 - 使用多行模板字符串保持视觉结构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MESSAGE_TEMPLATE</span> = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"> %c Spark Lite 文章摘要AI生成 %c https://uuanqin.top/ </span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PROXY_API_URL</span> = <span class=\"string\">&quot;https://ai-summary.uuanqin.top/api/ai-summary/spark-lite&quot;</span>; <span class=\"comment\">// 这里填的是 Vercel 的地址</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">LINK_AI_ABOUT</span> = <span class=\"string\">&quot;https://blog.uuanqin.top/p/75efe9f3/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出格式化控制台消息</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">    <span class=\"variable constant_\">MESSAGE_TEMPLATE</span>,</span><br><span class=\"line\">    <span class=\"variable constant_\">LEFT_STYLE</span>,</span><br><span class=\"line\">    <span class=\"variable constant_\">RIGHT_STYLE</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- 其他配置 (根据需要调整) ---</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sparkLite_postSelector = <span class=\"string\">&quot;#article-container&quot;</span>; <span class=\"comment\">// 文章内容容器的选择器，例如 #article-container, .post-content</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sparkLite_wordLimit = <span class=\"number\">1000</span>;             <span class=\"comment\">// 提交给 API 的最大字数限制</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sparkLite_typingAnimate = <span class=\"literal\">true</span>;         <span class=\"comment\">// 是否启用打字机效果</span></span><br><span class=\"line\"><span class=\"comment\">// 指定博客文章URL类型，只在这样的界面上生成ai摘要</span></span><br><span class=\"line\"><span class=\"comment\">// 通配符写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sparkLite_postURLs = [</span><br><span class=\"line\">    <span class=\"comment\">// &quot;https://*.uuanqin.top/p/*&quot;,</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;http://localhost:*/p/*&quot;</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// 正则写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sparkLite_postURLs_regex = [</span><br><span class=\"line\">    <span class=\"regexp\">/^https:\\/\\/.*\\.uuanqin\\.top\\/p\\/[0-9a-fA-F]+\\/$/</span>,</span><br><span class=\"line\">    <span class=\"regexp\">/^http:\\/\\/localhost:4000\\/p\\/[0-9a-fA-F]+\\/$/</span></span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MILLISECONDS_OF_A_WEEK</span> = <span class=\"number\">7</span> * <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sparkLite_localCacheTime = <span class=\"variable constant_\">MILLISECONDS_OF_A_WEEK</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">initDB</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> request = indexedDB.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;SparkLiteDB&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        request.<span class=\"property\">onupgradeneeded</span> = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> db = e.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!db.<span class=\"property\">objectStoreNames</span>.<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;summaries&#x27;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> store = db.<span class=\"title function_\">createObjectStore</span>(<span class=\"string\">&#x27;summaries&#x27;</span>, &#123;<span class=\"attr\">keyPath</span>: <span class=\"string\">&#x27;url&#x27;</span>&#125;);</span><br><span class=\"line\">                store.<span class=\"title function_\">createIndex</span>(<span class=\"string\">&#x27;timestamp&#x27;</span>, <span class=\"string\">&#x27;timestamp&#x27;</span>, &#123;<span class=\"attr\">unique</span>: <span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        request.<span class=\"property\">onsuccess</span> = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> <span class=\"title function_\">resolve</span>(e.<span class=\"property\">target</span>.<span class=\"property\">result</span>);</span><br><span class=\"line\">        request.<span class=\"property\">onerror</span> = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> <span class=\"title function_\">reject</span>(e.<span class=\"property\">target</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sparkLiteIsRunning = <span class=\"literal\">false</span>; <span class=\"comment\">// 重命名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- insertAIDiv 函数 ---</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insertAIDiv</span>(<span class=\"params\">selector</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 首先移除现有的 &quot;post-SparkLite&quot; 类元素（如果有的话）</span></span><br><span class=\"line\">    <span class=\"title function_\">removeExistingAIDiv</span>(); <span class=\"comment\">// 需要同步修改 removeExistingAIDiv 函数选择器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取目标元素</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> targetElement = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果没有找到目标元素，不执行任何操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!targetElement) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建要插入的HTML元素</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> aiDiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    aiDiv.<span class=\"property\">className</span> = <span class=\"string\">&#x27;post-SparkLite&#x27;</span>; <span class=\"comment\">// 修改类名</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> aiTitleDiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    aiTitleDiv.<span class=\"property\">className</span> = <span class=\"string\">&#x27;sparkLite-title&#x27;</span>; <span class=\"comment\">// 修改类名</span></span><br><span class=\"line\">    aiDiv.<span class=\"title function_\">appendChild</span>(aiTitleDiv);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> aiIcon = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;i&#x27;</span>);</span><br><span class=\"line\">    aiIcon.<span class=\"property\">className</span> = <span class=\"string\">&#x27;sparkLite-title-icon&#x27;</span>; <span class=\"comment\">// 修改类名</span></span><br><span class=\"line\">    aiTitleDiv.<span class=\"title function_\">appendChild</span>(aiIcon);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 插入 SVG 图标 (保持不变或替换)</span></span><br><span class=\"line\">    aiIcon.<span class=\"property\">innerHTML</span> = <span class=\"string\">`&lt;svg xmlns=&#x27;http://www.w3.org/2000/svg&#x27; xmlns:xlink=&#x27;http://www.w3.org/1999/xlink&#x27; width=&#x27;48px&#x27; height=&#x27;48px&#x27; viewBox=&#x27;0 0 48 48&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;title&gt;机器人&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;g id=&#x27;机器人&#x27; stroke=&#x27;none&#x27; stroke-width=&#x27;1&#x27; fill=&#x27;none&#x27; fill-rule=&#x27;evenodd&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;path d=&#x27;M34.717885,5.03561087 C36.12744,5.27055371 37.079755,6.60373651 36.84481,8.0132786 L35.7944,14.3153359 L38.375,14.3153359 C43.138415,14.3153359 47,18.1768855 47,22.9402569 L47,34.4401516 C47,39.203523 43.138415,43.0650727 38.375,43.0650727 L9.625,43.0650727 C4.861585,43.0650727 1,39.203523 1,34.4401516 L1,22.9402569 C1,18.1768855 4.861585,14.3153359 9.625,14.3153359 L12.2056,14.3153359 L11.15519,8.0132786 C10.920245,6.60373651 11.87256,5.27055371 13.282115,5.03561087 C14.69167,4.80066802 16.024865,5.7529743 16.25981,7.16251639 L17.40981,14.0624532 C17.423955,14.1470924 17.43373,14.2315017 17.43948,14.3153359 L30.56052,14.3153359 C30.56627,14.2313867 30.576045,14.1470924 30.59019,14.0624532 L31.74019,7.16251639 C31.975135,5.7529743 33.30833,4.80066802 34.717885,5.03561087 Z M38.375,19.4902885 L9.625,19.4902885 C7.719565,19.4902885 6.175,21.0348394 6.175,22.9402569 L6.175,34.4401516 C6.175,36.3455692 7.719565,37.89012 9.625,37.89012 L38.375,37.89012 C40.280435,37.89012 41.825,36.3455692 41.825,34.4401516 L41.825,22.9402569 C41.825,21.0348394 40.280435,19.4902885 38.375,19.4902885 Z M14.8575,23.802749 C16.28649,23.802749 17.445,24.9612484 17.445,26.3902253 L17.445,28.6902043 C17.445,30.1191812 16.28649,31.2776806 14.8575,31.2776806 C13.42851,31.2776806 12.27,30.1191812 12.27,28.6902043 L12.27,26.3902253 C12.27,24.9612484 13.42851,23.802749 14.8575,23.802749 Z M33.1425,23.802749 C34.57149,23.802749 35.73,24.9612484 35.73,26.3902253 L35.73,28.6902043 C35.73,30.1191812 34.57149,31.2776806 33.1425,31.2776806 C31.71351,31.2776806 30.555,30.1191812 30.555,28.6902043 L30.555,26.3902253 C30.555,24.9612484 31.71351,23.802749 33.1425,23.802749 Z&#x27; id=&#x27;形状结合&#x27; fill=&#x27;#444444&#x27; fill-rule=&#x27;nonzero&#x27;&gt;&lt;/path&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/g&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/svg&gt;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> aiTitleTextDiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    aiTitleTextDiv.<span class=\"property\">className</span> = <span class=\"string\">&#x27;sparkLite-title-text&#x27;</span>; <span class=\"comment\">// 修改类名</span></span><br><span class=\"line\">    aiTitleTextDiv.<span class=\"property\">textContent</span> = <span class=\"string\">&#x27;AI 摘要&#x27;</span>;</span><br><span class=\"line\">    aiTitleDiv.<span class=\"title function_\">appendChild</span>(aiTitleTextDiv);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> aiAboutLink = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    aiAboutLink.<span class=\"property\">href</span> = <span class=\"variable constant_\">LINK_AI_ABOUT</span>;</span><br><span class=\"line\">    aiAboutLink.<span class=\"property\">target</span> = <span class=\"string\">&#x27;_blank&#x27;</span>; <span class=\"comment\">// 可选：在新标签页打开</span></span><br><span class=\"line\">    aiAboutLink.<span class=\"property\">className</span> = <span class=\"string\">&#x27;sparkLite-about&#x27;</span>; <span class=\"comment\">// 修改类名</span></span><br><span class=\"line\">    aiAboutLink.<span class=\"property\">style</span>.<span class=\"property\">color</span> = <span class=\"string\">&#x27;var(--ai-summary-lighttext)&#x27;</span>; <span class=\"comment\">// 内联样式防止覆写</span></span><br><span class=\"line\">    aiAboutLink.<span class=\"property\">id</span> = <span class=\"string\">&#x27;sparkLite-about&#x27;</span>; <span class=\"comment\">// 修改 ID</span></span><br><span class=\"line\">    aiAboutLink.<span class=\"property\">textContent</span> = <span class=\"string\">&#x27;关于&#x27;</span>; <span class=\"comment\">// 修改显示文本</span></span><br><span class=\"line\">    aiTitleDiv.<span class=\"title function_\">appendChild</span>(aiAboutLink);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> aiTagDiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    aiTagDiv.<span class=\"property\">className</span> = <span class=\"string\">&#x27;sparkLite-tag&#x27;</span>; <span class=\"comment\">// 修改类名</span></span><br><span class=\"line\">    aiTagDiv.<span class=\"property\">id</span> = <span class=\"string\">&#x27;sparkLite-tag&#x27;</span>; <span class=\"comment\">// 修改 ID</span></span><br><span class=\"line\">    aiTagDiv.<span class=\"property\">textContent</span> = <span class=\"string\">&#x27;Spark Lite&#x27;</span>; <span class=\"comment\">// 修改显示文本</span></span><br><span class=\"line\">    aiTitleDiv.<span class=\"title function_\">appendChild</span>(aiTagDiv);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> aiExplanationDiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\">    aiExplanationDiv.<span class=\"property\">className</span> = <span class=\"string\">&#x27;sparkLite-explanation&#x27;</span>; <span class=\"comment\">// 修改类名</span></span><br><span class=\"line\">    aiExplanationDiv.<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;生成中...&#x27;</span> + <span class=\"string\">&#x27;&lt;span class=&quot;blinking-cursor&quot;&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class=\"line\">    aiDiv.<span class=\"title function_\">appendChild</span>(aiExplanationDiv);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将创建的元素插入到目标元素的顶部</span></span><br><span class=\"line\">    targetElement.<span class=\"title function_\">insertBefore</span>(aiDiv, targetElement.<span class=\"property\">firstChild</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- removeExistingAIDiv 函数 ---</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeExistingAIDiv</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找具有 &quot;post-SparkLite&quot; 类的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> existingAIDiv = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.post-SparkLite&quot;</span>); <span class=\"comment\">// 修改选择器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果找到了这个元素，就从其父元素中删除它</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (existingAIDiv) &#123;</span><br><span class=\"line\">        existingAIDiv.<span class=\"property\">parentElement</span>.<span class=\"title function_\">removeChild</span>(existingAIDiv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- 主要逻辑对象 ---</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sparkLite = &#123; <span class=\"comment\">// 重命名对象</span></span><br><span class=\"line\">    <span class=\"comment\">// --- fetchSparkLiteSummary 函数 (核心修改) ---</span></span><br><span class=\"line\">    <span class=\"attr\">fetchSparkLiteSummary</span>: <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// const title = document.title;</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 先尝试从IndexedDB读取</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> db = <span class=\"keyword\">await</span> <span class=\"title function_\">initDB</span>();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> tx = db.<span class=\"title function_\">transaction</span>(<span class=\"string\">&#x27;summaries&#x27;</span>, <span class=\"string\">&#x27;readonly&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> store = tx.<span class=\"title function_\">objectStore</span>(<span class=\"string\">&#x27;summaries&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> request = store.<span class=\"title function_\">get</span>(url);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> cachedData = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                request.<span class=\"property\">onsuccess</span> = <span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(request.<span class=\"property\">result</span>);</span><br><span class=\"line\">                request.<span class=\"property\">onerror</span> = <span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cachedData?.<span class=\"property\">summary</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 检查缓存是否过期（7天有效期）</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">const</span> isExpired = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() - cachedData.<span class=\"property\">timestamp</span> &gt; sparkLite_localCacheTime;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isExpired) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> cachedData.<span class=\"property\">summary</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;【AI 摘要前端】读取 IndexedDB 缓存失败&#x27;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> requestDataToProxy = &#123;<span class=\"attr\">post_url</span>: url&#125;;<span class=\"comment\">// &#123;content: content, title: title&#125;;</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> timeout = <span class=\"number\">30000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> controller = <span class=\"keyword\">new</span> <span class=\"title class_\">AbortController</span>();</span><br><span class=\"line\">            <span class=\"keyword\">const</span> timeoutId = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> controller.<span class=\"title function_\">abort</span>(), timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"variable constant_\">PROXY_API_URL</span>, &#123;</span><br><span class=\"line\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>&#125;,</span><br><span class=\"line\">                <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(requestDataToProxy),</span><br><span class=\"line\">                <span class=\"attr\">signal</span>: controller.<span class=\"property\">signal</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">clearTimeout</span>(timeoutId);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.<span class=\"property\">ok</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 成功获取摘要后存入IndexedDB</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> db = <span class=\"keyword\">await</span> <span class=\"title function_\">initDB</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> tx = db.<span class=\"title function_\">transaction</span>(<span class=\"string\">&#x27;summaries&#x27;</span>, <span class=\"string\">&#x27;readwrite&#x27;</span>);</span><br><span class=\"line\">                    tx.<span class=\"title function_\">objectStore</span>(<span class=\"string\">&#x27;summaries&#x27;</span>).<span class=\"title function_\">put</span>(&#123;</span><br><span class=\"line\">                        <span class=\"attr\">url</span>: url,</span><br><span class=\"line\">                        <span class=\"attr\">summary</span>: data.<span class=\"property\">summary</span>,</span><br><span class=\"line\">                        <span class=\"attr\">timestamp</span>: <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>()</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;【AI 摘要前端】IndexedDB 写入失败&#x27;</span>, e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data.<span class=\"property\">summary</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`【AI 摘要前端】代理或 API 错误: <span class=\"subst\">$&#123;data.error || response.statusText&#125;</span>`</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">`【AI 摘要前端】获取摘要失败: <span class=\"subst\">$&#123;data.error || <span class=\"string\">`HTTP 状态码: <span class=\"subst\">$&#123;response.status&#125;</span>`</span>&#125;</span>`</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (error.<span class=\"property\">name</span> === <span class=\"string\">&#x27;AbortError&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;【AI 摘要前端】Spark Lite 请求超时 (通过代理)&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;【AI 摘要前端】获取文章摘要超时，请稍后刷新重试。&#x27;</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;【AI 摘要前端】Spark Lite 请求失败 (通过代理)：&#x27;</span>, error);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (error <span class=\"keyword\">instanceof</span> <span class=\"title class_\">SyntaxError</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;【AI 摘要前端】获取文章摘要失败：代理服务器响应格式错误。&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&#x27;【AI 摘要前端】获取文章摘要失败，请检查网络连接或代理服务器状态。&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// --- aiShowAnimation 函数 ---</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以修改 console.error 和 element.innerHTML 中的 &quot;TianliGPT&quot; 为 &quot;Spark Lite&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">aiShowAnimation</span>: <span class=\"keyword\">function</span> (<span class=\"params\">text</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> element = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.sparkLite-explanation&quot;</span>); <span class=\"comment\">// 修改选择器</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!element) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sparkLiteIsRunning) &#123; <span class=\"comment\">// 修改变量名</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查用户是否已定义 sparkLite_typingAnimate</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> sparkLite_typingAnimate !== <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp; !sparkLite_typingAnimate) &#123; <span class=\"comment\">// 修改变量名</span></span><br><span class=\"line\">            element.<span class=\"property\">innerHTML</span> = text;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        sparkLiteIsRunning = <span class=\"literal\">true</span>; <span class=\"comment\">// 修改变量名</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> typingDelay = <span class=\"number\">25</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> waitingTime = <span class=\"number\">1000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> punctuationDelayMultiplier = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        element.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">        element.<span class=\"property\">innerHTML</span> = <span class=\"string\">`生成中...&lt;span class=&#x27;blinking-cursor&#x27;&gt;&lt;/span&gt;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> animationRunning = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> currentIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> initialAnimation = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> lastUpdateTime = performance.<span class=\"title function_\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">animate</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentIndex &lt; text.<span class=\"property\">length</span> &amp;&amp; animationRunning) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> currentTime = performance.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">                <span class=\"keyword\">const</span> timeDiff = currentTime - lastUpdateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">const</span> letter = text.<span class=\"title function_\">slice</span>(currentIndex, currentIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">const</span> isPunctuation = <span class=\"regexp\">/[，。！、？,.!?]/</span>.<span class=\"title function_\">test</span>(letter);</span><br><span class=\"line\">                <span class=\"keyword\">const</span> delay = isPunctuation ? typingDelay * punctuationDelayMultiplier : typingDelay;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (timeDiff &gt;= delay) &#123;</span><br><span class=\"line\">                    element.<span class=\"property\">innerText</span> = text.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, currentIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">                    lastUpdateTime = currentTime;</span><br><span class=\"line\">                    currentIndex++;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (currentIndex &lt; text.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">                        element.<span class=\"property\">innerHTML</span> =</span><br><span class=\"line\">                            text.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, currentIndex) +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;&lt;span class=&quot;blinking-cursor&quot;&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        element.<span class=\"property\">innerHTML</span> = text;</span><br><span class=\"line\">                        element.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">                        sparkLiteIsRunning = <span class=\"literal\">false</span>; <span class=\"comment\">// 修改变量名</span></span><br><span class=\"line\">                        observer.<span class=\"title function_\">disconnect</span>();<span class=\"comment\">// 暂停监听</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"title function_\">requestAnimationFrame</span>(animate);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用IntersectionObserver对象优化ai离开视口后暂停的业务逻辑，提高性能</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">IntersectionObserver</span>(<span class=\"function\">(<span class=\"params\">entries</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            animationRunning = entries[<span class=\"number\">0</span>].<span class=\"property\">isIntersecting</span>; <span class=\"comment\">// 标志变量更新</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (animationRunning &amp;&amp; initialAnimation) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">requestAnimationFrame</span>(animate);</span><br><span class=\"line\">                &#125;, <span class=\"number\">200</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, &#123;<span class=\"attr\">threshold</span>: <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> post_ai = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.post-SparkLite&#x27;</span>); <span class=\"comment\">// 修改选择器</span></span><br><span class=\"line\">        observer.<span class=\"title function_\">observe</span>(post_ai);<span class=\"comment\">//启动新监听</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- runSparkLite 函数 (保持不变) ---</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">runSparkLite</span>(<span class=\"params\"></span>) &#123; <span class=\"comment\">// 重命名函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 确保在运行前移除可能存在的旧div，防止重复添加</span></span><br><span class=\"line\">    <span class=\"title function_\">removeExistingAIDiv</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 插入新的占位符</span></span><br><span class=\"line\">    <span class=\"title function_\">insertAIDiv</span>(sparkLite_postSelector);</span><br><span class=\"line\">    <span class=\"comment\">// const content = sparkLite.getTitleAndContent(); // 调用重命名后的对象和方法</span></span><br><span class=\"line\">    <span class=\"comment\">// if (content) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     // console.log(&#x27;Spark Lite 本次提交的内容为：&#x27; + content); // 修改日志文本</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125; else &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     // 如果没有获取到内容，可能需要移除占位符或显示错误</span></span><br><span class=\"line\">    <span class=\"comment\">//     const aiExplanationDiv = document.querySelector(&quot;.sparkLite-explanation&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">//     if (aiExplanationDiv) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         aiExplanationDiv.textContent = &#x27;未能获取到文章内容，无法生成摘要。&#x27;;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//     return; // 提前退出，不进行 fetch</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    sparkLite.<span class=\"title function_\">fetchSparkLiteSummary</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">summary</span> =&gt;</span> &#123; <span class=\"comment\">// 调用重命名后的方法</span></span><br><span class=\"line\">        sparkLite.<span class=\"title function_\">aiShowAnimation</span>(summary); <span class=\"comment\">// 调用重命名后的方法</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- checkURLAndRun 函数 (稍微调整，主要负责URL检查) ---</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">checkURLAndRun</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查 AI 是否已在运行，防止重复启动动画等</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sparkLiteIsRunning) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 返回 false 表示不应继续执行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 检查 AI 容器是否已存在 (如果存在，理论上不应再次运行完整流程，除非是内容更新)</span></span><br><span class=\"line\">    <span class=\"comment\">// 为简化逻辑，我们允许它继续，runSparkLite内部会处理移除和重新插入</span></span><br><span class=\"line\">    <span class=\"comment\">// if (document.querySelector(&quot;.post-SparkLite&quot;)) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     return false;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// URL 检查逻辑</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> sparkLite_postURLs === <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp; <span class=\"keyword\">typeof</span> sparkLite_postURLs_regex === <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;【AI 摘要前端】没有设置页面链接模板，所以我为每个页面都生成ai摘要.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// 返回 true 表示检查通过，可以运行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">regExpEscape</span> = (<span class=\"params\">s</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[|\\\\&#123;&#125;()[\\]^$+*?.]/g</span>, <span class=\"string\">&#x27;\\\\$&amp;&#x27;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">wildcardToRegExp</span> = (<span class=\"params\">s</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;^&#x27;</span> + s.<span class=\"title function_\">split</span>(<span class=\"regexp\">/\\*+/</span>).<span class=\"title function_\">map</span>(regExpEscape).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;.*&#x27;</span>) + <span class=\"string\">&#x27;$&#x27;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentURL = <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> customPattern = sparkLite_postURLs.<span class=\"title function_\">map</span>(wildcardToRegExp);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> urlPattern = [...customPattern, ...(sparkLite_postURLs_regex)];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 测试某个 URL 是否匹配任意一个规则</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">testURL</span> = (<span class=\"params\">url</span>) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> urlPattern.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">re</span> =&gt;</span> re.<span class=\"title function_\">test</span>(url));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">testURL</span>(currentURL)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;【AI 摘要前端】匹配到了页面URL，将在此页面生成摘要&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; <span class=\"comment\">// URL匹配，检查通过</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;【AI 摘要前端】因为不符合自定义的链接规则，我决定不执行摘要功能。&quot;</span>);</span><br><span class=\"line\">            <span class=\"title function_\">removeExistingAIDiv</span>(); <span class=\"comment\">// 如果URL不匹配了，移除可能存在的旧AI框</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// URL不匹配，检查不通过</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;【AI 摘要前端】我没有看懂你编写的自定义链接规则...&quot;</span>, error);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 出错，检查不通过</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- 新增：统一的初始化入口函数 ---</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initializeSparkLite</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 检查文章容器是否存在</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> targetElement = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(sparkLite_postSelector);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!targetElement) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(&quot;Spark Lite: Target post selector not found.&quot;);</span></span><br><span class=\"line\">        <span class=\"title function_\">removeExistingAIDiv</span>(); <span class=\"comment\">// 确保目标容器不在时，AI框也被移除</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 执行URL和运行状态检查</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">checkURLAndRun</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 3. 如果检查通过，执行核心逻辑</span></span><br><span class=\"line\">        <span class=\"comment\">// console.log(&quot;Spark Lite: Initialization checks passed, running...&quot;);</span></span><br><span class=\"line\">        <span class=\"title function_\">runSparkLite</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(&quot;Spark Lite: Initialization checks failed (URL mismatch or already running).&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- Event Listeners (使用新的初始化函数) ---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 确保在移除旧监听器（如果可能）后添加新的</span></span><br><span class=\"line\"><span class=\"comment\">// （在简单脚本场景下通常不需要移除，但这是良好实践）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- 增强路由变化监听 ---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 保存原始的 pushState 和 replaceState 方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> originalPushState = history.<span class=\"property\">pushState</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> originalReplaceState = history.<span class=\"property\">replaceState</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包装 pushState</span></span><br><span class=\"line\">history.<span class=\"property\">pushState</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用原始方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = originalPushState.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 创建并触发自定义事件，表明 URL 可能已更改</span></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">dispatchEvent</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Event</span>(<span class=\"string\">&#x27;pushstate&#x27;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 触发我们的初始化函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 setTimeout 确保在 DOM 更新后执行</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(initializeSparkLite, <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 包装 replaceState</span></span><br><span class=\"line\">history.<span class=\"property\">replaceState</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用原始方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = originalReplaceState.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 创建并触发自定义事件，表明 URL 可能已更改</span></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">dispatchEvent</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Event</span>(<span class=\"string\">&#x27;replacestate&#x27;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// 触发我们的初始化函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 setTimeout 确保在 DOM 更新后执行</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(initializeSparkLite, <span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听 popstate 事件 (浏览器前进/后退按钮)</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;popstate&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 触发我们的初始化函数</span></span><br><span class=\"line\">    <span class=\"comment\">// 使用 setTimeout 确保在 DOM 更新后执行</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(initializeSparkLite, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- (确保之前的事件监听器仍然存在) ---</span></span><br><span class=\"line\"><span class=\"comment\">// 初始加载</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">removeEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, initializeSparkLite); <span class=\"comment\">// 避免重复添加</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;DOMContentLoaded&quot;</span>, initializeSparkLite);</span><br></pre></td></tr></table></figure>\n<h2 id=\"ai-summarycss\"><a class=\"markdownIt-Anchor\" href=\"#ai-summarycss\"></a> <code>ai-summary.css</code></h2>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* AI 文章摘要样式框 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 主色调 */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-main</span>: <span class=\"number\">#5e72e4</span>; <span class=\"comment\">/* 柔和的蓝色 */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-secondbg</span>: <span class=\"number\">#f8f9fa</span>; <span class=\"comment\">/* 非常浅的灰色背景 */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-card-bg</span>: <span class=\"number\">#ffffff</span>; <span class=\"comment\">/* 白色卡片背景 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 文字颜色 */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-fontcolor</span>: <span class=\"number\">#2d3748</span>; <span class=\"comment\">/* 深灰色文字 */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-lighttext</span>: <span class=\"number\">#718096</span>; <span class=\"comment\">/* 中等灰色文字 */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-white</span>: <span class=\"number\">#ffffff</span>; <span class=\"comment\">/* 纯白色 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 边框样式 */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-style-border-always</span>: <span class=\"number\">0.0625rem</span> solid <span class=\"number\">#e2e8f0</span>; <span class=\"comment\">/* 浅灰色边框 (1px→0.0625rem) */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 悬停状态 */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-hover</span>: <span class=\"number\">#4c51bf</span>; <span class=\"comment\">/* 深一点的蓝色用于悬停 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-theme=<span class=\"string\">&quot;dark&quot;</span>]</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 主色调调整（降低饱和度，提高辨识度） */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-main</span>: <span class=\"number\">#7f9cf5</span>; <span class=\"comment\">/* 夜间模式下更亮的蓝色，保持可读性 */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-secondbg</span>: <span class=\"number\">#1a202c</span>; <span class=\"comment\">/* 深灰蓝背景（接近黑但不刺眼） */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-card-bg</span>: <span class=\"number\">#2d3748</span>; <span class=\"comment\">/* 暗色卡片背景（对比度适中） */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 文字颜色调整（减少亮度，避免白光刺眼） */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-fontcolor</span>: <span class=\"number\">#e2e8f0</span>; <span class=\"comment\">/* 浅灰白文字（确保可读性） */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-lighttext</span>: <span class=\"number\">#a0aec0</span>; <span class=\"comment\">/* 中等灰文字（次要内容） */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-white</span>: <span class=\"number\">#ffffff</span>; <span class=\"comment\">/* 纯白色保留（用于强调内容） */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 边框样式调整（暗色环境下更柔和） */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-style-border-always</span>: <span class=\"number\">0.0625rem</span> solid <span class=\"number\">#4a5568</span>; <span class=\"comment\">/* 深灰色边框 (1px→0.0625rem) */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 悬停状态调整（夜间模式下更明显） */</span></span><br><span class=\"line\">    <span class=\"attr\">--ai-summary-hover</span>: <span class=\"number\">#667eea</span>; <span class=\"comment\">/* 亮蓝色悬停效果 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.post-SparkLite</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--ai-summary-secondbg);</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">0.75rem</span>; <span class=\"comment\">/* 12px→0.75rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.75rem</span>; <span class=\"comment\">/* 12px→0.75rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.3</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"built_in\">var</span>(--ai-summary-style-border-always);</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">1rem</span> <span class=\"number\">0</span>; <span class=\"comment\">/* 16px→1rem */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.post-SparkLite</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">margin-top</span>: <span class=\"number\">1.375rem</span>; <span class=\"comment\">/* 22px→1.375rem */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sparkLite-title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--ai-summary-lighttext);</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">0.5rem</span>; <span class=\"comment\">/* 8px→0.5rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0.35rem</span>; <span class=\"comment\">/* 0 12px→0 0.75rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: default;</span><br><span class=\"line\">    user-<span class=\"selector-tag\">select</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sparkLite-title-text</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0.5rem</span>; <span class=\"comment\">/* 8px→0.5rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sparkLite-explanation</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0.75rem</span>; <span class=\"comment\">/* 12px→0.75rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.5rem</span> <span class=\"number\">0.75rem</span>; <span class=\"comment\">/* 8px 12px→0.5rem 0.75rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"built_in\">var</span>(--ai-summary-card-bg);</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">0.5rem</span>; <span class=\"comment\">/* 8px→0.5rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"built_in\">var</span>(--ai-summary-style-border-always);</span><br><span class=\"line\">    <span class=\"comment\">/*font-size: var(--global-font-size);*/</span></span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.4</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sparkLite-tag</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.70rem</span>; <span class=\"comment\">/* 12px→0.75rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--ai-summary-lighttext);</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--ai-summary-card-bg);</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">0.25rem</span>; <span class=\"comment\">/* 4px→0.25rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">0.75rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.25rem</span>; <span class=\"comment\">/* 4px→0.25rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sparkLite-about</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.70rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: auto;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.25rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">    <span class=\"attribute\">transition</span>: <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sparkLite-title-icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">1.25rem</span>; <span class=\"comment\">/* 20px→1.25rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1.25rem</span>; <span class=\"comment\">/* 20px→1.25rem */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sparkLite-title-icon</span> <span class=\"selector-tag\">svg</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">1.25rem</span>; <span class=\"comment\">/* 20px→1.25rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1.25rem</span>; <span class=\"comment\">/* 20px→1.25rem */</span></span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: <span class=\"built_in\">var</span>(--ai-summary-main);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sparkLite-title-icon</span> <span class=\"selector-tag\">svg</span> <span class=\"selector-tag\">path</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">fill</span>: <span class=\"built_in\">var</span>(--ai-summary-main);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"spark-litejs\"><a class=\"markdownIt-Anchor\" href=\"#spark-litejs\"></a> <code>spark-lite.js</code></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    讯飞星火 API 文档：https://www.xfyun.cn/doc/spark/HTTP%E8%B0%83%E7%94%A8%E6%96%87%E6%A1%A3.html</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> getRedisClient <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../utils/redis&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- 从环境变量读取敏感信息 ---</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">APPID</span> = process.<span class=\"property\">env</span>.<span class=\"property\">SPARK_APPID</span>; <span class=\"comment\">// 可能仍需要</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">API_SECRET</span> = process.<span class=\"property\">env</span>.<span class=\"property\">SPARK_API_SECRET</span>; <span class=\"comment\">// 用于新鉴权</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">API_KEY</span> = process.<span class=\"property\">env</span>.<span class=\"property\">SPARK_API_KEY</span>;       <span class=\"comment\">// 用于新鉴权</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">API_PASSWORD</span> = process.<span class=\"property\">env</span>.<span class=\"property\">SPARK_API_PASSWORD</span>;       <span class=\"comment\">// 用于新鉴权</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- Spark API 地址 (兼容 OpenAI 格式) ---</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SPARK_API_URL</span> = <span class=\"string\">&quot;https://spark-api-open.xf-yun.com/v1/chat/completions&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// --- 确认 Lite 版或其他模型在新 API 中的标识符 ---</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">MODEL_NAME</span> = <span class=\"string\">&quot;lite&quot;</span>; <span class=\"comment\">// 请根据官方文档确认正确的模型名称</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SECONDS_OF_WEEK</span> = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SYSTEM_PROMPT</span> = [</span><br><span class=\"line\">    <span class=\"string\">&quot;你是一个严格遵循格式规则的摘要生成器。根据提供的文章内容，生成100-200字符的中文摘要，并严格遵守以下格式要求：&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;## 核心规则（违反将导致任务失败）：&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;1. 中英文/数字间必须添加空格！&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;   - 正确示例：&#x27;使用 Transformer 模型&#x27;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;   - 正确示例：&#x27;在 2023 年发布的 GPT-4 模型&#x27;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;   - 错误示例：&#x27;使用Transformer模型&#x27;（缺少空格）&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;   - 错误示例：&#x27;在2023年发布的GPT-4模型&#x27;（缺少空格）&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;2. 语言和格式要求：&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;   - 仅使用中文（专业术语保留英文)&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;   - 绝对禁止 Markdown 符号：* _ \\\\ $ # 等&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;   - 第三人称客观叙述&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;   - 输出必须是完整句子&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;3. 长度控制：&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;   - 严格控制在 100-200 个中文字符（约5-10句）&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;## 输出说明：&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;直接输出摘要文本，不要任何额外说明。生成后必须人工检查：&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;(1) 中英文间空格 (2) 无符号 (3) 纯文本&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;如发现违规，必须重新生成！&quot;</span></span><br><span class=\"line\">].<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cleanText</span> = (<span class=\"params\">htmlText, maxLength = <span class=\"number\">2000</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 合并多个替换操作</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cleanedContent = htmlText</span><br><span class=\"line\">        <span class=\"comment\">// 1. 解码Unicode转义序列</span></span><br><span class=\"line\">        .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\\\u([\\dA-F]&#123;4&#125;)/gi</span>, <span class=\"function\">(<span class=\"params\">_, code</span>) =&gt;</span></span><br><span class=\"line\">            <span class=\"title class_\">String</span>.<span class=\"title function_\">fromCharCode</span>(<span class=\"built_in\">parseInt</span>(code, <span class=\"number\">16</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2. 合并移除代码块、HTML标签、特定属性和callout块</span></span><br><span class=\"line\">        .<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">            <span class=\"regexp\">/&lt;code[\\s\\S]*?&lt;\\/code&gt;|&lt;pre[\\s\\S]*?&lt;\\/pre&gt;|&lt;div class=&quot;callout&quot;[\\s\\S]*?&lt;\\/div&gt;|&lt;img[^&gt;]*alt=&quot;([^&quot;]*)&quot;[^&gt;]*&gt;|&lt;[^&gt;]+&gt;|\\b(data-[\\w-]+|class|id|style|xmlns|viewBox|fill|stroke-width)=&quot;[^&quot;]*&quot;/gi</span>,</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">match, altText</span>) =&gt;</span> altText ? altText : <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 处理Markdown链接（支持嵌套格式）</span></span><br><span class=\"line\">        .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\[([^\\]]+)\\]\\([^)]+\\)/g</span>, <span class=\"function\">(<span class=\"params\">_, text</span>) =&gt;</span></span><br><span class=\"line\">            text.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\*\\*([^*]+)\\*\\*|__([^_]+)__|\\*([^*]+)\\*|_([^_]+)_/g</span>, <span class=\"string\">&#x27;$1$2$3$4&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4. 压缩空白字符</span></span><br><span class=\"line\">        .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s+/g</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^ | $/g</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">trim</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 截断优化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cleanedContent.<span class=\"property\">length</span> &lt;= maxLength) <span class=\"keyword\">return</span> cleanedContent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找句子结束位置（优化版）</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> lastSentenceIndex = cleanedContent</span><br><span class=\"line\">        .<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, maxLength)</span><br><span class=\"line\">        .<span class=\"title function_\">search</span>(<span class=\"regexp\">/[.!?。！？](?=\\s|$)/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> truncIndex = lastSentenceIndex &gt; <span class=\"number\">0</span> &amp;&amp; lastSentenceIndex &gt; maxLength - <span class=\"number\">150</span> ?</span><br><span class=\"line\">        lastSentenceIndex + <span class=\"number\">1</span> :</span><br><span class=\"line\">        <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(maxLength, cleanedContent.<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> summary = cleanedContent.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, truncIndex);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> summary + (truncIndex &lt; cleanedContent.<span class=\"property\">length</span> ? <span class=\"string\">&#x27;...&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">extractUrlPath</span> = (<span class=\"params\">urlString</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(urlString);</span><br><span class=\"line\">        <span class=\"comment\">// 获取路径名（包含开头斜杠和可能的结尾斜杠）</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> path = url.<span class=\"property\">pathname</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 移除开头和结尾的斜杠（如果存在）</span></span><br><span class=\"line\">        path = path.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\/|\\/$/g</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;【服务端】无效的URL:&quot;</span>, e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 常量定义</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">HTTP_METHODS</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">POST</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">OPTIONS</span>: <span class=\"string\">&#x27;OPTIONS&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">ERROR_MESSAGES</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">MISSING_ENV</span>: <span class=\"string\">&#x27;【服务端】内部错误：API凭证未配置&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">MISSING_URL</span>: <span class=\"string\">&#x27;【服务端】请求体缺少 \\&#x27;post_url\\&#x27; 字段&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">BLOG_API_FAILURE</span>: <span class=\"string\">&#x27;【服务端】获取文章元数据失败&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">BLOG_NOT_FOUND</span>: <span class=\"string\">&#x27;【服务端】blog api 找不到文章的元数据&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">SPARK_CONNECTION_FAILED</span>: <span class=\"string\">&#x27;【服务端】代理服务器未能连接到 Spark API&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">SPARK_RESPONSE_ERROR</span>: <span class=\"string\">&#x27;【服务端】未能从 Spark 获取有效摘要内容&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">INVALID_METHOD</span>: <span class=\"function\">(<span class=\"params\">method</span>) =&gt;</span> <span class=\"string\">`【服务端】Method <span class=\"subst\">$&#123;method&#125;</span> Not Allowed`</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">CORS_HEADERS</span> = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>: <span class=\"string\">&#x27;*&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Access-Control-Allow-Methods&#x27;</span>: <span class=\"string\">&#x27;POST, OPTIONS&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Access-Control-Allow-Headers&#x27;</span>: <span class=\"string\">&#x27;Content-Type, Authorization&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主处理函数</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCorsHeaders</span>(res);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.<span class=\"property\">method</span> === <span class=\"variable constant_\">HTTP_METHODS</span>.<span class=\"property\">OPTIONS</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">handleOptionsRequest</span>(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.<span class=\"property\">method</span> === <span class=\"variable constant_\">HTTP_METHODS</span>.<span class=\"property\">POST</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">handlePostRequest</span>(req, res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">handleInvalidMethod</span>(req, res);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置CORS头</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setCorsHeaders</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(<span class=\"variable constant_\">CORS_HEADERS</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">[key, value]</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        res.<span class=\"title function_\">setHeader</span>(key, value);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理OPTIONS请求</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleOptionsRequest</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">end</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理无效方法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleInvalidMethod</span>(<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">setHeader</span>(<span class=\"string\">&#x27;Allow&#x27;</span>, [<span class=\"variable constant_\">HTTP_METHODS</span>.<span class=\"property\">POST</span>, <span class=\"variable constant_\">HTTP_METHODS</span>.<span class=\"property\">OPTIONS</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">405</span>).<span class=\"title function_\">end</span>(<span class=\"variable constant_\">ERROR_MESSAGES</span>.<span class=\"title function_\">INVALID_METHOD</span>(req.<span class=\"property\">method</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理POST请求</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handlePostRequest</span>(<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 验证环境变量</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_\">validateEnvironmentVariables</span>()) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Server Error: Spark environment variables not configured.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">error</span>: <span class=\"variable constant_\">ERROR_MESSAGES</span>.<span class=\"property\">MISSING_ENV</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; post_url &#125; = req.<span class=\"property\">body</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!post_url) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">error</span>: <span class=\"variable constant_\">ERROR_MESSAGES</span>.<span class=\"property\">MISSING_URL</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> post_path = <span class=\"title function_\">extractUrlPath</span>(post_url);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> cachedSummary = <span class=\"keyword\">await</span> <span class=\"title function_\">checkRedisCache</span>(post_path);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cachedSummary) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">summary</span>: cachedSummary &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; title, content &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">fetchBlogContent</span>(post_path);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> summary = <span class=\"keyword\">await</span> <span class=\"title function_\">generateSparkSummary</span>(title, content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"title function_\">cacheResult</span>(post_path, summary);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(&#123; summary &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">handleError</span>(error, res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 验证环境变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">validateEnvironmentVariables</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable constant_\">API_KEY</span> &amp;&amp; <span class=\"variable constant_\">API_SECRET</span> &amp;&amp; <span class=\"variable constant_\">APPID</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检查Redis缓存</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">checkRedisCache</span>(<span class=\"params\">post_path</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> redisClient = <span class=\"keyword\">await</span> <span class=\"title function_\">getRedisClient</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value = <span class=\"keyword\">await</span> redisClient.<span class=\"title function_\">get</span>(post_path);  <span class=\"comment\">// 直接获取值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;【服务端】Redis Hit!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;【服务端】Redis Miss!&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取博客内容</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchBlogContent</span>(<span class=\"params\">post_path</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`https://blog.uuanqin.top/api/posts/<span class=\"subst\">$&#123;post_path&#125;</span>.json`</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">&#x27;GET&#x27;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!response || response.<span class=\"property\">status</span> === <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;【服务端】进入blog api - 404&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"variable constant_\">ERROR_MESSAGES</span>.<span class=\"property\">BLOG_NOT_FOUND</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> blogData = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">title</span>: blogData.<span class=\"property\">data</span>.<span class=\"property\">title</span>,</span><br><span class=\"line\">        <span class=\"attr\">content</span>: <span class=\"title function_\">cleanText</span>(blogData.<span class=\"property\">data</span>.<span class=\"property\">content</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成Spark摘要</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">generateSparkSummary</span>(<span class=\"params\">title, content</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> requestData = &#123;</span><br><span class=\"line\">        <span class=\"attr\">model</span>: <span class=\"variable constant_\">MODEL_NAME</span>,</span><br><span class=\"line\">        <span class=\"attr\">messages</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">role</span>: <span class=\"string\">&quot;system&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">content</span>: <span class=\"variable constant_\">SYSTEM_PROMPT</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">role</span>: <span class=\"string\">&quot;user&quot;</span>,</span><br><span class=\"line\">                <span class=\"attr\">content</span>: <span class=\"string\">`【文章标题】<span class=\"subst\">$&#123;title || <span class=\"string\">&#x27;无标题&#x27;</span>&#125;</span>【文章内容】<span class=\"subst\">$&#123;content&#125;</span>`</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">temperature</span>: <span class=\"number\">0.5</span>,</span><br><span class=\"line\">        <span class=\"attr\">max_tokens</span>: <span class=\"number\">200</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">`Bearer <span class=\"subst\">$&#123;API_PASSWORD&#125;</span>`</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"variable constant_\">SPARK_API_URL</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">        headers,</span><br><span class=\"line\">        <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(requestData)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!response.<span class=\"property\">ok</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> errorData = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>().<span class=\"title function_\">catch</span>(<span class=\"function\">() =&gt;</span> (&#123;&#125;));</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(errorData.<span class=\"property\">error</span>?.<span class=\"property\">message</span> || <span class=\"variable constant_\">ERROR_MESSAGES</span>.<span class=\"property\">SPARK_CONNECTION_FAILED</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> responseData = <span class=\"keyword\">await</span> response.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> assistantMessage = responseData.<span class=\"property\">choices</span>?.[<span class=\"number\">0</span>]?.<span class=\"property\">message</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (assistantMessage?.<span class=\"property\">role</span> === <span class=\"string\">&#x27;assistant&#x27;</span> &amp;&amp; assistantMessage.<span class=\"property\">content</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> assistantMessage.<span class=\"property\">content</span>.<span class=\"title function_\">trim</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"variable constant_\">ERROR_MESSAGES</span>.<span class=\"property\">SPARK_RESPONSE_ERROR</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 缓存结果</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">cacheResult</span>(<span class=\"params\">post_path, summary</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> redisClient = <span class=\"keyword\">await</span> <span class=\"title function_\">getRedisClient</span>();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> redisClient.<span class=\"title function_\">setEx</span>(post_path, <span class=\"variable constant_\">SECONDS_OF_WEEK</span>, summary);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误处理</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleError</span>(<span class=\"params\">error, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;【服务端】错误：&quot;</span>, error);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error.<span class=\"property\">message</span> <span class=\"keyword\">in</span> <span class=\"variable constant_\">ERROR_MESSAGES</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">400</span>).<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">error</span>: error.<span class=\"property\">message</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error <span class=\"keyword\">instanceof</span> <span class=\"title class_\">SyntaxError</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;Failed to parse Spark API response as JSON.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">error</span>: <span class=\"string\">&#x27;【服务端】代理服务器错误：无法解析 Spark API 响应&#x27;</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">status</span>(<span class=\"number\">500</span>).<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">error</span>: <span class=\"string\">&#x27;【服务端】代理服务器内部错误&#x27;</span>+error.<span class=\"property\">message</span>,</span><br><span class=\"line\">        <span class=\"attr\">details</span>: error.<span class=\"property\">message</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// --- 如果需要生成 Token，可能需要类似这样的辅助函数 (具体实现需查文档) ---</span></span><br><span class=\"line\"><span class=\"comment\">// function generateSparkToken(apiKey, apiSecret) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     // ... 根据讯飞文档实现 Token 生成逻辑 ...</span></span><br><span class=\"line\"><span class=\"comment\">//     return &quot;generated_token_string&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"redisjs\"><a class=\"markdownIt-Anchor\" href=\"#redisjs\"></a> <code>redis.js</code></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// utils/redis.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createClient &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redis&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> redisClient;</span><br><span class=\"line\"><span class=\"keyword\">let</span> isConnecting = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getRedisClient</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (redisClient &amp;&amp; redisClient.<span class=\"property\">isReady</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isConnecting) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 等待现有连接完成</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"title function_\">check</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (redisClient &amp;&amp; redisClient.<span class=\"property\">isReady</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(redisClient);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">setTimeout</span>(check, <span class=\"number\">50</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"title function_\">check</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    isConnecting = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        redisClient = <span class=\"title function_\">createClient</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">url</span>: process.<span class=\"property\">env</span>.<span class=\"property\">REDIS_URL</span>,</span><br><span class=\"line\">            <span class=\"attr\">socket</span>: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 针对 Vercel 环境的优化设置</span></span><br><span class=\"line\">                <span class=\"attr\">reconnectStrategy</span>: <span class=\"function\">(<span class=\"params\">retries</span>) =&gt;</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(retries * <span class=\"number\">100</span>, <span class=\"number\">3000</span>),</span><br><span class=\"line\">                <span class=\"attr\">keepAlive</span>: <span class=\"number\">30000</span> <span class=\"comment\">// 保持连接活跃</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        redisClient.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;【服务端】Redis Client Error&#x27;</span>, err));</span><br><span class=\"line\">        redisClient.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;end&#x27;</span>, <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;【服务端】Redis connection closed&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> redisClient.<span class=\"title function_\">connect</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;【服务端】Redis connected successfully&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisClient;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;【服务端】Redis connection failed&#x27;</span>, err);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        isConnecting = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h1>\n<h2 id=\"后续改进\"><a class=\"markdownIt-Anchor\" href=\"#后续改进\"></a> 后续改进</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\"> 代码重构，允许替换其他模型</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\"> 不要设置 7 天过期。随文章更新而调用大模型。但如果 Redis 有 Key 就立即返回以保证速度，更新我们后面再处理。</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\"> 对模型生成内容进行保底后处理（盘古之白、保证整句、字数限制）</li>\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\"> <code>/p/77a4685d/#523</code> 类似这样的链接还没有正确匹配，需改进代码</li>\n</ul>\n<h2 id=\"心得\"><a class=\"markdownIt-Anchor\" href=\"#心得\"></a> 心得</h2>\n<p>当 TianliGPT 的博客 AI 摘要诞生时，我深感震撼，这么酷的项目我自己也要实现一个。那段时间，这个小小的愿景驱动着我不断，苦学本领和技术。睡觉前，脑海中还会闪过无数种实现方案…但是由于这些年事情太多，这个计划一直被耽搁。直到最近看到 Liushen、KonoXIN 的作品，我才把这个两年前的 Flag 捡起来。</p>\n<p>这些年，也逛了不少精美的博客，饱览许多高品质的文章。能和博友们一起成长，是一件幸福的事情！</p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://www.konoxin.top/posts/db7b3418/\">hexo基于TianliGPT使用免费的Spark-Lite制作AI摘要 | XIN’s Blog | 前端开发 | Vue.js &amp; JavaScript 技术分享</a></li>\n<li><a href=\"https://vercel.com/docs/functions\">Vercel Functions</a></li>\n<li><a href=\"https://blog.zhheo.com/p/ec57d8b2.html\">如何让博客支持AI摘要，使用TianliGPT自动生成文章的AI摘要 | 张洪Heo</a></li>\n<li><a href=\"https://blog.csdn.net/ivan5277/article/details/138669897\">nodeJS如何接入redis_nodejs 连接redis-CSDN博客</a></li>\n</ul>\n","raw":"---\ntitle: 我的 AI 摘要方案：Vercel+Redis+Hexo API+Spark Lite\ntags:\n  - Vercel\n  - Redis\n  - SparkLite\n  - npm\n  - JavaScript\n  - Hexo\n  - Butterfly\ncover: 'https://cdn.gallery.uuanqin.top/img/202506242301616.webp'\ndescription: 自己尝试动手实现一个 AI 摘要\ncategories:\n  - 博客站点维护\n  - Hexo\nabbrlink: 75efe9f3\ndate: 2025-06-24 23:19:05\ntop_img:\n---\n\n前段时间看到 [@LiuShen](https://blog.liushen.fun/) 发表了一篇博客文章，我不禁感慨：继对友链朋友圈改进后，柳神终于盯上 AI 摘要的改进了！在 Liushen 文章中提到了 [@konoXIN](https://www.konoxin.top/) 通过 Vercel 函数调用大模型的方法，对此我也受到启发，打算动手尝试自己的 AI 摘要解决方案。\n\n目前，静态博客 AI 摘要大概有以下三种：\n\n| AI 摘要生成方式  | 作者部署速度  | 读者获取摘要速度 | 说明                                             |\n| --------- | ------- | -------- | ---------------------------------------------- |\n| 直接调用大模型接口 | 🟢快     | 🔴慢，但可优化 | 直接调用大模型接口固然很慢，但通过引入多级缓存，摘要获取时间可大大缩短，还能节约成本。    |\n| 本地预构建摘要   | 🔴慢     | 🟢快      | 本地预构建，相当于把读者的访问时间转移到作者预构建的博客时间。这种无后端的配置方式灵活可调。 |\n| 第三方摘要服务   | 🟡取决于服务 | 🟡取决于服务  | 第三方摘要服务可能会收取一定的费用，但是能节省很多时间和精力成本。              |\n\n目前，博客圈里我了解到的上面方案对应的实现：\n\n| 方案                                                             | 作者                                    | 前端          | 后端           |\n| -------------------------------------------------------------- | ------------------------------------- | ----------- | ------------ |\n| [TianliGPT](https://blog.zhheo.com/p/ec57d8b2.html)            | [@Tianli](https://tianli-blog.club/)  | 引入 js 文件/插件 | 第三方后端管理      |\n| 插件 [hexo-ai-summary](https://blog.liushen.fun/posts/40702a0d/) | [@LiuShen](https://blog.liushen.fun/) | 插件 + 修改主题源码 | 无（本地提前生成好摘要） |\n| 自定义 [Vercel 代理方案](https://www.konoxin.top/posts/db7b3418/)     | [@konoXIN](https://www.konoxin.top/)  | 引入 js 文件    | Vercel 接口转发  |\n\nTianliGPT 方案是本站最初选择的方案，有专门的后端管理，内容合规、模型选择啥的基本不用操心。现在的 TianliGPT 在多款主题下也开发有多款插件，前端部署不是问题。要想省心省力，选择 TianliGPT 就行。\n\nhexo-ai-summary 是大佬 Liushen 提供的解决方案。这款方案通过提前生成博客摘要嵌入到每篇文章中，读者访问文章就能访问摘要，没有额外请求时延且不用担心另外的系统故障，此外可以灵活替换使用的大语言模型。此方案是速度与灵活性双重兼顾方案，要想读者以最快的速度获取文章摘要，选择 hexo-ai-summary 准没错。\n\nkonoXIN 也实现了自己的 AI 摘要方案，用户访问文章时携带文章内容发送至 Vercel，Vercel 充当代理调用 LLM 接口，并将最终的摘要数据返回给用户。这种方案朴素、结构直观且有效，给想动 (zhe) 手 (teng) 的人更大的发挥空间。\n\n本文主要参考的是 konoXIN 的文章，并在原方案的基础上作出了改进。但总的来说不会有前面的方案那么完美，只能说是个人试验的小作品。当然也希望各位读者分享你们的方案与建议，期待和各位大佬探讨交流 \\~\n\n# 我的方案\n\n## 概述\n\n相较于 [konoXIN 的方案](https://www.konoxin.top/posts/db7b3418/)，本方案改进点和可优化点如下表所示：\n\n| 改进点                                                                                                                                                                            | 可优化点（缺点...）                                                                              |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------- |\n| 样式调整：<br>✅样式文件中，像素 px 统一使用 rem 单位<br>✅Hexo-Butterfly 主题夜间模式适配<br>✅多一个「关于」按钮<br><br>逻辑改进：<br>✅重构前后端代码，增加代码可读性<br>✅优化前端请求方式，减少不必要的参数携带<br>✅本地缓存 + Vercel 代理端 Redis 缓存<br>✅优化提示词模板 | 🟥模块依赖较复杂，有一定的耦合性<br>🟥模型的灵活替换功能还需要额外的代码重构<br>🟥仅适合个人学习参考使用<br>🟥API 插件提供的信息过多，存在冗余或安全风险 |\n\n交互时序图（Sequence Diagram）如下：\n\n```mermaid\nsequenceDiagram\n    actor U as 用户\n    participant F as 前端\n    participant V as Vercel\n    participant R as Redis\n    participant L as 大模型\n    participant B as 博客 API 服务\n    activate U\n    U ->> F : 访问文章\n    activate F\n    F ->> F : 查询本地缓存\n    activate F\n    deactivate F\n    alt 本地无缓存\n        F ->> V : 文章链接\n        activate V\n        V ->> R : 查询缓存\n        activate R\n        R -->> V : 查询结果\n        deactivate R\n        alt 服务端无缓存            \n            V ->> B : 访问API接口获取全文\n            activate B\n            B -->> V : 文章数据\n            deactivate B\n            \n            V ->> V : 数据清洗\n            activate V\n            deactivate V\n            V ->> L : 提示词与清洗后的数据\n            activate L\n            L -->> V : 文章摘要\n            deactivate L\n            V ->> R : 缓存\n            activate R\n            deactivate R   \n        end\n        V -->> F : 文章摘要\n        deactivate V\n        F ->> F : 摘要本地缓存\n        activate F\n        deactivate F\n    end\n    F -->> U: 文章摘要\n    deactivate F\n    deactivate U\n```\n\n缓存方案概述：用户访问文章时，先找本地浏览器缓存，本地缓存不命中则发送请求至 Vercel。Vercel 接受请求后，先从 Redis 找缓存，Redis 不命中才向大模型服务获取文章摘要。所有缓存的时间均为 1 周。\n\n## 前端：文件导入\n\n> [!note] 本文所有代码文件均附于文末\n\n按照自己主题的导入方式引入以下文件：\n\n- `ai-summary.js`\n- `ai-summary.css`\n\nhexo-butterfly 主题可在 `_config.butterfly.yml` 中配置。\n\n## 后端：Vercel 提供的函数服务\n\n> [!note] 本文所有代码文件均附于文末\n\n我们使用 Vercel 函数服务代理文章摘要请求。官方文档：[Vercel Functions](https://vercel.com/docs/functions).\n\n建一个 GitHub 仓，里面编写代理逻辑以及 Redis 调用逻辑，然后通过 Vercel 导入这个项目。我的仓库目录如下：\n\n![image.png|275](https://cdn.gallery.uuanqin.top/img/202506230041907.webp)\n\n文件说明：\n\n- `spark-lite.js`：编写代理逻辑。放在 `/api/ai-summary` 下。访问时可通过：`https://your-custom-domain/api/ai-summary/spark-lite` 进行访问。\n- `redis.js`：用于使用 Redis 服务。\n\n如代码有更新，`git push` 到代码仓后，Vercel 会自动重新部署。Vercel 自定义域名可自行配置。\n\n> [!warning] 注意：使用 Vercel 函数服务，相关 JavaScript 文件必须放置在名为 `api` 的文件夹中才能生效。\n\n### 讯飞星火 Spark Lite\n\n在 [讯飞星火](https://console.xfyun.cn/services/cbm) 侧申请自己的大模型应用，并申请 Spark Lite 的无限 Token。记下 APPID、API_SECRET、API_KEY、API_PASSWORD 关键信息。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202506242242844.webp)\n\n打开 Vercel，创建对应的环境变量供后续使用：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202506242243395.webp)\n\n### 使用 Vercel 中的 Redis 集成服务\n\nRedis 服务可以自己另外部署，且还能有更高的灵活性。本文介绍的是 Vercel 中的 Redis 集成组件。\n\n在 Vercel 中，可以使用 Redis 集成组件：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202506230054761.webp)\n\n选择 Redis：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202506230054574.webp)\n\nVercel 免费用户（Hobby 计划）可以建一个 30MB 的，假设每篇摘要 200 字左右，这些空间可以应付上万篇文章摘要的需求，对于个人博客开发者来说完全够用。\n\n将 Redis 关联到 Vercel 对应的项目中，这样项目中就会多出一条环境变量——Redis 服务的地址。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202506242235748.webp)\n\n如果详看环境变量信息，除了在 Vercel 网站上看之外，还可以直接下载到代码仓中：\n\n```sh\nnpm i -g vercel # 如果没安装 vercel CLI\nvercel env pull .env.development.local # 拉取环境变量信息\n```\n\n使用 Redis 服务是记得安装好相应的包：`npm install redis`。并将生成的 `package.json` 以及 `package-lock.json` 一并加入到代码仓的版本管理中。\n\n## 安装 API 插件\n\n插件是在 Hexo 插件列表找的，基本符合我的要求。安装这个插件并根据自己的情况配置即可：[wherewhere/hexo-generator-apis: Generate restful json data for Hexo plugins](https://github.com/wherewhere/hexo-generator-apis)\n\n通过 `/api/posts/{path}.json` 请求可以得到文章元信息，里面有文章全文数据。Hexo 博客部署后，你可以尝试一下调用这个 API。\n\n# 代码文件\n\n## `ai-summary.js`\n\n```javascript\n// 定义样式常量 - 便于集中管理和修改\nconst LEFT_STYLE = \"color: #fadfa3; background: #030307; padding:5px 0;\";\nconst RIGHT_STYLE = \"background: #fadfa3; padding:5px 0;\";\n\n// 构建消息模板 - 使用多行模板字符串保持视觉结构\nconst MESSAGE_TEMPLATE = `\n %c Spark Lite 文章摘要AI生成 %c https://uuanqin.top/ \n`;\n\nconst PROXY_API_URL = \"https://ai-summary.uuanqin.top/api/ai-summary/spark-lite\"; // 这里填的是 Vercel 的地址\nconst LINK_AI_ABOUT = \"https://blog.uuanqin.top/p/75efe9f3/\"\n\n// 输出格式化控制台消息\nconsole.log(\n    MESSAGE_TEMPLATE,\n    LEFT_STYLE,\n    RIGHT_STYLE\n);\n\n// --- 其他配置 (根据需要调整) ---\nconst sparkLite_postSelector = \"#article-container\"; // 文章内容容器的选择器，例如 #article-container, .post-content\nconst sparkLite_wordLimit = 1000;             // 提交给 API 的最大字数限制\nconst sparkLite_typingAnimate = true;         // 是否启用打字机效果\n// 指定博客文章URL类型，只在这样的界面上生成ai摘要\n// 通配符写法\nconst sparkLite_postURLs = [\n    // \"https://*.uuanqin.top/p/*\",\n    // \"http://localhost:*/p/*\"\n];\n// 正则写法\nconst sparkLite_postURLs_regex = [\n    /^https:\\/\\/.*\\.uuanqin\\.top\\/p\\/[0-9a-fA-F]+\\/$/,\n    /^http:\\/\\/localhost:4000\\/p\\/[0-9a-fA-F]+\\/$/\n];\n\nconst MILLISECONDS_OF_A_WEEK = 7 * 24 * 60 * 60 * 1000;\n\nconst sparkLite_localCacheTime = MILLISECONDS_OF_A_WEEK;\n\nconst initDB = () => {\n    return new Promise((resolve, reject) => {\n        const request = indexedDB.open('SparkLiteDB', 1);\n\n        request.onupgradeneeded = (e) => {\n            const db = e.target.result;\n            if (!db.objectStoreNames.contains('summaries')) {\n                const store = db.createObjectStore('summaries', {keyPath: 'url'});\n                store.createIndex('timestamp', 'timestamp', {unique: false});\n            }\n        };\n\n        request.onsuccess = (e) => resolve(e.target.result);\n        request.onerror = (e) => reject(e.target.error);\n    });\n};\n\nlet sparkLiteIsRunning = false; // 重命名\n\n// --- insertAIDiv 函数 ---\nfunction insertAIDiv(selector) {\n    // 首先移除现有的 \"post-SparkLite\" 类元素（如果有的话）\n    removeExistingAIDiv(); // 需要同步修改 removeExistingAIDiv 函数选择器\n\n    // 获取目标元素\n    const targetElement = document.querySelector(selector);\n\n    // 如果没有找到目标元素，不执行任何操作\n    if (!targetElement) {\n        return;\n    }\n\n    // 创建要插入的HTML元素\n    const aiDiv = document.createElement('div');\n    aiDiv.className = 'post-SparkLite'; // 修改类名\n\n    const aiTitleDiv = document.createElement('div');\n    aiTitleDiv.className = 'sparkLite-title'; // 修改类名\n    aiDiv.appendChild(aiTitleDiv);\n\n    const aiIcon = document.createElement('i');\n    aiIcon.className = 'sparkLite-title-icon'; // 修改类名\n    aiTitleDiv.appendChild(aiIcon);\n\n    // 插入 SVG 图标 (保持不变或替换)\n    aiIcon.innerHTML = `<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='48px' height='48px' viewBox='0 0 48 48'>\n  <title>机器人</title>\n  <g id='机器人' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'>\n    <path d='M34.717885,5.03561087 C36.12744,5.27055371 37.079755,6.60373651 36.84481,8.0132786 L35.7944,14.3153359 L38.375,14.3153359 C43.138415,14.3153359 47,18.1768855 47,22.9402569 L47,34.4401516 C47,39.203523 43.138415,43.0650727 38.375,43.0650727 L9.625,43.0650727 C4.861585,43.0650727 1,39.203523 1,34.4401516 L1,22.9402569 C1,18.1768855 4.861585,14.3153359 9.625,14.3153359 L12.2056,14.3153359 L11.15519,8.0132786 C10.920245,6.60373651 11.87256,5.27055371 13.282115,5.03561087 C14.69167,4.80066802 16.024865,5.7529743 16.25981,7.16251639 L17.40981,14.0624532 C17.423955,14.1470924 17.43373,14.2315017 17.43948,14.3153359 L30.56052,14.3153359 C30.56627,14.2313867 30.576045,14.1470924 30.59019,14.0624532 L31.74019,7.16251639 C31.975135,5.7529743 33.30833,4.80066802 34.717885,5.03561087 Z M38.375,19.4902885 L9.625,19.4902885 C7.719565,19.4902885 6.175,21.0348394 6.175,22.9402569 L6.175,34.4401516 C6.175,36.3455692 7.719565,37.89012 9.625,37.89012 L38.375,37.89012 C40.280435,37.89012 41.825,36.3455692 41.825,34.4401516 L41.825,22.9402569 C41.825,21.0348394 40.280435,19.4902885 38.375,19.4902885 Z M14.8575,23.802749 C16.28649,23.802749 17.445,24.9612484 17.445,26.3902253 L17.445,28.6902043 C17.445,30.1191812 16.28649,31.2776806 14.8575,31.2776806 C13.42851,31.2776806 12.27,30.1191812 12.27,28.6902043 L12.27,26.3902253 C12.27,24.9612484 13.42851,23.802749 14.8575,23.802749 Z M33.1425,23.802749 C34.57149,23.802749 35.73,24.9612484 35.73,26.3902253 L35.73,28.6902043 C35.73,30.1191812 34.57149,31.2776806 33.1425,31.2776806 C31.71351,31.2776806 30.555,30.1191812 30.555,28.6902043 L30.555,26.3902253 C30.555,24.9612484 31.71351,23.802749 33.1425,23.802749 Z' id='形状结合' fill='#444444' fill-rule='nonzero'></path>\n  </g>\n  </svg>`;\n\n    const aiTitleTextDiv = document.createElement('div');\n    aiTitleTextDiv.className = 'sparkLite-title-text'; // 修改类名\n    aiTitleTextDiv.textContent = 'AI 摘要';\n    aiTitleDiv.appendChild(aiTitleTextDiv);\n\n    const aiAboutLink = document.createElement('a');\n    aiAboutLink.href = LINK_AI_ABOUT;\n    aiAboutLink.target = '_blank'; // 可选：在新标签页打开\n    aiAboutLink.className = 'sparkLite-about'; // 修改类名\n    aiAboutLink.style.color = 'var(--ai-summary-lighttext)'; // 内联样式防止覆写\n    aiAboutLink.id = 'sparkLite-about'; // 修改 ID\n    aiAboutLink.textContent = '关于'; // 修改显示文本\n    aiTitleDiv.appendChild(aiAboutLink);\n\n    const aiTagDiv = document.createElement('div');\n    aiTagDiv.className = 'sparkLite-tag'; // 修改类名\n    aiTagDiv.id = 'sparkLite-tag'; // 修改 ID\n    aiTagDiv.textContent = 'Spark Lite'; // 修改显示文本\n    aiTitleDiv.appendChild(aiTagDiv);\n\n\n    const aiExplanationDiv = document.createElement('div');\n    aiExplanationDiv.className = 'sparkLite-explanation'; // 修改类名\n    aiExplanationDiv.innerHTML = '生成中...' + '<span class=\"blinking-cursor\"></span>';\n    aiDiv.appendChild(aiExplanationDiv);\n\n    // 将创建的元素插入到目标元素的顶部\n    targetElement.insertBefore(aiDiv, targetElement.firstChild);\n}\n\n// --- removeExistingAIDiv 函数 ---\nfunction removeExistingAIDiv() {\n    // 查找具有 \"post-SparkLite\" 类的元素\n    const existingAIDiv = document.querySelector(\".post-SparkLite\"); // 修改选择器\n\n    // 如果找到了这个元素，就从其父元素中删除它\n    if (existingAIDiv) {\n        existingAIDiv.parentElement.removeChild(existingAIDiv);\n    }\n}\n\n\n// --- 主要逻辑对象 ---\nconst sparkLite = { // 重命名对象\n    // --- fetchSparkLiteSummary 函数 (核心修改) ---\n    fetchSparkLiteSummary: async function () {\n        // const title = document.title;\n        const url = window.location.href;\n\n        // 先尝试从IndexedDB读取\n        try {\n            const db = await initDB();\n            const tx = db.transaction('summaries', 'readonly');\n            const store = tx.objectStore('summaries');\n            const request = store.get(url);\n\n            const cachedData = await new Promise((resolve) => {\n                request.onsuccess = () => resolve(request.result);\n                request.onerror = () => resolve(null);\n            });\n\n            if (cachedData?.summary) {\n                // 检查缓存是否过期（7天有效期）\n\n                const isExpired = Date.now() - cachedData.timestamp > sparkLite_localCacheTime;\n                if (!isExpired) {\n                    return cachedData.summary;\n                }\n            }\n        } catch (e) {\n            console.log('【AI 摘要前端】读取 IndexedDB 缓存失败', e);\n        }\n\n        const requestDataToProxy = {post_url: url};// {content: content, title: title};\n        const timeout = 30000;\n\n        try {\n            const controller = new AbortController();\n            const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n            const response = await fetch(PROXY_API_URL, {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify(requestDataToProxy),\n                signal: controller.signal\n            });\n\n            clearTimeout(timeoutId);\n            const data = await response.json();\n\n            if (response.ok) {\n                // 成功获取摘要后存入IndexedDB\n                try {\n                    const db = await initDB();\n                    const tx = db.transaction('summaries', 'readwrite');\n                    tx.objectStore('summaries').put({\n                        url: url,\n                        summary: data.summary,\n                        timestamp: Date.now()\n                    });\n                } catch (e) {\n                    console.log('【AI 摘要前端】IndexedDB 写入失败', e);\n                }\n                return data.summary;\n            } else {\n                console.error(`【AI 摘要前端】代理或 API 错误: ${data.error || response.statusText}`);\n                return `【AI 摘要前端】获取摘要失败: ${data.error || `HTTP 状态码: ${response.status}`}`;\n            }\n        } catch (error) {\n            if (error.name === 'AbortError') {\n                console.error('【AI 摘要前端】Spark Lite 请求超时 (通过代理)');\n                return '【AI 摘要前端】获取文章摘要超时，请稍后刷新重试。';\n            } else {\n                console.error('【AI 摘要前端】Spark Lite 请求失败 (通过代理)：', error);\n                if (error instanceof SyntaxError) {\n                    return '【AI 摘要前端】获取文章摘要失败：代理服务器响应格式错误。';\n                }\n                return '【AI 摘要前端】获取文章摘要失败，请检查网络连接或代理服务器状态。';\n            }\n        }\n    },\n\n    // --- aiShowAnimation 函数 ---\n    // 可以修改 console.error 和 element.innerHTML 中的 \"TianliGPT\" 为 \"Spark Lite\"\n    aiShowAnimation: function (text) {\n        const element = document.querySelector(\".sparkLite-explanation\"); // 修改选择器\n        if (!element) {\n            return;\n        }\n\n        if (sparkLiteIsRunning) { // 修改变量名\n            return;\n        }\n\n        // 检查用户是否已定义 sparkLite_typingAnimate\n        if (typeof sparkLite_typingAnimate !== \"undefined\" && !sparkLite_typingAnimate) { // 修改变量名\n            element.innerHTML = text;\n            return;\n        }\n\n        sparkLiteIsRunning = true; // 修改变量名\n        const typingDelay = 25;\n        const waitingTime = 1000;\n        const punctuationDelayMultiplier = 6;\n\n        element.style.display = \"block\";\n        element.innerHTML = `生成中...<span class='blinking-cursor'></span>`;\n\n        let animationRunning = true;\n        let currentIndex = 0;\n        let initialAnimation = true;\n        let lastUpdateTime = performance.now();\n\n        const animate = () => {\n            if (currentIndex < text.length && animationRunning) {\n                const currentTime = performance.now();\n                const timeDiff = currentTime - lastUpdateTime;\n\n                const letter = text.slice(currentIndex, currentIndex + 1);\n                const isPunctuation = /[，。！、？,.!?]/.test(letter);\n                const delay = isPunctuation ? typingDelay * punctuationDelayMultiplier : typingDelay;\n\n                if (timeDiff >= delay) {\n                    element.innerText = text.slice(0, currentIndex + 1);\n                    lastUpdateTime = currentTime;\n                    currentIndex++;\n\n                    if (currentIndex < text.length) {\n                        element.innerHTML =\n                            text.slice(0, currentIndex) +\n                            '<span class=\"blinking-cursor\"></span>';\n                    } else {\n                        element.innerHTML = text;\n                        element.style.display = \"block\";\n                        sparkLiteIsRunning = false; // 修改变量名\n                        observer.disconnect();// 暂停监听\n                    }\n                }\n                requestAnimationFrame(animate);\n            }\n        }\n\n        // 使用IntersectionObserver对象优化ai离开视口后暂停的业务逻辑，提高性能\n        const observer = new IntersectionObserver((entries) => {\n            animationRunning = entries[0].isIntersecting; // 标志变量更新\n            if (animationRunning && initialAnimation) {\n                setTimeout(() => {\n                    requestAnimationFrame(animate);\n                }, 200);\n            }\n        }, {threshold: 0});\n        let post_ai = document.querySelector('.post-SparkLite'); // 修改选择器\n        observer.observe(post_ai);//启动新监听\n    },\n};\n\n// --- runSparkLite 函数 (保持不变) ---\nfunction runSparkLite() { // 重命名函数\n    // 确保在运行前移除可能存在的旧div，防止重复添加\n    removeExistingAIDiv();\n    // 插入新的占位符\n    insertAIDiv(sparkLite_postSelector);\n    // const content = sparkLite.getTitleAndContent(); // 调用重命名后的对象和方法\n    // if (content) {\n    //     // console.log('Spark Lite 本次提交的内容为：' + content); // 修改日志文本\n    // } else {\n    //     // 如果没有获取到内容，可能需要移除占位符或显示错误\n    //     const aiExplanationDiv = document.querySelector(\".sparkLite-explanation\");\n    //     if (aiExplanationDiv) {\n    //         aiExplanationDiv.textContent = '未能获取到文章内容，无法生成摘要。';\n    //     }\n    //     return; // 提前退出，不进行 fetch\n    // }\n    sparkLite.fetchSparkLiteSummary().then(summary => { // 调用重命名后的方法\n        sparkLite.aiShowAnimation(summary); // 调用重命名后的方法\n    });\n}\n\n// --- checkURLAndRun 函数 (稍微调整，主要负责URL检查) ---\nfunction checkURLAndRun() {\n    // 检查 AI 是否已在运行，防止重复启动动画等\n    if (sparkLiteIsRunning) {\n        return false; // 返回 false 表示不应继续执行\n    }\n    // 检查 AI 容器是否已存在 (如果存在，理论上不应再次运行完整流程，除非是内容更新)\n    // 为简化逻辑，我们允许它继续，runSparkLite内部会处理移除和重新插入\n    // if (document.querySelector(\".post-SparkLite\")) {\n    //     return false;\n    // }\n\n    // URL 检查逻辑\n    if (typeof sparkLite_postURLs === \"undefined\" && typeof sparkLite_postURLs_regex === \"undefined\") {\n        console.log(\"【AI 摘要前端】没有设置页面链接模板，所以我为每个页面都生成ai摘要.\");\n        return true; // 返回 true 表示检查通过，可以运行\n    }\n\n    try {\n        const regExpEscape = (s) => {\n            return s.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n        };\n        const wildcardToRegExp = (s) => {\n            return new RegExp('^' + s.split(/\\*+/).map(regExpEscape).join('.*') + '$');\n        };\n\n        const currentURL = window.location.href;\n\n        const customPattern = sparkLite_postURLs.map(wildcardToRegExp);\n        const urlPattern = [...customPattern, ...(sparkLite_postURLs_regex)];\n\n        // 测试某个 URL 是否匹配任意一个规则\n        const testURL = (url) => {\n            return urlPattern.some(re => re.test(url));\n        };\n\n        if (testURL(currentURL)) {\n            console.log(\"【AI 摘要前端】匹配到了页面URL，将在此页面生成摘要\");\n            return true; // URL匹配，检查通过\n        } else {\n            console.log(\"【AI 摘要前端】因为不符合自定义的链接规则，我决定不执行摘要功能。\");\n            removeExistingAIDiv(); // 如果URL不匹配了，移除可能存在的旧AI框\n            return false; // URL不匹配，检查不通过\n        }\n    } catch (error) {\n        console.error(\"【AI 摘要前端】我没有看懂你编写的自定义链接规则...\", error);\n        return false; // 出错，检查不通过\n    }\n}\n\n// --- 新增：统一的初始化入口函数 ---\nfunction initializeSparkLite() {\n    // 1. 检查文章容器是否存在\n    const targetElement = document.querySelector(sparkLite_postSelector);\n    if (!targetElement) {\n        // console.log(\"Spark Lite: Target post selector not found.\");\n        removeExistingAIDiv(); // 确保目标容器不在时，AI框也被移除\n        return;\n    }\n\n    // 2. 执行URL和运行状态检查\n    if (checkURLAndRun()) {\n        // 3. 如果检查通过，执行核心逻辑\n        // console.log(\"Spark Lite: Initialization checks passed, running...\");\n        runSparkLite();\n    } else {\n        // console.log(\"Spark Lite: Initialization checks failed (URL mismatch or already running).\");\n    }\n}\n\n\n// --- Event Listeners (使用新的初始化函数) ---\n\n// 确保在移除旧监听器（如果可能）后添加新的\n// （在简单脚本场景下通常不需要移除，但这是良好实践）\n\n// --- 增强路由变化监听 ---\n\n// 保存原始的 pushState 和 replaceState 方法\nconst originalPushState = history.pushState;\nconst originalReplaceState = history.replaceState;\n\n// 包装 pushState\nhistory.pushState = function () {\n    // 调用原始方法\n    const result = originalPushState.apply(this, arguments);\n    // 创建并触发自定义事件，表明 URL 可能已更改\n    window.dispatchEvent(new Event('pushstate'));\n    // 触发我们的初始化函数\n    // 使用 setTimeout 确保在 DOM 更新后执行\n    setTimeout(initializeSparkLite, 100);\n    return result;\n};\n\n// 包装 replaceState\nhistory.replaceState = function () {\n    // 调用原始方法\n    const result = originalReplaceState.apply(this, arguments);\n    // 创建并触发自定义事件，表明 URL 可能已更改\n    window.dispatchEvent(new Event('replacestate'));\n    // 触发我们的初始化函数\n    // 使用 setTimeout 确保在 DOM 更新后执行\n    setTimeout(initializeSparkLite, 100);\n    return result;\n};\n\n// 监听 popstate 事件 (浏览器前进/后退按钮)\nwindow.addEventListener('popstate', () => {\n    // 触发我们的初始化函数\n    // 使用 setTimeout 确保在 DOM 更新后执行\n    setTimeout(initializeSparkLite, 100);\n});\n\n// --- (确保之前的事件监听器仍然存在) ---\n// 初始加载\ndocument.removeEventListener(\"DOMContentLoaded\", initializeSparkLite); // 避免重复添加\ndocument.addEventListener(\"DOMContentLoaded\", initializeSparkLite);\n```\n\n## `ai-summary.css`\n\n```css\n/* AI 文章摘要样式框 */\n\n:root {\n    /* 主色调 */\n    --ai-summary-main: #5e72e4; /* 柔和的蓝色 */\n    --ai-summary-secondbg: #f8f9fa; /* 非常浅的灰色背景 */\n    --ai-summary-card-bg: #ffffff; /* 白色卡片背景 */\n\n    /* 文字颜色 */\n    --ai-summary-fontcolor: #2d3748; /* 深灰色文字 */\n    --ai-summary-lighttext: #718096; /* 中等灰色文字 */\n    --ai-summary-white: #ffffff; /* 纯白色 */\n\n    /* 边框样式 */\n    --ai-summary-style-border-always: 0.0625rem solid #e2e8f0; /* 浅灰色边框 (1px→0.0625rem) */\n\n    /* 悬停状态 */\n    --ai-summary-hover: #4c51bf; /* 深一点的蓝色用于悬停 */\n}\n\n[data-theme=\"dark\"] {\n    /* 主色调调整（降低饱和度，提高辨识度） */\n    --ai-summary-main: #7f9cf5; /* 夜间模式下更亮的蓝色，保持可读性 */\n    --ai-summary-secondbg: #1a202c; /* 深灰蓝背景（接近黑但不刺眼） */\n    --ai-summary-card-bg: #2d3748; /* 暗色卡片背景（对比度适中） */\n\n    /* 文字颜色调整（减少亮度，避免白光刺眼） */\n    --ai-summary-fontcolor: #e2e8f0; /* 浅灰白文字（确保可读性） */\n    --ai-summary-lighttext: #a0aec0; /* 中等灰文字（次要内容） */\n    --ai-summary-white: #ffffff; /* 纯白色保留（用于强调内容） */\n\n    /* 边框样式调整（暗色环境下更柔和） */\n    --ai-summary-style-border-always: 0.0625rem solid #4a5568; /* 深灰色边框 (1px→0.0625rem) */\n\n    /* 悬停状态调整（夜间模式下更明显） */\n    --ai-summary-hover: #667eea; /* 亮蓝色悬停效果 */\n}\n\n.post-SparkLite {\n    background: var(--ai-summary-secondbg);\n    border-radius: 0.75rem; /* 12px→0.75rem */\n    padding: 0.75rem; /* 12px→0.75rem */\n    line-height: 1.3;\n    border: var(--ai-summary-style-border-always);\n    margin: 1rem 0; /* 16px→1rem */\n}\n\n@media screen and (max-width: 768px) {\n    .post-SparkLite {\n        margin-top: 1.375rem; /* 22px→1.375rem */\n    }\n}\n\n.sparkLite-title {\n    display: flex;\n    color: var(--ai-summary-lighttext);\n    border-radius: 0.5rem; /* 8px→0.5rem */\n    align-items: center;\n    padding: 0 0 0 0.35rem; /* 0 12px→0 0.75rem */\n    cursor: default;\n    user-select: none;\n}\n\n.sparkLite-title-text {\n    font-weight: bold;\n    margin-left: 0.5rem; /* 8px→0.5rem */\n    line-height: 1;\n}\n\n.sparkLite-explanation {\n    margin-top: 0.75rem; /* 12px→0.75rem */\n    padding: 0.5rem 0.75rem; /* 8px 12px→0.5rem 0.75rem */\n    background: var(--ai-summary-card-bg);\n    border-radius: 0.5rem; /* 8px→0.5rem */\n    border: var(--ai-summary-style-border-always);\n    /*font-size: var(--global-font-size);*/\n    line-height: 1.4;\n    display: flex;\n}\n\n.sparkLite-tag {\n    font-size: 0.70rem; /* 12px→0.75rem */\n    background-color: var(--ai-summary-lighttext);\n    color: var(--ai-summary-card-bg);\n    font-weight: bold;\n    border-radius: 0.25rem; /* 4px→0.25rem */\n    margin-left: 0.75rem;\n    line-height: 1;\n    padding: 0.25rem; /* 4px→0.25rem */\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: 0.3s;\n}\n\n.sparkLite-about {\n    font-size: 0.70rem;\n    margin-left: auto;\n    line-height: 1;\n    padding: 0.25rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: 0.3s;\n}\n\n.sparkLite-title-icon {\n    width: 1.25rem; /* 20px→1.25rem */\n    height: 1.25rem; /* 20px→1.25rem */\n}\n\n.sparkLite-title-icon svg {\n    width: 1.25rem; /* 20px→1.25rem */\n    height: 1.25rem; /* 20px→1.25rem */\n    fill: var(--ai-summary-main);\n}\n\n.sparkLite-title-icon svg path {\n    fill: var(--ai-summary-main);\n}\n```\n\n ## `spark-lite.js`\n\n```javascript\n/*\n    讯飞星火 API 文档：https://www.xfyun.cn/doc/spark/HTTP%E8%B0%83%E7%94%A8%E6%96%87%E6%A1%A3.html\n*/\n\nimport getRedisClient from '../../utils/redis';\n\n// --- 从环境变量读取敏感信息 ---\nconst APPID = process.env.SPARK_APPID; // 可能仍需要\nconst API_SECRET = process.env.SPARK_API_SECRET; // 用于新鉴权\nconst API_KEY = process.env.SPARK_API_KEY;       // 用于新鉴权\nconst API_PASSWORD = process.env.SPARK_API_PASSWORD;       // 用于新鉴权\n\n// --- Spark API 地址 (兼容 OpenAI 格式) ---\nconst SPARK_API_URL = \"https://spark-api-open.xf-yun.com/v1/chat/completions\";\n// --- 确认 Lite 版或其他模型在新 API 中的标识符 ---\nconst MODEL_NAME = \"lite\"; // 请根据官方文档确认正确的模型名称\n\nconst SECONDS_OF_WEEK = 60 * 60 * 24 * 7;\nconst SYSTEM_PROMPT = [\n    \"你是一个严格遵循格式规则的摘要生成器。根据提供的文章内容，生成100-200字符的中文摘要，并严格遵守以下格式要求：\",\n    \"\",\n    \"## 核心规则（违反将导致任务失败）：\",\n    \"1. 中英文/数字间必须添加空格！\",\n    \"   - 正确示例：'使用 Transformer 模型'\",\n    \"   - 正确示例：'在 2023 年发布的 GPT-4 模型'\",\n    \"   - 错误示例：'使用Transformer模型'（缺少空格）\",\n    \"   - 错误示例：'在2023年发布的GPT-4模型'（缺少空格）\",\n    \"\",\n    \"2. 语言和格式要求：\",\n    \"   - 仅使用中文（专业术语保留英文)\",\n    \"   - 绝对禁止 Markdown 符号：* _ \\\\ $ # 等\",\n    \"   - 第三人称客观叙述\",\n    \"   - 输出必须是完整句子\",\n    \"\",\n    \"3. 长度控制：\",\n    \"   - 严格控制在 100-200 个中文字符（约5-10句）\",\n    \"\",\n    \"## 输出说明：\",\n    \"直接输出摘要文本，不要任何额外说明。生成后必须人工检查：\",\n    \"(1) 中英文间空格 (2) 无符号 (3) 纯文本\",\n    \"如发现违规，必须重新生成！\"\n].join('\\n');\n\nconst cleanText = (htmlText, maxLength = 2000) => {\n    // 合并多个替换操作\n    let cleanedContent = htmlText\n        // 1. 解码Unicode转义序列\n        .replace(/\\\\u([\\dA-F]{4})/gi, (_, code) =>\n            String.fromCharCode(parseInt(code, 16)))\n\n        // 2. 合并移除代码块、HTML标签、特定属性和callout块\n        .replace(\n            /<code[\\s\\S]*?<\\/code>|<pre[\\s\\S]*?<\\/pre>|<div class=\"callout\"[\\s\\S]*?<\\/div>|<img[^>]*alt=\"([^\"]*)\"[^>]*>|<[^>]+>|\\b(data-[\\w-]+|class|id|style|xmlns|viewBox|fill|stroke-width)=\"[^\"]*\"/gi,\n            (match, altText) => altText ? altText : ' '\n        )\n\n        // 3. 处理Markdown链接（支持嵌套格式）\n        .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, (_, text) =>\n            text.replace(/\\*\\*([^*]+)\\*\\*|__([^_]+)__|\\*([^*]+)\\*|_([^_]+)_/g, '$1$2$3$4'))\n\n        // 4. 压缩空白字符\n        .replace(/\\s+/g, ' ')\n        .replace(/^ | $/g, '')\n        .trim();\n\n    // 截断优化\n    if (cleanedContent.length <= maxLength) return cleanedContent;\n\n    // 查找句子结束位置（优化版）\n    const lastSentenceIndex = cleanedContent\n        .substring(0, maxLength)\n        .search(/[.!?。！？](?=\\s|$)/);\n\n    const truncIndex = lastSentenceIndex > 0 && lastSentenceIndex > maxLength - 150 ?\n        lastSentenceIndex + 1 :\n        Math.min(maxLength, cleanedContent.length);\n\n    const summary = cleanedContent.substring(0, truncIndex);\n    return summary + (truncIndex < cleanedContent.length ? '...' : '');\n};\n\nconst extractUrlPath = (urlString) => {\n    try {\n        const url = new URL(urlString);\n        // 获取路径名（包含开头斜杠和可能的结尾斜杠）\n        let path = url.pathname;\n\n        // 移除开头和结尾的斜杠（如果存在）\n        path = path.replace(/^\\/|\\/$/g, '');\n\n        return path;\n    } catch (e) {\n        console.error(\"【服务端】无效的URL:\", e);\n        return \"\";\n    }\n}\n\n// 常量定义\nconst HTTP_METHODS = {\n    POST: 'POST',\n    OPTIONS: 'OPTIONS'\n};\n\nconst ERROR_MESSAGES = {\n    MISSING_ENV: '【服务端】内部错误：API凭证未配置',\n    MISSING_URL: '【服务端】请求体缺少 \\'post_url\\' 字段',\n    BLOG_API_FAILURE: '【服务端】获取文章元数据失败',\n    BLOG_NOT_FOUND: '【服务端】blog api 找不到文章的元数据',\n    SPARK_CONNECTION_FAILED: '【服务端】代理服务器未能连接到 Spark API',\n    SPARK_RESPONSE_ERROR: '【服务端】未能从 Spark 获取有效摘要内容',\n    INVALID_METHOD: (method) => `【服务端】Method ${method} Not Allowed`\n};\n\nconst CORS_HEADERS = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n};\n\n// 主处理函数\nmodule.exports = async (req, res) => {\n    setCorsHeaders(res);\n\n    if (req.method === HTTP_METHODS.OPTIONS) {\n        return handleOptionsRequest(res);\n    }\n\n    if (req.method === HTTP_METHODS.POST) {\n        return handlePostRequest(req, res);\n    }\n\n    return handleInvalidMethod(req, res);\n};\n\n// 设置CORS头\nfunction setCorsHeaders(res) {\n    Object.entries(CORS_HEADERS).forEach(([key, value]) => {\n        res.setHeader(key, value);\n    });\n}\n\n// 处理OPTIONS请求\nfunction handleOptionsRequest(res) {\n    return res.status(200).end();\n}\n\n// 处理无效方法\nfunction handleInvalidMethod(req, res) {\n    res.setHeader('Allow', [HTTP_METHODS.POST, HTTP_METHODS.OPTIONS]);\n    return res.status(405).end(ERROR_MESSAGES.INVALID_METHOD(req.method));\n}\n\n// 处理POST请求\nasync function handlePostRequest(req, res) {\n    // 验证环境变量\n    if (!validateEnvironmentVariables()) {\n        console.error(\"Server Error: Spark environment variables not configured.\");\n        return res.status(500).json({ error: ERROR_MESSAGES.MISSING_ENV });\n    }\n\n    try {\n        const { post_url } = req.body;\n        if (!post_url) {\n            return res.status(400).json({ error: ERROR_MESSAGES.MISSING_URL });\n        }\n\n        const post_path = extractUrlPath(post_url);\n        const cachedSummary = await checkRedisCache(post_path);\n        if (cachedSummary) {\n            return res.status(200).json({ summary: cachedSummary });\n        }\n\n        const { title, content } = await fetchBlogContent(post_path);\n        const summary = await generateSparkSummary(title, content);\n\n        await cacheResult(post_path, summary);\n        return res.status(200).json({ summary });\n\n    } catch (error) {\n        return handleError(error, res);\n    }\n}\n\n// 验证环境变量\nfunction validateEnvironmentVariables() {\n    return API_KEY && API_SECRET && APPID;\n}\n\n// 检查Redis缓存\nasync function checkRedisCache(post_path) {\n    const redisClient = await getRedisClient();\n    const value = await redisClient.get(post_path);  // 直接获取值\n\n    if (value !== null) {\n        console.log(\"【服务端】Redis Hit!\");\n        return value;\n    }\n\n    console.log(\"【服务端】Redis Miss!\");\n    return null;\n}\n\n// 获取博客内容\nasync function fetchBlogContent(post_path) {\n    const response = await fetch(`https://blog.uuanqin.top/api/posts/${post_path}.json`, {\n        method: 'GET',\n    });\n\n    if (!response || response.status === 404) {\n        console.error(\"【服务端】进入blog api - 404\");\n        throw new Error(ERROR_MESSAGES.BLOG_NOT_FOUND);\n    }\n\n    const blogData = await response.json();\n    return {\n        title: blogData.data.title,\n        content: cleanText(blogData.data.content)\n    };\n}\n\n// 生成Spark摘要\nasync function generateSparkSummary(title, content) {\n    const requestData = {\n        model: MODEL_NAME,\n        messages: [\n            {\n                role: \"system\",\n                content: SYSTEM_PROMPT\n            },\n            {\n                role: \"user\",\n                content: `【文章标题】${title || '无标题'}【文章内容】${content}`,\n            }\n        ],\n        temperature: 0.5,\n        max_tokens: 200\n    };\n\n    const headers = {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${API_PASSWORD}`\n    };\n\n    const response = await fetch(SPARK_API_URL, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(requestData)\n    });\n\n    if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error?.message || ERROR_MESSAGES.SPARK_CONNECTION_FAILED);\n    }\n\n    const responseData = await response.json();\n    const assistantMessage = responseData.choices?.[0]?.message;\n\n    if (assistantMessage?.role === 'assistant' && assistantMessage.content) {\n        return assistantMessage.content.trim();\n    }\n\n    throw new Error(ERROR_MESSAGES.SPARK_RESPONSE_ERROR);\n}\n\n// 缓存结果\nasync function cacheResult(post_path, summary) {\n    const redisClient = await getRedisClient();\n    await redisClient.setEx(post_path, SECONDS_OF_WEEK, summary);\n}\n\n// 错误处理\nfunction handleError(error, res) {\n    console.error(\"【服务端】错误：\", error);\n\n    if (error.message in ERROR_MESSAGES) {\n        return res.status(400).json({ error: error.message });\n    }\n\n    if (error instanceof SyntaxError) {\n        console.error(\"Failed to parse Spark API response as JSON.\");\n        return res.status(500).json({ error: '【服务端】代理服务器错误：无法解析 Spark API 响应' });\n    }\n\n    return res.status(500).json({\n        error: '【服务端】代理服务器内部错误'+error.message,\n        details: error.message\n    });\n}\n\n// --- 如果需要生成 Token，可能需要类似这样的辅助函数 (具体实现需查文档) ---\n// function generateSparkToken(apiKey, apiSecret) {\n//     // ... 根据讯飞文档实现 Token 生成逻辑 ...\n//     return \"generated_token_string\";\n// }\n\n```\n\n## `redis.js`\n\n```javascript\n// utils/redis.js\nimport { createClient } from 'redis';\n\nlet redisClient;\nlet isConnecting = false;\n\nexport default async function getRedisClient() {\n    if (redisClient && redisClient.isReady) {\n        return redisClient;\n    }\n\n    if (isConnecting) {\n        // 等待现有连接完成\n        return new Promise((resolve) => {\n            const check = () => {\n                if (redisClient && redisClient.isReady) {\n                    resolve(redisClient);\n                } else {\n                    setTimeout(check, 50);\n                }\n            };\n            check();\n        });\n    }\n\n    isConnecting = true;\n\n    try {\n        redisClient = createClient({\n            url: process.env.REDIS_URL,\n            socket: {\n                // 针对 Vercel 环境的优化设置\n                reconnectStrategy: (retries) => Math.min(retries * 100, 3000),\n                keepAlive: 30000 // 保持连接活跃\n            }\n        });\n\n        redisClient.on('error', (err) => console.error('【服务端】Redis Client Error', err));\n        redisClient.on('end', () => console.log('【服务端】Redis connection closed'));\n\n        await redisClient.connect();\n        console.log('【服务端】Redis connected successfully');\n\n        return redisClient;\n    } catch (err) {\n        console.error('【服务端】Redis connection failed', err);\n        throw err;\n    } finally {\n        isConnecting = false;\n    }\n}\n```\n\n# 后记\n\n## 后续改进\n\n- [ ] 代码重构，允许替换其他模型\n- [ ] 不要设置 7 天过期。随文章更新而调用大模型。但如果 Redis 有 Key 就立即返回以保证速度，更新我们后面再处理。\n- [ ] 对模型生成内容进行保底后处理（盘古之白、保证整句、字数限制）\n- [ ] `/p/77a4685d/#523` 类似这样的链接还没有正确匹配，需改进代码\n\n## 心得\n\n当 TianliGPT 的博客 AI 摘要诞生时，我深感震撼，这么酷的项目我自己也要实现一个。那段时间，这个小小的愿景驱动着我不断，苦学本领和技术。睡觉前，脑海中还会闪过无数种实现方案......但是由于这些年事情太多，这个计划一直被耽搁。直到最近看到 Liushen、KonoXIN 的作品，我才把这个两年前的 Flag 捡起来。\n\n这些年，也逛了不少精美的博客，饱览许多高品质的文章。能和博友们一起成长，是一件幸福的事情！\n\n# 本文参考\n- [hexo基于TianliGPT使用免费的Spark-Lite制作AI摘要 | XIN's Blog | 前端开发 | Vue.js & JavaScript 技术分享](https://www.konoxin.top/posts/db7b3418/)\n- [Vercel Functions](https://vercel.com/docs/functions)\n- [如何让博客支持AI摘要，使用TianliGPT自动生成文章的AI摘要 | 张洪Heo](https://blog.zhheo.com/p/ec57d8b2.html)\n- [nodeJS如何接入redis_nodejs 连接redis-CSDN博客](https://blog.csdn.net/ivan5277/article/details/138669897)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":[{"name":"博客站点维护","api":"api/categories/博客站点维护.json"},{"name":"Hexo","api":"api/categories/博客站点维护/Hexo.json"}],"tags":[{"name":"JavaScript","api":"api/tags/JavaScript.json"},{"name":"Hexo","api":"api/tags/Hexo.json"},{"name":"npm","api":"api/tags/npm.json"},{"name":"Butterfly","api":"api/tags/Butterfly.json"},{"name":"Vercel","api":"api/tags/Vercel.json"},{"name":"Redis","api":"api/tags/Redis.json"},{"name":"SparkLite","api":"api/tags/SparkLite.json"}]},"api":"api/posts/p/75efe9f3.json"}