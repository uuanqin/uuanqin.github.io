{"title":"CSAPP LAB-4 代码优化","tags":["CSAPP","C"],"cover":"https://cdn.gallery.uuanqin.top/img/20240603130349.webp","description":"烧脑的循环展开","categories":["CSAPP LABS"],"abbrlink":"9d6b717","date":"2024-06-03T13:01:05.000Z","top_img":null,"summary":"> [!notice] CSAPP LAB 实验 > > - [[CSAPP LAB-1 位操作]] > - [[CSAPP LAB-2 二进制炸弹实验]] > - [[CSAPP LAB-3 缓冲区溢出炸弹]] > - CSAPP LAB-4 代码优化（本文） > - [[CSAPP LAB-5 手写动态存储分配器]] 实验介绍 图像处理中存在很多函数，可以对这些函数进行优化。本实验主要关注两种图像处理操作： 旋转：对图像逆时针旋转 90 度 平滑：对图像进行模糊操作 图像用二维矩阵 M 表示，$M_{ij}$ 表示图像 M 的第 $(i,j)$ 像素的值，像素值用红，绿，蓝表示。 旋转操作用下面 2 个操作表示： Transpose：对第（i,j）个像素对，$M_{ij}$ 和 $M_{ji}$ 交换 Exchange rows：行 i 和行 `N-1-i` 交换 平滑操作：每个像素用周围像素值的平均值表示（相当于进行均值滤波）。比如： $$ \\begin{aligned} M_2[1][1] = & \\frac{\\sum_{i=0}^2 \\sum_{j=0}^2 M_1[i][j]}{9} \\\\ M_2[N-1][N-1] = & \\frac{\\sum_{i=N-2}^{N-1} \\sum_{j=N-2}^{N-1} M_1[i][j]}{4} \\end{aligned} $$ 编码规则： 只能用 ANSI C，不能用嵌入式汇编 不能修改测量时间的机制（CPE） 只能修改 `kernels.c`，可以定义宏，全局变量，函数 实验开始 知识回顾 回顾一下 CSAPP 第 5 第 6 章学到了哪些优化代码的小技巧： 消除冗余的函数调用。比如避免在 for 循环里用 strlen。 消除不必要的内存引用。比如引入临时变量来把中间结果保存到寄存器里，在全部计算完成后把最终结果存到数组或全局变量里。 循环展开，降低判断语句和增减循环变量的开销。 累积变量和重新组合，提高指令并行性。 功能性风格重写条件操作，即用三元运算符。 提高空间局部性，尽量按照数组在内存里存储的顺序，以 1 为步长进行读取。 提高时间局部性，一旦在内存里读出一个变量，就尽可能频繁且集中的使用它。 Cache 的理论依据： 时间局部性：如果程序中的某条指令一旦执行，不久以后该指令可能再次执行；..."}