{"title":"SpringBoot 中的配置","cover":"https://cdn.gallery.uuanqin.top/img/20240723234813.webp","categories":["技术学习"],"abbrlink":"9441906f","description":"SpringBoot 最基础的读取配置的方式备忘。","date":"2024-08-03T00:10:59.000Z","tags":null,"top_img":null,"summary":"配置文件 SpringBoot 配置文件为： `application.properties`。形式：`main_key.sub=value`。不能写注释。 【推荐】`application.yml`，`application.yaml`。格式采用 YAML 格式，可以写注释。 外部配置的属性注入方法： 使用 `@Value` 注解通常用于外部配置的属性注入，具体用法为：`@Value(\"${配置文件中的key}\")`。 但是遇到复杂参数名的话，其注解可能会比较长且繁琐。我们可以使用 `@ConfigurationProperties` 简化开发。 `@Value` 和 `@ConfigurationProperties` 的不同点： `@Value` 注解只能一个一个的进行外部属性的注入。 `@ConfigurationProperties` 可以批量的将外部的属性配置注入到 bean 对象的属性中。 示例 `@Value` 方式： 使用 `@ConfigurationProperties` 方式，注意成员变量的命名要和配置文件中的键名对应： 可选操作：`pom.xml` 引入以下依赖，用于帮助 IDEA 识别 `@ConfigurationProperties` 中的 prefix，消去 IDEA 的警告，并且 IDEA 提供配置的自动补全。 这个依赖安装与否都不影响程序的正确运行。 配置方式 SpringBoot 除了支持配置文件属性配置，还支持 Java 系统属性和命令行参数的方式进行属性配置。 Java 系统属性：`-Dserver.port=9000`。 - IDEA 中在 Run/Debug Configurations -> 你的 Spring 项目 ->VM options 中配置。 - java 指令运行 jar 包：`java -Dserver.port=9000 -jar your.jar` 命令行参数：`--server.port=10010`。 - IDEA 中在 Run/Debug Configurations -> 你的 Spring 项目 -> Program arguments 中配置 - java 指令运行 jar 包：`java -jar your.jar --server.p..."}