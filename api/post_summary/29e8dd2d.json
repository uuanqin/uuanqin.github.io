{"title":"背包问题","tags":["动态规划","Java","LeetCode"],"cover":"https://cdn.gallery.uuanqin.top/img/202503100338306.webp","description":"背包问题集合","categories":["算法与数据结构"],"abbrlink":"29e8dd2d","katex":true,"date":"2025-05-11T23:23:29.000Z","top_img":null,"summary":"背包问题已经是一个很经典而且讨论很广泛的算法问题了。 背包问题泛指这类种问题： 给定一组有固定价值和固定重量的物品， 以及一个已知最大承重量的背包， 求在不超过背包最大承重量的前提下， 能放进背包里面的物品的最大总价值。 具体各类背包问题可以分成以下不同的子问题。 不同的背包问题 0-1 背包问题 > 特点：每个物品只有一件，选择放或者不放。 变形 1：存在最大容量 - 求最大价值 > [!example] 0-1 背包问题案例：🟨 125 · 背包问题（二） - LintCode > > 有 n 个商品，第 i 个商品价值 $v_i$ 元，重 $w_i$ 千克，$v_i$ 和 $w_i$ 都是整数。背包最多容纳 W 千克（整数）商品，每个商品要么全拿走，要么不拿走，我们需要拿走商品的总价值最高。 `dp[i][j]` 表示前 i 个商品在 j 空间下的最优选择的价值。 这里的模型为： $$ dfs(i,c) = \\max (dfs(i-1,c),dfs(i-1,c-w[i])+v[i]) $$ 我们可以使用动态规划算法： 复杂度分析： 时间复杂度： $O(nW)$。 空间复杂度： $O(nW)$。 > [!note] 不同循环写法的优劣 > > 问：两层循环有两种写法，一种是外层循环枚举物品，内层循环枚举体积；另一种是外层循环枚举体积，内层循环枚举物品。如何评价这两种写法的优劣？ > > 答：两种写法都可以，但更推荐前者。外层循环枚举物品的写法，只会遍历物品数组一次；而内层循环枚举物品的写法，会遍历物品数组多次。从 cache 的角度分析，多次遍历数组会导致额外的 cache miss，带来额外的开销。所以虽然这两种写法的时间空间复杂度是一样的，但外层循环枚举物品的写法常数更小。 滚动数组优化空间复杂度至 $2*W$： 复杂度分析： 时间复杂度： $O(nW)$。 空间复杂度： $O(W)$。 注意到，对于物品空间的遍历（也就是上面代码的内层循环），循环顺序不影响结果。我们可以进一步考虑只使用一维 `dp` 数组。 注意，0-1 背包使用一维数组时，内层循环只能逆序遍历！逆序遍历时，新值取自上一轮的旧值，所以不会有什么影响。 对 if-else 语句进行优化，得到最终的 0-1 背包一维数组写法： 复杂度分析： 时间复杂度： $O(nW)$。..."}