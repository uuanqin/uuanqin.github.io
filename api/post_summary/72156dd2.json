{"title":"Java 中的排序","cover":"https://cdn.gallery.uuanqin.top/img/202501232322321.webp","tags":["Java","Collections","Arrays"],"description":"快速弄清楚各种写排序的方法","categories":["计算机语言"],"abbrlink":"72156dd2","date":"2025-01-23T23:20:27.000Z","top_img":null,"summary":"本文题目难度标识：🟩简单，🟨中等，🟥困难。 快速使用 现有以下数组或集合的定义： | 排序方式 | Arrays | Collections（以 ArrayList 举例） | 顺序类型 | 注释 | | ----------------------------------------------- | ----------------------------------------------- | -------------------------------------------------------------------------------------------- | ---- | --------- | | 简单使用 `sort` 排序 | `Arrays.sort(nums);` | `Collections.sort(ls);` | 正序 | | | `sort` 局部排序 | `Arrays.sort(nums,3,6);` | - | 正序 | 左闭右开 | | `reverse` 逆序 | - | `Collections.reverse(ls);` | 逆序 | | | 使用现成的 `Comparator`：`Collections.reverseOrder()` | `Arrays.sort(nums,Collections.reverseOrder());` | `Collections.sort(ls,Collections.reverseOrder());`<br>`ls.sort(Collections.reverseOrder());` | 逆序 | 数组要求是包装类型 | | 通过 Lambda 提供自定义 `Comparator`（最简写法） | `Arrays.sort(nums, (o1, o2) -> o2 - o1);` | `Collections.sort(ls,((o1, o2) -> o2-o1));`<br>`ls.sort(((o1, o2) -> o2 - o1));` | 逆序 | 数组要求是包装类型 | 注意到，在使用 `Comparator` 进行排序时，被排序的数组要求为装箱类型。除了使用循环一个个自动装箱以外，我们还可以使用 `Arrays.s..."}