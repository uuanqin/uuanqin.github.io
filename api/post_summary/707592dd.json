{"title":"Git 基本操作学习","tags":["Git","GitHub","Gitee"],"cover":"https://cdn.gallery.uuanqin.top/img/git-basic-cover.png","description":"包含初学者学习内容与进阶方法论","abbrlink":"707592dd","categories":["技术学习"],"date":"2023-05-27T15:52:37.000Z","top_img":null,"summary":"> 本文为可视化 Git 学习项目的学习笔记。初级操作可视化学习：Learn Git Branching > > 项目地址：pcottle/learnGitBranching: An interactive git visualization and tutorial. Aspiring students of git can use this app to educate and challenge themselves towards mastery of git! (github.com) > Git 文档：Git - Documentation (git-scm.com) Git 基本操作 基本 Rebase Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。 Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。 HEAD HEAD 是一个对当前所在分支的符号引用 —— 也就是指向你正在其基础上进行工作的提交记录。 HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。 HEAD 通常情况下是指向分支名的（用\\* 表示）。分离的 HEAD 就是让其指向了某个具体的提交记录而不是分支名。 撤销变更 通过把分支记录回退几个提交记录来实现撤销改动（对远程分支无效）。 例如：在 C2 处执行 `git reset HEAD~1` 例如：在 C2 处执行 `git revert HEAD ` 要撤销的提交记录后面多了一个新提交。新提交记录 C2' 引入了更改 —— 这些更改刚好是用来撤销 C2 这个提交的。也就是说 C2' 的状态与 C1 是相同的。revert 之后就可以把你的更改推送到远程仓库。 修改分支树 将一些提交复制到当前所在位置。cherry-pick 可以将提交树上任何地方的提交记录取过来追加到 HEAD 上（只要不是 HEAD 上游的提交就没问题）。 如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。..."}