{"data":{"title":"串口驱动程序之「不定长字符串的接收」","slug":"嵌入式/串口驱动程序之「不定长字符串的接收」","description":"以 ESP8266 为例。","date":"2024-04-04T14:48:51.000Z","updated":"2024-04-11T16:02:10.748Z","language":"zh-CN","comments":true,"url":"p/aae69ac0/","cover":"https://cdn.gallery.uuanqin.top/img/20240412000200.webp","images":[],"content":"<p>主要思路：</p>\n<ol>\n<li>在标准库例子中的思路是，若收到串口空闲中断，则设置定时器。定时器时间到则认为串口接收完毕，置标志位。</li>\n<li>在 HAL 库例子中的思路是，收到每一个字符都设置定时器，定时器时间到则认为串口接收完毕，置标志位。</li>\n</ol>\n<p>本文假设的场景：</p>\n<ol>\n<li>串口 1 连接电脑。<code>printf</code> 重写，输出至串口 1。详看：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/5c1cda26/\"><span class=\"bilink-pop-up\">站内文章</span>串口驱动程序之「发送数据」</a></li>\n<li>串口 2 连接 ESP8266。<code>ESP8266_Printf</code> 函数重写 <code>sprintf</code>，输出到串口 2。</li>\n<li>函数 <code>uint8_t ESP8266_Cmd(uint8_t *cmd,uint8_t *expect_ack,uint16_t waittime)</code> 用于发送 AT 命令，并将收到结果回显至电脑（解注释 printf）。</li>\n</ol>\n<h1 id=\"标准库\"><a class=\"markdownIt-Anchor\" href=\"#标准库\"></a> 标准库</h1>\n<p>ESP8266 驱动：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stm32f10x.h&quot;</span>                  <span class=\"comment\">// Device header</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span> <span class=\"comment\">// sprintf</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span> <span class=\"comment\">// printf</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;esp8266.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;timer.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;Systick.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> USART2_MAX_SEND_LEN 600</span></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> USART2_TX_BUF[USART2_MAX_SEND_LEN]; \t\t\t<span class=\"comment\">//发送缓冲,最大USART2_MAX_SEND_LEN字节</span></span><br><span class=\"line\"></span><br><span class=\"line\">USART_Buffer ESP8266_Buffer;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">USART2_IRQHandler</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ESP8266_Buffer.Length &lt; (USART_RX_BUF_SIZE - <span class=\"number\">1</span>))</span><br><span class=\"line\">            ESP8266_Buffer.Body[ESP8266_Buffer.Length++] = (<span class=\"type\">char</span>)USART_ReceiveData(USART2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (USART_GetITStatus(USART2, USART_IT_IDLE) != RESET) &#123;</span><br><span class=\"line\"><span class=\"comment\">//        ESP8266_Buffer.FinishFlag = 1;</span></span><br><span class=\"line\">        ESP8266_Buffer.Body[ESP8266_Buffer.Length] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">volatile</span> <span class=\"type\">uint16_t</span> temp; <span class=\"comment\">//编译器在优化代码时可能会移除那些看似不必要的重复读取或写入操作</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 清除串口空闲中断标志位</span></span><br><span class=\"line\">        temp = USART2-&gt;SR;</span><br><span class=\"line\">        temp = USART2-&gt;DR;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTIM_SetCounter(TIM2,<span class=\"number\">0</span>);<span class=\"comment\">//计数器清空 </span></span><br><span class=\"line\">\t\tTIM_Cmd(TIM2,ENABLE);<span class=\"comment\">//使能定时器2</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 处理包的回调函数</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tprintf(&quot;USART_Buffer:\\r\\n%s&quot;,(const char*)ESP8266_Buffer.Body);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定时器2中断服务程序\t\t    </span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">TIM2_IRQHandler</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123; \t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)<span class=\"comment\">//是更新中断</span></span><br><span class=\"line\">\t&#123;\t \t\t\t   </span><br><span class=\"line\">\t\tESP8266_Buffer.FinishFlag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tTIM_ClearITPendingBit(TIM2, TIM_IT_Update  );  <span class=\"comment\">//清除TIM2更新中断标志    </span></span><br><span class=\"line\">\t\tTIM_Cmd(TIM2, DISABLE);  <span class=\"comment\">//关闭TIM2 </span></span><br><span class=\"line\">\t&#125;\t    </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Now Buffer:\\r\\n%s&quot;</span>,(<span class=\"type\">uint8_t</span>*)ESP8266_Buffer.Body);</span><br><span class=\"line\"><span class=\"comment\">//\tprintf(&quot;time2 yes\\r\\n&quot;);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认115200</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ESP8266_Init</span><span class=\"params\">(<span class=\"type\">uint32_t</span> baud)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tRCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);</span><br><span class=\"line\">\tRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 发送</span></span><br><span class=\"line\">\tGPIO_InitTypeDef GPIO_InitStructure;</span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP; <span class=\"comment\">// 复用推挽</span></span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Pin=GPIO_Pin_2;\t\t<span class=\"comment\">// 发送</span></span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class=\"line\">\tGPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class=\"line\">\t<span class=\"comment\">// 接收</span></span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Mode=GPIO_Mode_IPU; <span class=\"comment\">// 上拉输入</span></span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Pin=GPIO_Pin_3;\t\t<span class=\"comment\">// 接收</span></span><br><span class=\"line\">\tGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;</span><br><span class=\"line\">\tGPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tUSART_DeInit(USART2);  <span class=\"comment\">//复位串口2</span></span><br><span class=\"line\">\tUSART_InitTypeDef USART_InitStruture;</span><br><span class=\"line\">\tUSART_InitStruture.USART_BaudRate=baud; <span class=\"comment\">// 波特率</span></span><br><span class=\"line\">\tUSART_InitStruture.USART_HardwareFlowControl=USART_HardwareFlowControl_None;<span class=\"comment\">// 不使用流控制</span></span><br><span class=\"line\">\tUSART_InitStruture.USART_Mode=USART_Mode_Tx | USART_Mode_Rx; <span class=\"comment\">// 同时开启发送和接收</span></span><br><span class=\"line\">\tUSART_InitStruture.USART_Parity=USART_Parity_No; <span class=\"comment\">// 不需要校验位</span></span><br><span class=\"line\">\tUSART_InitStruture.USART_StopBits=USART_StopBits_1;<span class=\"comment\">// 1 位停止位</span></span><br><span class=\"line\">\tUSART_InitStruture.USART_WordLength=USART_WordLength_8b; <span class=\"comment\">// 字长</span></span><br><span class=\"line\">\tUSART_Init(USART2,&amp;USART_InitStruture);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 接收-中断方式</span></span><br><span class=\"line\">\tUSART_ITConfig(USART2,USART_IT_RXNE,ENABLE);<span class=\"comment\">//USART_IT_RXNE一旦置1，将会向NVIC申请中断</span></span><br><span class=\"line\">\tUSART_ITConfig(USART2, USART_IT_IDLE, ENABLE);</span><br><span class=\"line\">\tNVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class=\"line\">\tNVIC_InitTypeDef NVIC_InitStructure;</span><br><span class=\"line\">\tNVIC_InitStructure.NVIC_IRQChannel=USART2_IRQn;</span><br><span class=\"line\">\tNVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;</span><br><span class=\"line\">\tNVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class=\"number\">2</span>;</span><br><span class=\"line\">\tNVIC_InitStructure.NVIC_IRQChannelSubPriority=<span class=\"number\">3</span>;</span><br><span class=\"line\">\tNVIC_Init(&amp;NVIC_InitStructure);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tUSART_Cmd(USART2,ENABLE);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTimer_Init(<span class=\"number\">0</span>,<span class=\"number\">20000</span><span class=\"number\">-1</span>,<span class=\"number\">7200</span><span class=\"number\">-1</span>);\t\t<span class=\"comment\">//10ms中断</span></span><br><span class=\"line\">\tTIM_Cmd(TIM2,DISABLE);\t\t\t<span class=\"comment\">//关闭定时器2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ESP8266_SendByte</span><span class=\"params\">(<span class=\"type\">uint8_t</span> byte)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tUSART_SendData(USART2,byte); <span class=\"comment\">// 标志位自动清零</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(USART_GetFlagStatus(USART2,USART_FLAG_TXE)==RESET);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 不需要手动清零</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t可以在main函数中使用printf，这将输出到指定串口中。</span></span><br><span class=\"line\"><span class=\"comment\">\t如果有多个串口需要输出。建议使用sprintf。再使用对应串口的ESP8266_SendString。</span></span><br><span class=\"line\"><span class=\"comment\">\t或者直接使用以下的封装函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ESP8266_Printf</span><span class=\"params\">(<span class=\"type\">char</span> *format,...)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">//\tchar String[100];</span></span><br><span class=\"line\">\tva_list arg;</span><br><span class=\"line\">\tva_start(arg,format);</span><br><span class=\"line\">\t<span class=\"built_in\">vsprintf</span>((<span class=\"type\">char</span>*)USART2_TX_BUF,format,arg);</span><br><span class=\"line\">\tva_end(arg);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tu16 i,j; </span><br><span class=\"line\">\ti=<span class=\"built_in\">strlen</span>((<span class=\"type\">const</span> <span class=\"type\">char</span>*)USART2_TX_BUF);\t\t<span class=\"comment\">//此次发送数据的长度</span></span><br><span class=\"line\"><span class=\"comment\">//\tprintf(&quot;length:%d,%s&quot;,i,(const char*)USART2_TX_BUF);</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">\t\tESP8266_SendByte(USART2_TX_BUF[j]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> <span class=\"title function_\">ESP8266_Cmd</span><span class=\"params\">(<span class=\"type\">char</span> *cmd,<span class=\"type\">char</span> *expect_ack,u16 waittime)</span>&#123;</span><br><span class=\"line\">\tESP8266_Printf(<span class=\"string\">&quot;%s\\r\\n&quot;</span>,cmd);</span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span> chk=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(waittime--)\t<span class=\"comment\">//等待倒计时</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tDelay_ms(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ESP8266_Buffer.FinishFlag)<span class=\"comment\">//接收到期待的应答结果</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tchk=ESP8266_Check_Str(ESP8266_Buffer.Body,expect_ack);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(chk)&#123;</span><br><span class=\"line\">\t\t\t\tDelay_xms(<span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t\t\tESP8266_Buffer.Length =<span class=\"number\">0</span> ;</span><br><span class=\"line\">\t\t\t\tESP8266_Buffer.Body[ESP8266_Buffer.Length] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;<span class=\"comment\">//得到有效数据 </span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tESP8266_Buffer.FinishFlag = <span class=\"number\">0</span>; <span class=\"comment\">// 清除标志位</span></span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!waittime)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Time Out!\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// Err</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// OK</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> <span class=\"title function_\">ESP8266_Check_Str</span><span class=\"params\">(<span class=\"type\">char</span>* check,<span class=\"type\">char</span>* espect)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *strx=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tstrx=<span class=\"built_in\">strstr</span>((<span class=\"type\">const</span> <span class=\"type\">char</span>*)check,(<span class=\"type\">const</span> <span class=\"type\">char</span>*)espect);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(strx)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"hal\"><a class=\"markdownIt-Anchor\" href=\"#hal\"></a> HAL</h1>\n<p>ESP8266 驱动：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;esp8266.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdarg.h&gt;</span> <span class=\"comment\">// sprintf</span></span></span><br><span class=\"line\"><span class=\"comment\">//#include &quot;usart.h&quot;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;cmsis_os.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> TxBuf[DATA_MAX];</span><br><span class=\"line\"><span class=\"type\">uint8_t</span> RxBuf[DATA_MAX];</span><br><span class=\"line\"><span class=\"type\">uint8_t</span> RxPoint = <span class=\"number\">0</span>, RxData;</span><br><span class=\"line\"><span class=\"type\">uint8_t</span> UART2_Rx_flg=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">HAL_UART_RxCpltCallback</span><span class=\"params\">(UART_HandleTypeDef *huart)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (huart == &amp;huart2)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  __HAL_TIM_SET_COUNTER(&amp;htim2,<span class=\"number\">0</span>);</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (RxPoint &gt; DATA_MAX<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">\t\tRxPoint = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tRxBuf[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tUART2_Rx_flg = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Received too much data!\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t  <span class=\"keyword\">if</span>(RxPoint == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t  __HAL_TIM_CLEAR_FLAG(&amp;htim2,TIM_FLAG_UPDATE);</span><br><span class=\"line\">\t\t\tHAL_TIM_Base_Start_IT(&amp;htim2);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">\t\tRxBuf[RxPoint++] = RxData;</span><br><span class=\"line\">\t\tHAL_UART_Receive_IT(&amp;huart2, &amp;RxData, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ESP8266_Printf</span><span class=\"params\">(<span class=\"type\">char</span> *format,...)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tva_list arg;</span><br><span class=\"line\">\tva_start(arg,format);</span><br><span class=\"line\">\t<span class=\"built_in\">vsprintf</span>((<span class=\"type\">char</span>*)TxBuf,format,arg);</span><br><span class=\"line\">\tva_end(arg);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tHAL_UART_Transmit(&amp;huart2,TxBuf,<span class=\"built_in\">strlen</span>((<span class=\"type\">const</span> <span class=\"type\">char</span>*)TxBuf),<span class=\"number\">0xffff</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> <span class=\"title function_\">ESP8266_Cmd</span><span class=\"params\">(<span class=\"type\">uint8_t</span> *cmd,<span class=\"type\">uint8_t</span> *expect_ack,<span class=\"type\">uint16_t</span> waittime)</span>&#123;</span><br><span class=\"line\">\tESP8266_Printf(<span class=\"string\">&quot;%s\\r\\n&quot;</span>,cmd);</span><br><span class=\"line\">\t<span class=\"type\">uint8_t</span> chk=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(waittime--)\t<span class=\"comment\">//等待倒计时</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tosDelay(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(UART2_Rx_flg)<span class=\"comment\">//接收到期待的应答结果</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tchk=ESP8266_Check_Str(RxBuf,expect_ack);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(chk)&#123;</span><br><span class=\"line\">\t\t\t\tosDelay(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"comment\">//\t\t\t\tprintf(&quot;Receive: %s\\r\\n&quot;,RxBuf);</span></span><br><span class=\"line\">\t\t\t\tRxBuf[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tRxPoint = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\tUART2_Rx_flg = <span class=\"number\">0</span>; <span class=\"comment\">// 清除标志位</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;<span class=\"comment\">//得到有效数据 </span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tUART2_Rx_flg = <span class=\"number\">0</span>; <span class=\"comment\">// 清除标志位</span></span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!waittime)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Time Out!\\r\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// Err</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// OK</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">uint8_t</span> <span class=\"title function_\">ESP8266_Check_Str</span><span class=\"params\">(<span class=\"type\">uint8_t</span>* check,<span class=\"type\">uint8_t</span>* espect)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *strx=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tstrx=<span class=\"built_in\">strstr</span>((<span class=\"type\">const</span> <span class=\"type\">char</span>*)check,(<span class=\"type\">const</span> <span class=\"type\">char</span>*)espect);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(strx)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>main.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHAL_UART_Receive_IT(&amp;huart2, (<span class=\"type\">uint8_t</span> *)&amp;RxData, <span class=\"number\">1</span>); <span class=\"comment\">// 记得使能</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FreeRTOS.c：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定时器中断</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">HAL_TIM_PeriodElapsedCallback</span><span class=\"params\">(TIM_HandleTypeDef *htim)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* USER CODE BEGIN Callback 1 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(htim-&gt;Instance == TIM2)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    UART2_Rx_flg = <span class=\"number\">1</span>;</span><br><span class=\"line\">    HAL_TIM_Base_Stop_IT(&amp;htim2);<span class=\"comment\">//关闭定时器</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* USER CODE END Callback 1 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://blog.csdn.net/geek_monkey/article/details/89326199\">HAL库教程9：串口接收不定长数据_hal库接收串口不定长数据-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/u010031883/article/details/79078930\">STM32 USART 接收任意长度字符_stm32f4 读取字符串长度-CSDN博客</a></li>\n</ul>\n","raw":"---\ntitle: 串口驱动程序之「不定长字符串的接收」\ntags:\n  - 串口\n  - C\n  - ESP8266\n  - 驱动\ncover: 'https://cdn.gallery.uuanqin.top/img/20240412000200.webp'\ndescription: 以 ESP8266 为例。\ncategories:\n  - 嵌入式\nabbrlink: aae69ac0\ndate: 2024-04-04 22:48:51\ntop_img:\n---\n\n主要思路：\n\n1. 在标准库例子中的思路是，若收到串口空闲中断，则设置定时器。定时器时间到则认为串口接收完毕，置标志位。\n2. 在 HAL 库例子中的思路是，收到每一个字符都设置定时器，定时器时间到则认为串口接收完毕，置标志位。\n\n本文假设的场景：\n\n1. 串口 1 连接电脑。`printf` 重写，输出至串口 1。详看：[[串口驱动程序之「发送数据」]]\n2. 串口 2 连接 ESP8266。`ESP8266_Printf` 函数重写 `sprintf`，输出到串口 2。\n3. 函数 `uint8_t ESP8266_Cmd(uint8_t *cmd,uint8_t *expect_ack,uint16_t waittime)` 用于发送 AT 命令，并将收到结果回显至电脑（解注释 printf）。\n\n# 标准库\n\nESP8266 驱动：\n\n```c\n#include \"stm32f10x.h\"                  // Device header\n#include <stdarg.h> // sprintf\n#include <stdio.h> // printf\n#include <string.h>\n#include \"esp8266.h\"\n#include \"timer.h\"\n#include \"Systick.h\"\n\n#define USART2_MAX_SEND_LEN 600\nuint8_t USART2_TX_BUF[USART2_MAX_SEND_LEN]; \t\t\t//发送缓冲,最大USART2_MAX_SEND_LEN字节\n\nUSART_Buffer ESP8266_Buffer;\nvoid USART2_IRQHandler(void) {\n    if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {\n        if (ESP8266_Buffer.Length < (USART_RX_BUF_SIZE - 1))\n            ESP8266_Buffer.Body[ESP8266_Buffer.Length++] = (char)USART_ReceiveData(USART2);\n    }\n    if (USART_GetITStatus(USART2, USART_IT_IDLE) != RESET) {\n//        ESP8266_Buffer.FinishFlag = 1;\n        ESP8266_Buffer.Body[ESP8266_Buffer.Length] = '\\0';\n        volatile uint16_t temp; //编译器在优化代码时可能会移除那些看似不必要的重复读取或写入操作\n\t\t// 清除串口空闲中断标志位\n        temp = USART2->SR;\n        temp = USART2->DR;\n\t\t\n\t\tTIM_SetCounter(TIM2,0);//计数器清空 \n\t\tTIM_Cmd(TIM2,ENABLE);//使能定时器2\n\t\t// 处理包的回调函数\n//\t\tprintf(\"USART_Buffer:\\r\\n%s\",(const char*)ESP8266_Buffer.Body);\n    }\n}\n\n\n//定时器2中断服务程序\t\t    \nvoid TIM2_IRQHandler(void)\n{ \t\n\tif (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)//是更新中断\n\t{\t \t\t\t   \n\t\tESP8266_Buffer.FinishFlag = 1;\n\t\tTIM_ClearITPendingBit(TIM2, TIM_IT_Update  );  //清除TIM2更新中断标志    \n\t\tTIM_Cmd(TIM2, DISABLE);  //关闭TIM2 \n\t}\t    \n\t\n\tprintf(\"Now Buffer:\\r\\n%s\",(uint8_t*)ESP8266_Buffer.Body);\n//\tprintf(\"time2 yes\\r\\n\");\n}\n\n\n\n// 默认115200\nvoid ESP8266_Init(uint32_t baud)\n{\n\tRCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);\n\tRCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);\n\t\n\t// 发送\n\tGPIO_InitTypeDef GPIO_InitStructure;\n\tGPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP; // 复用推挽\n\tGPIO_InitStructure.GPIO_Pin=GPIO_Pin_2;\t\t// 发送\n\tGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;\n\tGPIO_Init(GPIOA,&GPIO_InitStructure);\n\t// 接收\n\tGPIO_InitStructure.GPIO_Mode=GPIO_Mode_IPU; // 上拉输入\n\tGPIO_InitStructure.GPIO_Pin=GPIO_Pin_3;\t\t// 接收\n\tGPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;\n\tGPIO_Init(GPIOA,&GPIO_InitStructure);\n\t\n\tUSART_DeInit(USART2);  //复位串口2\n\tUSART_InitTypeDef USART_InitStruture;\n\tUSART_InitStruture.USART_BaudRate=baud; // 波特率\n\tUSART_InitStruture.USART_HardwareFlowControl=USART_HardwareFlowControl_None;// 不使用流控制\n\tUSART_InitStruture.USART_Mode=USART_Mode_Tx | USART_Mode_Rx; // 同时开启发送和接收\n\tUSART_InitStruture.USART_Parity=USART_Parity_No; // 不需要校验位\n\tUSART_InitStruture.USART_StopBits=USART_StopBits_1;// 1 位停止位\n\tUSART_InitStruture.USART_WordLength=USART_WordLength_8b; // 字长\n\tUSART_Init(USART2,&USART_InitStruture);\n\t\n\t// 接收-中断方式\n\tUSART_ITConfig(USART2,USART_IT_RXNE,ENABLE);//USART_IT_RXNE一旦置1，将会向NVIC申请中断\n\tUSART_ITConfig(USART2, USART_IT_IDLE, ENABLE);\n\tNVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);\n\tNVIC_InitTypeDef NVIC_InitStructure;\n\tNVIC_InitStructure.NVIC_IRQChannel=USART2_IRQn;\n\tNVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;\n\tNVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=2;\n\tNVIC_InitStructure.NVIC_IRQChannelSubPriority=3;\n\tNVIC_Init(&NVIC_InitStructure);\n\t\n\tUSART_Cmd(USART2,ENABLE);\n\t\n\tTimer_Init(0,20000-1,7200-1);\t\t//10ms中断\n\tTIM_Cmd(TIM2,DISABLE);\t\t\t//关闭定时器2\n}\n\nvoid ESP8266_SendByte(uint8_t byte)\n{\n\tUSART_SendData(USART2,byte); // 标志位自动清零\n\twhile(USART_GetFlagStatus(USART2,USART_FLAG_TXE)==RESET);\n\t\n\t// 不需要手动清零\n}\n\n\n/*\n\t可以在main函数中使用printf，这将输出到指定串口中。\n\t如果有多个串口需要输出。建议使用sprintf。再使用对应串口的ESP8266_SendString。\n\t或者直接使用以下的封装函数\n*/\nvoid ESP8266_Printf(char *format,...)\n{\n//\tchar String[100];\n\tva_list arg;\n\tva_start(arg,format);\n\tvsprintf((char*)USART2_TX_BUF,format,arg);\n\tva_end(arg);\n\t\n\tu16 i,j; \n\ti=strlen((const char*)USART2_TX_BUF);\t\t//此次发送数据的长度\n//\tprintf(\"length:%d,%s\",i,(const char*)USART2_TX_BUF);\n\tfor(j=0;j<i;j++){\n\t\tESP8266_SendByte(USART2_TX_BUF[j]);\n\t}\n}\n\n\n\nuint8_t ESP8266_Cmd(char *cmd,char *expect_ack,u16 waittime){\n\tESP8266_Printf(\"%s\\r\\n\",cmd);\n\tuint8_t chk=0;\n\twhile(waittime--)\t//等待倒计时\n\t{\n\t\tDelay_ms(10);\n\t\tif(ESP8266_Buffer.FinishFlag)//接收到期待的应答结果\n\t\t{\n\t\t\t\n\t\t\tchk=ESP8266_Check_Str(ESP8266_Buffer.Body,expect_ack);\n\t\t\tif(chk){\n\t\t\t\tDelay_xms(20);\n\t\t\t\tESP8266_Buffer.Length =0 ;\n\t\t\t\tESP8266_Buffer.Body[ESP8266_Buffer.Length] = '\\0';\n\t\t\t\tbreak;//得到有效数据 \n\t\t\t}\n\t\t\t\n\t\t\tESP8266_Buffer.FinishFlag = 0; // 清除标志位\n\t\t} \n\t\tif(!waittime){\n\t\t\tprintf(\"Time Out!\\r\\n\");\n\t\t\treturn 1; // Err\n\t\t}\n\t}\n\treturn 0; // OK\n}\n\nuint8_t ESP8266_Check_Str(char* check,char* espect){\n\tchar *strx=0;\n\tstrx=strstr((const char*)check,(const char*)espect);\n\tif(strx)\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n```\n# HAL\n\nESP8266 驱动：\n\n```c\n#include \"esp8266.h\"\n\n#include <string.h>\n#include <stdarg.h> // sprintf\n//#include \"usart.h\"\n#include \"cmsis_os.h\"\n\nuint8_t TxBuf[DATA_MAX];\nuint8_t RxBuf[DATA_MAX];\nuint8_t RxPoint = 0, RxData;\nuint8_t UART2_Rx_flg=0;\n\nvoid HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)\n{\n\tif (huart == &huart2)\n\t{\n\t  __HAL_TIM_SET_COUNTER(&htim2,0);\n\t  if (RxPoint > DATA_MAX-1)\n\t  {\n\t\tRxPoint = 0;\n\t\tRxBuf[0] = 0;\n\t\tUART2_Rx_flg = 0;\n\t\tprintf(\"Received too much data!\\r\\n\");\n\t\treturn;\n\t  }\n\t  \n\t  if(RxPoint == 0){\n\t\t  __HAL_TIM_CLEAR_FLAG(&htim2,TIM_FLAG_UPDATE);\n\t\t\tHAL_TIM_Base_Start_IT(&htim2);\n\t  }\n\t  \n\t\tRxBuf[RxPoint++] = RxData;\n\t\tHAL_UART_Receive_IT(&huart2, &RxData, 1);\n\n\t}\n}\n\nvoid ESP8266_Printf(char *format,...)\n{\n\tva_list arg;\n\tva_start(arg,format);\n\tvsprintf((char*)TxBuf,format,arg);\n\tva_end(arg);\n\t\n\tHAL_UART_Transmit(&huart2,TxBuf,strlen((const char*)TxBuf),0xffff);\n}\n\nuint8_t ESP8266_Cmd(uint8_t *cmd,uint8_t *expect_ack,uint16_t waittime){\n\tESP8266_Printf(\"%s\\r\\n\",cmd);\n\tuint8_t chk=0;\n\twhile(waittime--)\t//等待倒计时\n\t{\n\t\tosDelay(10);\n\t\tif(UART2_Rx_flg)//接收到期待的应答结果\n\t\t{\n\t\t\t\n\t\t\tchk=ESP8266_Check_Str(RxBuf,expect_ack);\n\t\t\tif(chk){\n\t\t\t\tosDelay(20);\n//\t\t\t\tprintf(\"Receive: %s\\r\\n\",RxBuf);\n\t\t\t\tRxBuf[0] = 0;\n\t\t\t\tRxPoint = 0;\n\t\t\t\tUART2_Rx_flg = 0; // 清除标志位\n\t\t\t\tbreak;//得到有效数据 \n\t\t\t}\n\t\t\tUART2_Rx_flg = 0; // 清除标志位\n\t\t} \n\t\t\n\t\tif(!waittime){\n\t\t\tprintf(\"Time Out!\\r\\n\");\n\t\t\treturn 1; // Err\n\t\t}\n\t}\n\treturn 0; // OK\n}\n\n\n\nuint8_t ESP8266_Check_Str(uint8_t* check,uint8_t* espect){\n\tchar *strx=0;\n\tstrx=strstr((const char*)check,(const char*)espect);\n\tif(strx)\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n\n```\n\nmain.c\n\n```c\nint main(void)\n{\n\tHAL_UART_Receive_IT(&huart2, (uint8_t *)&RxData, 1); // 记得使能\n  while (1)\n  {\n  }\n\n}\n```\n\nFreeRTOS.c：\n\n```c\n// 定时器中断\nvoid HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)\n{\n  /* USER CODE BEGIN Callback 1 */\n\tif(htim->Instance == TIM2)\n  {\n    UART2_Rx_flg = 1;\n    HAL_TIM_Base_Stop_IT(&htim2);//关闭定时器\n  }\n  /* USER CODE END Callback 1 */\n}\n```\n\n# 本文参考\n- [HAL库教程9：串口接收不定长数据_hal库接收串口不定长数据-CSDN博客](https://blog.csdn.net/geek_monkey/article/details/89326199)\n- [STM32 USART 接收任意长度字符_stm32f4 读取字符串长度-CSDN博客](https://blog.csdn.net/u010031883/article/details/79078930)\n","categories":[{"name":"嵌入式","api":"api/categories/嵌入式.json"}],"tags":[{"name":"C","api":"api/tags/C.json"},{"name":"驱动","api":"api/tags/驱动.json"},{"name":"ESP8266","api":"api/tags/ESP8266.json"},{"name":"串口","api":"api/tags/串口.json"}]},"api":"api/posts/p/aae69ac0.json"}