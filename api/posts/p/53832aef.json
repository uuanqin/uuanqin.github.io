{"data":{"title":"STM32 工程的创建 - 基于 HAL 库","slug":"嵌入式/STM32 工程的创建 - 基于 HAL 库","description":"介绍STM32CubeMX的使用。","date":"2024-04-02T11:53:06.000Z","updated":"2024-04-05T07:46:28.785Z","language":"zh-CN","comments":true,"url":"p/53832aef/","cover":"https://cdn.gallery.uuanqin.top/img/20240404230833.webp","images":[],"content":"<p>目前 STM32 的开发方式有 3 个层次：</p>\n<ol>\n<li>基于寄存器方式。极少的人使用这种形式。这种方式最底层、最直接、效率更高，但 STM32 寄存器十分复杂，一般不建议采取这种方式。</li>\n<li>基于标准库（库函数）方式。使用 ST 官方提供封装好的函数，通过调用函数间接配置寄存器。这种方式对开发人员比较友好，有利于提高开发效率。</li>\n<li>基于 HAL 库方式。HAL 库是 ST 公司目前主力推的开发方式，全称就是 Hardware Abstraction Layer（抽象印象层）。可以使用图形化界面快速配置 STM32，隐藏底层的逻辑。</li>\n</ol>\n<p>HAL 库的出现比标准库要晚，但其实和标准库一样，都是为了节省程序开发的时期。如果说标准库把实现功能需要配置的寄存器集成了，那么 HAL 库的一些函数甚至可以做到某些特定功能的集成。</p>\n<p>HAL 库很好的解决了程序移植的问题，不同型号的 stm32 芯片它的标准库是不一样的，例如在 F4 上开发的程序移植到 F3 上是不能通用的，而使用 HAL 库，只要使用的是相通的外设，程序基本可以完全复制粘贴。</p>\n<p>ST 公司研发的 STMcube 软件可以通过图形化的配置功能，直接生成整个使用 HAL 库的工程文件。但它同时也存在执行效率的低下的问题。</p>\n<blockquote>\n<p>更多区别可参阅：<a href=\"https://blog.csdn.net/qq_44403143/article/details/117650293\">STM32中HAL库与标准库的区别_stm32标准库和hal库有什么区别-CSDN博客</a></p>\n</blockquote>\n<p>本篇文章介绍使用 STM32CubeMX 创建 STM32 工程的文章，并实现一个 LED 点灯的案例。如果打算使用寄存器或标准库方式创建项目，可移步这篇文章：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/6c1cd7d0/\"><span class=\"yukari\">站内文章</span>STM32 工程的创建 - 基于寄存器或标准库</a>。关于 Keil 的更多使用技巧可详看这篇文章：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/9c0a1431/\"><span class=\"yukari\">站内文章</span>Keil 的使用技巧与问题解决</a>。</p>\n<p>本文使用的工具材料有：</p>\n<ul>\n<li>ST-Link</li>\n<li>STM32（这里以 STM32F103C8T6 最小核心板为例）</li>\n<li>杜邦线若干</li>\n</ul>\n<h1 id=\"软件安装\"><a class=\"markdownIt-Anchor\" href=\"#软件安装\"></a> 软件安装</h1>\n<ol>\n<li>安装 JRE（Java 运行环境）。选择 64 位的安装。官网：<a href=\"https://www.java.com/en/download/\">Download Java for Windows</a>。以前装过就不用装。</li>\n<li>安装 STM32CubeMX。官网安装：<a href=\"https://www.st.com/content/st_com/en/stm32cubemx.html#st-get-software\">STM32CubeMX: Graphical tool - STMicroelectronics - STMicroelectronics</a>。如果没有账号请提前注册 ST 公司的账号。</li>\n<li>安装 Keil5 MDK。Keil5 是收费软件，使用需破解。安装和破解方法请自行搜索。</li>\n</ol>\n<h1 id=\"hal-库安装\"><a class=\"markdownIt-Anchor\" href=\"#hal-库安装\"></a> HAL 库安装</h1>\n<p>打开 STM32CubeMX。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402204523.webp\" alt=\"image.png\" /></p>\n<p>建议改一下仓库路径，改到 C 盘以外的地方：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402204606.webp\" alt=\"image.png\" width=\"475px\" /></p>\n<p>点击 OK 返回。然后继续点击 Help 下的软件包管理：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402204649.webp\" alt=\"image.png\" width=\"437px\" /></p>\n<p>选择 F1 系列进行下载：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402204817.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<h1 id=\"新建工程\"><a class=\"markdownIt-Anchor\" href=\"#新建工程\"></a> 新建工程</h1>\n<p>点击按钮新建工程：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402205411.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>选择型号：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402205649.webp\" alt=\"image.png\" /></p>\n<h1 id=\"引脚选择\"><a class=\"markdownIt-Anchor\" href=\"#引脚选择\"></a> 引脚选择</h1>\n<p>我们打算点亮最小核心板上 PC13 连接的 LED 灯。在可视化界面中点击 PC13 引脚，选择 GPIO_Output：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402205925.webp\" alt=\"image.png\" width=\"575px\" /></p>\n<p>引脚的颜色说明：</p>\n<ul>\n<li>浅黄色：不可配置引脚。比如电源引脚。</li>\n<li>橙色：配置了一个 I/O 口的功能，但没有初始化对应的外设。引脚处于 NO MODE 状态。</li>\n<li>绿色：表示配置成功。</li>\n</ul>\n<p>不要忘了设置这个：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402214800.webp\" alt=\"image.png\" /></p>\n<p>否则烧录一次后就烧不了第二次了。（详看：<a href=\"https://blog.csdn.net/lzy_m/article/details/108019545\">在keil 5下ST-LINK无法识别问题的解决_keil5检测不到stlink-CSDN博客</a>）</p>\n<h1 id=\"时钟配置\"><a class=\"markdownIt-Anchor\" href=\"#时钟配置\"></a> 时钟配置</h1>\n<p>RCC 配置：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402210822.webp\" alt=\"image.png\" /></p>\n<p>充分利用最小核心板上的时钟，把配置拉满（72MHz）。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402210932.webp\" alt=\"image.png\" /></p>\n<h1 id=\"工程创建\"><a class=\"markdownIt-Anchor\" href=\"#工程创建\"></a> 工程创建</h1>\n<p>进入工程管理界面：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402211249.webp\" alt=\"image.png\" /></p>\n<p>注意不要存在中文路径。</p>\n<p>代码生成选项：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402211540.webp\" alt=\"image.png\" /></p>\n<blockquote>\n<p>一些选项的说明：<img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402220437.webp\" alt=\"image.png\" /><br />\nCopy all uesd libraries into the project folder：将 HAL 库的所有 <code>.c</code> 和 <code>.h</code> 都复制到所建工程中：</p>\n<ul>\n<li>优点：这样如果后续需要新增其他外设又可能不再用 STM32CubeMX 的时候便会很方便</li>\n<li>缺点：体积大，编译时间长<br />\nAdd necessary library files as reference in the toolchain project configuration file：不复制文件，直接从软件包存放位置导入 <code>.c</code> 和 <code>.h</code></li>\n<li>优点：体积小，比较节约硬盘空间</li>\n<li>缺点： 复制到其他电脑上或者软件包位置改变，就需要修改相对应的路径</li>\n</ul>\n</blockquote>\n<p>点击生成按钮生成项目：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402211428.webp\" alt=\"image.png\" /></p>\n<blockquote>\n<p>一个项目可以多次生成。这意味着我们可以中途重新配置引脚后重新生成。原项目的自己写的代码部分不会消失（前提是按规范写在指定位置。后面会讲。）</p>\n</blockquote>\n<p>我们可以看到文件夹已经生成：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402212106.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<h1 id=\"代码编写\"><a class=\"markdownIt-Anchor\" href=\"#代码编写\"></a> 代码编写</h1>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402212149.webp\" alt=\"image.png\" /></p>\n<p>在魔术棒中配置烧写后自动复位，比较方便：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402212355.webp\" alt=\"image.png\" /></p>\n<p>打开 main.c 文件。大部分初始化函数已经自动生成了。我们的代码必须在注释提示的指定位置中编写，否则下次代码重新生成时，写在指定位置外的代码将被删除。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402212611.webp\" alt=\"image.png\" /></p>\n<p>在 main 函数中 while 循环编写：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Infinite loop */</span></span><br><span class=\"line\"><span class=\"comment\">/* USER CODE BEGIN WHILE */</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,(GPIO_PinState)<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"comment\">/* USER CODE END WHILE */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* USER CODE BEGIN 3 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure>\n<p>编译通过后，将 ST-Link 连接到电脑。检查一下 ST-Link 是否检测到。</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20240402215431.webp\" alt=\"image.png\" /></p>\n<blockquote>\n<p>如未连接或链接了但无法烧写，请参考 <a href=\"https://blog.csdn.net/lzy_m/article/details/108019545\">在keil 5下ST-LINK无法识别问题的解决_keil5检测不到stlink-CSDN博客</a> 进行解决。</p>\n</blockquote>\n<p>检查完成后，将代码下载烧写即可。</p>\n<h1 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h1>\n<p>如果还想接着移植 FreeRTOS，可以继续阅读这篇文章：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/7e13c80c/\"><span class=\"yukari\">站内文章</span>STM32 移植 FreeRTOS - 基于 HAL 库</a></p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1fS4y1W7Me/\">STM32HAL库纯使用向教学，STM32HAL库学习（一）32单片机讲解以及开发环境的配置。_哔哩哔哩_bilibili</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/670038501\">一文教你使用STM32CubeMX开发工具 - 知乎 (zhihu.com)</a></li>\n<li><a href=\"https://blog.csdn.net/qq_44403143/article/details/117650293\">STM32中HAL库与标准库的区别_stm32标准库和hal库有什么区别-CSDN博客</a></li>\n</ul>\n","raw":"---\ntitle: STM32 工程的创建 - 基于 HAL 库\ntags:\n  - STM32\n  - Keil\n  - C\n  - HAL\n  - STM32CubeMX\ndescription: 介绍STM32CubeMX的使用。\ncategories:\n  - 嵌入式\nabbrlink: 53832aef\ndate: 2024-04-02 19:53:06\ncover: https://cdn.gallery.uuanqin.top/img/20240404230833.webp\ntop_img:\n---\n\n目前 STM32 的开发方式有 3 个层次：\n\n1. 基于寄存器方式。极少的人使用这种形式。这种方式最底层、最直接、效率更高，但 STM32 寄存器十分复杂，一般不建议采取这种方式。\n2. 基于标准库（库函数）方式。使用 ST 官方提供封装好的函数，通过调用函数间接配置寄存器。这种方式对开发人员比较友好，有利于提高开发效率。\n3. 基于 HAL 库方式。HAL 库是 ST 公司目前主力推的开发方式，全称就是 Hardware Abstraction Layer（抽象印象层）。可以使用图形化界面快速配置 STM32，隐藏底层的逻辑。\n\nHAL 库的出现比标准库要晚，但其实和标准库一样，都是为了节省程序开发的时期。如果说标准库把实现功能需要配置的寄存器集成了，那么 HAL 库的一些函数甚至可以做到某些特定功能的集成。\n\nHAL 库很好的解决了程序移植的问题，不同型号的 stm32 芯片它的标准库是不一样的，例如在 F4 上开发的程序移植到 F3 上是不能通用的，而使用 HAL 库，只要使用的是相通的外设，程序基本可以完全复制粘贴。\n\nST 公司研发的 STMcube 软件可以通过图形化的配置功能，直接生成整个使用 HAL 库的工程文件。但它同时也存在执行效率的低下的问题。\n\n> 更多区别可参阅：[STM32中HAL库与标准库的区别_stm32标准库和hal库有什么区别-CSDN博客](https://blog.csdn.net/qq_44403143/article/details/117650293)\n\n本篇文章介绍使用 STM32CubeMX 创建 STM32 工程的文章，并实现一个 LED 点灯的案例。如果打算使用寄存器或标准库方式创建项目，可移步这篇文章：[[STM32 工程的创建 - 基于寄存器或标准库]]。关于 Keil 的更多使用技巧可详看这篇文章：[[Keil 的使用技巧与问题解决]]。\n\n本文使用的工具材料有：\n\n- ST-Link\n- STM32（这里以 STM32F103C8T6 最小核心板为例）\n- 杜邦线若干\n\n# 软件安装\n\n1. 安装 JRE（Java 运行环境）。选择 64 位的安装。官网：[Download Java for Windows](https://www.java.com/en/download/)。以前装过就不用装。\n2. 安装 STM32CubeMX。官网安装：[STM32CubeMX: Graphical tool - STMicroelectronics - STMicroelectronics](https://www.st.com/content/st_com/en/stm32cubemx.html#st-get-software)。如果没有账号请提前注册 ST 公司的账号。\n3. 安装 Keil5 MDK。Keil5 是收费软件，使用需破解。安装和破解方法请自行搜索。\n\n# HAL 库安装\n\n打开 STM32CubeMX。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402204523.webp)\n\n建议改一下仓库路径，改到 C 盘以外的地方：\n\n![image.png|475](https://cdn.gallery.uuanqin.top/img/20240402204606.webp)\n\n点击 OK 返回。然后继续点击 Help 下的软件包管理：\n\n![image.png|437](https://cdn.gallery.uuanqin.top/img/20240402204649.webp)\n\n选择 F1 系列进行下载：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240402204817.webp)\n\n# 新建工程\n\n点击按钮新建工程：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240402205411.webp)\n\n选择型号：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402205649.webp)\n\n# 引脚选择\n\n我们打算点亮最小核心板上 PC13 连接的 LED 灯。在可视化界面中点击 PC13 引脚，选择 GPIO_Output：\n\n![image.png|575](https://cdn.gallery.uuanqin.top/img/20240402205925.webp)\n\n引脚的颜色说明：\n\n- 浅黄色：不可配置引脚。比如电源引脚。\n- 橙色：配置了一个 I/O 口的功能，但没有初始化对应的外设。引脚处于 NO MODE 状态。\n- 绿色：表示配置成功。\n\n不要忘了设置这个：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402214800.webp)\n\n否则烧录一次后就烧不了第二次了。（详看：[在keil 5下ST-LINK无法识别问题的解决_keil5检测不到stlink-CSDN博客](https://blog.csdn.net/lzy_m/article/details/108019545)）\n\n# 时钟配置\n\nRCC 配置：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402210822.webp)\n\n充分利用最小核心板上的时钟，把配置拉满（72MHz）。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402210932.webp)\n\n# 工程创建\n\n进入工程管理界面：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402211249.webp)\n\n注意不要存在中文路径。\n\n代码生成选项：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402211540.webp)\n\n> 一些选项的说明：![image.png](https://cdn.gallery.uuanqin.top/img/20240402220437.webp)\n> Copy all uesd libraries into the project folder：将 HAL 库的所有 `.c` 和 `.h` 都复制到所建工程中：\n> - 优点：这样如果后续需要新增其他外设又可能不再用 STM32CubeMX 的时候便会很方便\n> - 缺点：体积大，编译时间长\n> Add necessary library files as reference in the toolchain project configuration file：不复制文件，直接从软件包存放位置导入 `.c` 和 `.h`\n> - 优点：体积小，比较节约硬盘空间\n> - 缺点： 复制到其他电脑上或者软件包位置改变，就需要修改相对应的路径\n\n点击生成按钮生成项目：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402211428.webp)\n\n> 一个项目可以多次生成。这意味着我们可以中途重新配置引脚后重新生成。原项目的自己写的代码部分不会消失（前提是按规范写在指定位置。后面会讲。）\n\n我们可以看到文件夹已经生成：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20240402212106.webp)\n\n# 代码编写\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402212149.webp)\n\n在魔术棒中配置烧写后自动复位，比较方便：\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402212355.webp)\n\n打开 main.c 文件。大部分初始化函数已经自动生成了。我们的代码必须在注释提示的指定位置中编写，否则下次代码重新生成时，写在指定位置外的代码将被删除。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402212611.webp)\n\n在 main 函数中 while 循环编写：\n\n```c\n  /* Infinite loop */\n  /* USER CODE BEGIN WHILE */\n  while (1)\n  {\n\t  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,(GPIO_PinState)0);\n    /* USER CODE END WHILE */\n\n    /* USER CODE BEGIN 3 */\n  }\n  /* USER CODE END 3 */\n```\n\n编译通过后，将 ST-Link 连接到电脑。检查一下 ST-Link 是否检测到。\n\n![image.png](https://cdn.gallery.uuanqin.top/img/20240402215431.webp)\n\n> 如未连接或链接了但无法烧写，请参考 [在keil 5下ST-LINK无法识别问题的解决_keil5检测不到stlink-CSDN博客](https://blog.csdn.net/lzy_m/article/details/108019545) 进行解决。\n\n检查完成后，将代码下载烧写即可。\n\n# 后记\n\n如果还想接着移植 FreeRTOS，可以继续阅读这篇文章：[[STM32 移植 FreeRTOS - 基于 HAL 库]]\n\n# 本文参考\n- [STM32HAL库纯使用向教学，STM32HAL库学习（一）32单片机讲解以及开发环境的配置。_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1fS4y1W7Me/)\n- [一文教你使用STM32CubeMX开发工具 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/670038501)\n- [STM32中HAL库与标准库的区别_stm32标准库和hal库有什么区别-CSDN博客](https://blog.csdn.net/qq_44403143/article/details/117650293)\n","categories":[{"name":"嵌入式","api":"api/categories/嵌入式.json"}],"tags":[{"name":"C","api":"api/tags/C.json"},{"name":"STM32","api":"api/tags/STM32.json"},{"name":"HAL","api":"api/tags/HAL.json"},{"name":"Keil","api":"api/tags/Keil.json"},{"name":"STM32CubeMX","api":"api/tags/STM32CubeMX.json"}]},"api":"api/posts/p/53832aef.json"}