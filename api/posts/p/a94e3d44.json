{"data":{"title":"在 Obsidian 和 Hexo 两端使用 PlantUML","slug":"Archive/OutOfDate/在 Obsidian 和 Hexo 两端使用 PlantUML","description":"PlantUML 的所见及所得","date":"2023-06-01T14:22:07.000Z","updated":"2025-09-26T16:04:48.814Z","language":"zh-CN","comments":true,"url":"p/a94e3d44/","cover":"https://cdn.gallery.uuanqin.top/img/new-out-of-date-cover.png","images":[],"content":"\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">这是一篇过期文章 <code>241224</code></div>\n</div>\n<div class=\"callout-content\"><p>此 PlantUML 方案已被博主弃用。原因如下：</p>\n<ul>\n<li>Hexo 端 <code>hexo-filter-plantuml</code> 插件采用服务器渲染方案时，会导致 博客生成静态文件的时间不确定且无故延长。</li>\n<li>Hexo 端 <code>hexo-filter-plantuml</code> 插件采用本地渲染方案时，部分复杂语法无法成功渲染导致出错。</li>\n</ul>\n</div></div><h1 id=\"plantuml-的安装与使用\"><a class=\"markdownIt-Anchor\" href=\"#plantuml-的安装与使用\"></a> PlantUML 的安装与使用</h1>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```plantuml</span><br><span class=\"line\">@startuml</span><br><span class=\"line\">Bob -&gt; Alice : hello</span><br><span class=\"line\">Alice -&gt; Wonderland: hello</span><br><span class=\"line\">Wonderland -&gt; next: hello</span><br><span class=\"line\">next -&gt; Last: hello</span><br><span class=\"line\">Last -&gt; next: hello</span><br><span class=\"line\">next -&gt; Wonderland : hello</span><br><span class=\"line\">Wonderland -&gt; Alice : hello</span><br><span class=\"line\">Alice -&gt; Bob: hello</span><br><span class=\"line\">@enduml</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202412240052606.webp\" alt=\"image.png\" width=\"450px\" /></p>\n<p>两端各自插件实现：</p>\n<ul>\n<li>Obsidian：在第三方插件市场搜索 PlantUML，项目地址 <a href=\"https://github.com/joethei/obsidian-plantuml\">joethei/obsidian-plantuml: Generate PlantUML Diagrams inside Obsidian.md (github.com)</a></li>\n<li>Hexo：下载第三方插件 <a href=\"https://github.com/miao1007/hexo-filter-plantuml\">miao1007/hexo-filter-plantuml: Using PlantUML to generate UML Diagram for hexo (github.com)</a></li>\n</ul>\n<p>两端插件的部分不同之处：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Obsidian 插件 <code>obsidian-plantuml</code></th>\n<th>Hexo 插件 <code>hexo-filter-plantuml</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>语法使用</td>\n<td>只支持 Markdown 的代码语法块</td>\n<td>支持 Markdown 语法块外还支持标签语法</td>\n</tr>\n<tr>\n<td>PlantUML</td>\n<td>不一定需要 <code>@startuml</code> 括住内容</td>\n<td>必须使用 <code>@startuml</code></td>\n</tr>\n</tbody>\n</table>\n<p>博主提醒：Hexo 插件 <code>hexo-filter-plantuml</code> 配置中，<code>link</code> 配置不建议为默认的 <code>inline</code> 选项，该选项会将 svg 图片硬编码到文章文本中，Hexo 不会对齐进行居中调整或夜间模式下的变灰操作。</p>\n<h1 id=\"hexo-filter-plantuml-的配置\"><a class=\"markdownIt-Anchor\" href=\"#hexo-filter-plantuml-的配置\"></a> <code>hexo-filter-plantuml</code> 的配置</h1>\n<h2 id=\"使用服务器接口出现的问题\"><a class=\"markdownIt-Anchor\" href=\"#使用服务器接口出现的问题\"></a> 使用服务器接口出现的问题</h2>\n\n<div class=\"callout\" data-callout=\"error\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-zap\"><polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"/></svg>\n</div>\n<div class=\"callout-title-inner\">使用服务器接口出现的问题</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<ul>\n<li>hexo 生成文件要求联网，否则出错</li>\n<li>hexo 生成文件时间延长或卡死</li>\n</ul>\n</div></div><p>使用 Hexo 插件 <code>miao1007/hexo-filter-plantuml</code> 需注意，当安装该插件并不做任何配置时，插件需要联网使用 PlantUML 接口，且并不是所有国内的 IP 地址都能成功访问这个接口，这就导致了平时 Hexo 本地部署调试时会出错。</p>\n<p>错误例子如：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/部署失败6546565132.webp\" alt=\"部署失败6546565132.png\" width=\"500px\" /></p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20230910155117.webp\" alt=\"image.png\" width=\"500px\" /></p>\n<p>另外，调用服务器接口即使连接不出错，在链接过程中耗费的时间不固定（普遍非常长），导致 <code>hexo g</code> 命令卡住且不返回日志。</p>\n<p>一个解决方法是将 Plantuml 部署在本地。</p>\n<h2 id=\"使用本地渲染的方式\"><a class=\"markdownIt-Anchor\" href=\"#使用本地渲染的方式\"></a> 使用本地渲染的方式</h2>\n<p>具体本地部署 Plantuml 的方法详见：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/fea772c1/\"><span class=\"bilink-pop-up\">站内文章</span>本地部署 PlantUML</a></p>\n\n<div class=\"callout\" data-callout=\"warning\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\"/><path d=\"M12 9v4\"/><path d=\"M12 17h.01\"/></svg>\n</div>\n<div class=\"callout-title-inner\">注意：本地使用 PlantUML 的效率相较于使用服务器 API 的效率低。</div>\n</div>\n<div class=\"callout-content\"><p></p>\n</div></div><p>如果选择了本地部署，记得在配置文件 <code>_config.yml</code> 中新增：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">plantuml:</span></span><br><span class=\"line\">\t<span class=\"comment\"># Local or PlantUMLServer.</span></span><br><span class=\"line\">\t<span class=\"attr\">render:</span> <span class=\"string\">&quot;Local&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># &quot;inline&quot;: &lt;svg&gt;xxx&lt;svg/&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\"># &quot;inlineUrlEncode&quot;: &lt;img src=&#x27;data:image/svg+xml;&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\"># &quot;inlineBase64&quot;: &lt;img src=&#x27;data:image/svg+xml;base64&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\"># &quot;localLink&quot;: &lt;img src=&quot;/assert/puml/xxxx.svg&quot;&gt;</span></span><br><span class=\"line\">\t<span class=\"attr\">link:</span> <span class=\"string\">&quot;inline&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># where your dot binary</span></span><br><span class=\"line\">\t<span class=\"comment\"># GraphvizDotFile: &quot;/usr/local/bin/dot&quot;  # 不需要此项配置</span></span><br><span class=\"line\">\t<span class=\"comment\"># where your jar</span></span><br><span class=\"line\">\t<span class=\"attr\">PlantJar:</span> <span class=\"string\">&quot;你的plantuml.jar&quot;</span> <span class=\"string\">路径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># common options: svg/png</span></span><br><span class=\"line\">\t<span class=\"attr\">outputFormat:</span> <span class=\"string\">&quot;svg&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># class-name for element style. The default style is center-aligned block</span></span><br><span class=\"line\">\t<span class=\"attr\">className:</span> <span class=\"string\">&quot;plantuml&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Obsidian 插件 <code>joethei/obsidian-plantuml</code> 使用本地 jar 包配置方法：</p>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/20230910153438.webp\" alt=\"image.png\" width=\"500px\" /></p>\n\n<div class=\"callout\" data-callout=\"error\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-zap\"><polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"/></svg>\n</div>\n<div class=\"callout-title-inner\">可能出现的问题：找不到 dot 执行文件</div>\n</div>\n<div class=\"callout-content\"><p></p>\n<p>如果你使用了一些特殊语法，可能会报找不到 dot 的错误。</p>\n</div></div><h1 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h1>\n<p>本地部署出现渲染错误后，我又换回服务器渲染方式，并坚持了很长一段时间。</p>\n<p>直到某一段时间发现 <code>hexo g</code> 总是卡死并找不出原因，把 <code>hexo-filter-plantuml</code> 删掉后才知原来是它搞的鬼。遂将此文从 <a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/51890a9/\"><span class=\"bilink-pop-up\">站内文章</span>原文</a> 中剥离并置为「过期」。</p>\n<blockquote>\n<p>备忘调试方法：<code>hexo g --debug</code></p>\n</blockquote>\n<p>这样一来，我的博客就不能在使用 PlantUML 了。其实细想一下，这种文本绘图画出的图挺简单的，也不会经常修改，我完全可以像以前博客画复杂图那样使用 PPT 或飞书画板。</p>\n","raw":"---\ntitle: 在 Obsidian 和 Hexo 两端使用 PlantUML\ntags:\n  - Obsidian\n  - PlantUML\ncover: 'https://cdn.gallery.uuanqin.top/img/new-out-of-date-cover.png'\ndescription: PlantUML 的所见及所得\ncategories:\n  - Archive\n  - OutOfDate\nabbrlink: a94e3d44\ndate: 2023-06-01 22:22:07\ntop_img:\n---\n\n> [!warning] 这是一篇过期文章 `241224`\n> 此 PlantUML 方案已被博主弃用。原因如下：\n> - Hexo 端 `hexo-filter-plantuml` 插件采用服务器渲染方案时，会导致 博客生成静态文件的时间不确定且无故延长。\n> - Hexo 端 `hexo-filter-plantuml` 插件采用本地渲染方案时，部分复杂语法无法成功渲染导致出错。\n\n# PlantUML 的安装与使用\n\n语法：\n\n````\n```plantuml\n@startuml\nBob -> Alice : hello\nAlice -> Wonderland: hello\nWonderland -> next: hello\nnext -> Last: hello\nLast -> next: hello\nnext -> Wonderland : hello\nWonderland -> Alice : hello\nAlice -> Bob: hello\n@enduml\n```\n````\n\n![image.png|450](https://cdn.gallery.uuanqin.top/img/202412240052606.webp)\n\n两端各自插件实现：\n\n- Obsidian：在第三方插件市场搜索 PlantUML，项目地址 [joethei/obsidian-plantuml: Generate PlantUML Diagrams inside Obsidian.md (github.com)](https://github.com/joethei/obsidian-plantuml)\n- Hexo：下载第三方插件 [miao1007/hexo-filter-plantuml: Using PlantUML to generate UML Diagram for hexo (github.com)](https://github.com/miao1007/hexo-filter-plantuml)\n\n两端插件的部分不同之处：\n\n|          | Obsidian 插件 `obsidian-plantuml` | Hexo 插件 `hexo-filter-plantuml` |\n| -------- | ------------------------------- | ------------------------------ |\n| 语法使用     | 只支持 Markdown 的代码语法块             | 支持 Markdown 语法块外还支持标签语法        |\n| PlantUML | 不一定需要 `@startuml` 括住内容          | 必须使用 `@startuml`               |\n\n博主提醒：Hexo 插件 `hexo-filter-plantuml` 配置中，`link` 配置不建议为默认的 `inline` 选项，该选项会将 svg 图片硬编码到文章文本中，Hexo 不会对齐进行居中调整或夜间模式下的变灰操作。\n\n# `hexo-filter-plantuml` 的配置\n\n## 使用服务器接口出现的问题\n\n> [!error] 使用服务器接口出现的问题\n> - hexo 生成文件要求联网，否则出错\n> - hexo 生成文件时间延长或卡死\n\n使用 Hexo 插件 `miao1007/hexo-filter-plantuml` 需注意，当安装该插件并不做任何配置时，插件需要联网使用 PlantUML 接口，且并不是所有国内的 IP 地址都能成功访问这个接口，这就导致了平时 Hexo 本地部署调试时会出错。\n\n错误例子如：\n\n![部署失败6546565132.png|500](https://cdn.gallery.uuanqin.top/img/%E9%83%A8%E7%BD%B2%E5%A4%B1%E8%B4%A56546565132.webp)\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20230910155117.webp)\n\n另外，调用服务器接口即使连接不出错，在链接过程中耗费的时间不固定（普遍非常长），导致 `hexo g` 命令卡住且不返回日志。\n\n一个解决方法是将 Plantuml 部署在本地。\n\n## 使用本地渲染的方式\n\n具体本地部署 Plantuml 的方法详见：[[本地部署 PlantUML]]\n\n> [!warning] 注意：本地使用 PlantUML 的效率相较于使用服务器 API 的效率低。\n\n如果选择了本地部署，记得在配置文件 `_config.yml` 中新增：\n\n```yaml\nplantuml:\n\t# Local or PlantUMLServer.\n\trender: \"Local\"\n\n\t# \"inline\": <svg>xxx<svg/>\n\t# \"inlineUrlEncode\": <img src='data:image/svg+xml;>\n\t# \"inlineBase64\": <img src='data:image/svg+xml;base64>\n\t# \"localLink\": <img src=\"/assert/puml/xxxx.svg\">\n\tlink: \"inline\"\n\n\t# where your dot binary\n\t# GraphvizDotFile: \"/usr/local/bin/dot\"  # 不需要此项配置\n\t# where your jar\n\tPlantJar: \"你的plantuml.jar\" 路径\n\n\t# common options: svg/png\n\toutputFormat: \"svg\"\n\n\t# class-name for element style. The default style is center-aligned block\n\tclassName: \"plantuml\"\n```\n\nObsidian 插件 `joethei/obsidian-plantuml` 使用本地 jar 包配置方法：\n\n![image.png|500](https://cdn.gallery.uuanqin.top/img/20230910153438.webp)\n\n> [!error] 可能出现的问题：找不到 dot 执行文件\n>\n> 如果你使用了一些特殊语法，可能会报找不到 dot 的错误。\n\n# 后记\n\n本地部署出现渲染错误后，我又换回服务器渲染方式，并坚持了很长一段时间。\n\n直到某一段时间发现 `hexo g` 总是卡死并找不出原因，把 `hexo-filter-plantuml` 删掉后才知原来是它搞的鬼。遂将此文从 [[构建 Obsidian 的 Hexo 写作工作流|原文]] 中剥离并置为「过期」。\n\n> 备忘调试方法：`hexo g --debug`\n\n这样一来，我的博客就不能在使用 PlantUML 了。其实细想一下，这种文本绘图画出的图挺简单的，也不会经常修改，我完全可以像以前博客画复杂图那样使用 PPT 或飞书画板。\n","categories":[{"name":"Archive","api":"api/categories/Archive.json"},{"name":"OutOfDate","api":"api/categories/Archive/OutOfDate.json"}],"tags":[{"name":"Obsidian","api":"api/tags/Obsidian.json"},{"name":"PlantUML","api":"api/tags/PlantUML.json"}]},"api":"api/posts/p/a94e3d44.json"}