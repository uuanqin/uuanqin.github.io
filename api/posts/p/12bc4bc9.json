{"data":{"title":"SQL 写题技巧积累","slug":"计算机语言/SQL 写题技巧积累","description":"SQL 刷题热身练习","date":"2024-08-28T08:37:41.000Z","updated":"2025-06-18T03:34:31.261Z","language":"zh-CN","comments":true,"url":"p/12bc4bc9/","cover":"https://cdn.gallery.uuanqin.top/img/202409050037631.webp","images":[],"content":"<p>最近狂刷 SQL 题单，小小总结了一些题目的思路和技巧。</p>\n<p>本文题目难度标识：🟩简单，🟨中等，🟥困难。</p>\n<h1 id=\"单纯的-select-语句使用\"><a class=\"markdownIt-Anchor\" href=\"#单纯的-select-语句使用\"></a> 单纯的 <code>SELECT</code> 语句使用</h1>\n<p>SQL 中单纯使用 <code>SELECT</code> 语句（不使用 <code>FROM</code>）语句可以完成一些函数测试，或构建简单表。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- *************** 函数测试</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> NOW()</span><br><span class=\"line\"><span class=\"comment\">-- | NOW()               |</span></span><br><span class=\"line\"><span class=\"comment\">-- | ------------------- |</span></span><br><span class=\"line\"><span class=\"comment\">-- | 2024-08-26 14:47:13 |</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- *************** 创建一个简单的行</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> &quot;Average Salary&quot;,<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">-- | Average Salary | 0 |</span></span><br><span class=\"line\"><span class=\"comment\">-- | -------------- | - |</span></span><br><span class=\"line\"><span class=\"comment\">-- | Average Salary | 0 |</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- *************** 表的合并结果</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> &quot;High Salary&quot;,<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">union</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> &quot;Low Salary&quot;,<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">-- | High Salary | 0 |  </span></span><br><span class=\"line\"><span class=\"comment\">-- | ----------- | - |  </span></span><br><span class=\"line\"><span class=\"comment\">-- | High Salary | 0 |  </span></span><br><span class=\"line\"><span class=\"comment\">-- | Low Salary  | 0 |</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"标量子查询将空表处理为-null\"><a class=\"markdownIt-Anchor\" href=\"#标量子查询将空表处理为-null\"></a> 标量子查询将空表处理为 <code>NULL</code></h2>\n<blockquote>\n<p>相关题目：🟨 <a href=\"https://leetcode.cn/problems/second-highest-salary/\">176. 第二高的薪水 - 力扣（LeetCode）</a></p>\n</blockquote>\n<p><code>select</code> 加上标量子查询的技巧：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &quot;some result&quot; <span class=\"keyword\">as</span> col_name;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 输出：</span></span><br><span class=\"line\"><span class=\"comment\">-- | col_name    |</span></span><br><span class=\"line\"><span class=\"comment\">-- | ----------- |</span></span><br><span class=\"line\"><span class=\"comment\">-- | some result |</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">as</span> col_name; <span class=\"comment\">-- 其中NULL中可以替代为一个空的子查询</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 输出：</span></span><br><span class=\"line\"><span class=\"comment\">-- | col_name    |</span></span><br><span class=\"line\"><span class=\"comment\">-- | ----------- |</span></span><br><span class=\"line\"><span class=\"comment\">-- | null        |</span></span><br></pre></td></tr></table></figure>\n<p><code>&quot;some result&quot;</code> 可以代替为一个标量子查询，该子查询返回 1 行 1 列结果或者 1 列空表。</p>\n<ul>\n<li>当子查询返回一个结果时，<code>select &lt;子查询&gt; as col_name;</code> 返回列名更改后的子查询结果</li>\n<li>当子查询为空表时，<code>select &lt;子查询&gt; as col_name;</code> 返回一个 <code>NULL</code> 值</li>\n</ul>\n<p>下面的语句和上面的标量子查询的技巧是等价的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> IFNULL(</span><br><span class=\"line\">\t(</span><br><span class=\"line\">\t\t<span class=\"comment\">-- 1 行 1 列结果或者 1 列空表</span></span><br><span class=\"line\">\t),</span><br><span class=\"line\">\t<span class=\"keyword\">NULL</span></span><br><span class=\"line\">) <span class=\"keyword\">AS</span> col_name</span><br></pre></td></tr></table></figure>\n<h1 id=\"展示分组前三数据-where\"><a class=\"markdownIt-Anchor\" href=\"#展示分组前三数据-where\"></a> 展示分组前三数据 <code>WHERE</code></h1>\n<blockquote>\n<p>相关题目：🟥 <a href=\"https://leetcode.cn/problems/department-top-three-salaries/description/?envType=study-plan-v2&amp;envId=sql-free-50\">185. 部门工资前三高的所有员工 - 力扣（LeetCode）</a></p>\n</blockquote>\n<h1 id=\"分组group-by中的比率计算\"><a class=\"markdownIt-Anchor\" href=\"#分组group-by中的比率计算\"></a> 分组（<code>GROUP BY</code>）中的比率计算</h1>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">题目：🟩 <a href=\"https://leetcode.cn/problems/queries-quality-and-percentage/description/\">1211. 查询结果的质量和占比 - 力扣（LeetCode）</a></div>\n</div>\n<div class=\"callout-content\"><p></p>\n<table>\n<thead>\n<tr>\n<th>Column Name</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>query_name</td>\n<td rowspan=\"2\">varchar</td>\n</tr>\n<tr>\n<td>result</td>\n</tr>\n<tr>\n<td>position</td>\n<td rowspan=\"2\">int</td>\n</tr>\n<tr>\n<td>rating</td>\n</tr>\n</tbody>\n</table>\n<p>此表可能有重复的行。此表包含了一些从数据库中收集的查询信息：</p>\n<ul>\n<li>“位置”（position）列的值为 1 到 500 。</li>\n<li>“评分”（rating）列的值为 1 到 5 。评分小于 3 的查询被定义为质量很差的查询。</li>\n</ul>\n<p>将查询结果的质量 quality 定义为：各查询结果的评分与其位置之间比率的平均值。<br />\n将劣质查询百分比 <code>poor_query_percentage</code> 为：评分小于 3 的查询结果占全部查询结果的百分比。</p>\n</div></div><p>要点：</p>\n<ul>\n<li>可以利用 IF 方便计算组内一些记录的占比</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    query_name, </span><br><span class=\"line\">    ROUND(<span class=\"built_in\">AVG</span>(rating<span class=\"operator\">/</span>position), <span class=\"number\">2</span>) quality,</span><br><span class=\"line\">    ROUND(<span class=\"built_in\">SUM</span>(IF(rating <span class=\"operator\">&lt;</span> <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>)) <span class=\"operator\">*</span> <span class=\"number\">100</span> <span class=\"operator\">/</span> <span class=\"built_in\">COUNT</span>(<span class=\"operator\">*</span>), <span class=\"number\">2</span>) poor_query_percentage</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Queries</span><br><span class=\"line\"><span class=\"keyword\">Where</span> query_name <span class=\"keyword\">IS</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> query_name</span><br></pre></td></tr></table></figure>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">小练习 1：尝试改变上述的 SQL 语句，使其不包含 <code>SUM</code> 和 <code>COUNT</code> 语句。（提示：使用 <code>AVG</code>）</div>\n</div>\n<div class=\"callout-content\"><p>答案：将第 4 行改为<br />\n<code>ROUND(AVG(IF(rating &lt; 3, 1, 0)) * 100 , 2) poor_query_percentage</code></p>\n</div></div>\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">小练习 2：尝试改变小练习 1 中的 SQL 语句，使其不包含 <code>IF</code> 语句。</div>\n</div>\n<div class=\"callout-content\"><p>答案：将其改为<br />\n<code>ROUND(AVG(rating &lt; 3) * 100 , 2) poor_query_percentage</code><br />\n因为 AVG 中的语句表达式成立则为 1，不成立则为 0。</p>\n</div></div><p>相关题目：🟩 <a href=\"https://leetcode.cn/problems/average-time-of-process-per-machine/description/\">1661. 每台机器的进程平均运行时间 - 力扣（LeetCode）</a></p>\n\n<div class=\"callout\" data-callout=\"tip\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">条件统计</div>\n</div>\n<div class=\"callout-content\"><p>利用 <code>COUNT</code>、<code>AVG</code> 对于 <code>NULL</code> 值进行忽略统计的特点，我们可以进行按条件统计。比如：</p>\n<ul>\n<li><code>COUNT(IF(state = 'approved', 1, NULL)) AS approved_count</code></li>\n<li><code>SUM(IF(state = 'approved', amount, NULL)) AS approved_total_amount</code>。其中 NULL 换成 0 的效果是一样的。</li>\n</ul>\n<p>相关题目：</p>\n<ul>\n<li>🟨 <a href=\"https://leetcode.cn/problems/movie-rating/?envType=study-plan-v2&amp;envId=sql-free-50\">1341. 电影评分 - 力扣（LeetCode）</a></li>\n</ul>\n</div></div><h1 id=\"分类统计-union\"><a class=\"markdownIt-Anchor\" href=\"#分类统计-union\"></a> 分类统计 <code>UNION</code></h1>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">题目：🟨 <a href=\"https://leetcode.cn/problems/count-salary-categories/description/\">1907. 按分类统计薪水 - 力扣（LeetCode）</a></div>\n</div>\n<div class=\"callout-content\"><p>表：Accounts</p>\n<table>\n<thead>\n<tr>\n<th>列名</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>account_id</td>\n<td rowspan=\"2\">int</td>\n</tr>\n<tr>\n<td>income</td>\n</tr>\n</tbody>\n</table>\n<p>在 SQL 中，account_id 是这个表的主键。<br />\n每一行都包含一个银行帐户的月收入的信息。</p>\n<p>查询每个工资类别的银行账户数量。 工资类别如下：</p>\n<ul>\n<li><code>&quot;Low Salary&quot;</code>：所有工资 严格低于 20000 美元。</li>\n<li><code>&quot;Average Salary&quot;</code>： 包含 范围内的所有工资 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>20000</mn><mo separator=\"true\">,</mo><mn>50000</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[20000, 50000]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> 。</li>\n<li><code>&quot;High Salary&quot;</code>：所有工资 严格大于 50000 美元。</li>\n</ul>\n<p>结果表 必须 包含所有三个类别。 如果某个类别中没有帐户，则报告 0 。</p>\n<p>按 任意顺序 返回结果表。</p>\n<p>查询结果格式如下示例。</p>\n<p>示例 1：</p>\n<p>输入：<br />\nAccounts 表：</p>\n<table>\n<thead>\n<tr>\n<th>account_id</th>\n<th>income</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>3</td>\n<td>108939</td>\n</tr>\n<tr>\n<td>2</td>\n<td>12747</td>\n</tr>\n<tr>\n<td>8</td>\n<td>87709</td>\n</tr>\n<tr>\n<td>6</td>\n<td>91796</td>\n</tr>\n</tbody>\n</table>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>category</th>\n<th>accounts_count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Low Salary</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Average Salary</td>\n<td>0</td>\n</tr>\n<tr>\n<td>High Salary</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p>解释：<br />\n低薪：有一个账户 2.<br />\n中等薪水：没有。<br />\n高薪：有三个账户，他们是 3, 6 和 8.</p>\n</div></div><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    <span class=\"string\">&#x27;Low Salary&#x27;</span> <span class=\"keyword\">AS</span> category,</span><br><span class=\"line\">    <span class=\"built_in\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> income <span class=\"operator\">&lt;</span> <span class=\"number\">20000</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>) <span class=\"keyword\">AS</span> accounts_count</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> </span><br><span class=\"line\">    Accounts</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span>  </span><br><span class=\"line\">    <span class=\"string\">&#x27;Average Salary&#x27;</span> category,</span><br><span class=\"line\">    <span class=\"built_in\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> income <span class=\"operator\">&gt;=</span> <span class=\"number\">20000</span> <span class=\"keyword\">AND</span> income <span class=\"operator\">&lt;=</span> <span class=\"number\">50000</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>) </span><br><span class=\"line\">    <span class=\"keyword\">AS</span> accounts_count</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> </span><br><span class=\"line\">    Accounts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">UNION</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> </span><br><span class=\"line\">    <span class=\"string\">&#x27;High Salary&#x27;</span> category,</span><br><span class=\"line\">    <span class=\"built_in\">SUM</span>(<span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> income <span class=\"operator\">&gt;</span> <span class=\"number\">50000</span> <span class=\"keyword\">THEN</span> <span class=\"number\">1</span> <span class=\"keyword\">ELSE</span> <span class=\"number\">0</span> <span class=\"keyword\">END</span>) <span class=\"keyword\">AS</span> accounts_count</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> </span><br><span class=\"line\">    Accounts</span><br></pre></td></tr></table></figure>\n<p>要点：官方利用 SUM 进行分类统计，然后再组合。不会遗漏统计数为 0 的项目。</p>\n<p>而我的方法会忽略掉统计数为 0 的类别，所以还是要自己组装统计数为 0 的项目。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> (</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> IF(income <span class=\"operator\">&lt;</span> <span class=\"number\">20000</span>,&quot;Low Salary&quot;,</span><br><span class=\"line\">\t\t\tIF(income<span class=\"operator\">&gt;</span><span class=\"number\">50000</span>,&quot;High Salary&quot;,</span><br><span class=\"line\">\t\t\t\t\t\t\t&quot;Average Salary&quot;)) category,</span><br><span class=\"line\">\t\t<span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) accounts_count       </span><br><span class=\"line\">\t<span class=\"keyword\">from</span>  accounts</span><br><span class=\"line\">\t<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> category</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">union</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &quot;Average Salary&quot;,<span class=\"number\">0</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">union</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &quot;High Salary&quot;,<span class=\"number\">0</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">union</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &quot;Low Salary&quot;,<span class=\"number\">0</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t) ttt</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> category</span><br></pre></td></tr></table></figure>\n<h1 id=\"自连接的妙用-from\"><a class=\"markdownIt-Anchor\" href=\"#自连接的妙用-from\"></a> 自连接的妙用 <code>FROM</code></h1>\n<h2 id=\"找出表中存在连续特征的元组\"><a class=\"markdownIt-Anchor\" href=\"#找出表中存在连续特征的元组\"></a> 找出表中存在连续特征的元组</h2>\n<p>在一些题目中我们可能要找出以下内容：</p>\n<ul>\n<li>连续两天、三天登录的用户（可以使用 <code>BETWEEN AND</code>、<code>DATE_SUB</code> 等函数进行区间选择）</li>\n<li>连续出现两次、三次的数字（连续次数不宜过大）</li>\n</ul>\n<p>我们可以对同一张表笛卡尔积多次后，利用 <code>WHERE</code> 条件筛选连续特征的行，然后再进行处理。</p>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">题目：🟨 <a href=\"https://leetcode.cn/problems/consecutive-numbers/description/\">180. 连续出现的数字 - 力扣（LeetCode）</a></div>\n</div>\n<div class=\"callout-content\"><p>找出所有至少连续出现三次的数字。</p>\n<p>输入：<br />\nLogs 表：</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>num</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td rowspan=\"3\">1</td>\n</tr>\n<tr>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>1</td>\n</tr>\n<tr>\n<td>6</td>\n<td rowspan=\"2\">2</td>\n</tr>\n<tr>\n<td>7</td>\n</tr>\n</tbody>\n</table>\n<p>输出：<br />\nResult 表：</p>\n<table>\n<thead>\n<tr>\n<th>ConsecutiveNums</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>解释：1 是唯一连续出现至少三次的数字。</p>\n</div></div><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span></span><br><span class=\"line\">    l1.Num <span class=\"keyword\">AS</span> ConsecutiveNums</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">    Logs l1,</span><br><span class=\"line\">    Logs l2,</span><br><span class=\"line\">    Logs l3</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">    l1.Id <span class=\"operator\">=</span> l2.Id <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> l2.Id <span class=\"operator\">=</span> l3.Id <span class=\"operator\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">AND</span> l1.Num <span class=\"operator\">=</span> l2.Num</span><br><span class=\"line\">    <span class=\"keyword\">AND</span> l2.Num <span class=\"operator\">=</span> l3.Num</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n<p>相关题目：</p>\n<ul>\n<li>🟨 <a href=\"https://leetcode.cn/problems/restaurant-growth/description/?envType=study-plan-v2&amp;envId=sql-free-50\">1321. 餐馆营业额变化增长 - 力扣（LeetCode）</a></li>\n</ul>\n<h2 id=\"前缀和的计算\"><a class=\"markdownIt-Anchor\" href=\"#前缀和的计算\"></a> 前缀和的计算</h2>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">题目：🟨 <a href=\"https://leetcode.cn/problems/last-person-to-fit-in-the-bus/description/\">1204. 最后一个能进入巴士的人 - 力扣（LeetCode）</a></div>\n</div>\n<div class=\"callout-content\"><p>有一队乘客在等着上巴士。然而，巴士有 1000 千克 的重量限制，所以其中一部分乘客可能无法上巴士。</p>\n<p>编写解决方案找出 最后一个 上巴士且不超过重量限制的乘客，并报告 <code>person_name</code> 。题目测试用例确保顺位第一的人可以上巴士且不会超重。</p>\n<p>输入：<code>Queue</code> 表</p>\n<table>\n<thead>\n<tr>\n<th>person_id</th>\n<th>person_name</th>\n<th>weight</th>\n<th>turn</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5</td>\n<td>Alice</td>\n<td>250</td>\n<td>1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Bob</td>\n<td>175</td>\n<td>5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Alex</td>\n<td>350</td>\n<td>2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>John Cena</td>\n<td>400</td>\n<td>3</td>\n</tr>\n<tr>\n<td>1</td>\n<td>Winston</td>\n<td>500</td>\n<td>6</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Marie</td>\n<td>200</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<p><code>person_id</code> 是这个表具有唯一值的列。<br />\n该表展示了所有候车乘客的信息。<br />\n表中 <code>person_id</code> 和 <code>turn</code> 列将包含从 1 到 n 的所有数字，其中 n 是表中的行数。<br />\nturn 决定了候车乘客上巴士的顺序，其中 <code>turn=1</code> 表示第一个上巴士，<code>turn=n</code> 表示最后一个上巴士。<br />\n<code>weight</code> 表示候车乘客的体重，以千克为单位。</p>\n<p>输出：</p>\n<table>\n<thead>\n<tr>\n<th>person_name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>John Cena</td>\n</tr>\n</tbody>\n</table>\n<p>解释：<br />\n为了简化，Queue 表按 turn 列由小到大排序。</p>\n<table>\n<thead>\n<tr>\n<th>Turn</th>\n<th>ID</th>\n<th>Name</th>\n<th>Weight</th>\n<th>Total Weight</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>5</td>\n<td>Alice</td>\n<td colspan=\"2\">250</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>2</td>\n<td>3</td>\n<td>Alex</td>\n<td>350</td>\n<td>600</td>\n</tr>\n<tr>\n<td>3</td>\n<td>6</td>\n<td>John Cena</td>\n<td>400</td>\n<td>1000</td>\n<td>（最后一个上巴士）</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2</td>\n<td>Marie</td>\n<td>200</td>\n<td>1200</td>\n<td>（无法上巴士）</td>\n</tr>\n<tr>\n<td>5</td>\n<td>4</td>\n<td>Bob</td>\n<td>175</td>\n<td rowspan=\"2\">___</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>6</td>\n<td>1</td>\n<td>Winston</td>\n<td>500</td>\n</tr>\n</tbody>\n</table>\n</div></div><p>要点：</p>\n<ul>\n<li>自连接并对顺序进行限制，成组后得到前缀和</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> a.person_name</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> Queue a, Queue b</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a.turn <span class=\"operator\">&gt;=</span> b.turn</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> a.person_id</span><br><span class=\"line\"><span class=\"keyword\">HAVING</span> <span class=\"built_in\">sum</span>(b.weight) <span class=\"operator\">&lt;=</span><span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> a.turn <span class=\"keyword\">desc</span></span><br><span class=\"line\">LIMIT <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://blog.csdn.net/GBStyle/article/details/84960371\">SELECT不加FROM子句的用法_select没有from-CSDN博客</a></li>\n</ul>\n","raw":"---\ntitle: SQL 写题技巧积累\ntags:\n  - SQL\n  - LeetCode\ncover: 'https://cdn.gallery.uuanqin.top/img/202409050037631.webp'\ndescription: SQL 刷题热身练习\nabbrlink: 12bc4bc9\ncategories:\n  - 计算机语言\ndate: 2024-08-28 16:37:41\ntop_img:\n---\n\n最近狂刷 SQL 题单，小小总结了一些题目的思路和技巧。\n\n本文题目难度标识：🟩简单，🟨中等，🟥困难。\n\n# 单纯的 `SELECT` 语句使用\n\nSQL 中单纯使用 `SELECT` 语句（不使用 `FROM`）语句可以完成一些函数测试，或构建简单表。\n\n```sql\n-- *************** 函数测试\nselect NOW()\n-- | NOW()               |\n-- | ------------------- |\n-- | 2024-08-26 14:47:13 |\n\n-- *************** 创建一个简单的行\nselect \"Average Salary\",0\n-- | Average Salary | 0 |\n-- | -------------- | - |\n-- | Average Salary | 0 |\n\n\n-- *************** 表的合并结果\nselect \"High Salary\",0\nunion\nselect \"Low Salary\",0\n-- | High Salary | 0 |  \n-- | ----------- | - |  \n-- | High Salary | 0 |  \n-- | Low Salary  | 0 |\n```\n\n## 标量子查询将空表处理为 `NULL`\n\n> 相关题目：🟨 [176. 第二高的薪水 - 力扣（LeetCode）](https://leetcode.cn/problems/second-highest-salary/)\n\n`select` 加上标量子查询的技巧：\n\n```SQL\nselect \"some result\" as col_name;\n\n-- 输出：\n-- | col_name    |\n-- | ----------- |\n-- | some result |\n\nselect NULL as col_name; -- 其中NULL中可以替代为一个空的子查询\n\n-- 输出：\n-- | col_name    |\n-- | ----------- |\n-- | null        |\n```\n\n`\"some result\"` 可以代替为一个标量子查询，该子查询返回 1 行 1 列结果或者 1 列空表。\n\n- 当子查询返回一个结果时，`select <子查询> as col_name;` 返回列名更改后的子查询结果\n- 当子查询为空表时，`select <子查询> as col_name;` 返回一个 `NULL` 值\n\n下面的语句和上面的标量子查询的技巧是等价的：\n\n```sql\nSELECT IFNULL(\n\t(\n\t\t-- 1 行 1 列结果或者 1 列空表\n\t),\n\tNULL\n) AS col_name\n```\n\n# 展示分组前三数据 `WHERE`\n\n> 相关题目：🟥 [185. 部门工资前三高的所有员工 - 力扣（LeetCode）](https://leetcode.cn/problems/department-top-three-salaries/description/?envType=study-plan-v2&envId=sql-free-50)\n\n# 分组（`GROUP BY`）中的比率计算\n\n> [!example] 题目：🟩 [1211. 查询结果的质量和占比 - 力扣（LeetCode）](https://leetcode.cn/problems/queries-quality-and-percentage/description/)\n>\n> | Column Name | Type    |\n> | ----------- | ------- |\n> | query_name  | varchar |\n> | result      | varchar |\n> | position    | int     |\n> | rating      | int     |\n>\n> 此表可能有重复的行。此表包含了一些从数据库中收集的查询信息：\n> - “位置”（position）列的值为 1 到 500 。\n> - “评分”（rating）列的值为 1 到 5 。评分小于 3 的查询被定义为质量很差的查询。\n>\n> 将查询结果的质量 quality 定义为：各查询结果的评分与其位置之间比率的平均值。\n> 将劣质查询百分比 `poor_query_percentage` 为：评分小于 3 的查询结果占全部查询结果的百分比。\n\n要点：\n\n- 可以利用 IF 方便计算组内一些记录的占比\n\n```sql\nSELECT \n    query_name, \n    ROUND(AVG(rating/position), 2) quality,\n    ROUND(SUM(IF(rating < 3, 1, 0)) * 100 / COUNT(*), 2) poor_query_percentage\nFROM Queries\nWhere query_name IS NOT NULL\nGROUP BY query_name\n```\n\n> [!example] 小练习 1：尝试改变上述的 SQL 语句，使其不包含 `SUM` 和 `COUNT` 语句。（提示：使用 `AVG`）\n> 答案：将第 4 行改为\n> `ROUND(AVG(IF(rating < 3, 1, 0)) * 100 , 2) poor_query_percentage`\n\n> [!example] 小练习 2：尝试改变小练习 1 中的 SQL 语句，使其不包含 `IF` 语句。\n> 答案：将其改为\n> `ROUND(AVG(rating < 3) * 100 , 2) poor_query_percentage`\n> 因为 AVG 中的语句表达式成立则为 1，不成立则为 0。\n\n相关题目：🟩 [1661. 每台机器的进程平均运行时间 - 力扣（LeetCode）](https://leetcode.cn/problems/average-time-of-process-per-machine/description/)\n\n> [!tip] 条件统计\n> 利用 `COUNT`、`AVG` 对于 `NULL` 值进行忽略统计的特点，我们可以进行按条件统计。比如：\n> - `COUNT(IF(state = 'approved', 1, NULL)) AS approved_count`\n> - `SUM(IF(state = 'approved', amount, NULL)) AS approved_total_amount`。其中 NULL 换成 0 的效果是一样的。\n>\n> 相关题目：\n> - 🟨 [1341. 电影评分 - 力扣（LeetCode）](https://leetcode.cn/problems/movie-rating/?envType=study-plan-v2&envId=sql-free-50)\n\n\n# 分类统计 `UNION`\n\n> [!example] 题目：🟨 [1907. 按分类统计薪水 - 力扣（LeetCode）](https://leetcode.cn/problems/count-salary-categories/description/)\n> 表：Accounts\n>\n> | 列名         | 类型  |\n> | ---------- | --- |\n> | account_id | int |\n> | income     | int |\n>\n> 在 SQL 中，account_id 是这个表的主键。\n> 每一行都包含一个银行帐户的月收入的信息。\n>\n> 查询每个工资类别的银行账户数量。 工资类别如下：\n>\n> - `\"Low Salary\"`：所有工资 严格低于 20000 美元。\n> - `\"Average Salary\"`： 包含 范围内的所有工资 $[20000, 50000]$ 。\n> - `\"High Salary\"`：所有工资 严格大于 50000 美元。\n>\n> 结果表 必须 包含所有三个类别。 如果某个类别中没有帐户，则报告 0 。\n>\n> 按 任意顺序 返回结果表。\n>\n> 查询结果格式如下示例。\n>\n> 示例 1：\n>\n> 输入：\n> Accounts 表：\n>\n> | account_id | income |\n> | ---------- | ------ |\n> | 3          | 108939 |\n> | 2          | 12747  |\n> | 8          | 87709  |\n> | 6          | 91796  |\n>\n> 输出：\n>\n> | category       | accounts_count |\n> | -------------- | -------------- |\n> | Low Salary     | 1              |\n> | Average Salary | 0              |\n> | High Salary    | 3              |\n>\n> 解释：\n> 低薪：有一个账户 2.\n> 中等薪水：没有。\n> 高薪：有三个账户，他们是 3, 6 和 8.\n\n```sql\nSELECT \n    'Low Salary' AS category,\n    SUM(CASE WHEN income < 20000 THEN 1 ELSE 0 END) AS accounts_count\nFROM \n    Accounts\n    \nUNION\nSELECT  \n    'Average Salary' category,\n    SUM(CASE WHEN income >= 20000 AND income <= 50000 THEN 1 ELSE 0 END) \n    AS accounts_count\nFROM \n    Accounts\n\nUNION\nSELECT \n    'High Salary' category,\n    SUM(CASE WHEN income > 50000 THEN 1 ELSE 0 END) AS accounts_count\nFROM \n    Accounts\n```\n\n要点：官方利用 SUM 进行分类统计，然后再组合。不会遗漏统计数为 0 的项目。\n\n而我的方法会忽略掉统计数为 0 的类别，所以还是要自己组装统计数为 0 的项目。\n\n```sql\nselect *\nfrom (\n\tselect IF(income < 20000,\"Low Salary\",\n\t\t\tIF(income>50000,\"High Salary\",\n\t\t\t\t\t\t\t\"Average Salary\")) category,\n\t\tcount(*) accounts_count       \n\tfrom  accounts\n\tgroup by category\n\t\n\tunion\n\t\tselect \"Average Salary\",0\n\t\n\tunion\n\t\tselect \"High Salary\",0\n\t\n\tunion\n\t\tselect \"Low Salary\",0\n\t\n\t) ttt\ngroup by category\n```\n\n# 自连接的妙用 `FROM`\n\n## 找出表中存在连续特征的元组\n\n在一些题目中我们可能要找出以下内容：\n\n- 连续两天、三天登录的用户（可以使用 `BETWEEN AND`、`DATE_SUB` 等函数进行区间选择）\n- 连续出现两次、三次的数字（连续次数不宜过大）\n\n我们可以对同一张表笛卡尔积多次后，利用 `WHERE` 条件筛选连续特征的行，然后再进行处理。\n\n> [!example] 题目：🟨 [180. 连续出现的数字 - 力扣（LeetCode）](https://leetcode.cn/problems/consecutive-numbers/description/)\n> 找出所有至少连续出现三次的数字。\n>\n>\n> 输入：\n> Logs 表：\n>\n> | id  | num |\n> | --- | --- |\n> | 1   | 1   |\n> | 2   | 1   |\n> | 3   | 1   |\n> | 4   | 2   |\n> | 5   | 1   |\n> | 6   | 2   |\n> | 7   | 2   |\n>\n> 输出：\n> Result 表：\n>\n> | ConsecutiveNums |\n> |---|\n> | 1               |\n>\n> 解释：1 是唯一连续出现至少三次的数字。\n\n```sql\nSELECT DISTINCT\n    l1.Num AS ConsecutiveNums\nFROM\n    Logs l1,\n    Logs l2,\n    Logs l3\nWHERE\n    l1.Id = l2.Id - 1\n    AND l2.Id = l3.Id - 1\n    AND l1.Num = l2.Num\n    AND l2.Num = l3.Num\n;\n```\n\n相关题目：\n\n- 🟨 [1321. 餐馆营业额变化增长 - 力扣（LeetCode）](https://leetcode.cn/problems/restaurant-growth/description/?envType=study-plan-v2&envId=sql-free-50)\n\n## 前缀和的计算\n\n> [!example] 题目：🟨 [1204. 最后一个能进入巴士的人 - 力扣（LeetCode）](https://leetcode.cn/problems/last-person-to-fit-in-the-bus/description/)\n> 有一队乘客在等着上巴士。然而，巴士有 1000 千克 的重量限制，所以其中一部分乘客可能无法上巴士。\n>\n> 编写解决方案找出 最后一个 上巴士且不超过重量限制的乘客，并报告 `person_name` 。题目测试用例确保顺位第一的人可以上巴士且不会超重。\n>\n> 输入：`Queue` 表\n>\n> | person_id | person_name | weight | turn |\n> | --------- | ----------- | ------ | ---- |\n> | 5         | Alice       | 250    | 1    |\n> | 4         | Bob         | 175    | 5    |\n> | 3         | Alex        | 350    | 2    |\n> | 6         | John Cena   | 400    | 3    |\n> | 1         | Winston     | 500    | 6    |\n> | 2         | Marie       | 200    | 4    |\n>\n> `person_id` 是这个表具有唯一值的列。\n> 该表展示了所有候车乘客的信息。\n> 表中 `person_id` 和 `turn` 列将包含从 1 到 n 的所有数字，其中 n 是表中的行数。\n> turn 决定了候车乘客上巴士的顺序，其中 `turn=1` 表示第一个上巴士，`turn=n` 表示最后一个上巴士。\n> `weight` 表示候车乘客的体重，以千克为单位。\n>\n>\n> 输出：\n>\n> | person_name |\n> |---|\n> | John Cena   |\n>\n> 解释：\n> 为了简化，Queue 表按 turn 列由小到大排序。\n>\n> | Turn | ID  | Name      | Weight | Total Weight |           |\n> | ---- | --- | --------- | ------ | ------------ | --------- |\n> | 1    | 5   | Alice     | 250    | 250          |           |\n> | 2    | 3   | Alex      | 350    | 600          |           |\n> | 3    | 6   | John Cena | 400    | 1000         | （最后一个上巴士） |\n> | 4    | 2   | Marie     | 200    | 1200         | （无法上巴士）   |\n> | 5    | 4   | Bob       | 175    | ___          |           |\n> | 6    | 1   | Winston   | 500    | ___          |           |\n\n要点：\n\n- 自连接并对顺序进行限制，成组后得到前缀和\n\n```sql\nSELECT a.person_name\nFROM Queue a, Queue b\nWHERE a.turn >= b.turn\nGROUP BY a.person_id\nHAVING sum(b.weight) <=1000\nORDER BY a.turn desc\nLIMIT 1\n```\n\n# 本文参考\n\n- [SELECT不加FROM子句的用法_select没有from-CSDN博客](https://blog.csdn.net/GBStyle/article/details/84960371)","categories":[{"name":"计算机语言","api":"api/categories/计算机语言.json"}],"tags":[{"name":"LeetCode","api":"api/tags/LeetCode.json"},{"name":"SQL","api":"api/tags/SQL.json"}]},"api":"api/posts/p/12bc4bc9.json"}