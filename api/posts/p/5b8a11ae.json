{"data":{"title":"建造者模式的两种不同实现方式","slug":"高质量代码及设计模式/建造者模式的两种不同实现方式","description":"解决了构造参数十分复杂的问题","date":"2025-07-14T15:53:28.000Z","updated":"2025-08-18T12:44:07.428Z","language":"zh-CN","comments":true,"url":"p/5b8a11ae/","cover":"https://cdn.gallery.uuanqin.top/img/20240731143918.webp","images":[],"content":"<p>创建一个对象最常用的方法就是通过 <code>new</code> 关键字创建出一个对象，但是有的时候这种创建对象的方法并不适用。</p>\n<p>建造者模式又称为构建者模式或生成器模式，属于创建型模式，它用于组装复杂的实例。它可<strong>将一个复杂对象的构建与其表示分离</strong>，使得同样的构建过程可以创建不同的表示。用户只需要指定需要建造的类型就可以 得到该类型对应的产品实例 , 不关心建造过程细节。</p>\n<p>建造者模式有两种写法，一种是 GoF 中提出的传统的建造者模式写法，一种是现在常用的写法。</p>\n<h1 id=\"传统的建造者模式\"><a class=\"markdownIt-Anchor\" href=\"#传统的建造者模式\"></a> 传统的建造者模式</h1>\n<blockquote>\n<p>这里介绍的建造者模式的实现接近于 GoF 的思想。</p>\n</blockquote>\n<p>登场角色：</p>\n<ul>\n<li><code>Product</code>（产品）：我们需要获得的类。</li>\n<li><code>Builder</code>（抽象建造者）：定义用于生成实例的接口（API），准备用于生成实例的方法。</li>\n<li><code>ConcreteBuilder</code>（具体的建造者）：负责实现 <code>Builder</code> 角色接口（API）的类。ConcreteBuilder 还定义了获取最终生成结果（产品）的方法。</li>\n<li><code>Director</code>（监工/指挥者）：负责使用 <code>Builder</code> 角色的接口（API）来生成实例，它并不依赖于 <code>ConcreteBuilder</code> 角色（它只调用在 <code>Builder</code> 角色中被定义的方法）。注意是具体类。组装的具体过程隐藏在 <code>Director</code> 中。</li>\n<li><code>Client</code>（使用者）：使用建造者模式。</li>\n</ul>\n<p>在 GoF 书中没有 <code>Client</code> 和 <code>Product</code> 这两个角色，这里只是为了方便理解而引入。</p>\n<p>建造者代码如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Product</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">param1</span> <span class=\"operator\">=</span> DEFAULT_VALUE;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">param2</span> <span class=\"operator\">=</span> DEFAULT_VALUE;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">param3</span> <span class=\"operator\">=</span> DEFAULT_VALUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象建造者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 一些建造的函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Builder <span class=\"title function_\">buildPart1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Builder <span class=\"title function_\">buildPart2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Builder <span class=\"title function_\">buildPart3</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Product <span class=\"title function_\">getProduct</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体建造者（可以有多个）</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConcreteBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/* 具体建造者可以拥有自己的变量 */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Builder <span class=\"title function_\">buildPart1</span><span class=\"params\">()</span> &#123;<span class=\"comment\">/***/</span>&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Builder <span class=\"title function_\">buildPart2</span><span class=\"params\">()</span> &#123;<span class=\"comment\">/***/</span>&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Builder <span class=\"title function_\">buildPart3</span><span class=\"params\">()</span> &#123;<span class=\"comment\">/***/</span>&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Product <span class=\"title function_\">getProduct</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 获取产品前的一些处理 */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> product;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Director</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Builder builder; <span class=\"comment\">// Director 并不关心具体使用了哪个 Builder</span></span><br><span class=\"line\">\t<span class=\"comment\">// 使用构造方法或 set 方法传入具体的 builder</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Director</span><span class=\"params\">(Builder builder)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.builder = builder;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 建造工作，保证了一些必选步骤正确执行</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">build</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">/* 省略一些前置处理操作 */</span></span><br><span class=\"line\">\t  builder.buildPart1();</span><br><span class=\"line\">\t  builder.buildPart2();</span><br><span class=\"line\">\t  builder.buildPart3();</span><br><span class=\"line\">\t  <span class=\"comment\">/* 省略一些后处理操作 */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用户调用方式</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"type\">Builder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConcreteBuilder</span>(); </span><br><span class=\"line\">\t\t<span class=\"type\">Director</span> <span class=\"variable\">director</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Director</span>(builder);</span><br><span class=\"line\">\t\tdirector.build();</span><br><span class=\"line\">\t\t<span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> builder.getProduct();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src= \"/image/loading.gif\" data-lazy-src=\"https://cdn.gallery.uuanqin.top/img/202507090014252.webp\" alt=\"image.png\" /></p>\n<p>建造者模式的时序图：</p>\n<pre><code class=\"highlight mermaid\">sequenceDiagram\n    participant C as Client\n    participant D as Director\n    participant B as ConcreteBuilder\n    activate C\n    C -&gt;&gt; B : new\n    activate B\n    deactivate B\n    C -&gt;&gt; D : build\n    activate D\n    D -&gt;&gt; B : buildPart1\n    activate B\n    B --&gt;&gt; D : \n    deactivate B\n\tD -&gt;&gt; B : buildPart2\n    activate B\n    B --&gt;&gt; D : \n    deactivate B\n    D -&gt;&gt; B : buildPart3\n    activate B\n    B --&gt;&gt; D : \n    deactivate B\n    D --&gt;&gt; C : \n    deactivate D\n    C -&gt;&gt; B : getProduct\n    activate B\n    B --&gt;&gt; C : \n    deactivate B\n    deactivate C</code></pre>\n<p>在建造者模式中，<code>Main</code> 不知道 <code>Builder</code> 类，<code>Director</code> 不知道 <code>ConcreteBuilder</code> 类。可替换性就体现在「只有不知道子类才能替换」。</p>\n<p>对于上面建造者模式写法，不同文章中的实现也有所不同：</p>\n<ul>\n<li>有些写法是使用 <code>Director</code> 获取产品。这种方法让 <code>Director</code> 完全控制构建流程，<code>Builder</code> 只负责部件构造，构建的代码部分实现了复用。用户只需和 <code>Director</code> 交互。</li>\n<li>有些写法是像上面文章讲的那样通过 <code>ConcreteBuilder</code> 获取产品。这种方式会呈现一定的构造灵活度。</li>\n</ul>\n<p>我们可以不必纠结上面这些区别，直接来看最常用的写法。</p>\n<h1 id=\"建造者模式常用写法省略-director-角色\"><a class=\"markdownIt-Anchor\" href=\"#建造者模式常用写法省略-director-角色\"></a> 建造者模式常用写法——省略 Director 角色</h1>\n<blockquote>\n<p>建造者模式的常用用法，是一种混合模式。</p>\n</blockquote>\n<p>假设我们需要定义一个资源池配置类 <code>ResourcePoolConfig</code>。这里的资源池可以简单理解为线程池、连接池、对象池等。包含以下参数：</p>\n<ul>\n<li><code>name</code>：资源名称</li>\n<li><code>maxTotal</code>：最大总资源数量</li>\n<li><code>maxIdle</code>：最大空闲资源数量</li>\n<li><code>minIdle</code>：最小空闲资源数量</li>\n</ul>\n<p>我们的构造函数或许是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResourcePoolConfig</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_MAX_TOTAL</span> <span class=\"operator\">=</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_MAX_IDLE</span> <span class=\"operator\">=</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_MIN_IDLE</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">maxTotal</span> <span class=\"operator\">=</span> DEFAULT_MAX_TOTAL;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">maxIdle</span> <span class=\"operator\">=</span> DEFAULT_MAX_IDLE;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">minIdle</span> <span class=\"operator\">=</span> DEFAULT_MIN_IDLE;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ResourcePoolConfig</span><span class=\"params\">(String name, Integer maxTotal, Integer maxIdle, Integer minIdle)</span> &#123;</span><br><span class=\"line\">\t  <span class=\"comment\">// 一些参数校验逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不管可选或必选配置项，我们都用构造方法配置这些参数时，就叫做折叠构造函数模式（Telescoping Constructor Pattern）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResourcePoolConfig</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ResourcePoolConfig</span><span class=\"params\">(String name)</span> &#123;<span class=\"comment\">/***/</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ResourcePoolConfig</span><span class=\"params\">(String name, Integer maxTotal)</span> &#123;<span class=\"comment\">/***/</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ResourcePoolConfig</span><span class=\"params\">(String name, Integer maxIdle, Integer minIdle)</span> &#123;<span class=\"comment\">/***/</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ResourcePoolConfig</span><span class=\"params\">(String name, Integer maxTotal, Integer maxIdle, Integer minIdle)</span> &#123;<span class=\"comment\">/***/</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们发现一些问题：</p>\n<ul>\n<li>当 <code>ResourcePoolConfig</code> 的必选配置项变为 8 个、10 个时我们的构造函数会越来越长</li>\n<li>当出现多个可选配置项时，我们构造函数的重载方法会越来越多。如果一些参数类型几乎都相似，那么参数传递时很容易传混或出错。</li>\n</ul>\n<p>对于可选配置项的一个简单的解决方式为使用 <code>setXXX()</code> 函数来给成员变量赋值，以替代冗长繁琐的构造函数。这也是所谓的 Java Bean 模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ResourcePoolConfig</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_MAX_TOTAL</span> <span class=\"operator\">=</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_MAX_IDLE</span> <span class=\"operator\">=</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_MIN_IDLE</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">maxTotal</span> <span class=\"operator\">=</span> DEFAULT_MAX_TOTAL;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">maxIdle</span> <span class=\"operator\">=</span> DEFAULT_MAX_IDLE;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">minIdle</span> <span class=\"operator\">=</span> DEFAULT_MIN_IDLE;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// name 必填，所以我们把它放在构造函数中</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ResourcePoolConfig</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(name)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;name should not be empty.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMaxTotal</span><span class=\"params\">(<span class=\"type\">int</span> maxTotal)</span> &#123;<span class=\"comment\">/***/</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMaxIdle</span><span class=\"params\">(<span class=\"type\">int</span> maxIdle)</span> &#123;<span class=\"comment\">/***/</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMinIdle</span><span class=\"params\">(<span class=\"type\">int</span> minIdle)</span> &#123;<span class=\"comment\">/***/</span>&#125;</span><br><span class=\"line\">  <span class=\"comment\">//...省略getter方法...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但使用 <code>setXXX()</code> 函数还存在一些问题：</p>\n<ul>\n<li>必填的配置不能可以使用 <code>setXXX()</code> 函数，因为如果各个必填配置存在互相依赖校验，这种校验逻辑无法实现。所以必选项配置的问题还是没有解决。</li>\n<li>不能保证参数传递的先后次序。</li>\n<li>一旦必填的配置多了起来，构造参数的列表还是会长起来。</li>\n<li>如果我们希望 <code>ResourcePoolConfig</code> 是不可变的对象，那么 <code>setXXX()</code> 就会出现问题。</li>\n</ul>\n<p>为解决上述问题，Builder 模式诞生。</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Product</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">required_param_1</span> <span class=\"operator\">=</span> DEFAULT_VALUE;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">optional_param_2</span> <span class=\"operator\">=</span> DEFAULT_VALUE;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">optional_param_3</span> <span class=\"operator\">=</span> DEFAULT_VALUE;</span><br><span class=\"line\">  <span class=\"comment\">// 私有的构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">Product</span><span class=\"params\">(Builder builder)</span>&#123;</span><br><span class=\"line\">\t  <span class=\"built_in\">this</span>.required_param_1 = builder.required_param_1;</span><br><span class=\"line\">\t  <span class=\"built_in\">this</span>.optional_param_2 = builder.optional_param_2;</span><br><span class=\"line\">\t  <span class=\"built_in\">this</span>.optional_param_3 = builder.optional_param_3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 专属于特定产品的内部Builder，拥有和Product一样的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">required_param_1</span> <span class=\"operator\">=</span> DEFAULT_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">optional_param_2</span> <span class=\"operator\">=</span> DEFAULT_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">optional_param_3</span> <span class=\"operator\">=</span> DEFAULT_VALUE;</span><br><span class=\"line\">    <span class=\"comment\">// 必要参数使用创建者模式构建</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Builder</span><span class=\"params\">(<span class=\"type\">int</span> required_param_1)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">this</span>.required_param_1 = required_param_1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 可选参数使用 set 方式设置。返回值返回 Builder 以供链式调用。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Builder <span class=\"title function_\">setOptionalParam2</span><span class=\"params\">(<span class=\"type\">int</span> val)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">this</span>.optional_param_2 = val;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Builder <span class=\"title function_\">setOptionalParam3</span><span class=\"params\">(<span class=\"type\">int</span> val)</span>&#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">this</span>.optional_param_3 = val;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Product <span class=\"title function_\">build</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// 一些验证逻辑可以放在此处</span></span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 此处省略 getter 方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 链式调用</span></span><br><span class=\"line\"><span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>.Builder(val1)</span><br><span class=\"line\">\t.setOptionalParam2(val2)</span><br><span class=\"line\">\t.setOptionalParam3(val3)</span><br><span class=\"line\">\t.build();</span><br></pre></td></tr></table></figure>\n<p>与经典的建造者模式相比，这种模式把 <code>Director</code> 角色给省略了，另外在内部静态 <code>Builder</code> 的构建方法中返回了 <code>this</code> 自身，方便流式调用。</p>\n<h1 id=\"lombok-中的-builder-注解\"><a class=\"markdownIt-Anchor\" href=\"#lombok-中的-builder-注解\"></a> Lombok 中的 <code>@Builder</code> 注解</h1>\n<p>Lombok 是一个常用的 Java 库，通过添加注解可自动实现建造者模式代码或 Getter、Setter 等。其中，<code>@Builder</code> 注解可以用来实现建造者模式，省略手动编写建造者模式的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> lombok.Builder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.ToString;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Builder</span></span><br><span class=\"line\"><span class=\"meta\">@ToString</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phone;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Lombok 中的 @Builder 注解会在编译时自动生成一个名为 Person.PersonBuilder 的内部类</span></span><br><span class=\"line\">\t<span class=\"comment\">/*******************************</span></span><br><span class=\"line\"><span class=\"comment\">\tpublic static class Builder &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        private String name;</span></span><br><span class=\"line\"><span class=\"comment\">        private int age;</span></span><br><span class=\"line\"><span class=\"comment\">        private String address;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        public Builder() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        public Builder name(String name) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            this.name = name;</span></span><br><span class=\"line\"><span class=\"comment\">            return this;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        public Builder age(int age) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            this.age = age;</span></span><br><span class=\"line\"><span class=\"comment\">            return this;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        public Builder address(String address) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            this.address = address;</span></span><br><span class=\"line\"><span class=\"comment\">            return this;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t\t// ... etc.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        public Person build() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            return new Person(this);</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    ************************************/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> Person.builder()</span><br><span class=\"line\">\t .name(<span class=\"string\">&quot;王五&quot;</span>)</span><br><span class=\"line\">\t .age(<span class=\"number\">28</span>)</span><br><span class=\"line\">\t .address(<span class=\"string\">&quot;上海市浦东新区&quot;</span>)</span><br><span class=\"line\">\t .email(<span class=\"string\">&quot;wangwu@example.com&quot;</span>)</span><br><span class=\"line\">\t .phone(<span class=\"string\">&quot;13600000000&quot;</span>)</span><br><span class=\"line\">\t .build();</span><br><span class=\"line\">System.out.println(person);</span><br></pre></td></tr></table></figure>\n<h1 id=\"模式的对比与选用\"><a class=\"markdownIt-Anchor\" href=\"#模式的对比与选用\"></a> 模式的对比与选用</h1>\n<p>相关的设计模式：</p>\n<ul>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/undefined/\"><span class=\"yukari\">站内文章</span>组合模式</a>：有些情况下建造者模式生成的实例构成了组合模式。</li>\n<li>门面模式 Facade：\n<ul>\n<li>在建造者模式中，<code>Director</code> 角色通过组合 <code>Builder</code> 角色中的复杂方法向外部提供可以简单生成实例的接口（API）（相当于示例程序中的 <code>construct</code> 方法）。</li>\n<li>Facade 模式中的 Facade 角色则是通过组合内部模块向外部提供可以简单调用的接口（API）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"建造者模式与工厂模式的对比\"><a class=\"markdownIt-Anchor\" href=\"#建造者模式与工厂模式的对比\"></a> 建造者模式与工厂模式的对比</h2>\n<p>比较：</p>\n<ul>\n<li>建造者模式：让建造者类来负责对象的创建工作。</li>\n<li><a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/3a9f48af/\"><span class=\"yukari\">站内文章</span>工厂模式</a>：工厂类负责对象的创建工作。创建不同但相关类型的对象（继承同一父类或接口 <code>Product</code> 的一组子类），由给定参数决定创建哪种类型的对象。Factory 抽象类定义的是一个实例产生的具体流程，子类实现具体的处理。</li>\n</ul>\n<p>模式选用：</p>\n<ul>\n<li>当创造一个对象需要很多步骤时 , 适合使用建造者模式</li>\n<li>当创造一个对象只需要一个简单的方法就可以完成，适合使用工厂模式</li>\n</ul>\n<h2 id=\"建造者模式与抽象工厂模式的对比\"><a class=\"markdownIt-Anchor\" href=\"#建造者模式与抽象工厂模式的对比\"></a> 建造者模式与抽象工厂模式的对比</h2>\n<p>Builder 模式和 Abstract Factory 模式都用于生成复杂的实例。</p>\n<ul>\n<li>Builder 模式则是分阶段地制作复杂实例。</li>\n<li>Abstract Factory 模式通过调用抽象产品的接口（API）来组装抽象产品，生成具有复杂结构的实例。抽象工厂模式强调的是产品族的创建，即相关的产品一起被创建出来，而建造者模式强调的是一个复杂对象的创建，即它的各个部分逐步被创建出来。</li>\n</ul>\n<h1 id=\"后记\"><a class=\"markdownIt-Anchor\" href=\"#后记\"></a> 后记</h1>\n<blockquote>\n<p>🎂今天是博主的生日~</p>\n</blockquote>\n<p>没搞明白的问题：</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input class=\"task-list-item-checkbox\" disabled=\"\" type=\"checkbox\"> GoF 中的建造者模式的具体应用在哪里？它能解决构造参数中的必选参数和可选参数的问题吗？</li>\n</ul>\n<h1 id=\"参考与归档\"><a class=\"markdownIt-Anchor\" href=\"#参考与归档\"></a> 参考与归档</h1>\n<h2 id=\"本文-plantuml-代码归档\"><a class=\"markdownIt-Anchor\" href=\"#本文-plantuml-代码归档\"></a> 本文 PlantUML 代码归档</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Client</span><br><span class=\"line\"></span><br><span class=\"line\">class Director&#123;</span><br><span class=\"line\">\tbuilder</span><br><span class=\"line\">\t&#123;method&#125; build</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">abstract class Builder&#123;</span><br><span class=\"line\">\tproduct</span><br><span class=\"line\">\t&#123;method&#125; &#123;abstract&#125; buildPart1</span><br><span class=\"line\">\t&#123;method&#125; &#123;abstract&#125; buildPart2</span><br><span class=\"line\">\t&#123;method&#125; &#123;abstract&#125; buildPart3</span><br><span class=\"line\">\t&#123;method&#125; &#123;abstract&#125; getProduct</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteBuilder&#123;</span><br><span class=\"line\">\t&#123;method&#125; buildPart1</span><br><span class=\"line\">\t&#123;method&#125; buildPart2</span><br><span class=\"line\">\t&#123;method&#125; buildPart3 </span><br><span class=\"line\">\t&#123;method&#125; getProduct</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Product&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Client -&gt; Director : Uses</span><br><span class=\"line\">Director o- Builder</span><br><span class=\"line\">Builder &lt;|-- ConcreteBuilder</span><br><span class=\"line\">Client --&gt; ConcreteBuilder : Uses</span><br><span class=\"line\">Builder *- Product</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\"></a> 参考文章</h2>\n<ul>\n<li>《图解设计模式》第七章 Builder 模式</li>\n<li><a href=\"https://gitee.com/buxsren/design-pattern-books/blob/master/docs/199674.md\">极客时间专栏 - 设计模式之美 - 王争</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_45433817/article/details/131175862\">设计模式第10讲——建造者模式（Builder）-CSDN博客</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/58093669?share_code=3o79BrAEDdcS&amp;utm_psn=1921745149165283260\">秒懂设计模式之建造者模式（Builder pattern） - 知乎</a></li>\n<li><a href=\"https://blog.csdn.net/yk_dflkg/article/details/147340859\">建造者模式（Builder Pattern）详解-CSDN博客</a></li>\n<li>这篇文章可能有误，请仔细甄别：<a href=\"https://developer.aliyun.com/article/1549784\">Java设计模式：建造者模式之经典与流式的三种实现（四）-阿里云开发者社区</a></li>\n</ul>\n","raw":"---\ntitle: 建造者模式的两种不同实现方式\ntags:\n  - 设计模式\n  - Java\ncover: 'https://cdn.gallery.uuanqin.top/img/20240731143918.webp'\ndescription: 解决了构造参数十分复杂的问题\nkatex: false\ncategories:\n  - 高质量代码及设计模式\nabbrlink: 5b8a11ae\ndate: 2025-07-14 23:53:28\ntop_img:\n---\n\n创建一个对象最常用的方法就是通过 `new` 关键字创建出一个对象，但是有的时候这种创建对象的方法并不适用。\n\n建造者模式又称为构建者模式或生成器模式，属于创建型模式，它用于组装复杂的实例。它可**将一个复杂对象的构建与其表示分离**，使得同样的构建过程可以创建不同的表示。用户只需要指定需要建造的类型就可以 得到该类型对应的产品实例 , 不关心建造过程细节。\n\n建造者模式有两种写法，一种是 GoF 中提出的传统的建造者模式写法，一种是现在常用的写法。\n\n# 传统的建造者模式\n\n> 这里介绍的建造者模式的实现接近于 GoF 的思想。\n\n登场角色：\n\n- `Product`（产品）：我们需要获得的类。\n- `Builder`（抽象建造者）：定义用于生成实例的接口（API），准备用于生成实例的方法。\n- `ConcreteBuilder`（具体的建造者）：负责实现 `Builder` 角色接口（API）的类。ConcreteBuilder 还定义了获取最终生成结果（产品）的方法。\n- `Director`（监工/指挥者）：负责使用 `Builder` 角色的接口（API）来生成实例，它并不依赖于 `ConcreteBuilder` 角色（它只调用在 `Builder` 角色中被定义的方法）。注意是具体类。组装的具体过程隐藏在 `Director` 中。\n- `Client`（使用者）：使用建造者模式。\n\n在 GoF 书中没有 `Client` 和 `Product` 这两个角色，这里只是为了方便理解而引入。\n\n建造者代码如下所示：\n\n```java\npublic class Product {\n  private int param1 = DEFAULT_VALUE;\n  private int param2 = DEFAULT_VALUE;\n  private int param3 = DEFAULT_VALUE;\n}\n\n// 抽象建造者\npublic abstract class Builder {\n\tprotected Product product = new Product();\n\n\t// 一些建造的函数\n    public abstract Builder buildPart1();\n\tpublic abstract Builder buildPart2();\n\tpublic abstract Builder buildPart3();\n\tpublic abstract Product getProduct();\n}\n\n//具体建造者（可以有多个）\npublic static class ConcreteBuilder extends Builder {\n\t/* 具体建造者可以拥有自己的变量 */\n    @Override\n    public Builder buildPart1() {/***/}\n    @Override\n    public Builder buildPart2() {/***/}\n    @Override\n    public Builder buildPart3() {/***/}\n    @Override\n    public Product getProduct(){\n        /* 获取产品前的一些处理 */\n\t\treturn product;\n\t}\n  }\n}\n\npublic class Director{\n\tprivate Builder builder; // Director 并不关心具体使用了哪个 Builder\n\t// 使用构造方法或 set 方法传入具体的 builder\n\tpublic Director(Builder builder){\n\t\tthis.builder = builder;\n\t}\n\n\t// 建造工作，保证了一些必选步骤正确执行\n\tpublic void build(){\n\t  /* 省略一些前置处理操作 */\n\t  builder.buildPart1();\n\t  builder.buildPart2();\n\t  builder.buildPart3();\n\t  /* 省略一些后处理操作 */\n    }\n}\n\n// 用户调用方式\npublic class Client{\n\tpublic static void main(String[] args){\n\t    Builder builder = new ConcreteBuilder(); \n\t\tDirector director = new Director(builder);\n\t\tdirector.build();\n\t\tProduct product = builder.getProduct();\n\t}\n}\n```\n\n![image.png](https://cdn.gallery.uuanqin.top/img/202507090014252.webp)\n\n建造者模式的时序图：\n\n```mermaid\nsequenceDiagram\n    participant C as Client\n    participant D as Director\n    participant B as ConcreteBuilder\n    activate C\n    C ->> B : new\n    activate B\n    deactivate B\n    C ->> D : build\n    activate D\n    D ->> B : buildPart1\n    activate B\n    B -->> D : \n    deactivate B\n\tD ->> B : buildPart2\n    activate B\n    B -->> D : \n    deactivate B\n    D ->> B : buildPart3\n    activate B\n    B -->> D : \n    deactivate B\n    D -->> C : \n    deactivate D\n    C ->> B : getProduct\n    activate B\n    B -->> C : \n    deactivate B\n    deactivate C\n```\n\n在建造者模式中，`Main` 不知道 `Builder` 类，`Director` 不知道 `ConcreteBuilder` 类。可替换性就体现在「只有不知道子类才能替换」。\n\n对于上面建造者模式写法，不同文章中的实现也有所不同：\n\n- 有些写法是使用 `Director` 获取产品。这种方法让 `Director` 完全控制构建流程，`Builder` 只负责部件构造，构建的代码部分实现了复用。用户只需和 `Director` 交互。\n- 有些写法是像上面文章讲的那样通过 `ConcreteBuilder` 获取产品。这种方式会呈现一定的构造灵活度。\n\n我们可以不必纠结上面这些区别，直接来看最常用的写法。\n\n# 建造者模式常用写法——省略 Director 角色\n\n> 建造者模式的常用用法，是一种混合模式。\n\n假设我们需要定义一个资源池配置类 `ResourcePoolConfig`。这里的资源池可以简单理解为线程池、连接池、对象池等。包含以下参数：\n\n- `name`：资源名称\n- `maxTotal`：最大总资源数量\n- `maxIdle`：最大空闲资源数量\n- `minIdle`：最小空闲资源数量\n\n我们的构造函数或许是这样的：\n\n```java\npublic class ResourcePoolConfig {\n  private static final int DEFAULT_MAX_TOTAL = 8;\n  private static final int DEFAULT_MAX_IDLE = 8;\n  private static final int DEFAULT_MIN_IDLE = 0;\n\n  private String name;\n  private int maxTotal = DEFAULT_MAX_TOTAL;\n  private int maxIdle = DEFAULT_MAX_IDLE;\n  private int minIdle = DEFAULT_MIN_IDLE;\n\n  public ResourcePoolConfig(String name, Integer maxTotal, Integer maxIdle, Integer minIdle) {\n\t  // 一些参数校验逻辑\n  }\n}\n```\n\n不管可选或必选配置项，我们都用构造方法配置这些参数时，就叫做折叠构造函数模式（Telescoping Constructor Pattern）。\n\n```java\npublic class ResourcePoolConfig {\n  //...\n  public ResourcePoolConfig(String name) {/***/}\n  public ResourcePoolConfig(String name, Integer maxTotal) {/***/}\n  public ResourcePoolConfig(String name, Integer maxIdle, Integer minIdle) {/***/}\n  public ResourcePoolConfig(String name, Integer maxTotal, Integer maxIdle, Integer minIdle) {/***/}\n  //...\n}\n```\n\n我们发现一些问题：\n\n- 当 `ResourcePoolConfig` 的必选配置项变为 8 个、10 个时我们的构造函数会越来越长\n- 当出现多个可选配置项时，我们构造函数的重载方法会越来越多。如果一些参数类型几乎都相似，那么参数传递时很容易传混或出错。\n\n对于可选配置项的一个简单的解决方式为使用 `setXXX()` 函数来给成员变量赋值，以替代冗长繁琐的构造函数。这也是所谓的 Java Bean 模式。\n\n```java\npublic class ResourcePoolConfig {\n  private static final int DEFAULT_MAX_TOTAL = 8;\n  private static final int DEFAULT_MAX_IDLE = 8;\n  private static final int DEFAULT_MIN_IDLE = 0;\n\n  private String name;\n  private int maxTotal = DEFAULT_MAX_TOTAL;\n  private int maxIdle = DEFAULT_MAX_IDLE;\n  private int minIdle = DEFAULT_MIN_IDLE;\n\n  // name 必填，所以我们把它放在构造函数中\n  public ResourcePoolConfig(String name) {\n    if (StringUtils.isBlank(name)) {\n      throw new IllegalArgumentException(\"name should not be empty.\");\n    }\n    this.name = name;\n  }\n\n  public void setMaxTotal(int maxTotal) {/***/}\n\n  public void setMaxIdle(int maxIdle) {/***/}\n\n  public void setMinIdle(int minIdle) {/***/}\n  //...省略getter方法...\n}\n```\n\n但使用 `setXXX()` 函数还存在一些问题：\n\n- 必填的配置不能可以使用 `setXXX()` 函数，因为如果各个必填配置存在互相依赖校验，这种校验逻辑无法实现。所以必选项配置的问题还是没有解决。\n- 不能保证参数传递的先后次序。\n- 一旦必填的配置多了起来，构造参数的列表还是会长起来。\n- 如果我们希望 `ResourcePoolConfig` 是不可变的对象，那么 `setXXX()` 就会出现问题。\n\n为解决上述问题，Builder 模式诞生。\n\n代码如下：\n\n```java\npublic class Product{\n  private int required_param_1 = DEFAULT_VALUE;\n  private int optional_param_2 = DEFAULT_VALUE;\n  private int optional_param_3 = DEFAULT_VALUE;\n  // 私有的构造函数\n  private Product(Builder builder){\n\t  this.required_param_1 = builder.required_param_1;\n\t  this.optional_param_2 = builder.optional_param_2;\n\t  this.optional_param_3 = builder.optional_param_3;\n  }\n  // 专属于特定产品的内部Builder，拥有和Product一样的参数\n  public static class Builder{\n    private int required_param_1 = DEFAULT_VALUE;\n    private int optional_param_2 = DEFAULT_VALUE;\n    private int optional_param_3 = DEFAULT_VALUE;\n    // 必要参数使用创建者模式构建\n    public Builder(int required_param_1){\n\t    this.required_param_1 = required_param_1;\n    }\n    // 可选参数使用 set 方式设置。返回值返回 Builder 以供链式调用。\n    public Builder setOptionalParam2(int val){\n\t    this.optional_param_2 = val;\n\t    return this;\n    }\n    public Builder setOptionalParam3(int val){\n\t    this.optional_param_3 = val;\n\t    return this;\n    }\n    public Product build(){\n\t    // 一些验证逻辑可以放在此处\n\t    return new Product(this);\n    }\n  }\n  // 此处省略 getter 方法\n}\n```\n\n使用方式：\n\n```java\n// 链式调用\nProduct product = new Product.Builder(val1)\n\t.setOptionalParam2(val2)\n\t.setOptionalParam3(val3)\n\t.build();\n```\n\n与经典的建造者模式相比，这种模式把 `Director` 角色给省略了，另外在内部静态 `Builder` 的构建方法中返回了 `this` 自身，方便流式调用。\n\n# Lombok 中的 `@Builder` 注解\n\nLombok 是一个常用的 Java 库，通过添加注解可自动实现建造者模式代码或 Getter、Setter 等。其中，`@Builder` 注解可以用来实现建造者模式，省略手动编写建造者模式的代码。\n\n```java\nimport lombok.Builder;\nimport lombok.ToString;\n\n@Builder\n@ToString\npublic class Person {\n    private String name;\n    private int age;\n    private String address;\n    private String email;\n    private String phone;\n\n\t// Lombok 中的 @Builder 注解会在编译时自动生成一个名为 Person.PersonBuilder 的内部类\n\t/*******************************\n\tpublic static class Builder {\n        private String name;\n        private int age;\n        private String address;\n\n        public Builder() {}\n\n        public Builder name(String name) {\n            this.name = name;\n            return this;\n        }\n\n        public Builder age(int age) {\n            this.age = age;\n            return this;\n        }\n\n        public Builder address(String address) {\n            this.address = address;\n            return this;\n        }\n\n\t\t// ... etc.\n\n        public Person build() {\n            return new Person(this);\n        }\n    }\n    ************************************/\n}\n```\n\n使用方式：\n\n```java\nPerson person = Person.builder()\n\t .name(\"王五\")\n\t .age(28)\n\t .address(\"上海市浦东新区\")\n\t .email(\"wangwu@example.com\")\n\t .phone(\"13600000000\")\n\t .build();\nSystem.out.println(person);\n```\n\n\n# 模式的对比与选用\n\n相关的设计模式：\n\n- [[组合模式：树形结构|组合模式]]：有些情况下建造者模式生成的实例构成了组合模式。\n- 门面模式 Facade：\n\t- 在建造者模式中，`Director` 角色通过组合 `Builder` 角色中的复杂方法向外部提供可以简单生成实例的接口（API）（相当于示例程序中的 `construct` 方法）。\n\t- Facade 模式中的 Facade 角色则是通过组合内部模块向外部提供可以简单调用的接口（API）。\n\n## 建造者模式与工厂模式的对比\n\n比较：\n\n- 建造者模式：让建造者类来负责对象的创建工作。\n- [[类的工厂|工厂模式]]：工厂类负责对象的创建工作。创建不同但相关类型的对象（继承同一父类或接口 `Product` 的一组子类），由给定参数决定创建哪种类型的对象。Factory 抽象类定义的是一个实例产生的具体流程，子类实现具体的处理。\n\n模式选用：\n\n- 当创造一个对象需要很多步骤时 , 适合使用建造者模式\n- 当创造一个对象只需要一个简单的方法就可以完成，适合使用工厂模式\n\n## 建造者模式与抽象工厂模式的对比\n\nBuilder 模式和 Abstract Factory 模式都用于生成复杂的实例。\n\n- Builder 模式则是分阶段地制作复杂实例。\n- Abstract Factory 模式通过调用抽象产品的接口（API）来组装抽象产品，生成具有复杂结构的实例。抽象工厂模式强调的是产品族的创建，即相关的产品一起被创建出来，而建造者模式强调的是一个复杂对象的创建，即它的各个部分逐步被创建出来。\n\n# 后记\n\n> 🎂今天是博主的生日~\n\n没搞明白的问题：\n\n- [ ] GoF 中的建造者模式的具体应用在哪里？它能解决构造参数中的必选参数和可选参数的问题吗？\n\n# 参考与归档\n\n## 本文 PlantUML 代码归档\n\n```plantuml\nclass Client\n\nclass Director{\n\tbuilder\n\t{method} build\n}\n\nabstract class Builder{\n\tproduct\n\t{method} {abstract} buildPart1\n\t{method} {abstract} buildPart2\n\t{method} {abstract} buildPart3\n\t{method} {abstract} getProduct\n}\n\nclass ConcreteBuilder{\n\t{method} buildPart1\n\t{method} buildPart2\n\t{method} buildPart3 \n\t{method} getProduct\n}\n\nclass Product{}\n\nClient -> Director : Uses\nDirector o- Builder\nBuilder <|-- ConcreteBuilder\nClient --> ConcreteBuilder : Uses\nBuilder *- Product\n```\n\n\n## 参考文章\n\n- 《图解设计模式》第七章 Builder 模式\n- [极客时间专栏 - 设计模式之美 - 王争](https://gitee.com/buxsren/design-pattern-books/blob/master/docs/199674.md)\n- [设计模式第10讲——建造者模式（Builder）-CSDN博客](https://blog.csdn.net/weixin_45433817/article/details/131175862)\n- [秒懂设计模式之建造者模式（Builder pattern） - 知乎](https://zhuanlan.zhihu.com/p/58093669?share_code=3o79BrAEDdcS&utm_psn=1921745149165283260)\n- [建造者模式（Builder Pattern）详解-CSDN博客](https://blog.csdn.net/yk_dflkg/article/details/147340859)\n- 这篇文章可能有误，请仔细甄别：[Java设计模式：建造者模式之经典与流式的三种实现（四）-阿里云开发者社区](https://developer.aliyun.com/article/1549784)\n","categories":[{"name":"高质量代码及设计模式","api":"api/categories/高质量代码及设计模式.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"设计模式","api":"api/tags/设计模式.json"}]},"api":"api/posts/p/5b8a11ae.json"}