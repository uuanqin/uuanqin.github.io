{"data":{"title":"SpringBoot 项目的上线方式","slug":"技术学习/SpringBoot 项目的上线方式","description":"备忘 SpringBoot 后端项目的部署方式","date":"2024-07-23T16:10:09.000Z","updated":"2025-06-11T16:08:12.779Z","language":"zh-CN","comments":true,"url":"p/b1ef28a0/","cover":"https://cdn.gallery.uuanqin.top/img/20240723234813.webp","images":[],"content":"<h1 id=\"项目构建与多环境\"><a class=\"markdownIt-Anchor\" href=\"#项目构建与多环境\"></a> 项目构建与多环境</h1>\n<p>多环境的分类：</p>\n<ol>\n<li>本地环境。可以理解为自己的电脑。</li>\n<li>开发环境。开发人员远程开发，连接同一台机器。</li>\n<li>测试环境：用于完成单元测试 / 性能测试 / 功能测试 / 系统集成测试，拥有独立的数据库、独立的服务器</li>\n<li>预发布环境：和正式环境一致，正式数据库，更严谨。</li>\n<li>正式环境：线上的，公开对外访问的项目。尽量不要改动。</li>\n<li>沙箱环境：用于实验的环境。</li>\n</ol>\n<p>通过配置环境区分多环境：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">application.yml  <span class=\"comment\"># 公共配置</span></span><br><span class=\"line\">application-prod.yml</span><br><span class=\"line\">application-test.yml</span><br></pre></td></tr></table></figure>\n<p>IDEA Maven 命令面板选择并执行对应项目的：<code>Lifecycle</code>-&gt;<code>package</code> 命令进行打包。命令执行完成后将在 target 目录生成 jar 包。</p>\n\n<div class=\"callout\" data-callout=\"hint\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>\n</div>\n<div class=\"callout-title-inner\">SpringBoot 项目打包操作依赖</div>\n</div>\n<div class=\"callout-content\"><p>进行打包时需要引入 <code>spring-boot-maven-plugin</code>。不过基于官方骨架创建项目，会自动添加这个插件。</p>\n</div></div><blockquote>\n<p>打包时可以在 IDEA 的 Maven 命令面板中选择 <code>Skip Tests</code> 禁掉单元测试。</p>\n</blockquote>\n<h1 id=\"本地部署\"><a class=\"markdownIt-Anchor\" href=\"#本地部署\"></a> 本地部署</h1>\n<p>执行以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version <span class=\"comment\"># 确保Java可用</span></span><br><span class=\"line\"><span class=\"comment\"># 在启动时传入环境变量</span></span><br><span class=\"line\">java -jar .\\my-backend-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod <span class=\"comment\"># 指定环境为prod</span></span><br></pre></td></tr></table></figure>\n<p>这样 SpringBoot 项目就会使用 <code>application-prod.yml</code> 的配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 观察 Springboot 启动日志可以看到</span><br><span class=\"line\">The following 1 profile is active: &quot;prod&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"linuxnginx-部署\"><a class=\"markdownIt-Anchor\" href=\"#linuxnginx-部署\"></a> Linux+Nginx 部署</h1>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查java安装情况</span></span><br><span class=\"line\">java --version</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># openjdk version &quot;1.8.0_402&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># OpenJDK Runtime Environment (build 1.8.0_402-b06)</span></span><br><span class=\"line\"><span class=\"comment\"># OpenJDK 64-Bit Server VM (build 25.402-b06, mixed mode)</span></span><br></pre></td></tr></table></figure>\n<p>把打好的 jar 包直接扔上服务器。假设我扔在这个目录中：<code>/var/www/temp_test</code>。必要时给予权限：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> a+x my-backend-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>也可以是：本地代码上传到仓库，然后服务器使用 Git 拉取代码，在服务器中运行 maven （服务器中需提前安装好 maven，并配置好仓库源）进行打包操作 <code>mvn package -DskipTests</code>。</p>\n</blockquote>\n<p>Linux 运行命令以启动项目（后台运行）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">nohup</span> java -jar ./my-backend-0.0.1-SNAPSHOT.jar &amp;</span><br></pre></td></tr></table></figure>\n<p>查看运行的程序：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">jobs</span> <span class=\"comment\"># 查看运行程序</span></span><br><span class=\"line\">netstat -ntlp <span class=\"comment\"># 查看占用端口情况</span></span><br><span class=\"line\">jps <span class=\"comment\"># 查看运行的java程序</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于 nohup 命令详看：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/91c1c44b/\"><span class=\"yukari\">站内文章</span>Linux 使用 nohup 后台运行程序</a></p>\n</blockquote>\n<p>Nginx 配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\tserver_name\tprojects.uuanqin.top; ;</span><br><span class=\"line\">\t# 前端</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\troot /var/www/temp_test/myapp;</span><br><span class=\"line\">\t\tindex\tindex.html\tindex.htm;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t# 后端 顺便解决跨域</span><br><span class=\"line\">\tlocation /api &#123;</span><br><span class=\"line\">\t\tproxy_pass http://localhost:8123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>前端项目部署方式可看：<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/3d8f61f0/\"><span class=\"yukari\">站内文章</span>Ant Design Pro 前端项目初始化到部署上线</a></p>\n</blockquote>\n<h1 id=\"docker-容器部署\"><a class=\"markdownIt-Anchor\" href=\"#docker-容器部署\"></a> Docker 容器部署</h1>\n<p>Docker 是容器，可以将项目的环境（比如 java、nginx）和项目的代码一起打包成镜像，所有具有权限的用户都能下载镜像，更容易分发和移植。</p>\n<p>启动项目时不需要敲更多的命令，而是通过下载镜像、启动镜像即可。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --version <span class=\"comment\"># 验证Docker是否安装成功</span></span><br></pre></td></tr></table></figure>\n<p>Dockerfile 用于指定构建 Docker 镜像的方法，一般情况下不需要完全从 0 自己写，可以去 github、gitee 等托管平台参考同类项目（比如 springboot）参照写法。</p>\n<p>Dockerfile 一般放置在项目的根目录中：</p>\n<ul>\n<li><code>FROM</code>：依赖的基础镜像</li>\n<li><code>WORKDIR</code>：工作目录</li>\n<li><code>COPY</code>：从本机复制文件</li>\n<li><code>RUN</code>：执行命令</li>\n<li><code>CMD</code> / <code>ENTRYPOINT</code>：指定运行容器时默认执行的命令，<code>ENTRYPOINT</code> 可以附加额外参数</li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Docker 镜像构建</span></span><br><span class=\"line\"><span class=\"comment\"># 依赖于基础镜像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> maven:<span class=\"number\">3.5</span>-jdk-<span class=\"number\">8</span>-alpine as builder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Copy local code to the container image.</span></span><br><span class=\"line\"><span class=\"comment\"># 指定工作目录</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"comment\"># 本地把代码复制到容器中（&quot;.&quot;指的是当前目录&quot;/app&quot;）</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> pom.xml .</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> src ./src</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置Maven源提升下载速度</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> settings.xml /usr/share/maven/conf/settings.xml</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Build a release artifact.</span></span><br><span class=\"line\"><span class=\"comment\"># 执行Maven的打包命令</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> mvn package -DskipTests</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Run the web service on container startup.</span></span><br><span class=\"line\"><span class=\"comment\"># 一些参数可以在启动Docker时覆盖掉，这里可以把环境参数写死</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/app/target/my-backend-0.0.1-SNAPSHOT.jar&quot;</span>,<span class=\"string\">&quot;--spring.profiles.active=prod&quot;</span>]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Dockerfile 编写时，可以跳过 maven 的打包命令，直接将打好的 jar 包放入容器中也可以。这样还能减少体积，提升构建速度。</p>\n</blockquote>\n<p>因为上面的 Dockerfile 中我们交给容器执行 maven 的打包命令，但是容器中 maven 仓库源为默认地址，下载速度极慢。我们需要配置 Maven 的下载源更换为阿里的镜像仓库。在项目主目录加上 <code>settings.xml</code> 文件，文件内容为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                      http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">localRepository</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">interactiveMode</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">usePluginRegistry</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">offline</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">pluginGroups</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servers</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyunmaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>阿里云公共仓库<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>repo1<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>central repo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyunmaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>apache snapshots<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>阿里云阿帕奇仓库<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/apache-snapshots<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">proxies</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activeProfiles</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyunmaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyunmaven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span>default<span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>MavenCentral<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyunmavenApache<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/apache-snapshots<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里演示在服务器中制作镜像。首先将代码上传到 Linux 服务器中。构建镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 后端</span></span><br><span class=\"line\">docker build -t my-backend:v0.0.1 . <span class=\"comment\"># -t 打标签，&quot;.&quot;表示使用当前的目录的Dockerfile构建镜像</span></span><br></pre></td></tr></table></figure>\n<p>运行镜像：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 后端</span></span><br><span class=\"line\">docker run -p 8223:8123 -d my-backend:v0.0.1 <span class=\"comment\"># -d 表示后台运行</span></span><br></pre></td></tr></table></figure>\n<p>附 docker 常用命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps <span class=\"comment\"># 查看运行的镜像</span></span><br><span class=\"line\">docker <span class=\"built_in\">kill</span> &lt;CONTAINER...&gt; <span class=\"comment\"># 杀死运行中的容器</span></span><br><span class=\"line\">docker logs &lt;CONTAINER&gt; <span class=\"comment\"># 追踪容器的日志输出</span></span><br><span class=\"line\">docker images <span class=\"comment\"># 查看镜像</span></span><br><span class=\"line\">docker rmi -f IMAGE [IMAGE...] <span class=\"comment\"># 移除镜像</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"其他方式\"><a class=\"markdownIt-Anchor\" href=\"#其他方式\"></a> 其他方式</h1>\n<h2 id=\"宝塔-linux-部署\"><a class=\"markdownIt-Anchor\" href=\"#宝塔-linux-部署\"></a> 宝塔 Linux 部署</h2>\n<p>宝塔是一款 Linux 运维面板软件。可以更方便管理服务器软件或部署项目。</p>\n<p>官网下载：<a href=\"https://www.bt.cn/new/download.html\">宝塔面板下载，免费全能的服务器运维软件 (bt.cn)</a></p>\n<p>建议在纯新系统安装宝塔面板，不支持已经部署项目/环境的系统进行安装。</p>\n<h2 id=\"容器托管平台的部署\"><a class=\"markdownIt-Anchor\" href=\"#容器托管平台的部署\"></a> 容器托管平台的部署</h2>\n<p>容器平台：</p>\n<ul>\n<li>云服务商的容器平台（腾讯云、阿里云）</li>\n<li>面向某个领域的容器平台（前端 / 后端微信云托管）</li>\n</ul>\n<p>使用容器平台的优点：</p>\n<ul>\n<li>不需要购买云服务器</li>\n<li>不用输命令来操作，更方便省事</li>\n<li>不用在控制台操作，更傻瓜式、更简单</li>\n<li>大厂运维，比自己运维更省心</li>\n<li>额外的能力，比如监控、告警、其他（存储、负载均衡、自动扩缩容、流水线）</li>\n</ul>\n<p>微信云托管：<a href=\"https://cloud.weixin.qq.com/cloudrun/\">微信云托管 (qq.com)</a></p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://yuyuanweb.feishu.cn/wiki/DclswHMhkiRXckkWve1ckXTonDh\">知识星球·编程导航 - 用户中心项目</a></li>\n<li><a href=\"https://www.bilibili.com/read/cv16179200/\">如何部署网站？来比比谁的方法多 - 哔哩哔哩 (bilibili.com)</a></li>\n<li><a href=\"https://www.bt.cn/new/download.html\">宝塔面板下载，免费全能的服务器运维软件 (bt.cn)</a></li>\n<li><a href=\"https://blog.csdn.net/m0_72578531/article/details/136341961\">Linux安装和jdk教程和更换jdk版本教程_linux jdk升级-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/SEUNRain/article/details/122427093\">解决centos8下安装docker提示“为 repo ‘docker-ce-stable‘ 下载元数据失败“的问题_error: 为仓库 ‘docker-ce-stable’ 下载元数据失败 : cannot dow-CSDN博客</a></li>\n<li><a href=\"https://blog.csdn.net/qq_37865672/article/details/131919182\">dockerfile构建镜像报错 ERROR [internal] load metadata for docker.io/library/php:7.4-apache_=&gt; error [internal] load metadata for registry.cn–CSDN博客</a></li>\n<li><a href=\"https://www.cnblogs.com/zecoki/articles/18269713/docker\">Docker官方2024.6停服后可用国内镜像地址更新 - Z科技 - 博客园 (cnblogs.com)</a></li>\n<li><a href=\"https://blog.csdn.net/BlingblingFu/article/details/120769433\">将Maven的Docker镜像修改为国内源_docker mvn 换源-CSDN博客</a></li>\n<li><a href=\"https://www.jianshu.com/p/bcce4f53d186\">在dockerfile中把maven的下载源更换为阿里的镜像仓库 - 简书 (jianshu.com)</a></li>\n</ul>\n","raw":"---\ntitle: SpringBoot 项目的上线方式\ntags:\n  - SpringBoot\n  - Nginx\n  - 宝塔\n  - Linux\n  - Java\n  - Spring\n  - Docker\ncover: 'https://cdn.gallery.uuanqin.top/img/20240723234813.webp'\ndescription: 备忘 SpringBoot 后端项目的部署方式\nabbrlink: b1ef28a0\ncategories:\n  - 技术学习\ndate: 2024-07-24 00:10:09\ntop_img:\n---\n\n# 项目构建与多环境\n\n多环境的分类：\n\n1. 本地环境。可以理解为自己的电脑。\n2. 开发环境。开发人员远程开发，连接同一台机器。\n3. 测试环境：用于完成单元测试 / 性能测试 / 功能测试 / 系统集成测试，拥有独立的数据库、独立的服务器\n4. 预发布环境：和正式环境一致，正式数据库，更严谨。\n5. 正式环境：线上的，公开对外访问的项目。尽量不要改动。\n6. 沙箱环境：用于实验的环境。\n\n通过配置环境区分多环境：\n\n```sh\napplication.yml  # 公共配置\napplication-prod.yml\napplication-test.yml\n```\n\nIDEA Maven 命令面板选择并执行对应项目的：`Lifecycle`->`package` 命令进行打包。命令执行完成后将在 target 目录生成 jar 包。\n\n> [!hint] SpringBoot 项目打包操作依赖\n> 进行打包时需要引入 `spring-boot-maven-plugin`。不过基于官方骨架创建项目，会自动添加这个插件。\n\n> 打包时可以在 IDEA 的 Maven 命令面板中选择 `Skip Tests` 禁掉单元测试。\n\n# 本地部署\n\n执行以下命令：\n\n```sh\njava -version # 确保Java可用\n# 在启动时传入环境变量\njava -jar .\\my-backend-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod # 指定环境为prod\n```\n\n这样 SpringBoot 项目就会使用 `application-prod.yml` 的配置。\n\n```\n# 观察 Springboot 启动日志可以看到\nThe following 1 profile is active: \"prod\"\n```\n\n# Linux+Nginx 部署\n\n```sh\n# 检查java安装情况\njava --version\n\n# openjdk version \"1.8.0_402\"\n# OpenJDK Runtime Environment (build 1.8.0_402-b06)\n# OpenJDK 64-Bit Server VM (build 25.402-b06, mixed mode)\n```\n\n把打好的 jar 包直接扔上服务器。假设我扔在这个目录中：`/var/www/temp_test`。必要时给予权限：\n\n```sh\nchmod a+x my-backend-0.0.1-SNAPSHOT.jar\n```\n\n> 也可以是：本地代码上传到仓库，然后服务器使用 Git 拉取代码，在服务器中运行 maven （服务器中需提前安装好 maven，并配置好仓库源）进行打包操作 `mvn package -DskipTests`。\n\nLinux 运行命令以启动项目（后台运行）：\n\n```sh\nnohup java -jar ./my-backend-0.0.1-SNAPSHOT.jar &\n```\n\n查看运行的程序：\n\n```sh\njobs # 查看运行程序\nnetstat -ntlp # 查看占用端口情况\njps # 查看运行的java程序\n```\n\n> 关于 nohup 命令详看：[[Linux 使用 nohup 后台运行程序]]\n\nNginx 配置文件：\n\n```\nserver{\n\tserver_name\tprojects.uuanqin.top; ;\n\t# 前端\n\tlocation / {\n\t\troot /var/www/temp_test/myapp;\n\t\tindex\tindex.html\tindex.htm;\n\t}\n\t# 后端 顺便解决跨域\n\tlocation /api {\n\t\tproxy_pass http://localhost:8123;\n\t}\n}\n```\n\n> 前端项目部署方式可看：[[Ant Design Pro 前端项目初始化到部署上线]]\n\n# Docker 容器部署\n\nDocker 是容器，可以将项目的环境（比如 java、nginx）和项目的代码一起打包成镜像，所有具有权限的用户都能下载镜像，更容易分发和移植。\n\n启动项目时不需要敲更多的命令，而是通过下载镜像、启动镜像即可。\n\n```sh\ndocker --version # 验证Docker是否安装成功\n```\n\nDockerfile 用于指定构建 Docker 镜像的方法，一般情况下不需要完全从 0 自己写，可以去 github、gitee 等托管平台参考同类项目（比如 springboot）参照写法。\n\nDockerfile 一般放置在项目的根目录中：\n\n- `FROM`：依赖的基础镜像\n- `WORKDIR`：工作目录\n- `COPY`：从本机复制文件\n- `RUN`：执行命令\n- `CMD` / `ENTRYPOINT`：指定运行容器时默认执行的命令，`ENTRYPOINT` 可以附加额外参数\n\n\n```dockerfile\n# Docker 镜像构建\n# 依赖于基础镜像\nFROM maven:3.5-jdk-8-alpine as builder\n\n# Copy local code to the container image.\n# 指定工作目录\nWORKDIR /app\n# 本地把代码复制到容器中（\".\"指的是当前目录\"/app\"）\nCOPY pom.xml .\nCOPY src ./src\n\n# 配置Maven源提升下载速度\nCOPY settings.xml /usr/share/maven/conf/settings.xml\n\n# Build a release artifact.\n# 执行Maven的打包命令\nRUN mvn package -DskipTests\n\n# Run the web service on container startup.\n# 一些参数可以在启动Docker时覆盖掉，这里可以把环境参数写死\nCMD [\"java\",\"-jar\",\"/app/target/my-backend-0.0.1-SNAPSHOT.jar\",\"--spring.profiles.active=prod\"]\n\n```\n\n> Dockerfile 编写时，可以跳过 maven 的打包命令，直接将打好的 jar 包放入容器中也可以。这样还能减少体积，提升构建速度。\n\n因为上面的 Dockerfile 中我们交给容器执行 maven 的打包命令，但是容器中 maven 仓库源为默认地址，下载速度极慢。我们需要配置 Maven 的下载源更换为阿里的镜像仓库。在项目主目录加上 `settings.xml` 文件，文件内容为：\n\n```xml\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n    <localRepository/>\n    <interactiveMode/>\n    <usePluginRegistry/>\n    <offline/>\n    <pluginGroups/>\n    <servers/>\n    <mirrors>\n        <mirror>\n            <id>aliyunmaven</id>\n            <mirrorOf>central</mirrorOf>\n            <name>阿里云公共仓库</name>\n            <url>https://maven.aliyun.com/repository/central</url>\n        </mirror>\n        <mirror>\n            <id>repo1</id>\n            <mirrorOf>central</mirrorOf>\n            <name>central repo</name>\n            <url>http://repo1.maven.org/maven2/</url>\n        </mirror>\n        <mirror>\n            <id>aliyunmaven</id>\n            <mirrorOf>apache snapshots</mirrorOf>\n            <name>阿里云阿帕奇仓库</name>\n            <url>https://maven.aliyun.com/repository/apache-snapshots</url>\n        </mirror>\n    </mirrors>\n    <proxies/>\n    <activeProfiles/>\n    <profiles>\n        <profile>\n            <repositories>\n                <repository>\n                    <id>aliyunmaven</id>\n                    <name>aliyunmaven</name>\n                    <url>https://maven.aliyun.com/repository/public</url>\n                    <layout>default</layout>\n                    <releases>\n                        <enabled>true</enabled>\n                    </releases>\n                    <snapshots>\n                        <enabled>true</enabled>\n                    </snapshots>\n                </repository>\n                <repository>\n                    <id>MavenCentral</id>\n                    <url>http://repo1.maven.org/maven2/</url>\n                </repository>\n                <repository>\n                    <id>aliyunmavenApache</id>\n                    <url>https://maven.aliyun.com/repository/apache-snapshots</url>\n                </repository>\n            </repositories>\n        </profile>\n    </profiles>\n</settings>\n\n```\n\n这里演示在服务器中制作镜像。首先将代码上传到 Linux 服务器中。构建镜像：\n\n```sh\n# 后端\ndocker build -t my-backend:v0.0.1 . # -t 打标签，\".\"表示使用当前的目录的Dockerfile构建镜像\n```\n\n运行镜像：\n\n```sh\n# 后端\ndocker run -p 8223:8123 -d my-backend:v0.0.1 # -d 表示后台运行\n```\n\n附 docker 常用命令：\n\n```sh\ndocker ps # 查看运行的镜像\ndocker kill <CONTAINER...> # 杀死运行中的容器\ndocker logs <CONTAINER> # 追踪容器的日志输出\ndocker images # 查看镜像\ndocker rmi -f IMAGE [IMAGE...] # 移除镜像\n```\n\n\n# 其他方式\n\n## 宝塔 Linux 部署\n\n宝塔是一款 Linux 运维面板软件。可以更方便管理服务器软件或部署项目。\n\n官网下载：[宝塔面板下载，免费全能的服务器运维软件 (bt.cn)](https://www.bt.cn/new/download.html)\n\n建议在纯新系统安装宝塔面板，不支持已经部署项目/环境的系统进行安装。\n\n## 容器托管平台的部署\n\n容器平台：\n\n- 云服务商的容器平台（腾讯云、阿里云）\n- 面向某个领域的容器平台（前端 / 后端微信云托管）\n\n使用容器平台的优点：\n\n- 不需要购买云服务器\n- 不用输命令来操作，更方便省事\n- 不用在控制台操作，更傻瓜式、更简单\n- 大厂运维，比自己运维更省心\n- 额外的能力，比如监控、告警、其他（存储、负载均衡、自动扩缩容、流水线）\n\n微信云托管：[微信云托管 (qq.com)](https://cloud.weixin.qq.com/cloudrun/)\n\n# 本文参考\n- [知识星球·编程导航 - 用户中心项目](https://yuyuanweb.feishu.cn/wiki/DclswHMhkiRXckkWve1ckXTonDh)\n- [如何部署网站？来比比谁的方法多 - 哔哩哔哩 (bilibili.com)](https://www.bilibili.com/read/cv16179200/)\n- [宝塔面板下载，免费全能的服务器运维软件 (bt.cn)](https://www.bt.cn/new/download.html)\n- [Linux安装和jdk教程和更换jdk版本教程_linux jdk升级-CSDN博客](https://blog.csdn.net/m0_72578531/article/details/136341961)\n- [解决centos8下安装docker提示“为 repo ‘docker-ce-stable‘ 下载元数据失败“的问题_error: 为仓库 'docker-ce-stable' 下载元数据失败 : cannot dow-CSDN博客](https://blog.csdn.net/SEUNRain/article/details/122427093)\n- [dockerfile构建镜像报错 ERROR [internal] load metadata for docker.io/library/php:7.4-apache_=> error [internal] load metadata for registry.cn--CSDN博客](https://blog.csdn.net/qq_37865672/article/details/131919182)\n- [Docker官方2024.6停服后可用国内镜像地址更新 - Z科技 - 博客园 (cnblogs.com)](https://www.cnblogs.com/zecoki/articles/18269713/docker)\n- [将Maven的Docker镜像修改为国内源_docker mvn 换源-CSDN博客](https://blog.csdn.net/BlingblingFu/article/details/120769433)\n- [在dockerfile中把maven的下载源更换为阿里的镜像仓库 - 简书 (jianshu.com)](https://www.jianshu.com/p/bcce4f53d186)\n","categories":[{"name":"技术学习","api":"api/categories/技术学习.json"}],"tags":[{"name":"Nginx","api":"api/tags/Nginx.json"},{"name":"Linux","api":"api/tags/Linux.json"},{"name":"Java","api":"api/tags/Java.json"},{"name":"SpringBoot","api":"api/tags/SpringBoot.json"},{"name":"宝塔","api":"api/tags/宝塔.json"},{"name":"Spring","api":"api/tags/Spring.json"},{"name":"Docker","api":"api/tags/Docker.json"}]},"api":"api/posts/p/b1ef28a0.json"}