{"title":"以作为答案边界的方式理解双指针","tags":["LeetCode","Java","双指针","贪心"],"cover":"https://cdn.gallery.uuanqin.top/img/202409231544166.webp","description":"这样就能放心移动指针了","katex":true,"categories":["算法与数据结构"],"abbrlink":"3fb6bb6b","date":"2024-10-01T18:58:55.000Z","top_img":null,"summary":"本文题目难度标识：🟩简单，🟨中等，🟥困难。 热身：从「两数之和」问题铺垫 「两数之和」在 LeetCode 编号为 1，是题库的第一道题目。 > [!example] 题目：🟩 1. 两数之和 - 力扣（LeetCode） > 给定一个整数数组 `nums` 和一个整数目标值 `target`，请你在该数组中找出 和为目标值 `target` 的那 两个 整数，并返回它们的数组下标。 > > 你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。 > > 你可以按任意顺序返回答案。 暴力方法：最容易想到的方法，枚举数组中的每一个数 `x`，寻找数组中是否存在 `target - x`。 时间复杂度：$O(N^2)$，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。 空间复杂度：$O(1)$。 哈希表：使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 $O(N)$ 降低到 $O(1)$。 时间复杂度：$O(N)$，其中 N 是数组中的元素数量。对于每一个元素 x，我们可以 $O(1)$ 地寻找 target - x。 空间复杂度：$O(N)$，其中 N 是数组中的元素数量。主要为哈希表的开销。 排序 + 双指针 > [!example] 题目：🟨 167. 两数之和 II - 输入有序数组 - 力扣（LeetCode） > 给你一个下标从 1 开始的整数数组 `numbers` ，该数组已按 非递减顺序 排列 ，请你从数组中找出满足相加之和等于目标数 `target` 的两个数。如果设这两个数分别是 `numbers[index1]` 和 `numbers[index2]` ，则 `1 <= index1 < index2 <= numbers.length` 。 > > 以长度为 2 的整数数组 `[index1, index2]` 的形式返回这两个整数的下标 index1 和 index2。 > > 你可以假设每个输入 只对应唯一的答案 ，而且你 不可以 重复使用相同的元素。 > > 你所设计的解决方案必须只使用常量级的额外空间。 我们可以使用上题「两数之和」中的方法解决，但是这道题的特点在于输入是一个有序的数组，我们可以利用这一点进行方法优化。..."}