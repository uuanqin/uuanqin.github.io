{"title":"为什么二分查找总是写不对？","tags":["二分查找","Java","Golang","LeetCode"],"cover":"https://cdn.gallery.uuanqin.top/img/202501250127271.webp","description":"把握好循环不变量这个关键点就行","categories":["算法与数据结构"],"abbrlink":"817735b","katex":true,"date":"2025-01-25T01:21:35.000Z","top_img":null,"summary":"> [!cite] > 尽管第一个 二分查找算法 于 1946 年出现，然而第一个完全正确的二分查找算法实现直到 1962 年才出现。 > > —— Donald E.Knuth 《计算机程序设计艺术》第 3 卷《排序和查找》 二分查找的逻辑本身并不复杂，但是在实际写代码的时候我们总是出错，要么少写个等于号，要么漏掉一个元素。出现这些问题的原因在于没有把握好对循环不变量的掌控。当对自己写出的循环没把握时，各种细节问题会频繁出现，从而成为我的二分恐惧症、快排恐惧症以及链表恐惧症的原因之一。 本文通过红蓝染色法，通过对循环不变量的正确理解快速写出正确的二分查找代码。 本文题目难度标识：🟩简单，🟨中等，🟥困难。 本文例题 > [!example] 🟨 34. 在排序数组中查找元素的第一个和最后一个位置 - 力扣（LeetCode） > 给你一个按照非递减顺序排列的整数数组 `nums`，和一个目标值 `target`。请你找出给定目标值在数组中的开始位置和结束位置。 > > 如果数组中不存在目标值 `target`，返回 `[-1, -1]`。 > > 你必须设计并实现时间复杂度为 $O(\\log n)$ 的算法解决此问题。 利用数组有序的性质我们可以写出二分查找算法。 在解这道题之前我们先考虑以下子问题：给定一个按照非递减顺序排列的整数数组 `nums` 和一个目标值 `target`，找出给定目标值在数组中的开始位置，即大于等于 `target` 的第一个数所表示的下标。 > 这个子问题和 🟩 35. 搜索插入位置 - 力扣（LeetCode） 十分类似。 三种区间写法 在以下的代码中，`l` 表示左指针，`r` 表示右指针，`mid` 表示中点，指向被询问的数。 > [!note] 中点选取的写法以防溢出 > > 在选取中点时我们通常有：`int mid = (l+r)/2;`，但是为了避免在一些语言中（C、Java）加法出现溢出的状况，我们还可以这样写：`int mid = l+(r-l)/2;`。..."}