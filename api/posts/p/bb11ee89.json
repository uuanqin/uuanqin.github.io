{"data":{"title":"Java 编写其他输入输出模式","slug":"计算机语言/Java 编写其他输入输出模式","description":"刷题前看一遍，迅速记忆 ACM 模式的输入输出","date":"2024-10-01T16:03:13.000Z","updated":"2025-06-24T07:06:25.319Z","language":"zh-CN","comments":true,"url":"p/bb11ee89/","cover":"https://cdn.gallery.uuanqin.top/img/202410020312167.webp","images":[],"content":"<p>相信我们已经非常熟悉 LeetCode 那种「<a class=\"uuanqin-bilink\" target=\"_blank\" href=\"/p/c73083b9/\"><span class=\"yukari\">站内文章</span>核心代码</a>」的写题模式，在这种模式下，我们可以更专注于代码逻辑本身。然而一些公司或学校的机考仍然使用 ACM 标准文件输入输出模式，在这种模式下需要对题目输入输出的逻辑进行额外的处理。</p>\n<h1 id=\"不同公司机构的笔试模式\"><a class=\"markdownIt-Anchor\" href=\"#不同公司机构的笔试模式\"></a> 不同公司/机构的笔试模式</h1>\n<blockquote>\n<p>仅记录个人经验</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>年份</th>\n<th>公司</th>\n<th>环节</th>\n<th>代码模式</th>\n<th>代码联想</th>\n<th>正确性检验</th>\n<th>其它补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2023</td>\n<td>USTC</td>\n<td>机试</td>\n<td>核心代码模式</td>\n<td>(忘了)</td>\n<td rowspan=\"2\">自行检验</td>\n<td>记得时刻在剪切板保存好自己的代码，不要误触按钮导致一键清空。</td>\n</tr>\n<tr>\n<td>2024</td>\n<td>字节</td>\n<td>手撕</td>\n<td>自写测试模式</td>\n<td>✅</td>\n<td>类似「掘金」的刷题平台，有代码联想，有编辑器错误提示。</td>\n</tr>\n<tr>\n<td rowspan=\"2\">2025</td>\n<td>华为</td>\n<td rowspan=\"2\">机试</td>\n<td rowspan=\"2\">ACM 模式</td>\n<td>❌</td>\n<td rowspan=\"2\">自行检验/用例通过状态</td>\n<td>Java 只给 <code>main</code> 函数，部分包要自己引用。<code>Scanner</code> 自己写但有提示。类似 iLearning 平台。</td>\n</tr>\n<tr>\n<td>网易互娱</td>\n<td>✅</td>\n<td>用的牛客的机试系统。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"acm-标准文件输入输出模式\"><a class=\"markdownIt-Anchor\" href=\"#acm-标准文件输入输出模式\"></a> ACM 标准文件输入输出模式</h1>\n<h2 id=\"main-类的写法\"><a class=\"markdownIt-Anchor\" href=\"#main-类的写法\"></a> <code>Main</code> 类的写法</h2>\n<p>像牛客、华为等机构机试都会给出最基础的代码模板。一些 OJ 中的代码编辑器不会给出任何内容（洛谷、Codeforces），这就需要我们手写 <code>Main</code> 类。注意，这个 <code>Main</code> 类是有固定格式的，不能随便改动，否则将报运行时错误。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"comment\">// 【注意】Main 类的写法不能出错</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        Scanner in=<span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> in.nextInt(), b = in.nextInt();</span><br><span class=\"line\">        System.out.println(a+b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>小提示：对于第一次进陌生的 OJ，可以先写题库的第一道题「A+B」熟悉机试形式。一般题面或题解中附有不同语言的正确的写法。</p>\n<h2 id=\"输出写法\"><a class=\"markdownIt-Anchor\" href=\"#输出写法\"></a> 输出写法</h2>\n<p>最最基本的输出写法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">&quot;Hello Nowcoder!&quot;</span>); <span class=\"comment\">// 换行输出 IDEA 下快捷输入：sout</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"输入写法-scanner\"><a class=\"markdownIt-Anchor\" href=\"#输入写法-scanner\"></a> 输入写法 <code>Scanner</code></h2>\n<p><code>java.util.Scanner</code> 是 Java5 的新特征，我们可以通过 <code>Scanner</code> 类来获取用户的输入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"comment\">// 创建 Scanner 对象的基本语法</span></span><br><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>华为机试中，需要手写包的导入以及 <code>Scanner</code> 的创建。</p>\n</blockquote>\n<p>输入时用到类 <code>Scanner</code> 类，里面有几个常用方法：</p>\n<ul>\n<li><code>hasNext()</code>：用于判断是否还有输入的数据，常放在 while 循环中判断输入是否结束。</li>\n<li><code>next()</code>：读到空格就停止读取。适合读取单个字符或字符串。返回类型 <code>String</code>。</li>\n<li><code>nextLine()</code>：读取一整行数据，碰到换行则停止。返回类型 <code>String</code></li>\n</ul>\n<p><code>next()</code> 与 <code>nextLine()</code> 区别：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th><code>next()</code></th>\n<th><code>nextLine()</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否阻塞</td>\n<td>一定要读取到有效字符后才可以结束输入</td>\n<td></td>\n</tr>\n<tr>\n<td>结束符</td>\n<td>对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</td>\n<td>以 Enter 为结束符，该返回的是输入回车之前的所有字符。</td>\n</tr>\n<tr>\n<td>带空格字符串</td>\n<td>🟥</td>\n<td>🟩</td>\n</tr>\n</tbody>\n</table>\n<p>如果要输入 <code>int</code> 或 <code>float</code> 类型的数据，在 <code>Scanner</code> 类中也有支持，但是在输入之前最好先使用 <code>hasNextXxx()</code> 方法进行验证，再使用 <code>nextXxx()</code> 来读取。</p>\n<ul>\n<li><code>hasNextInt()</code> / <code>nextInt()</code>：遇到空格时会停止读取，返回的结果为空格前读取到的部分。返回类型 <code>int</code>。</li>\n<li><code>hasNextDouble()</code> / <code>nextDouble()</code></li>\n</ul>\n\n<div class=\"callout\" data-callout=\"note\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-pencil\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\n</div>\n<div class=\"callout-title-inner\"><code>next()</code> 和 <code>nextLine()</code> 连用时的注意事项</div>\n</div>\n<div class=\"callout-content\"><p><code>next()</code>、<code>nextInt()</code> 读取数据后指针还在当前行，如果紧跟 <code>nextLine()</code>，读取数据会出错。处理方法是：增多一个 <code>nextLine()</code>「吃掉」换行符即可。具体案例详看下文案例「单组字符串输入输出」。</p>\n<p>如果全程只使用 <code>nextInt()</code> 不会有上述问题。</p>\n</div></div><blockquote>\n<p>全是数字的话，使劲 <code>nextInt()</code> 就行。</p>\n</blockquote>\n<h2 id=\"形式-a单组多组-eof零尾模式\"><a class=\"markdownIt-Anchor\" href=\"#形式-a单组多组-eof零尾模式\"></a> 形式 A：单组/多组 + EOF/零尾模式</h2>\n<p>输入结束模式：</p>\n<ul>\n<li>EOF 结束模式：输入有多组，文件末尾即输入结束。</li>\n<li>零尾模式：输入有多组，输入参数均为 0 时即输入结束。</li>\n</ul>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">题目：🟩 <a href=\"https://www.nowcoder.com/practice/295063bf1bce4c2e819a8f18a5efcd20?tpId=372&amp;ru=%2Fexam%2Fcompany&amp;qru=%2Fta%2Fpr-input-output%2Fquestion-ranking&amp;sourceUrl=%2Fexam%2Fcompany&amp;difficulty=&amp;judgeStatus=&amp;tags=&amp;title=&amp;gioEnter=menu\">多组 A+B EOF形式</a> 🟩 <a href=\"https://www.nowcoder.com/practice/a561ad77e7bb45679db2bd7317fded84?tpId=372&amp;ru=%2Fexam%2Fcompany&amp;qru=%2Fta%2Fpr-input-output%2Fquestion-ranking&amp;sourceUrl=%2Fexam%2Fcompany&amp;difficulty=&amp;judgeStatus=&amp;tags=&amp;title=&amp;gioEnter=menu\">多组 A+B 零尾模式</a></div>\n</div>\n<div class=\"callout-content\"><p>给定两个整数 a 和 b ，请你求出 a+b 的值。</p>\n</div></div><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">************************* EOF模式 ***************************</span><br><span class=\"line\">输入：</span><br><span class=\"line\">1 2</span><br><span class=\"line\">114 514</span><br><span class=\"line\">2024 727</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">3</span><br><span class=\"line\">628</span><br><span class=\"line\">2751</span><br><span class=\"line\"></span><br><span class=\"line\">************************* 零尾模式 ***************************</span><br><span class=\"line\">输入：</span><br><span class=\"line\">1 2</span><br><span class=\"line\">114 514</span><br><span class=\"line\">2024 727</span><br><span class=\"line\">0 0</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">3</span><br><span class=\"line\">628</span><br><span class=\"line\">2751</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (in.hasNextInt()) &#123; <span class=\"comment\">// 注意 while 处理多个 case</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t零尾模式只需在此处增加以下语句即可</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\tif(a==0 &amp;&amp; b==0)break; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(a + b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"形式-bt-组\"><a class=\"markdownIt-Anchor\" href=\"#形式-bt-组\"></a> 形式 B：T 组</h2>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">题目：🟩 <a href=\"https://www.nowcoder.com/practice/cc937d32225340469bfb60a0797bad77?tpId=372&amp;ru=%2Fexam%2Fcompany&amp;qru=%2Fta%2Fpr-input-output%2Fquestion-ranking&amp;sourceUrl=%2Fexam%2Fcompany&amp;difficulty=&amp;judgeStatus=&amp;tags=&amp;title=&amp;gioEnter=menu\">多组+ 「A+B」+T组形式 - 牛客题霸 - 牛客网 (nowcoder.com)</a></div>\n</div>\n<div class=\"callout-content\"><p>给定两个整数 a 和 b ，请你求出 a+b 的值。</p>\n</div></div><p>首先会给出一个数字 T，然后给出 T 组数字。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">3</span><br><span class=\"line\">1 2</span><br><span class=\"line\">114 514</span><br><span class=\"line\">2024 727</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">3</span><br><span class=\"line\">628</span><br><span class=\"line\">2751</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">\t<span class=\"comment\">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">T</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (T--!=<span class=\"number\">0</span>) &#123; <span class=\"comment\">// 注意 while 处理多个 case</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\">\t\tSystem.out.println(a + b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"形式-c单组字符串的输出与输出\"><a class=\"markdownIt-Anchor\" href=\"#形式-c单组字符串的输出与输出\"></a> 形式 C：单组字符串的输出与输出</h2>\n<p>这里将探讨 <code>nextInt()</code> 和 <code>nextLine()</code> 混用的问题。</p>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">题目：🟩 <a href=\"https://www.nowcoder.com/practice/e3a57b2ff6de4aefb82af98925df544e?tpId=372&amp;tqId=10979372&amp;ru=/exam/company&amp;qru=/ta/pr-input-output/question-ranking&amp;sourceUrl=%2Fexam%2Fcompany\">单组+字符串+牛客题霸_牛客网 (nowcoder.com)</a></div>\n</div>\n<div class=\"callout-content\"><p>给定一个长度为 n 的字符串 s ，请你将其倒置，然后输出。</p>\n</div></div><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">5</span><br><span class=\"line\">abcde</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">edcba</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> Integer.valueOf(in.nextLine());</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> in.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[len];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">\t\tres[len-<span class=\"number\">1</span>-i]=str.charAt(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(res));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到，上面的参考答案都统一使用了 <code>nextLine()</code> 函数读取输入。那么我们能不能用 <code>nextInt()</code> 与 <code>nextLine()</code> 混合读取呢？答案是可以的，但是容易出错。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> in.nextInt();</span><br><span class=\"line\">\t<span class=\"comment\">/** 位置 A **/</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> in.nextLine();</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;读取到的len：&quot;</span>+len);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">&quot;读取到的str：&quot;</span>+str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">输出：</span></span><br><span class=\"line\"><span class=\"comment\">读取到的len：5</span></span><br><span class=\"line\"><span class=\"comment\">读取到的str：</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>我们发现 str 并没有读取成功，这是因为第一次在读取 <code>nextInt()</code> 时，指针还在当前行，第二个 <code>nextLine()</code> 只读取到一个换行符。解决方法是在读取 <code>nextInt()</code> 后，在上面代码中「位置 A」处使用 <code>nextLine()</code>「吃掉」第一行的换行符即可。</p>\n<h2 id=\"形式-d字符串格式化\"><a class=\"markdownIt-Anchor\" href=\"#形式-d字符串格式化\"></a> 形式 D：字符串格式化</h2>\n\n<div class=\"callout\" data-callout=\"example\">\n<div class=\"callout-title\">\n<div class=\"callout-title-icon\">\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-list\"><line x1=\"8\" x2=\"21\" y1=\"6\" y2=\"6\"/><line x1=\"8\" x2=\"21\" y1=\"12\" y2=\"12\"/><line x1=\"8\" x2=\"21\" y1=\"18\" y2=\"18\"/><line x1=\"3\" x2=\"3.01\" y1=\"6\" y2=\"6\"/><line x1=\"3\" x2=\"3.01\" y1=\"12\" y2=\"12\"/><line x1=\"3\" x2=\"3.01\" y1=\"18\" y2=\"18\"/></svg>\n</div>\n<div class=\"callout-title-inner\">题目：🟩 <a href=\"https://www.nowcoder.com/practice/a4bccea7f4644fbda1208f8e0d397bab?tpId=372&amp;tqId=10979388&amp;ru=%2Fexam%2Fcompany&amp;qru=%2Fta%2Fpr-input-output%2Fquestion-ranking&amp;sourceUrl=%2Fexam%2Fcompany\">单组-保留小数位数-牛客题霸_牛客网 (nowcoder.com)</a></div>\n</div>\n<div class=\"callout-content\"><p>给定一个小数 n ，请你保留 3 位小数后输出。<br />\n如果原来的小数位数少于 3 ，需要补充 0 。<br />\n如果原来的小数位数多于 3 ，需要四舍五入到 3 位。</p>\n</div></div><p>看到这题目时我还纳闷，以前在 LeetCode 刷题就好少这种返回指定精度数组并要求保留小数点后的 0 的，其实仔细想想以前刷题的核心代码模式要么返回 <code>int</code> 或 <code>double</code>，不需要我们处理输出的位数或补充 0。而这 ACM 模式输出的是 <code>String</code>，对输出自然会有另外的格式化要求。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：</span><br><span class=\"line\">1.23</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">1.230</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Scanner</span> <span class=\"variable\">in</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">\t<span class=\"comment\">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (in.hasNextDouble()) &#123; <span class=\"comment\">// 注意 while 处理多个 case</span></span><br><span class=\"line\">\t\t<span class=\"type\">double</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> in.nextDouble();</span><br><span class=\"line\">\t\tSystem.out.println(String.format(<span class=\"string\">&quot;%.3f&quot;</span>, a).toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>String.format</code> 作为文本处理工具，为我们提供强大而丰富的字符串格式化功能。</p>\n<p><strong>对浮点数进行格式化</strong>：占位符格式为 <code>%[index$][标识]*[最小宽度][.精度]转换符</code>。</p>\n<table>\n<thead>\n<tr>\n<th>可用标识</th>\n<th>可用转换符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>- <code>-</code>，在最小宽度内左对齐，不可以与 <code>0</code> 标识一起使用。<br>  - <code>0</code>，若内容长度不足最小宽度，则在左边用 <code>0</code> 来填充。<br>  - <code>#</code>，对 8 进制和 16 进制，8 进制前添加一个 <code>0</code>，16 进制前添加 <code>0x</code>。<br>  - <code>+</code>，结果总包含一个 <code>+</code> 或 <code>-</code> 号。<br>  - <code>空格</code>，正数前加空格，负数前加 <code>-</code> 号。<br>  - <code>,</code>，只用与十进制，每 3 位数字间用 <code>,</code> 分隔。<br>  - <code>(</code>，若结果为负数，则用括号括住，且不显示符号。</td>\n<td>- <code>b</code>，布尔类型，只要实参为非 <code>false</code> 的布尔类型，均格式化为字符串 <code>true</code>，否则为字符串 <code>false</code>。<br>  - <code>n</code>，平台独立的换行符, 也可通过 <code>System.getProperty(&quot;line.separator&quot;)</code> 获取。<br>  - <code>f</code>，浮点数型（十进制）。显示 9 位有效数字，且会进行四舍五入。如 <code>99.99</code>。<br>  - <code>a</code>，浮点数型（十六进制）。<br>  - <code>e</code>，指数类型。如 <code>9.38e+5</code>。<br>  - <code>g</code>，浮点数型（比 <code>%f</code>，<code>%a</code> 长度短些，显示 6 位有效数字，且会进行四舍五入）</td>\n</tr>\n</tbody>\n</table>\n<p>更多示例：</p>\n<ul>\n<li><code>String.format(&quot;%09d&quot;,a)</code>：正整数不足 9 位的补充前导零。（🟩 <a href=\"https://www.nowcoder.com/practice/c5b1fb6a4b1644e590b49a4cbca7930e?tpId=372&amp;ru=%2Fexam%2Fcompany&amp;qru=%2Fta%2Fpr-input-output%2Fquestion-ranking&amp;sourceUrl=%2Fexam%2Fcompany&amp;difficulty=&amp;judgeStatus=&amp;tags=&amp;title=&amp;gioEnter=menu\">单组_补充前导零_牛客题霸_牛客网 (nowcoder.com)</a>）</li>\n</ul>\n<h1 id=\"自定义测试模式\"><a class=\"markdownIt-Anchor\" href=\"#自定义测试模式\"></a> 自定义测试模式</h1>\n<blockquote>\n<p>掘金刷题、字节跳动机试形式</p>\n</blockquote>\n<p>这种模式比较简单，适合快速测试。特点就是在 Main 函数编写测试用例即可，无需构造输入输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">solution</span><span class=\"params\">(<span class=\"type\">int</span>[] cards)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Edit your code here</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Add your test cases here</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(solution(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>&#125;) == <span class=\"number\">4</span>);</span><br><span class=\"line\">        System.out.println(solution(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;) == <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>见于掘金刷题以及字节面试。</p>\n<h1 id=\"本文参考\"><a class=\"markdownIt-Anchor\" href=\"#本文参考\"></a> 本文参考</h1>\n<ul>\n<li><a href=\"https://www.runoob.com/java/java-scanner-class.html#:~:text=java.uti\">Java Scanner 类 | 菜鸟教程 (runoob.com)</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_43866499/article/details/105921388#:~:text=nextline\">java中的next()方法，nextline()方法，hasnext()方法的用法系列（1）。_java 读取a b c用next-CSDN博客</a></li>\n</ul>\n","raw":"---\ntitle: Java 编写其他输入输出模式\ntags:\n  - ACM\n  - Java\n  - 字符串\n  - 牛客\n  - 华为\n  - 字节跳动\n  - 掘金\ncover: 'https://cdn.gallery.uuanqin.top/img/202410020312167.webp'\ndescription: 刷题前看一遍，迅速记忆 ACM 模式的输入输出\ncategories:\n  - 计算机语言\nabbrlink: bb11ee89\ndate: 2024-10-02 00:03:13\ntop_img:\n---\n\n相信我们已经非常熟悉 LeetCode 那种「[[【热身索引】Java 代码刷题热身|核心代码]]」的写题模式，在这种模式下，我们可以更专注于代码逻辑本身。然而一些公司或学校的机考仍然使用 ACM 标准文件输入输出模式，在这种模式下需要对题目输入输出的逻辑进行额外的处理。\n\n# 不同公司/机构的笔试模式\n\n> 仅记录个人经验\n\n| 年份   | 公司   | 环节  | 代码模式   | 代码联想 | 正确性检验       | 其它补充                                                          |\n| ---- | ---- | --- | ------ | ---- | ----------- | ------------------------------------------------------------- |\n| 2023 | USTC | 机试  | 核心代码模式 | (忘了) | 自行检验        | 记得时刻在剪切板保存好自己的代码，不要误触按钮导致一键清空。                                |\n| 2024 | 字节   | 手撕  | 自写测试模式 | ✅    | 自行检验        | 类似「掘金」的刷题平台，有代码联想，有编辑器错误提示。                                   |\n| 2025 | 华为   | 机试  | ACM 模式 | ❌    | 自行检验/用例通过状态 | Java 只给 `main` 函数，部分包要自己引用。`Scanner` 自己写但有提示。类似 iLearning 平台。 |\n| 2025 | 网易互娱 | 机试  | ACM 模式 | ✅    | 自行检验/用例通过状态 | 用的牛客的机试系统。                                                    |\n\n# ACM 标准文件输入输出模式\n\n## `Main` 类的写法\n\n像牛客、华为等机构机试都会给出最基础的代码模板。一些 OJ 中的代码编辑器不会给出任何内容（洛谷、Codeforces），这就需要我们手写 `Main` 类。注意，这个 `Main` 类是有固定格式的，不能随便改动，否则将报运行时错误。\n\n```java\nimport java.util.Scanner;\n// 【注意】Main 类的写法不能出错\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner in=new Scanner(System.in);\n        int a = in.nextInt(), b = in.nextInt();\n        System.out.println(a+b);\n    }\n}\n```\n\n小提示：对于第一次进陌生的 OJ，可以先写题库的第一道题「A+B」熟悉机试形式。一般题面或题解中附有不同语言的正确的写法。\n\n## 输出写法\n\n最最基本的输出写法。\n\n```java\nSystem.out.println(\"Hello Nowcoder!\"); // 换行输出 IDEA 下快捷输入：sout\n```\n\n## 输入写法 `Scanner`\n\n`java.util.Scanner` 是 Java5 的新特征，我们可以通过 `Scanner` 类来获取用户的输入。\n\n```java\nimport java.util.Scanner;\n// 创建 Scanner 对象的基本语法\nScanner in = new Scanner(System.in);\n```\n\n> 华为机试中，需要手写包的导入以及 `Scanner` 的创建。\n\n输入时用到类 `Scanner` 类，里面有几个常用方法：\n\n- `hasNext()`：用于判断是否还有输入的数据，常放在 while 循环中判断输入是否结束。\n- `next()`：读到空格就停止读取。适合读取单个字符或字符串。返回类型 `String`。\n- `nextLine()`：读取一整行数据，碰到换行则停止。返回类型 `String`\n\n`next()` 与 `nextLine()` 区别：\n\n| 函数     | `next()`                                                       | `nextLine()`                   |\n| ------ | -------------------------------------------------------------- | ------------------------------ |\n| 是否阻塞   | 一定要读取到有效字符后才可以结束输入                                             |                                |\n| 结束符    | 对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。 | 以 Enter 为结束符，该返回的是输入回车之前的所有字符。 |\n| 带空格字符串 | 🟥                                                             | 🟩                             |\n\n如果要输入 `int` 或 `float` 类型的数据，在 `Scanner` 类中也有支持，但是在输入之前最好先使用 `hasNextXxx()` 方法进行验证，再使用 `nextXxx()` 来读取。\n\n- `hasNextInt()` / `nextInt()`：遇到空格时会停止读取，返回的结果为空格前读取到的部分。返回类型 `int`。\n- `hasNextDouble()` / `nextDouble()`\n\n> [!note] `next()` 和 `nextLine()` 连用时的注意事项\n> `next()`、`nextInt()` 读取数据后指针还在当前行，如果紧跟 `nextLine()`，读取数据会出错。处理方法是：增多一个 `nextLine()`「吃掉」换行符即可。具体案例详看下文案例「单组字符串输入输出」。\n>\n> 如果全程只使用 `nextInt()` 不会有上述问题。\n\n> 全是数字的话，使劲 `nextInt()` 就行。\n\n## 形式 A：单组/多组 + EOF/零尾模式\n\n输入结束模式：\n\n- EOF 结束模式：输入有多组，文件末尾即输入结束。\n- 零尾模式：输入有多组，输入参数均为 0 时即输入结束。\n\n> [!example] 题目：🟩 [多组 A+B EOF形式](https://www.nowcoder.com/practice/295063bf1bce4c2e819a8f18a5efcd20?tpId=372&ru=%2Fexam%2Fcompany&qru=%2Fta%2Fpr-input-output%2Fquestion-ranking&sourceUrl=%2Fexam%2Fcompany&difficulty=&judgeStatus=&tags=&title=&gioEnter=menu) 🟩 [多组 A+B 零尾模式](https://www.nowcoder.com/practice/a561ad77e7bb45679db2bd7317fded84?tpId=372&ru=%2Fexam%2Fcompany&qru=%2Fta%2Fpr-input-output%2Fquestion-ranking&sourceUrl=%2Fexam%2Fcompany&difficulty=&judgeStatus=&tags=&title=&gioEnter=menu)\n> 给定两个整数 a 和 b ，请你求出 a+b 的值。\n\n```\n************************* EOF模式 ***************************\n输入：\n1 2\n114 514\n2024 727\n\n输出：\n3\n628\n2751\n\n************************* 零尾模式 ***************************\n输入：\n1 2\n114 514\n2024 727\n0 0\n\n输出：\n3\n628\n2751\n```\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        // 注意 hasNext 和 hasNextLine 的区别\n        while (in.hasNextInt()) { // 注意 while 处理多个 case\n            int a = in.nextInt();\n            int b = in.nextInt();\n\n\t\t\t/* \n\t\t\t\t零尾模式只需在此处增加以下语句即可\n\t\t\t\tif(a==0 && b==0)break; \n\t\t\t*/\n\n            System.out.println(a + b);\n        }\n    }\n}\n```\n\n## 形式 B：T 组\n\n> [!example] 题目：🟩 [多组+ 「A+B」+T组形式 - 牛客题霸 - 牛客网 (nowcoder.com)](https://www.nowcoder.com/practice/cc937d32225340469bfb60a0797bad77?tpId=372&ru=%2Fexam%2Fcompany&qru=%2Fta%2Fpr-input-output%2Fquestion-ranking&sourceUrl=%2Fexam%2Fcompany&difficulty=&judgeStatus=&tags=&title=&gioEnter=menu)\n> 给定两个整数 a 和 b ，请你求出 a+b 的值。\n\n首先会给出一个数字 T，然后给出 T 组数字。\n\n```\n输入：\n3\n1 2\n114 514\n2024 727\n\n输出：\n3\n628\n2751\n```\n\n```java\npublic static void main(String[] args) {\n\tScanner in = new Scanner(System.in);\n\t// 注意 hasNext 和 hasNextLine 的区别\n\tint T = in.nextInt();\n\t\n\twhile (T--!=0) { // 注意 while 处理多个 case\n\t\tint a = in.nextInt();\n\t\tint b = in.nextInt();\n\t\tSystem.out.println(a + b);\n\t}\n}\n```\n\n## 形式 C：单组字符串的输出与输出\n\n这里将探讨 `nextInt()` 和 `nextLine()` 混用的问题。\n\n> [!example] 题目：🟩 [单组+字符串+牛客题霸_牛客网 (nowcoder.com)](https://www.nowcoder.com/practice/e3a57b2ff6de4aefb82af98925df544e?tpId=372&tqId=10979372&ru=/exam/company&qru=/ta/pr-input-output/question-ranking&sourceUrl=%2Fexam%2Fcompany)\n> 给定一个长度为 n 的字符串 s ，请你将其倒置，然后输出。\n\n```\n输入：\n5\nabcde\n\n输出：\nedcba\n```\n\n```java\npublic static void main(String[] args) {\n\tScanner in = new Scanner(System.in);\n\n\tint len = Integer.valueOf(in.nextLine());\n\tString str = in.nextLine();\n\n\tchar[] res = new char[len];\n\tfor(int i=0;i<len;i++){\n\t\tres[len-1-i]=str.charAt(i);\n\t}\n\n\tSystem.out.println(new String(res));\n}\n```\n\n注意到，上面的参考答案都统一使用了 `nextLine()` 函数读取输入。那么我们能不能用 `nextInt()` 与 `nextLine()` 混合读取呢？答案是可以的，但是容易出错。\n\n```java\npublic static void main(String[] args) {\n\tScanner in = new Scanner(System.in);\n\n\tint len = in.nextInt();\n\t/** 位置 A **/\n\tString str = in.nextLine();\n\n\tSystem.out.println(\"读取到的len：\"+len);\n\tSystem.out.println(\"读取到的str：\"+str);\n}\n/*\n输出：\n读取到的len：5\n读取到的str：\n*/\n```\n\n我们发现 str 并没有读取成功，这是因为第一次在读取 `nextInt()` 时，指针还在当前行，第二个 `nextLine()` 只读取到一个换行符。解决方法是在读取 `nextInt()` 后，在上面代码中「位置 A」处使用 `nextLine()`「吃掉」第一行的换行符即可。\n\n## 形式 D：字符串格式化\n\n> [!example] 题目：🟩 [单组-保留小数位数-牛客题霸_牛客网 (nowcoder.com)](https://www.nowcoder.com/practice/a4bccea7f4644fbda1208f8e0d397bab?tpId=372&tqId=10979388&ru=%2Fexam%2Fcompany&qru=%2Fta%2Fpr-input-output%2Fquestion-ranking&sourceUrl=%2Fexam%2Fcompany)\n> 给定一个小数 n ，请你保留 3 位小数后输出。\n> 如果原来的小数位数少于 3 ，需要补充 0 。\n> 如果原来的小数位数多于 3 ，需要四舍五入到 3 位。\n\n看到这题目时我还纳闷，以前在 LeetCode 刷题就好少这种返回指定精度数组并要求保留小数点后的 0 的，其实仔细想想以前刷题的核心代码模式要么返回 `int` 或 `double`，不需要我们处理输出的位数或补充 0。而这 ACM 模式输出的是 `String`，对输出自然会有另外的格式化要求。\n\n```\n输入：\n1.23\n\n输出：\n1.230\n```\n\n```java\npublic static void main(String[] args) {\n\tScanner in = new Scanner(System.in);\n\t// 注意 hasNext 和 hasNextLine 的区别\n\twhile (in.hasNextDouble()) { // 注意 while 处理多个 case\n\t\tdouble a = in.nextDouble();\n\t\tSystem.out.println(String.format(\"%.3f\", a).toString());\n\t}\n}\n```\n\n`String.format` 作为文本处理工具，为我们提供强大而丰富的字符串格式化功能。\n\n**对浮点数进行格式化**：占位符格式为 `%[index$][标识]*[最小宽度][.精度]转换符`。\n\n| 可用标识                                                                                                                                                                                                                                                             | 可用转换符                                                                                                                                                                                                                                                                                              |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| - `-`，在最小宽度内左对齐，不可以与 `0` 标识一起使用。<br>  - `0`，若内容长度不足最小宽度，则在左边用 `0` 来填充。<br>  - `#`，对 8 进制和 16 进制，8 进制前添加一个 `0`，16 进制前添加 `0x`。<br>  - `+`，结果总包含一个 `+` 或 `-` 号。<br>  - `空格`，正数前加空格，负数前加 `-` 号。<br>  - `,`，只用与十进制，每 3 位数字间用 `,` 分隔。<br>  - `(`，若结果为负数，则用括号括住，且不显示符号。 | - `b`，布尔类型，只要实参为非 `false` 的布尔类型，均格式化为字符串 `true`，否则为字符串 `false`。<br>  - `n`，平台独立的换行符, 也可通过 `System.getProperty(\"line.separator\")` 获取。<br>  - `f`，浮点数型（十进制）。显示 9 位有效数字，且会进行四舍五入。如 `99.99`。<br>  - `a`，浮点数型（十六进制）。<br>  - `e`，指数类型。如 `9.38e+5`。<br>  - `g`，浮点数型（比 `%f`，`%a` 长度短些，显示 6 位有效数字，且会进行四舍五入） |\n\n更多示例：\n\n- `String.format(\"%09d\",a)`：正整数不足 9 位的补充前导零。（🟩 [单组_补充前导零_牛客题霸_牛客网 (nowcoder.com)](https://www.nowcoder.com/practice/c5b1fb6a4b1644e590b49a4cbca7930e?tpId=372&ru=%2Fexam%2Fcompany&qru=%2Fta%2Fpr-input-output%2Fquestion-ranking&sourceUrl=%2Fexam%2Fcompany&difficulty=&judgeStatus=&tags=&title=&gioEnter=menu)）\n\n# 自定义测试模式\n\n> 掘金刷题、字节跳动机试形式\n\n这种模式比较简单，适合快速测试。特点就是在 Main 函数编写测试用例即可，无需构造输入输出。\n\n```java\npublic class Main {\n    public static int solution(int[] cards) {\n        // Edit your code here\n\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        // Add your test cases here\n        \n        System.out.println(solution(new int[]{1, 1, 2, 2, 3, 3, 4, 5, 5}) == 4);\n        System.out.println(solution(new int[]{0, 1, 0, 1, 2}) == 2);\n    }\n}\n```\n\n见于掘金刷题以及字节面试。\n\n# 本文参考\n- [Java Scanner 类 | 菜鸟教程 (runoob.com)](https://www.runoob.com/java/java-scanner-class.html#:~:text=java.uti)\n- [java中的next()方法，nextline()方法，hasnext()方法的用法系列（1）。_java 读取a b c用next-CSDN博客](https://blog.csdn.net/weixin_43866499/article/details/105921388#:~:text=nextline)","categories":[{"name":"计算机语言","api":"api/categories/计算机语言.json"}],"tags":[{"name":"Java","api":"api/tags/Java.json"},{"name":"ACM","api":"api/tags/ACM.json"},{"name":"字符串","api":"api/tags/字符串.json"},{"name":"牛客","api":"api/tags/牛客.json"},{"name":"华为","api":"api/tags/华为.json"},{"name":"字节跳动","api":"api/tags/字节跳动.json"},{"name":"掘金","api":"api/tags/掘金.json"}]},"api":"api/posts/p/bb11ee89.json"}